// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
using System.Text.Json;
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Search;
using Algolia.Search.Serializer;
using Algolia.Search.Tests.Utils;
using dotenv.net;
using Quibble.Xunit;
using Xunit;
using Action = Algolia.Search.Models.Search.Action;

namespace Algolia.Search.requests;

public class SearchClientRequestTests
{
  private readonly SearchClient client;
  private readonly EchoHttpRequester _echo;

  public SearchClientRequestTests()
  {
    _echo = new EchoHttpRequester();
    client = new SearchClient(new SearchConfig("appId", "apiKey"), _echo);
  }

  [Fact]
  public void Dispose() { }

  [Fact(DisplayName = "addApiKey")]
  public async Task AddApiKeyTest()
  {
    await client.AddApiKeyAsync(
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Description = "my new api key",
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"acl\":[\"search\",\"addObject\"],\"description\":\"my new api key\",\"validity\":300,\"maxQueriesPerIPPerHour\":100,\"maxHitsPerQuery\":20}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "addOrUpdateObject")]
  public async Task AddOrUpdateObjectTest()
  {
    await client.AddOrUpdateObjectAsync(
      "indexName",
      "uniqueID",
      new Dictionary<string, string> { { "key", "value" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/uniqueID", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"key\":\"value\"}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "appendSource")]
  public async Task AppendSourceTest()
  {
    await client.AppendSourceAsync(
      new Source { VarSource = "theSource", Description = "theDescription", }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/security/sources/append", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"source\":\"theSource\",\"description\":\"theDescription\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "assignUserId")]
  public async Task AssignUserIdTest()
  {
    await client.AssignUserIdAsync("userID", new AssignUserIdParams { Cluster = "theCluster", });

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"cluster\":\"theCluster\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-algolia-user-id\":\"userID\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "it should not encode the userID")]
  public async Task AssignUserIdTest1()
  {
    await client.AssignUserIdAsync(
      "user id with spaces",
      new AssignUserIdParams { Cluster = "cluster with spaces", }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"cluster\":\"cluster with spaces\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-algolia-user-id\":\"user id with spaces\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "addObject")]
  public async Task BatchTest()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "bar" }, { "foo", "1" } },
          },
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "baz" }, { "foo", "2" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"addObject\",\"body\":{\"key\":\"bar\",\"foo\":\"1\"}},{\"action\":\"addObject\",\"body\":{\"key\":\"baz\",\"foo\":\"2\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "clear")]
  public async Task BatchTest1()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Clear"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"clear\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "delete")]
  public async Task BatchTest2()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Delete"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"delete\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "deleteObject")]
  public async Task BatchTest3()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("DeleteObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"deleteObject\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "partialUpdateObject")]
  public async Task BatchTest4()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"partialUpdateObject\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "partialUpdateObjectNoCreate")]
  public async Task BatchTest5()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObjectNoCreate"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"partialUpdateObjectNoCreate\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "updateObject")]
  public async Task BatchTest6()
  {
    await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("UpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"updateObject\",\"body\":{\"key\":\"value\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "batchAssignUserIds")]
  public async Task BatchAssignUserIdsTest()
  {
    await client.BatchAssignUserIdsAsync(
      "userID",
      new BatchAssignUserIdsParams
      {
        Cluster = "theCluster",
        Users = new List<string> { "user1", "user2" },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"cluster\":\"theCluster\",\"users\":[\"user1\",\"user2\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-algolia-user-id\":\"userID\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "replace")]
  public async Task BatchDictionaryEntriesTest()
  {
    await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              Word = "fancy",
              Words = new List<string> { "believe", "algolia" },
              Decomposition = new List<string> { "trust", "algolia" },
              State = Enum.Parse<DictionaryEntryState>("Enabled"),
            },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/plurals/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"clearExistingDictionaryEntries\":true,\"requests\":[{\"action\":\"addEntry\",\"body\":{\"objectID\":\"1\",\"language\":\"en\",\"word\":\"fancy\",\"words\":[\"believe\",\"algolia\"],\"decomposition\":[\"trust\",\"algolia\"],\"state\":\"enabled\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "delete")]
  public async Task BatchDictionaryEntriesTest1()
  {
    await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("DeleteEntry"),
            Body = new DictionaryEntry { ObjectID = "1", },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/plurals/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"clearExistingDictionaryEntries\":true,\"requests\":[{\"action\":\"deleteEntry\",\"body\":{\"objectID\":\"1\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "append")]
  public async Task BatchDictionaryEntriesTest2()
  {
    await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new BatchDictionaryEntriesParams
      {
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              AdditionalProperties = new Dictionary<string, object> { { "additional", "try me" }, }
            },
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/stopwords/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"addEntry\",\"body\":{\"objectID\":\"1\",\"language\":\"en\",\"additional\":\"try me\"}}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "browse with minimal parameters")]
  public async Task BrowseTest()
  {
    await client.BrowseAsync<Hit>("cts_e2e_browse");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/cts_e2e_browse/browse", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "browse with search parameters")]
  public async Task BrowseTest1()
  {
    await client.BrowseAsync<Hit>(
      "indexName",
      new BrowseParams(
        new BrowseParamsObject
        {
          Query = "myQuery",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("tags:algolia") }
          ),
        }
      )
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/browse", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"myQuery\",\"facetFilters\":[\"tags:algolia\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "browse allow a cursor in parameters")]
  public async Task BrowseTest2()
  {
    await client.BrowseAsync<Hit>(
      "indexName",
      new BrowseParams(new BrowseParamsObject { Cursor = "test", })
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/browse", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"cursor\":\"test\"}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "clearObjects")]
  public async Task ClearObjectsTest()
  {
    await client.ClearObjectsAsync("theIndexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/clear", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    Assert.Equal("{}", req.Body);
  }

  [Fact(DisplayName = "clearRules")]
  public async Task ClearRulesTest()
  {
    await client.ClearRulesAsync("indexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/clear", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    Assert.Equal("{}", req.Body);
  }

  [Fact(DisplayName = "clearSynonyms")]
  public async Task ClearSynonymsTest()
  {
    await client.ClearSynonymsAsync("indexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/clear", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    Assert.Equal("{}", req.Body);
  }

  [Fact(DisplayName = "allow del method for a custom path with minimal parameters")]
  public async Task CustomDeleteTest()
  {
    await client.CustomDeleteAsync("test/minimal");

    var req = _echo.LastResponse;
    Assert.Equal("/test/minimal", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "allow del method for a custom path with all parameters")]
  public async Task CustomDeleteTest1()
  {
    await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/all", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "allow get method for a custom path with minimal parameters")]
  public async Task CustomGetTest()
  {
    await client.CustomGetAsync("test/minimal");

    var req = _echo.LastResponse;
    Assert.Equal("/test/minimal", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "allow get method for a custom path with all parameters")]
  public async Task CustomGetTest1()
  {
    await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/all", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters%20with%20space\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions should be escaped too")]
  public async Task CustomGetTest2()
  {
    await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/all", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters%20with%20space\",\"and%20an%20array\":\"array%2Cwith%20spaces\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-header-1\":\"spaces are left alone\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "allow post method for a custom path with minimal parameters")]
  public async Task CustomPostTest()
  {
    await client.CustomPostAsync("test/minimal");

    var req = _echo.LastResponse;
    Assert.Equal("/test/minimal", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "allow post method for a custom path with all parameters")]
  public async Task CustomPostTest1()
  {
    await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/all", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"body\":\"parameters\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions can override default query parameters")]
  public async Task CustomPostTest2()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"myQueryParameter\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions merges query parameters with default ones")]
  public async Task CustomPostTest3()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"query2\":\"myQueryParameter\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions can override default headers")]
  public async Task CustomPostTest4()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "myApiKey").Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-algolia-api-key\":\"myApiKey\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "requestOptions merges headers with default ones")]
  public async Task CustomPostTest5()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "myApiKey").Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
    var expectedHeaders = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"x-algolia-api-key\":\"myApiKey\"}"
    );
    var actualHeaders = req.Headers;
    foreach (var expectedHeader in expectedHeaders)
    {
      string actualHeaderValue;
      actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
      Assert.Equal(expectedHeader.Value, actualHeaderValue);
    }
  }

  [Fact(DisplayName = "requestOptions queryParameters accepts booleans")]
  public async Task CustomPostTest6()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"isItWorking\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions queryParameters accepts integers")]
  public async Task CustomPostTest7()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"myParam\":\"2\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions queryParameters accepts list of string")]
  public async Task CustomPostTest8()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"myParam\":\"b%20and%20c%2Cd\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions queryParameters accepts list of booleans")]
  public async Task CustomPostTest9()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"myParam\":\"true%2Ctrue%2Cfalse\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "requestOptions queryParameters accepts list of integers")]
  public async Task CustomPostTest10()
  {
    await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/requestOptions", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"facet\":\"filters\"}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\",\"myParam\":\"1%2C2\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "allow put method for a custom path with minimal parameters")]
  public async Task CustomPutTest()
  {
    await client.CustomPutAsync("test/minimal");

    var req = _echo.LastResponse;
    Assert.Equal("/test/minimal", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "allow put method for a custom path with all parameters")]
  public async Task CustomPutTest1()
  {
    await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/test/all", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"body\":\"parameters\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"query\":\"parameters\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "deleteApiKey")]
  public async Task DeleteApiKeyTest()
  {
    await client.DeleteApiKeyAsync("myTestApiKey");

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys/myTestApiKey", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "deleteBy")]
  public async Task DeleteByTest()
  {
    await client.DeleteByAsync("theIndexName", new DeleteByParams { Filters = "brand:brandName", });

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/deleteByQuery", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"filters\":\"brand:brandName\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "deleteIndex")]
  public async Task DeleteIndexTest()
  {
    await client.DeleteIndexAsync("theIndexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "deleteObject")]
  public async Task DeleteObjectTest()
  {
    await client.DeleteObjectAsync("<YOUR_INDEX_NAME>", "uniqueID");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "delete rule simple case")]
  public async Task DeleteRuleTest()
  {
    await client.DeleteRuleAsync("indexName", "id1");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/id1", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "delete rule with simple characters to encode in objectID")]
  public async Task DeleteRuleTest1()
  {
    await client.DeleteRuleAsync("indexName", "test/with/slash");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/test%2Fwith%2Fslash", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "deleteSource")]
  public async Task DeleteSourceTest()
  {
    await client.DeleteSourceAsync("theSource");

    var req = _echo.LastResponse;
    Assert.Equal("/1/security/sources/theSource", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "deleteSynonym")]
  public async Task DeleteSynonymTest()
  {
    await client.DeleteSynonymAsync("indexName", "id1");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/id1", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getApiKey")]
  public async Task GetApiKeyTest()
  {
    await client.GetApiKeyAsync("myTestApiKey");

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys/myTestApiKey", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getAppTask")]
  public async Task GetAppTaskTest()
  {
    await client.GetAppTaskAsync(123L);

    var req = _echo.LastResponse;
    Assert.Equal("/1/task/123", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "get getDictionaryLanguages")]
  public async Task GetDictionaryLanguagesTest()
  {
    await client.GetDictionaryLanguagesAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/*/languages", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "get getDictionarySettings results")]
  public async Task GetDictionarySettingsTest()
  {
    await client.GetDictionarySettingsAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/*/settings", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getLogs with minimal parameters")]
  public async Task GetLogsTest()
  {
    await client.GetLogsAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/logs", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getLogs with parameters")]
  public async Task GetLogsTest1()
  {
    await client.GetLogsAsync(5, 10, "theIndexName", Enum.Parse<LogType>("All"));

    var req = _echo.LastResponse;
    Assert.Equal("/1/logs", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"offset\":\"5\",\"length\":\"10\",\"indexName\":\"theIndexName\",\"type\":\"all\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "getObject")]
  public async Task GetObjectTest()
  {
    await client.GetObjectAsync("theIndexName", "uniqueID", new List<string> { "attr1", "attr2" });

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"attributesToRetrieve\":\"attr1%2Cattr2\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "getObjects")]
  public async Task GetObjectsTest()
  {
    await client.GetObjectsAsync<Hit>(
      new GetObjectsParams
      {
        Requests = new List<GetObjectsRequest>
        {
          new GetObjectsRequest
          {
            AttributesToRetrieve = new List<string> { "attr1", "attr2" },
            ObjectID = "uniqueID",
            IndexName = "theIndexName",
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/objects", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"attributesToRetrieve\":[\"attr1\",\"attr2\"],\"objectID\":\"uniqueID\",\"indexName\":\"theIndexName\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "getRule")]
  public async Task GetRuleTest()
  {
    await client.GetRuleAsync("indexName", "id1");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/id1", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getSettings")]
  public async Task GetSettingsTest()
  {
    await client.GetSettingsAsync("cts_e2e_settings");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/cts_e2e_settings/settings", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getSources")]
  public async Task GetSourcesTest()
  {
    await client.GetSourcesAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/security/sources", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getSynonym")]
  public async Task GetSynonymTest()
  {
    await client.GetSynonymAsync("indexName", "id1");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/id1", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getTask")]
  public async Task GetTaskTest()
  {
    await client.GetTaskAsync("theIndexName", 123L);

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/task/123", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getTopUserIds")]
  public async Task GetTopUserIdsTest()
  {
    await client.GetTopUserIdsAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/top", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "getUserId")]
  public async Task GetUserIdTest()
  {
    await client.GetUserIdAsync("uniqueID");

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/uniqueID", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "hasPendingMappings with minimal parameters")]
  public async Task HasPendingMappingsTest()
  {
    await client.HasPendingMappingsAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/pending", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "hasPendingMappings with parameters")]
  public async Task HasPendingMappingsTest1()
  {
    await client.HasPendingMappingsAsync(true);

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/pending", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"getClusters\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "listApiKeys")]
  public async Task ListApiKeysTest()
  {
    await client.ListApiKeysAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "listClusters")]
  public async Task ListClustersTest()
  {
    await client.ListClustersAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "listIndices with minimal parameters")]
  public async Task ListIndicesTest()
  {
    await client.ListIndicesAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "listIndices with parameters")]
  public async Task ListIndicesTest1()
  {
    await client.ListIndicesAsync(8, 3);

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"page\":\"8\",\"hitsPerPage\":\"3\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "listUserIds with minimal parameters")]
  public async Task ListUserIdsTest()
  {
    await client.ListUserIdsAsync();

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "listUserIds with parameters")]
  public async Task ListUserIdsTest1()
  {
    await client.ListUserIdsAsync(8, 100);

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping", req.Path);
    Assert.Equal("GET", req.Method.ToString());
    Assert.Null(req.Body);
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"page\":\"8\",\"hitsPerPage\":\"100\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "multipleBatch")]
  public async Task MultipleBatchTest()
  {
    await client.MultipleBatchAsync(
      new BatchParams
      {
        Requests = new List<MultipleBatchRequest>
        {
          new MultipleBatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
            IndexName = "theIndexName",
          }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"action\":\"addObject\",\"body\":{\"key\":\"value\"},\"indexName\":\"theIndexName\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "scopes")]
  public async Task OperationIndexTest()
  {
    await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
        Scope = new List<ScopeType>
        {
          Enum.Parse<ScopeType>("Rules"),
          Enum.Parse<ScopeType>("Settings")
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"operation\":\"move\",\"destination\":\"<DESTINATION_INDEX_NAME>\",\"scope\":[\"rules\",\"settings\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "copy")]
  public async Task OperationIndexTest1()
  {
    await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Copy"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"operation\":\"copy\",\"destination\":\"<DESTINATION_INDEX_NAME>\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "move")]
  public async Task OperationIndexTest2()
  {
    await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"operation\":\"move\",\"destination\":\"<DESTINATION_INDEX_NAME>\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "Partial update with a new value for a string attribute")]
  public async Task PartialUpdateObjectTest()
  {
    await client.PartialUpdateObjectAsync(
      "theIndexName",
      "uniqueID",
      new Dictionary<string, string> { { "attributeId", "new value" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID/partial", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"attributeId\":\"new value\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "Partial update with a new value for an integer attribute")]
  public async Task PartialUpdateObjectTest1()
  {
    await client.PartialUpdateObjectAsync(
      "theIndexName",
      "uniqueID",
      new Dictionary<string, int> { { "attributeId", 1 } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID/partial", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"attributeId\":1}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "Partial update with a new value for a boolean attribute")]
  public async Task PartialUpdateObjectTest2()
  {
    await client.PartialUpdateObjectAsync(
      "theIndexName",
      "uniqueID",
      new Dictionary<string, Boolean> { { "attributeId", true } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID/partial", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"attributeId\":true}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "Partial update with a new value for an array attribute")]
  public async Task PartialUpdateObjectTest3()
  {
    await client.PartialUpdateObjectAsync(
      "theIndexName",
      "uniqueID",
      new Dictionary<string, List<string>>
      {
        {
          "attributeId",
          new List<string> { "one", "two", "three" }
        }
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID/partial", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"attributeId\":[\"one\",\"two\",\"three\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "Partial update with a new value for an object attribute")]
  public async Task PartialUpdateObjectTest4()
  {
    await client.PartialUpdateObjectAsync(
      "theIndexName",
      "uniqueID",
      new Dictionary<string, Object>
      {
        {
          "attributeId",
          new Dictionary<string, string> { { "nested", "value" } }
        }
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/uniqueID/partial", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"attributeId\":{\"nested\":\"value\"}}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "removeUserId")]
  public async Task RemoveUserIdTest()
  {
    await client.RemoveUserIdAsync("uniqueID");

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/uniqueID", req.Path);
    Assert.Equal("DELETE", req.Method.ToString());
    Assert.Null(req.Body);
  }

  [Fact(DisplayName = "replaceSources")]
  public async Task ReplaceSourcesTest()
  {
    await client.ReplaceSourcesAsync(
      new List<Source>
      {
        new Source { VarSource = "theSource", Description = "theDescription", }
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/security/sources", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "[{\"source\":\"theSource\",\"description\":\"theDescription\"}]",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "restoreApiKey")]
  public async Task RestoreApiKeyTest()
  {
    await client.RestoreApiKeyAsync("myApiKey");

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys/myApiKey/restore", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    Assert.Equal("{}", req.Body);
  }

  [Fact(DisplayName = "saveObject")]
  public async Task SaveObjectTest()
  {
    await client.SaveObjectAsync(
      "<YOUR_INDEX_NAME>",
      new Dictionary<string, string> { { "objectID", "id" }, { "test", "val" } }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"objectID\":\"id\",\"test\":\"val\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "saveRule with minimal parameters")]
  public async Task SaveRuleTest()
  {
    await client.SaveRuleAsync(
      "indexName",
      "id1",
      new Rule
      {
        ObjectID = "id1",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains"), }
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/id1", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "saveRule with all parameters")]
  public async Task SaveRuleTest1()
  {
    await client.SaveRuleAsync(
      "indexName",
      "id1",
      new Rule
      {
        ObjectID = "id1",
        Conditions = new List<Condition>
        {
          new Condition
          {
            Pattern = "apple",
            Anchoring = Enum.Parse<Anchoring>("Contains"),
            Alternatives = false,
            Context = "search",
          }
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Filters = "brand:apple",
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Remove = new List<string> { "algolia" },
                Edits = new List<Edit>
                {
                  new Edit
                  {
                    Type = Enum.Parse<EditType>("Remove"),
                    Delete = "abc",
                    Insert = "cde",
                  },
                  new Edit
                  {
                    Type = Enum.Parse<EditType>("Replace"),
                    Delete = "abc",
                    Insert = "cde",
                  }
                },
              }
            ),
          },
          Hide = new List<ConsequenceHide> { new ConsequenceHide { ObjectID = "321", } },
          FilterPromotes = false,
          UserData = new Dictionary<string, object> { { "algolia", "aloglia" } },
          Promote = new List<Promote>
          {
            new Promote(new PromoteObjectID { ObjectID = "abc", Position = 3, }),
            new Promote(
              new PromoteObjectIDs
              {
                ObjectIDs = new List<string> { "abc", "def" },
                Position = 1,
              }
            )
          },
        },
        Description = "test",
        Enabled = true,
        Validity = new List<TimeRange>
        {
          new TimeRange { From = 1656670273, Until = 1656670277, }
        },
      },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/id1", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\",\"alternatives\":false,\"context\":\"search\"}],\"consequence\":{\"params\":{\"filters\":\"brand:apple\",\"query\":{\"remove\":[\"algolia\"],\"edits\":[{\"type\":\"remove\",\"delete\":\"abc\",\"insert\":\"cde\"},{\"type\":\"replace\",\"delete\":\"abc\",\"insert\":\"cde\"}]}},\"hide\":[{\"objectID\":\"321\"}],\"filterPromotes\":false,\"userData\":{\"algolia\":\"aloglia\"},\"promote\":[{\"objectID\":\"abc\",\"position\":3},{\"objectIDs\":[\"abc\",\"def\"],\"position\":1}]},\"description\":\"test\",\"enabled\":true,\"validity\":[{\"from\":1656670273,\"until\":1656670277}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "saveRules with minimal parameters")]
  public async Task SaveRulesTest()
  {
    await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "a-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "smartphone", Anchoring = Enum.Parse<Anchoring>("Contains"), }
          },
        },
        new Rule
        {
          ObjectID = "a-second-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains"), }
          },
        }
      },
      false,
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "[{\"objectID\":\"a-rule-id\",\"conditions\":[{\"pattern\":\"smartphone\",\"anchoring\":\"contains\"}]},{\"objectID\":\"a-second-rule-id\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\"}]}]",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"false\",\"clearExistingRules\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "saveRules with all parameters")]
  public async Task SaveRulesTest1()
  {
    await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "id1",
          Conditions = new List<Condition>
          {
            new Condition
            {
              Pattern = "apple",
              Anchoring = Enum.Parse<Anchoring>("Contains"),
              Alternatives = false,
              Context = "search",
            }
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams
            {
              Filters = "brand:apple",
              Query = new ConsequenceQuery(
                new ConsequenceQueryObject
                {
                  Remove = new List<string> { "algolia" },
                  Edits = new List<Edit>
                  {
                    new Edit
                    {
                      Type = Enum.Parse<EditType>("Remove"),
                      Delete = "abc",
                      Insert = "cde",
                    },
                    new Edit
                    {
                      Type = Enum.Parse<EditType>("Replace"),
                      Delete = "abc",
                      Insert = "cde",
                    }
                  },
                }
              ),
            },
            Hide = new List<ConsequenceHide> { new ConsequenceHide { ObjectID = "321", } },
            FilterPromotes = false,
            UserData = new Dictionary<string, object> { { "algolia", "aloglia" } },
            Promote = new List<Promote>
            {
              new Promote(new PromoteObjectID { ObjectID = "abc", Position = 3, }),
              new Promote(
                new PromoteObjectIDs
                {
                  ObjectIDs = new List<string> { "abc", "def" },
                  Position = 1,
                }
              )
            },
          },
          Description = "test",
          Enabled = true,
          Validity = new List<TimeRange>
          {
            new TimeRange { From = 1656670273, Until = 1656670277, }
          },
        }
      },
      true,
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "[{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\",\"alternatives\":false,\"context\":\"search\"}],\"consequence\":{\"params\":{\"filters\":\"brand:apple\",\"query\":{\"remove\":[\"algolia\"],\"edits\":[{\"type\":\"remove\",\"delete\":\"abc\",\"insert\":\"cde\"},{\"type\":\"replace\",\"delete\":\"abc\",\"insert\":\"cde\"}]}},\"hide\":[{\"objectID\":\"321\"}],\"filterPromotes\":false,\"userData\":{\"algolia\":\"aloglia\"},\"promote\":[{\"objectID\":\"abc\",\"position\":3},{\"objectIDs\":[\"abc\",\"def\"],\"position\":1}]},\"description\":\"test\",\"enabled\":true,\"validity\":[{\"from\":1656670273,\"until\":1656670277}]}]",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\",\"clearExistingRules\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "saveSynonym")]
  public async Task SaveSynonymTest()
  {
    await client.SaveSynonymAsync(
      "indexName",
      "id1",
      new SynonymHit
      {
        ObjectID = "id1",
        Type = Enum.Parse<SynonymType>("Synonym"),
        Synonyms = new List<string> { "car", "vehicule", "auto" },
      },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/id1", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"objectID\":\"id1\",\"type\":\"synonym\",\"synonyms\":[\"car\",\"vehicule\",\"auto\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "saveSynonyms")]
  public async Task SaveSynonymsTest()
  {
    await client.SaveSynonymsAsync(
      "<YOUR_INDEX_NAME>",
      new List<SynonymHit>
      {
        new SynonymHit
        {
          ObjectID = "id1",
          Type = Enum.Parse<SynonymType>("Synonym"),
          Synonyms = new List<string> { "car", "vehicule", "auto" },
        },
        new SynonymHit
        {
          ObjectID = "id2",
          Type = Enum.Parse<SynonymType>("Onewaysynonym"),
          Input = "iphone",
          Synonyms = new List<string> { "ephone", "aphone", "yphone" },
        }
      },
      true,
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "[{\"objectID\":\"id1\",\"type\":\"synonym\",\"synonyms\":[\"car\",\"vehicule\",\"auto\"]},{\"objectID\":\"id2\",\"type\":\"onewaysynonym\",\"input\":\"iphone\",\"synonyms\":[\"ephone\",\"aphone\",\"yphone\"]}]",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\",\"replaceExistingSynonyms\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "withHitsPerPage")]
  public async Task SearchTest()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              HitsPerPage = 50,
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"hitsPerPage\":50}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "filterOnly")]
  public async Task SearchTest1()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Scarlett Johansson",
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"actor:Scarlett Johansson\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "filterOr")]
  public async Task SearchTest2()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Tom Cruise OR actor:Scarlett Johansson",
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"actor:Tom Cruise OR actor:Scarlett Johansson\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "filterNot")]
  public async Task SearchTest3()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "NOT actor:Nicolas Cage",
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"NOT actor:Nicolas Cage\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search for a single hits request with minimal parameters")]
  public async Task SearchTest4()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(new SearchForHits { IndexName = "cts_e2e_search_empty_index", })
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"cts_e2e_search_empty_index\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search with highlight and snippet results")]
  public async Task SearchTest5()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "cts_e2e_highlight_snippet_results",
              Query = "vim",
              AttributesToSnippet = new List<string> { "*:20" },
              AttributesToHighlight = new List<string> { "*" },
              AttributesToRetrieve = new List<string> { "*" },
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"cts_e2e_highlight_snippet_results\",\"query\":\"vim\",\"attributesToSnippet\":[\"*:20\"],\"attributesToHighlight\":[\"*\"],\"attributesToRetrieve\":[\"*\"]}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "retrieveFacets")]
  public async Task SearchTest6()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "author", "genre" },
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"facets\":[\"author\",\"genre\"]}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "retrieveFacetsWildcard")]
  public async Task SearchTest7()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "*" },
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"facets\":[\"*\"]}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search for a single facet request with minimal parameters")]
  public async Task SearchTest8()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "cts_e2e_search_facet",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "editor",
            }
          )
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"cts_e2e_search_facet\",\"type\":\"facet\",\"facet\":\"editor\"}],\"strategy\":\"stopIfEnoughMatches\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search for a single hits request with all parameters")]
  public async Task SearchTest9()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "theIndexName",
              Query = "myQuery",
              HitsPerPage = 50,
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"theIndexName\",\"query\":\"myQuery\",\"hitsPerPage\":50,\"type\":\"default\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search for a single facet request with all parameters")]
  public async Task SearchTest10()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "theIndexName",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
              FacetQuery = "theFacetQuery",
              Query = "theQuery",
              MaxFacetHits = 50,
            }
          )
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"theIndexName\",\"type\":\"facet\",\"facet\":\"theFacet\",\"facetQuery\":\"theFacetQuery\",\"query\":\"theQuery\",\"maxFacetHits\":50}],\"strategy\":\"stopIfEnoughMatches\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(
    DisplayName = "search for multiple mixed requests in multiple indices with minimal parameters"
  )]
  public async Task SearchTest11()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(new SearchForHits { IndexName = "theIndexName", }),
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "theIndexName2",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "theIndexName",
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          )
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"theIndexName\"},{\"indexName\":\"theIndexName2\",\"type\":\"facet\",\"facet\":\"theFacet\"},{\"indexName\":\"theIndexName\",\"type\":\"default\"}],\"strategy\":\"stopIfEnoughMatches\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search for multiple mixed requests in multiple indices with all parameters")]
  public async Task SearchTest12()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "theIndexName",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
              FacetQuery = "theFacetQuery",
              Query = "theQuery",
              MaxFacetHits = 50,
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "theIndexName",
              Query = "myQuery",
              HitsPerPage = 50,
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          )
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"theIndexName\",\"type\":\"facet\",\"facet\":\"theFacet\",\"facetQuery\":\"theFacetQuery\",\"query\":\"theQuery\",\"maxFacetHits\":50},{\"indexName\":\"theIndexName\",\"query\":\"myQuery\",\"hitsPerPage\":50,\"type\":\"default\"}],\"strategy\":\"stopIfEnoughMatches\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search filters accept all of the possible shapes")]
  public async Task SearchTest13()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "theIndexName",
              FacetFilters = new FacetFilters("mySearch:filters"),
              ReRankingApplyFilter = new ReRankingApplyFilter("mySearch:filters"),
              TagFilters = new TagFilters("mySearch:filters"),
              NumericFilters = new NumericFilters("mySearch:filters"),
              OptionalFilters = new OptionalFilters("mySearch:filters"),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "theIndexName",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("mySearch:filters"),
                  new FacetFilters(
                    new List<FacetFilters>
                    {
                      new FacetFilters("mySearch:filters"),
                      new FacetFilters(
                        new List<FacetFilters> { new FacetFilters("mySearch:filters") }
                      )
                    }
                  )
                }
              ),
              ReRankingApplyFilter = new ReRankingApplyFilter(
                new List<ReRankingApplyFilter>
                {
                  new ReRankingApplyFilter("mySearch:filters"),
                  new ReRankingApplyFilter(
                    new List<ReRankingApplyFilter> { new ReRankingApplyFilter("mySearch:filters") }
                  )
                }
              ),
              TagFilters = new TagFilters(
                new List<TagFilters>
                {
                  new TagFilters("mySearch:filters"),
                  new TagFilters(new List<TagFilters> { new TagFilters("mySearch:filters") })
                }
              ),
              NumericFilters = new NumericFilters(
                new List<NumericFilters>
                {
                  new NumericFilters("mySearch:filters"),
                  new NumericFilters(
                    new List<NumericFilters> { new NumericFilters("mySearch:filters") }
                  )
                }
              ),
              OptionalFilters = new OptionalFilters(
                new List<OptionalFilters>
                {
                  new OptionalFilters("mySearch:filters"),
                  new OptionalFilters(
                    new List<OptionalFilters> { new OptionalFilters("mySearch:filters") }
                  )
                }
              ),
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"theIndexName\",\"facetFilters\":\"mySearch:filters\",\"reRankingApplyFilter\":\"mySearch:filters\",\"tagFilters\":\"mySearch:filters\",\"numericFilters\":\"mySearch:filters\",\"optionalFilters\":\"mySearch:filters\"},{\"indexName\":\"theIndexName\",\"facetFilters\":[\"mySearch:filters\",[\"mySearch:filters\",[\"mySearch:filters\"]]],\"reRankingApplyFilter\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"tagFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"numericFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"optionalFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]]}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search filters end to end")]
  public async Task SearchTest14()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "cts_e2e_search_facet",
              Filters = "editor:'visual studio' OR editor:neovim",
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "cts_e2e_search_facet",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters("editor:neovim")
                }
              ),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "cts_e2e_search_facet",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters(new List<FacetFilters> { new FacetFilters("editor:neovim") })
                }
              ),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "cts_e2e_search_facet",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters(
                    new List<FacetFilters>
                    {
                      new FacetFilters("editor:neovim"),
                      new FacetFilters(new List<FacetFilters> { new FacetFilters("editor:goland") })
                    }
                  )
                }
              ),
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"indexName\":\"cts_e2e_search_facet\",\"filters\":\"editor:'visual studio' OR editor:neovim\"},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",\"editor:neovim\"]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\"]]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\",[\"editor:goland\"]]]}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search with all search parameters")]
  public async Task SearchTest15()
  {
    await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              AdvancedSyntax = true,
              AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
              {
                Enum.Parse<AdvancedSyntaxFeatures>("ExactPhrase")
              },
              AllowTyposOnNumericTokens = true,
              AlternativesAsExact = new List<AlternativesAsExact>
              {
                Enum.Parse<AlternativesAsExact>("MultiWordsSynonym")
              },
              Analytics = true,
              AnalyticsTags = new List<string> { "" },
              AroundLatLng = "",
              AroundLatLngViaIP = true,
              AroundPrecision = new AroundPrecision(0),
              AroundRadius = new AroundRadius(Enum.Parse<AroundRadiusAll>("All")),
              AttributeCriteriaComputedByMinProximity = true,
              AttributesToHighlight = new List<string> { "" },
              AttributesToRetrieve = new List<string> { "" },
              AttributesToSnippet = new List<string> { "" },
              ClickAnalytics = true,
              CustomRanking = new List<string> { "" },
              DecompoundQuery = true,
              DisableExactOnAttributes = new List<string> { "" },
              DisableTypoToleranceOnAttributes = new List<string> { "" },
              Distinct = new Distinct(0),
              EnableABTest = true,
              EnablePersonalization = true,
              EnableReRanking = true,
              EnableRules = true,
              ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("Attribute"),
              FacetFilters = new FacetFilters(new List<FacetFilters> { new FacetFilters("") }),
              FacetingAfterDistinct = true,
              Facets = new List<string> { "" },
              Filters = "",
              GetRankingInfo = true,
              HighlightPostTag = "",
              HighlightPreTag = "",
              HitsPerPage = 1,
              IgnorePlurals = new IgnorePlurals(false),
              IndexName = "theIndexName",
              InsideBoundingBox = new List<List<Double>>
              {
                new List<Double> { 47.3165, 4.9665, 47.3424, 5.0201 },
                new List<Double> { 40.9234, 2.1185, 38.643, 1.9916 }
              },
              InsidePolygon = new List<List<Double>>
              {
                new List<Double> { 47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9 },
                new List<Double> { 40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104 }
              },
              KeepDiacriticsOnCharacters = "",
              Length = 1,
              MaxValuesPerFacet = 0,
              MinProximity = 1,
              MinWordSizefor1Typo = 0,
              MinWordSizefor2Typos = 0,
              MinimumAroundRadius = 1,
              NaturalLanguages = new List<SupportedLanguage>
              {
                Enum.Parse<SupportedLanguage>("Fr")
              },
              NumericFilters = new NumericFilters(
                new List<NumericFilters> { new NumericFilters("") }
              ),
              Offset = 0,
              OptionalFilters = new OptionalFilters(
                new List<OptionalFilters> { new OptionalFilters("") }
              ),
              OptionalWords = new List<string> { "" },
              Page = 0,
              PercentileComputation = true,
              PersonalizationImpact = 0,
              Query = "",
              QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
              QueryType = Enum.Parse<QueryType>("PrefixAll"),
              Ranking = new List<string> { "" },
              ReRankingApplyFilter = new ReRankingApplyFilter(
                new List<ReRankingApplyFilter> { new ReRankingApplyFilter("") }
              ),
              RelevancyStrictness = 0,
              RemoveStopWords = new RemoveStopWords(true),
              RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("AllOptional"),
              RenderingContent = new RenderingContent
              {
                FacetOrdering = new FacetOrdering
                {
                  Facets = new Facets
                  {
                    Order = new List<string> { "a", "b" },
                  },
                  Values = new Dictionary<string, Value>
                  {
                    {
                      "a",
                      new Value
                      {
                        Order = new List<string> { "b" },
                        SortRemainingBy = Enum.Parse<SortRemainingBy>("Count"),
                      }
                    }
                  },
                },
              },
              ReplaceSynonymsInHighlight = true,
              ResponseFields = new List<string> { "" },
              RestrictHighlightAndSnippetArrays = true,
              RestrictSearchableAttributes = new List<string> { "" },
              RuleContexts = new List<string> { "" },
              SimilarQuery = "",
              SnippetEllipsisText = "",
              SortFacetValuesBy = "",
              SumOrFiltersScores = true,
              Synonyms = true,
              TagFilters = new TagFilters(new List<TagFilters> { new TagFilters("") }),
              Type = Enum.Parse<SearchTypeDefault>("Default"),
              TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Min")),
              UserToken = "",
            }
          )
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/*/queries", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"requests\":[{\"advancedSyntax\":true,\"advancedSyntaxFeatures\":[\"exactPhrase\"],\"allowTyposOnNumericTokens\":true,\"alternativesAsExact\":[\"multiWordsSynonym\"],\"analytics\":true,\"analyticsTags\":[\"\"],\"aroundLatLng\":\"\",\"aroundLatLngViaIP\":true,\"aroundPrecision\":0,\"aroundRadius\":\"all\",\"attributeCriteriaComputedByMinProximity\":true,\"attributesToHighlight\":[\"\"],\"attributesToRetrieve\":[\"\"],\"attributesToSnippet\":[\"\"],\"clickAnalytics\":true,\"customRanking\":[\"\"],\"decompoundQuery\":true,\"disableExactOnAttributes\":[\"\"],\"disableTypoToleranceOnAttributes\":[\"\"],\"distinct\":0,\"enableABTest\":true,\"enablePersonalization\":true,\"enableReRanking\":true,\"enableRules\":true,\"exactOnSingleWordQuery\":\"attribute\",\"facetFilters\":[\"\"],\"facetingAfterDistinct\":true,\"facets\":[\"\"],\"filters\":\"\",\"getRankingInfo\":true,\"highlightPostTag\":\"\",\"highlightPreTag\":\"\",\"hitsPerPage\":1,\"ignorePlurals\":false,\"indexName\":\"theIndexName\",\"insideBoundingBox\":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],\"insidePolygon\":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],\"keepDiacriticsOnCharacters\":\"\",\"length\":1,\"maxValuesPerFacet\":0,\"minProximity\":1,\"minWordSizefor1Typo\":0,\"minWordSizefor2Typos\":0,\"minimumAroundRadius\":1,\"naturalLanguages\":[\"fr\"],\"numericFilters\":[\"\"],\"offset\":0,\"optionalFilters\":[\"\"],\"optionalWords\":[\"\"],\"page\":0,\"percentileComputation\":true,\"personalizationImpact\":0,\"query\":\"\",\"queryLanguages\":[\"fr\"],\"queryType\":\"prefixAll\",\"ranking\":[\"\"],\"reRankingApplyFilter\":[\"\"],\"relevancyStrictness\":0,\"removeStopWords\":true,\"removeWordsIfNoResults\":\"allOptional\",\"renderingContent\":{\"facetOrdering\":{\"facets\":{\"order\":[\"a\",\"b\"]},\"values\":{\"a\":{\"order\":[\"b\"],\"sortRemainingBy\":\"count\"}}}},\"replaceSynonymsInHighlight\":true,\"responseFields\":[\"\"],\"restrictHighlightAndSnippetArrays\":true,\"restrictSearchableAttributes\":[\"\"],\"ruleContexts\":[\"\"],\"similarQuery\":\"\",\"snippetEllipsisText\":\"\",\"sortFacetValuesBy\":\"\",\"sumOrFiltersScores\":true,\"synonyms\":true,\"tagFilters\":[\"\"],\"type\":\"default\",\"typoTolerance\":\"min\",\"userToken\":\"\"}]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "get searchDictionaryEntries results with minimal parameters")]
  public async Task SearchDictionaryEntriesTest()
  {
    await client.SearchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new SearchDictionaryEntriesParams { Query = "about", }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/stopwords/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"query\":\"about\"}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "get searchDictionaryEntries results with all parameters")]
  public async Task SearchDictionaryEntriesTest1()
  {
    await client.SearchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Compounds"),
      new SearchDictionaryEntriesParams
      {
        Query = "foo",
        Page = 4,
        HitsPerPage = 2,
        Language = Enum.Parse<SupportedLanguage>("Fr"),
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/compounds/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"foo\",\"page\":4,\"hitsPerPage\":2,\"language\":\"fr\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "get searchForFacetValues results with minimal parameters")]
  public async Task SearchForFacetValuesTest()
  {
    await client.SearchForFacetValuesAsync("indexName", "facetName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/facets/facetName/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "get searchForFacetValues results with all parameters")]
  public async Task SearchForFacetValuesTest1()
  {
    await client.SearchForFacetValuesAsync(
      "indexName",
      "facetName",
      new SearchForFacetValuesRequest
      {
        Params = "query=foo&facetFilters=['bar']",
        FacetQuery = "foo",
        MaxFacetHits = 42,
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/facets/facetName/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"params\":\"query=foo&facetFilters=['bar']\",\"facetQuery\":\"foo\",\"maxFacetHits\":42}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "searchRules")]
  public async Task SearchRulesTest()
  {
    await client.SearchRulesAsync("indexName", new SearchRulesParams { Query = "something", });

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/rules/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"something\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "search with minimal parameters")]
  public async Task SearchSingleIndexTest()
  {
    await client.SearchSingleIndexAsync<Hit>("indexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "search with special characters in indexName")]
  public async Task SearchSingleIndexTest1()
  {
    await client.SearchSingleIndexAsync<Hit>("cts_e2e_space in index");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/cts_e2e_space%20in%20index/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "search with searchParams")]
  public async Task SearchSingleIndexTest2()
  {
    await client.SearchSingleIndexAsync<Hit>(
      "indexName",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "myQuery",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("tags:algolia") }
          ),
        }
      )
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"myQuery\",\"facetFilters\":[\"tags:algolia\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "single search retrieve snippets")]
  public async Task SearchSingleIndexTest3()
  {
    await client.SearchSingleIndexAsync<Hit>(
      "cts_e2e_browse",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "batman mask of the phantasm",
          AttributesToRetrieve = new List<string> { "*" },
          AttributesToSnippet = new List<string> { "*:20" },
        }
      )
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/cts_e2e_browse/query", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"batman mask of the phantasm\",\"attributesToRetrieve\":[\"*\"],\"attributesToSnippet\":[\"*:20\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "searchSynonyms with minimal parameters")]
  public async Task SearchSynonymsTest()
  {
    await client.SearchSynonymsAsync("indexName");

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{}", req.Body, new JsonDiffConfig(false));
  }

  [Fact(DisplayName = "searchSynonyms with all parameters")]
  public async Task SearchSynonymsTest1()
  {
    await client.SearchSynonymsAsync(
      "indexName",
      new SearchSynonymsParams
      {
        Query = "myQuery",
        Type = Enum.Parse<SynonymType>("Altcorrection1"),
        Page = 10,
        HitsPerPage = 10,
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/indexName/synonyms/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"myQuery\",\"type\":\"altcorrection1\",\"page\":10,\"hitsPerPage\":10}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "searchUserIds")]
  public async Task SearchUserIdsTest()
  {
    await client.SearchUserIdsAsync(
      new SearchUserIdsParams
      {
        Query = "test",
        ClusterName = "theClusterName",
        Page = 5,
        HitsPerPage = 10,
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/clusters/mapping/search", req.Path);
    Assert.Equal("POST", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"query\":\"test\",\"clusterName\":\"theClusterName\",\"page\":5,\"hitsPerPage\":10}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "get setDictionarySettings results with minimal parameters")]
  public async Task SetDictionarySettingsTest()
  {
    await client.SetDictionarySettingsAsync(
      new DictionarySettingsParams
      {
        DisableStandardEntries = new StandardEntries
        {
          Plurals = new Dictionary<string, Boolean>
          {
            { "fr", false },
            { "en", false },
            { "ru", true }
          },
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/*/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"disableStandardEntries\":{\"plurals\":{\"fr\":false,\"en\":false,\"ru\":true}}}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "get setDictionarySettings results with all parameters")]
  public async Task SetDictionarySettingsTest1()
  {
    await client.SetDictionarySettingsAsync(
      new DictionarySettingsParams
      {
        DisableStandardEntries = new StandardEntries
        {
          Plurals = new Dictionary<string, Boolean>
          {
            { "fr", false },
            { "en", false },
            { "ru", true }
          },
          Stopwords = new Dictionary<string, Boolean> { { "fr", false } },
          Compounds = new Dictionary<string, Boolean> { { "ru", true } },
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/dictionaries/*/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"disableStandardEntries\":{\"plurals\":{\"fr\":false,\"en\":false,\"ru\":true},\"stopwords\":{\"fr\":false},\"compounds\":{\"ru\":true}}}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "setSettingsAttributesForFaceting")]
  public async Task SetSettingsTest()
  {
    await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string>
        {
          "actor",
          "filterOnly(category)",
          "searchable(publisher)"
        },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"attributesForFaceting\":[\"actor\",\"filterOnly(category)\",\"searchable(publisher)\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "setSettings with minimal parameters")]
  public async Task SetSettingsTest1()
  {
    await client.SetSettingsAsync(
      "cts_e2e_settings",
      new IndexSettings { PaginationLimitedTo = 10, },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/cts_e2e_settings/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"paginationLimitedTo\":10}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow boolean `typoTolerance`")]
  public async Task SetSettingsTest2()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings { TypoTolerance = new TypoTolerance(true), },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"typoTolerance\":true}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow enum `typoTolerance`")]
  public async Task SetSettingsTest3()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings
      {
        TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Min")),
      },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"typoTolerance\":\"min\"}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow boolean `ignorePlurals`")]
  public async Task SetSettingsTest4()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings { IgnorePlurals = new IgnorePlurals(true), },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"ignorePlurals\":true}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow list of string `ignorePlurals`")]
  public async Task SetSettingsTest5()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings
      {
        IgnorePlurals = new IgnorePlurals(
          new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") }
        ),
      },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"ignorePlurals\":[\"fr\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow boolean `removeStopWords`")]
  public async Task SetSettingsTest6()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings { RemoveStopWords = new RemoveStopWords(true), },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"removeStopWords\":true}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow list of string `removeStopWords`")]
  public async Task SetSettingsTest7()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings
      {
        RemoveStopWords = new RemoveStopWords(
          new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") }
        ),
      },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"removeStopWords\":[\"fr\"]}",
      req.Body,
      new JsonDiffConfig(false)
    );
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow boolean `distinct`")]
  public async Task SetSettingsTest8()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings { Distinct = new Distinct(true), },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"distinct\":true}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow integers for `distinct`")]
  public async Task SetSettingsTest9()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings { Distinct = new Distinct(1), },
      true
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault("{\"distinct\":1}", req.Body, new JsonDiffConfig(false));
    var expectedQuery = JsonSerializer.Deserialize<Dictionary<string, string>>(
      "{\"forwardToReplicas\":\"true\"}"
    );
    Assert.NotNull(expectedQuery);

    var actualQuery = req.QueryParameters;
    Assert.Equal(expectedQuery.Count, actualQuery.Count);

    foreach (var actual in actualQuery)
    {
      expectedQuery.TryGetValue(actual.Key, out var expected);
      Assert.Equal(expected, actual.Value);
    }
  }

  [Fact(DisplayName = "setSettings allow all `indexSettings`")]
  public async Task SetSettingsTest10()
  {
    await client.SetSettingsAsync(
      "theIndexName",
      new IndexSettings
      {
        AdvancedSyntax = true,
        AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
        {
          Enum.Parse<AdvancedSyntaxFeatures>("ExactPhrase")
        },
        AllowCompressionOfIntegerArray = true,
        AllowTyposOnNumericTokens = true,
        AlternativesAsExact = new List<AlternativesAsExact>
        {
          Enum.Parse<AlternativesAsExact>("SingleWordSynonym")
        },
        AttributeCriteriaComputedByMinProximity = true,
        AttributeForDistinct = "test",
        AttributesForFaceting = new List<string> { "algolia" },
        AttributesToHighlight = new List<string> { "algolia" },
        AttributesToRetrieve = new List<string> { "algolia" },
        AttributesToSnippet = new List<string> { "algolia" },
        AttributesToTransliterate = new List<string> { "algolia" },
        CamelCaseAttributes = new List<string> { "algolia" },
        CustomNormalization = new Dictionary<string, Dictionary<string, string>>
        {
          {
            "algolia",
            new Dictionary<string, string> { { "aloglia", "aglolia" } }
          }
        },
        CustomRanking = new List<string> { "algolia" },
        DecompoundQuery = false,
        DecompoundedAttributes = new Dictionary<string, string> { { "algolia", "aloglia" } },
        DisableExactOnAttributes = new List<string> { "algolia" },
        DisablePrefixOnAttributes = new List<string> { "algolia" },
        DisableTypoToleranceOnAttributes = new List<string> { "algolia" },
        DisableTypoToleranceOnWords = new List<string> { "algolia" },
        Distinct = new Distinct(3),
        EnablePersonalization = true,
        EnableReRanking = false,
        EnableRules = true,
        ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("Attribute"),
        HighlightPreTag = "<span>",
        HighlightPostTag = "</span>",
        HitsPerPage = 10,
        IgnorePlurals = new IgnorePlurals(false),
        IndexLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
        KeepDiacriticsOnCharacters = "abc",
        MaxFacetHits = 20,
        MaxValuesPerFacet = 30,
        MinProximity = 6,
        MinWordSizefor1Typo = 5,
        MinWordSizefor2Typos = 11,
        Mode = Enum.Parse<Mode>("NeuralSearch"),
        NumericAttributesForFiltering = new List<string> { "algolia" },
        OptionalWords = new List<string> { "myspace" },
        PaginationLimitedTo = 0,
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
        QueryType = Enum.Parse<QueryType>("PrefixLast"),
        Ranking = new List<string> { "geo" },
        ReRankingApplyFilter = new ReRankingApplyFilter("mySearch:filters"),
        RelevancyStrictness = 10,
        RemoveStopWords = new RemoveStopWords(false),
        RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("LastWords"),
        RenderingContent = new RenderingContent
        {
          FacetOrdering = new FacetOrdering
          {
            Facets = new Facets
            {
              Order = new List<string> { "a", "b" },
            },
            Values = new Dictionary<string, Value>
            {
              {
                "a",
                new Value
                {
                  Order = new List<string> { "b" },
                  SortRemainingBy = Enum.Parse<SortRemainingBy>("Count"),
                }
              }
            },
          },
        },
        ReplaceSynonymsInHighlight = true,
        Replicas = new List<string> { "" },
        ResponseFields = new List<string> { "algolia" },
        RestrictHighlightAndSnippetArrays = true,
        SearchableAttributes = new List<string> { "foo" },
        SemanticSearch = new SemanticSearch { EventSources = new List<string> { "foo" }, },
        SeparatorsToIndex = "bar",
        SnippetEllipsisText = "---",
        SortFacetValuesBy = "date",
        TypoTolerance = new TypoTolerance(false),
        UnretrievableAttributes = new List<string> { "foo" },
        UserData = new Dictionary<string, string> { { "user", "data" } },
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/indexes/theIndexName/settings", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"advancedSyntax\":true,\"advancedSyntaxFeatures\":[\"exactPhrase\"],\"allowCompressionOfIntegerArray\":true,\"allowTyposOnNumericTokens\":true,\"alternativesAsExact\":[\"singleWordSynonym\"],\"attributeCriteriaComputedByMinProximity\":true,\"attributeForDistinct\":\"test\",\"attributesForFaceting\":[\"algolia\"],\"attributesToHighlight\":[\"algolia\"],\"attributesToRetrieve\":[\"algolia\"],\"attributesToSnippet\":[\"algolia\"],\"attributesToTransliterate\":[\"algolia\"],\"camelCaseAttributes\":[\"algolia\"],\"customNormalization\":{\"algolia\":{\"aloglia\":\"aglolia\"}},\"customRanking\":[\"algolia\"],\"decompoundQuery\":false,\"decompoundedAttributes\":{\"algolia\":\"aloglia\"},\"disableExactOnAttributes\":[\"algolia\"],\"disablePrefixOnAttributes\":[\"algolia\"],\"disableTypoToleranceOnAttributes\":[\"algolia\"],\"disableTypoToleranceOnWords\":[\"algolia\"],\"distinct\":3,\"enablePersonalization\":true,\"enableReRanking\":false,\"enableRules\":true,\"exactOnSingleWordQuery\":\"attribute\",\"highlightPreTag\":\"<span>\",\"highlightPostTag\":\"</span>\",\"hitsPerPage\":10,\"ignorePlurals\":false,\"indexLanguages\":[\"fr\"],\"keepDiacriticsOnCharacters\":\"abc\",\"maxFacetHits\":20,\"maxValuesPerFacet\":30,\"minProximity\":6,\"minWordSizefor1Typo\":5,\"minWordSizefor2Typos\":11,\"mode\":\"neuralSearch\",\"numericAttributesForFiltering\":[\"algolia\"],\"optionalWords\":[\"myspace\"],\"paginationLimitedTo\":0,\"queryLanguages\":[\"fr\"],\"queryType\":\"prefixLast\",\"ranking\":[\"geo\"],\"reRankingApplyFilter\":\"mySearch:filters\",\"relevancyStrictness\":10,\"removeStopWords\":false,\"removeWordsIfNoResults\":\"lastWords\",\"renderingContent\":{\"facetOrdering\":{\"facets\":{\"order\":[\"a\",\"b\"]},\"values\":{\"a\":{\"order\":[\"b\"],\"sortRemainingBy\":\"count\"}}}},\"replaceSynonymsInHighlight\":true,\"replicas\":[\"\"],\"responseFields\":[\"algolia\"],\"restrictHighlightAndSnippetArrays\":true,\"searchableAttributes\":[\"foo\"],\"semanticSearch\":{\"eventSources\":[\"foo\"]},\"separatorsToIndex\":\"bar\",\"snippetEllipsisText\":\"---\",\"sortFacetValuesBy\":\"date\",\"typoTolerance\":false,\"unretrievableAttributes\":[\"foo\"],\"userData\":{\"user\":\"data\"}}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }

  [Fact(DisplayName = "updateApiKey")]
  public async Task UpdateApiKeyTest()
  {
    await client.UpdateApiKeyAsync(
      "myApiKey",
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );

    var req = _echo.LastResponse;
    Assert.Equal("/1/keys/myApiKey", req.Path);
    Assert.Equal("PUT", req.Method.ToString());
    JsonAssert.EqualOverrideDefault(
      "{\"acl\":[\"search\",\"addObject\"],\"validity\":300,\"maxQueriesPerIPPerHour\":100,\"maxHitsPerQuery\":20}",
      req.Body,
      new JsonDiffConfig(false)
    );
  }
}
