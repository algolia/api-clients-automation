package com.algolia;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import java.util.*;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.BeforeAll;

import com.algolia.model.*;
import com.algolia.search.{{client}};
import com.algolia.utils.echo.*;
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class {{client}}Tests {
    private {{client}} client;

    @BeforeAll
    void init() {
        client = new {{client}}("APPID", "apiKey", new EchoRequester());
    }

    {{#blocks}}
    {{#tests}}
    @Test
    @DisplayName("{{testName}}")
    void {{method}}Test{{testIndex}}() {
        {{#parametersWithDataType}}{{> generateParams}}{{/parametersWithDataType}}

        EchoResponseInterface req = (EchoResponseInterface) assertDoesNotThrow(() -> {
            return client.{{method}}({{#parametersWithDataType}}{{{key}}}{{suffix}}{{^-last}},{{/-last}}{{/parametersWithDataType}});
        });

        assertEquals(req.getPath(), "{{{request.path}}}");
        assertEquals(req.getMethod(), "{{{request.method}}}");

        {{#request.data}}
        assertDoesNotThrow(() -> {
            JSONAssert.assertEquals("{{#escapeQuotes}}{{{request.data}}}{{/escapeQuotes}}", req.getBody(), JSONCompareMode.STRICT_ORDER);
        });
        {{/request.data}}
    }
    {{/tests}}
    {{/blocks}}
}
