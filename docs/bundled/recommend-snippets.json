{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;\nusing Algolia.Search.Models.Recommend;"
    },
    "batchRecommendRules": {
      "default": "var response = await client.BatchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "var response = await client.CustomDeleteAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters with space\" } }\n);",
      "requestOptions should be escaped too": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"to be overriden\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"query\", \"parameters with space\")\n    .AddExtraQueryParameters(\"and an array\", new List<object> { \"array\", \"with spaces\" })\n    .AddExtraHeader(\"x-header-1\", \"spaces are left alone\")\n    .Build()\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "var response = await client.CustomPostAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);",
      "requestOptions can override default query parameters": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query\", \"myQueryParameter\").Build()\n);",
      "requestOptions merges query parameters with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query2\", \"myQueryParameter\").Build()\n);",
      "requestOptions can override default headers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions merges headers with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions queryParameters accepts booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"isItWorking\", true).Build()\n);",
      "requestOptions queryParameters accepts integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"myParam\", 2).Build()\n);",
      "requestOptions queryParameters accepts list of string": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { \"b and c\", \"d\" })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { true, true, false })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { 1, 2 })\n    .Build()\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "var response = await client.CustomPutAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);"
    },
    "deleteRecommendRule": {
      "default": "var response = await client.DeleteRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendRule": {
      "default": "var response = await client.GetRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendStatus": {
      "default": "var response = await client.GetRecommendStatusAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  12345L\n);"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 42.1,\n        }\n      ),\n    },\n  }\n);",
      "get recommendations with e2e to check oneOf model": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"Ã†on Flux\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 20.0,\n          MaxRecommendations = 2,\n        }\n      ),\n    },\n  }\n);",
      "get recommendations for recommend model with all parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 42.1,\n          MaxRecommendations = 10,\n          QueryParameters = new RecommendSearchParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"query\") }\n            ),\n          },\n          FallbackParameters = new FallbackParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"fallback\") }\n            ),\n          },\n        }\n      ),\n    },\n  }\n);",
      "get recommendations for trending model with minimal parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new TrendingItemsQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          Model = Enum.Parse<TrendingItemsModel>(\"TrendingItems\"),\n          Threshold = 42.1,\n          FacetName = \"facet\",\n          FacetValue = \"value\",\n        }\n      ),\n    },\n  }\n);",
      "get recommendations for trending model with all parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new TrendingItemsQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          Model = Enum.Parse<TrendingItemsModel>(\"TrendingItems\"),\n          Threshold = 42.1,\n          MaxRecommendations = 10,\n          FacetName = \"myFacetName\",\n          FacetValue = \"myFacetValue\",\n          QueryParameters = new RecommendSearchParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"query\") }\n            ),\n          },\n          FallbackParameters = new FallbackParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"fallback\") }\n            ),\n          },\n        }\n      ),\n    },\n  }\n);",
      "get multiple recommendations with minimal parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID1\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 21.7,\n        }\n      ),\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID2\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 21.7,\n        }\n      ),\n    },\n  }\n);",
      "get multiple recommendations with all parameters": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID1\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 21.7,\n          MaxRecommendations = 10,\n          QueryParameters = new RecommendSearchParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"query1\") }\n            ),\n          },\n          FallbackParameters = new FallbackParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"fallback1\") }\n            ),\n          },\n        }\n      ),\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID2\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 21.7,\n          MaxRecommendations = 10,\n          QueryParameters = new RecommendSearchParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"query2\") }\n            ),\n          },\n          FallbackParameters = new FallbackParams\n          {\n            Query = \"myQuery\",\n            FacetFilters = new FacetFilters(\n              new List<FacetFilters> { new FacetFilters(\"fallback2\") }\n            ),\n          },\n        }\n      ),\n    },\n  }\n);",
      "get frequently bought together recommendations": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new BoughtTogetherQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID1\",\n          Model = Enum.Parse<FbtModel>(\"BoughtTogether\"),\n          Threshold = 42.7,\n        }\n      ),\n    },\n  }\n);"
    },
    "searchRecommendRules": {
      "default": "var response = await client.SearchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new RecommendClient(\n  new RecommendConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_recommend/algolia_client_recommend.dart';"
    },
    "batchRecommendRules": {
      "default": "final response = await client.batchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);",
      "allow del method for a custom path with all parameters": "final response = await client.customDelete(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "final response = await client.customGet(\n  path: \"test/minimal\",\n);",
      "allow get method for a custom path with all parameters": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters with space\",\n  },\n);",
      "requestOptions should be escaped too": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"to be overriden\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-header-1': 'spaces are left alone',\n    },\n    urlParameters: {\n      'query': \"parameters with space\",\n      'and an array': [\n        \"array\",\n        \"with spaces\",\n      ],\n    },\n  ),\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "final response = await client.customPost(\n  path: \"test/minimal\",\n);",
      "allow post method for a custom path with all parameters": "final response = await client.customPost(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);",
      "requestOptions can override default query parameters": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions merges query parameters with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query2': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions can override default headers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions merges headers with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions queryParameters accepts booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'isItWorking': true,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': 2,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of string": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        \"b and c\",\n        \"d\",\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        true,\n        true,\n        false,\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        1,\n        2,\n      ],\n    },\n  ),\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "final response = await client.customPut(\n  path: \"test/minimal\",\n);",
      "allow put method for a custom path with all parameters": "final response = await client.customPut(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);"
    },
    "deleteRecommendRule": {
      "default": "final response = await client.deleteRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendRule": {
      "default": "final response = await client.getRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendStatus": {
      "default": "final response = await client.getRecommendStatus(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  taskID: 12345,\n);"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 42.1,\n      ),\n    ],\n  ),\n);",
      "get recommendations with e2e to check oneOf model": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"Ã†on Flux\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 20.0,\n        maxRecommendations: 2,\n      ),\n    ],\n  ),\n);",
      "get recommendations for recommend model with all parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 42.1,\n        maxRecommendations: 10,\n        queryParameters: RecommendSearchParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"query\",\n          ],\n        ),\n        fallbackParameters: FallbackParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"fallback\",\n          ],\n        ),\n      ),\n    ],\n  ),\n);",
      "get recommendations for trending model with minimal parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      TrendingItemsQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        model: TrendingItemsModel.fromJson(\"trending-items\"),\n        threshold: 42.1,\n        facetName: \"facet\",\n        facetValue: \"value\",\n      ),\n    ],\n  ),\n);",
      "get recommendations for trending model with all parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      TrendingItemsQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        model: TrendingItemsModel.fromJson(\"trending-items\"),\n        threshold: 42.1,\n        maxRecommendations: 10,\n        facetName: \"myFacetName\",\n        facetValue: \"myFacetValue\",\n        queryParameters: RecommendSearchParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"query\",\n          ],\n        ),\n        fallbackParameters: FallbackParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"fallback\",\n          ],\n        ),\n      ),\n    ],\n  ),\n);",
      "get multiple recommendations with minimal parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID1\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 21.7,\n      ),\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID2\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 21.7,\n      ),\n    ],\n  ),\n);",
      "get multiple recommendations with all parameters": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID1\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 21.7,\n        maxRecommendations: 10,\n        queryParameters: RecommendSearchParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"query1\",\n          ],\n        ),\n        fallbackParameters: FallbackParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"fallback1\",\n          ],\n        ),\n      ),\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID2\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 21.7,\n        maxRecommendations: 10,\n        queryParameters: RecommendSearchParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"query2\",\n          ],\n        ),\n        fallbackParameters: FallbackParams(\n          query: \"myQuery\",\n          facetFilters: [\n            \"fallback2\",\n          ],\n        ),\n      ),\n    ],\n  ),\n);",
      "get frequently bought together recommendations": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      BoughtTogetherQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID1\",\n        model: FbtModel.fromJson(\"bought-together\"),\n        threshold: 42.7,\n      ),\n    ],\n  ),\n);"
    },
    "searchRecommendRules": {
      "default": "final response = await client.searchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);"
    },
    "init": {
      "default": "final client = RecommendClient(\n    appId: 'ALGOLIA_APPLICATION_ID', apiKey: 'ALGOLIA_API_KEY');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/recommend\""
    },
    "batchRecommendRules": {
      "default": "response, err := client.BatchRecommendRules(client.NewApiBatchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow del method for a custom path with all parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow get method for a custom path with all parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters with space\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions should be escaped too": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"to be overriden\"}), recommend.WithQueryParam(\"query\", \"parameters with space\"), recommend.WithQueryParam(\"and an array\",\n  []string{\"array\", \"with spaces\"}), recommend.WithHeaderParam(\"x-header-1\", \"spaces are left alone\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow post method for a custom path with all parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default query parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"query\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges query parameters with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"query2\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default headers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges headers with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"isItWorking\", true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"myParam\", 2))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of string": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"myParam\",\n  []string{\"b and c\", \"d\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"myParam\",\n  []bool{true, true, false}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), recommend.WithQueryParam(\"myParam\",\n  []int32{1, 2}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow put method for a custom path with all parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteRecommendRule": {
      "default": "response, err := client.DeleteRecommendRule(client.NewApiDeleteRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendRule": {
      "default": "response, err := client.GetRecommendRule(client.NewApiGetRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendStatus": {
      "default": "response, err := client.GetRecommendStatus(client.NewApiGetRecommendStatusRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), 12345))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(42.1))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get recommendations with e2e to check oneOf model": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"Ã†on Flux\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(20.0).SetMaxRecommendations(2))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get recommendations for recommend model with all parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(42.1).SetMaxRecommendations(10).SetQueryParameters(\n        recommend.NewEmptyRecommendSearchParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"query\")}))).SetFallbackParameters(\n        recommend.NewEmptyFallbackParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"fallback\")}))))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get recommendations for trending model with minimal parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.TrendingItemsQueryAsRecommendationsRequest(\n      recommend.NewEmptyTrendingItemsQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetModel(recommend.TrendingItemsModel(\"trending-items\")).SetThreshold(42.1).SetFacetName(\"facet\").SetFacetValue(\"value\"))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get recommendations for trending model with all parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.TrendingItemsQueryAsRecommendationsRequest(\n      recommend.NewEmptyTrendingItemsQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetModel(recommend.TrendingItemsModel(\"trending-items\")).SetThreshold(42.1).SetMaxRecommendations(10).SetFacetName(\"myFacetName\").SetFacetValue(\"myFacetValue\").SetQueryParameters(\n        recommend.NewEmptyRecommendSearchParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"query\")}))).SetFallbackParameters(\n        recommend.NewEmptyFallbackParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"fallback\")}))))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get multiple recommendations with minimal parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID1\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(21.7)), *recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID2\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(21.7))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get multiple recommendations with all parameters": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID1\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(21.7).SetMaxRecommendations(10).SetQueryParameters(\n        recommend.NewEmptyRecommendSearchParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"query1\")}))).SetFallbackParameters(\n        recommend.NewEmptyFallbackParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"fallback1\")})))), *recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID2\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(21.7).SetMaxRecommendations(10).SetQueryParameters(\n        recommend.NewEmptyRecommendSearchParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"query2\")}))).SetFallbackParameters(\n        recommend.NewEmptyFallbackParams().SetQuery(\"myQuery\").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(\n          []recommend.FacetFilters{*recommend.StringAsFacetFilters(\"fallback2\")}))))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get frequently bought together recommendations": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.BoughtTogetherQueryAsRecommendationsRequest(\n      recommend.NewEmptyBoughtTogetherQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID1\").SetModel(recommend.FbtModel(\"bought-together\")).SetThreshold(42.7))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchRecommendRules": {
      "default": "response, err := client.SearchRecommendRules(client.NewApiSearchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\")\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := recommend.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.RecommendClient;\nimport com.algolia.config.*;"
    },
    "batchRecommendRules": {
      "default": "client.batchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "client.customDelete(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "client.customDelete(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "client.customGet(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters with space\");\n    }\n  }\n);",
      "requestOptions should be escaped too": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"to be overriden\");\n    }\n  },\n  new RequestOptions()\n    .addExtraQueryParameters(\"query\", \"parameters with space\")\n    .addExtraQueryParameters(\"and an array\", Arrays.asList(\"array\", \"with spaces\"))\n    .addExtraHeader(\"x-header-1\", \"spaces are left alone\")\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "client.customPost(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "client.customPost(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);",
      "requestOptions can override default query parameters": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query\", \"myQueryParameter\")\n);",
      "requestOptions merges query parameters with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query2\", \"myQueryParameter\")\n);",
      "requestOptions can override default headers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions merges headers with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions queryParameters accepts booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"isItWorking\", true)\n);",
      "requestOptions queryParameters accepts integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", 2)\n);",
      "requestOptions queryParameters accepts list of string": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(\"b and c\", \"d\"))\n);",
      "requestOptions queryParameters accepts list of booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(true, true, false))\n);",
      "requestOptions queryParameters accepts list of integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(1, 2))\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "client.customPut(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "client.customPut(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);"
    },
    "deleteRecommendRule": {
      "default": "client.deleteRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendRule": {
      "default": "client.getRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendStatus": {
      "default": "client.getRecommendStatus(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, 12345L);"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(42.1)\n      )\n    )\n);",
      "get recommendations with e2e to check oneOf model": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"Ã†on Flux\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(20.0)\n          .setMaxRecommendations(2)\n      )\n    )\n);",
      "get recommendations for recommend model with all parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(42.1)\n          .setMaxRecommendations(10)\n          .setQueryParameters(\n            new RecommendSearchParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"query\"))))\n          )\n          .setFallbackParameters(\n            new FallbackParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"fallback\"))))\n          )\n      )\n    )\n);",
      "get recommendations for trending model with minimal parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new TrendingItemsQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setModel(TrendingItemsModel.TRENDING_ITEMS)\n          .setThreshold(42.1)\n          .setFacetName(\"facet\")\n          .setFacetValue(\"value\")\n      )\n    )\n);",
      "get recommendations for trending model with all parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new TrendingItemsQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setModel(TrendingItemsModel.TRENDING_ITEMS)\n          .setThreshold(42.1)\n          .setMaxRecommendations(10)\n          .setFacetName(\"myFacetName\")\n          .setFacetValue(\"myFacetValue\")\n          .setQueryParameters(\n            new RecommendSearchParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"query\"))))\n          )\n          .setFallbackParameters(\n            new FallbackParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"fallback\"))))\n          )\n      )\n    )\n);",
      "get multiple recommendations with minimal parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID1\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(21.7),\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID2\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(21.7)\n      )\n    )\n);",
      "get multiple recommendations with all parameters": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID1\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(21.7)\n          .setMaxRecommendations(10)\n          .setQueryParameters(\n            new RecommendSearchParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"query1\"))))\n          )\n          .setFallbackParameters(\n            new FallbackParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"fallback1\"))))\n          ),\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID2\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(21.7)\n          .setMaxRecommendations(10)\n          .setQueryParameters(\n            new RecommendSearchParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"query2\"))))\n          )\n          .setFallbackParameters(\n            new FallbackParams().setQuery(\"myQuery\").setFacetFilters(FacetFilters.of(Arrays.asList(FacetFilters.of(\"fallback2\"))))\n          )\n      )\n    )\n);",
      "get frequently bought together recommendations": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new BoughtTogetherQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID1\")\n          .setModel(FbtModel.BOUGHT_TOGETHER)\n          .setThreshold(42.7)\n      )\n    )\n);"
    },
    "searchRecommendRules": {
      "default": "client.searchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "RecommendClient client = new RecommendClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "batchRecommendRules": {
      "default": "const response = await client.batchRecommendRules({ indexName: 'indexName', model: 'related-products' });"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "const response = await client.customDelete({ path: 'test/minimal' });",
      "allow del method for a custom path with all parameters": "const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "const response = await client.customGet({ path: 'test/minimal' });",
      "allow get method for a custom path with all parameters": "const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });",
      "requestOptions should be escaped too": "const response = await client.customGet(\n  { path: 'test/all', parameters: { query: 'to be overriden' } },\n  {\n    queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },\n    headers: { 'x-header-1': 'spaces are left alone' },\n  },\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "const response = await client.customPost({ path: 'test/minimal' });",
      "allow post method for a custom path with all parameters": "const response = await client.customPost({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});",
      "requestOptions can override default query parameters": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query: 'myQueryParameter' },\n  },\n);",
      "requestOptions merges query parameters with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query2: 'myQueryParameter' },\n  },\n);",
      "requestOptions can override default headers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions merges headers with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions queryParameters accepts booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { isItWorking: true },\n  },\n);",
      "requestOptions queryParameters accepts integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: 2 },\n  },\n);",
      "requestOptions queryParameters accepts list of string": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: ['b and c', 'd'] },\n  },\n);",
      "requestOptions queryParameters accepts list of booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [true, true, false] },\n  },\n);",
      "requestOptions queryParameters accepts list of integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [1, 2] },\n  },\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "const response = await client.customPut({ path: 'test/minimal' });",
      "allow put method for a custom path with all parameters": "const response = await client.customPut({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});"
    },
    "deleteRecommendRule": {
      "default": "const response = await client.deleteRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});"
    },
    "getRecommendRule": {
      "default": "const response = await client.getRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});"
    },
    "getRecommendStatus": {
      "default": "const response = await client.getRecommendStatus({\n  indexName: 'indexName',\n  model: 'related-products',\n  taskID: 12345,\n});"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "const response = await client.getRecommendations({\n  requests: [{ indexName: 'indexName', objectID: 'objectID', model: 'related-products', threshold: 42.1 }],\n});",
      "get recommendations with e2e to check oneOf model": "const response = await client.getRecommendations({\n  requests: [\n    {\n      indexName: 'cts_e2e_browse',\n      objectID: 'Ã†on Flux',\n      model: 'related-products',\n      threshold: 20.0,\n      maxRecommendations: 2,\n    },\n  ],\n});",
      "get recommendations for recommend model with all parameters": "const response = await client.getRecommendations({\n  requests: [\n    {\n      indexName: 'indexName',\n      objectID: 'objectID',\n      model: 'related-products',\n      threshold: 42.1,\n      maxRecommendations: 10,\n      queryParameters: { query: 'myQuery', facetFilters: ['query'] },\n      fallbackParameters: { query: 'myQuery', facetFilters: ['fallback'] },\n    },\n  ],\n});",
      "get recommendations for trending model with minimal parameters": "const response = await client.getRecommendations({\n  requests: [\n    { indexName: 'indexName', model: 'trending-items', threshold: 42.1, facetName: 'facet', facetValue: 'value' },\n  ],\n});",
      "get recommendations for trending model with all parameters": "const response = await client.getRecommendations({\n  requests: [\n    {\n      indexName: 'indexName',\n      model: 'trending-items',\n      threshold: 42.1,\n      maxRecommendations: 10,\n      facetName: 'myFacetName',\n      facetValue: 'myFacetValue',\n      queryParameters: { query: 'myQuery', facetFilters: ['query'] },\n      fallbackParameters: { query: 'myQuery', facetFilters: ['fallback'] },\n    },\n  ],\n});",
      "get multiple recommendations with minimal parameters": "const response = await client.getRecommendations({\n  requests: [\n    { indexName: 'indexName1', objectID: 'objectID1', model: 'related-products', threshold: 21.7 },\n    { indexName: 'indexName2', objectID: 'objectID2', model: 'related-products', threshold: 21.7 },\n  ],\n});",
      "get multiple recommendations with all parameters": "const response = await client.getRecommendations({\n  requests: [\n    {\n      indexName: 'indexName1',\n      objectID: 'objectID1',\n      model: 'related-products',\n      threshold: 21.7,\n      maxRecommendations: 10,\n      queryParameters: { query: 'myQuery', facetFilters: ['query1'] },\n      fallbackParameters: { query: 'myQuery', facetFilters: ['fallback1'] },\n    },\n    {\n      indexName: 'indexName2',\n      objectID: 'objectID2',\n      model: 'related-products',\n      threshold: 21.7,\n      maxRecommendations: 10,\n      queryParameters: { query: 'myQuery', facetFilters: ['query2'] },\n      fallbackParameters: { query: 'myQuery', facetFilters: ['fallback2'] },\n    },\n  ],\n});",
      "get frequently bought together recommendations": "const response = await client.getRecommendations({\n  requests: [{ indexName: 'indexName1', objectID: 'objectID1', model: 'bought-together', threshold: 42.7 }],\n});"
    },
    "searchRecommendRules": {
      "default": "const response = await client.searchRecommendRules({ indexName: 'indexName', model: 'related-products' });"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "//\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.RecommendClient\nimport com.algolia.client.configuration.*\nimport com.algolia.client.transport.*"
    },
    "batchRecommendRules": {
      "default": "var response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "var response = client.customDelete(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters with space\"),\n)",
      "requestOptions should be escaped too": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"to be overriden\"),\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"parameters with space\")\n      put(\"and an array\", listOf(\"array\", \"with spaces\"))\n    },\n    headers = buildMap {\n      put(\"x-header-1\", \"spaces are left alone\")\n    },\n  ),\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "var response = client.customPost(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)",
      "requestOptions can override default query parameters": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions merges query parameters with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query2\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions can override default headers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions merges headers with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions queryParameters accepts booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"isItWorking\", true)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", 2)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of string": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(\"b and c\", \"d\"))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(true, true, false))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(1, 2))\n    },\n  ),\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "var response = client.customPut(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)"
    },
    "deleteRecommendRule": {
      "default": "var response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)"
    },
    "getRecommendRule": {
      "default": "var response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)"
    },
    "getRecommendStatus": {
      "default": "var response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  taskID = 12345L,\n)"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 42.1,\n      ),\n    ),\n  ),\n)",
      "get recommendations with e2e to check oneOf model": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"Ã†on Flux\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 20.0,\n        maxRecommendations = 2,\n      ),\n    ),\n  ),\n)",
      "get recommendations for recommend model with all parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 42.1,\n        maxRecommendations = 10,\n        queryParameters = RecommendSearchParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"query\"))),\n        ),\n        fallbackParameters = FallbackParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"fallback\"))),\n        ),\n      ),\n    ),\n  ),\n)",
      "get recommendations for trending model with minimal parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      TrendingItemsQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        model = TrendingItemsModel.entries.first { it.value == \"trending-items\" },\n        threshold = 42.1,\n        facetName = \"facet\",\n        facetValue = \"value\",\n      ),\n    ),\n  ),\n)",
      "get recommendations for trending model with all parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      TrendingItemsQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        model = TrendingItemsModel.entries.first { it.value == \"trending-items\" },\n        threshold = 42.1,\n        maxRecommendations = 10,\n        facetName = \"myFacetName\",\n        facetValue = \"myFacetValue\",\n        queryParameters = RecommendSearchParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"query\"))),\n        ),\n        fallbackParameters = FallbackParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"fallback\"))),\n        ),\n      ),\n    ),\n  ),\n)",
      "get multiple recommendations with minimal parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 21.7,\n      ),\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID2\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 21.7,\n      ),\n    ),\n  ),\n)",
      "get multiple recommendations with all parameters": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 21.7,\n        maxRecommendations = 10,\n        queryParameters = RecommendSearchParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"query1\"))),\n        ),\n        fallbackParameters = FallbackParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"fallback1\"))),\n        ),\n      ),\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID2\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 21.7,\n        maxRecommendations = 10,\n        queryParameters = RecommendSearchParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"query2\"))),\n        ),\n        fallbackParameters = FallbackParams(\n          query = \"myQuery\",\n          facetFilters = FacetFilters.of(listOf(FacetFilters.of(\"fallback2\"))),\n        ),\n      ),\n    ),\n  ),\n)",
      "get frequently bought together recommendations": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      BoughtTogetherQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = FbtModel.entries.first { it.value == \"bought-together\" },\n        threshold = 42.7,\n      ),\n    ),\n  ),\n)"
    },
    "searchRecommendRules": {
      "default": "var response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\RecommendClient;"
    },
    "batchRecommendRules": {
      "default": "$response = $client->batchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "allow del method for a custom path with all parameters": "$response = $client->customDelete(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "$response = $client->customGet(\n    'test/minimal',\n);",
      "allow get method for a custom path with all parameters": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'parameters with space',\n    ],\n);",
      "requestOptions should be escaped too": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'to be overriden',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'parameters with space',\n            'and an array' => ['array', 'with spaces',\n            ],\n        ],\n        'headers' => [\n            'x-header-1' => 'spaces are left alone',\n        ],\n    ]\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "$response = $client->customPost(\n    'test/minimal',\n);",
      "allow post method for a custom path with all parameters": "$response = $client->customPost(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);",
      "requestOptions can override default query parameters": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions merges query parameters with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query2' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions can override default headers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions merges headers with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions queryParameters accepts booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'isItWorking' => true,\n        ], ]\n);",
      "requestOptions queryParameters accepts integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => 2,\n        ], ]\n);",
      "requestOptions queryParameters accepts list of string": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => ['b and c', 'd',\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [true, true, false,\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [1, 2,\n            ],\n        ], ]\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "$response = $client->customPut(\n    'test/minimal',\n);",
      "allow put method for a custom path with all parameters": "$response = $client->customPut(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);"
    },
    "deleteRecommendRule": {
      "default": "$response = $client->deleteRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);"
    },
    "getRecommendRule": {
      "default": "$response = $client->getRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);"
    },
    "getRecommendStatus": {
      "default": "$response = $client->getRecommendStatus(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    12345,\n);"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID',\n            'model' => 'related-products',\n            'threshold' => 42.1,\n        ],\n    ],\n    ],\n);",
      "get recommendations with e2e to check oneOf model": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'Ã†on Flux',\n            'model' => 'related-products',\n            'threshold' => 20.0,\n            'maxRecommendations' => 2,\n        ],\n    ],\n    ],\n);",
      "get recommendations for recommend model with all parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID',\n            'model' => 'related-products',\n            'threshold' => 42.1,\n            'maxRecommendations' => 10,\n            'queryParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'query',\n                ],\n            ],\n            'fallbackParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'fallback',\n                ],\n            ],\n        ],\n    ],\n    ],\n);",
      "get recommendations for trending model with minimal parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'model' => 'trending-items',\n            'threshold' => 42.1,\n            'facetName' => 'facet',\n            'facetValue' => 'value',\n        ],\n    ],\n    ],\n);",
      "get recommendations for trending model with all parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'model' => 'trending-items',\n            'threshold' => 42.1,\n            'maxRecommendations' => 10,\n            'facetName' => 'myFacetName',\n            'facetValue' => 'myFacetValue',\n            'queryParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'query',\n                ],\n            ],\n            'fallbackParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'fallback',\n                ],\n            ],\n        ],\n    ],\n    ],\n);",
      "get multiple recommendations with minimal parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID1',\n            'model' => 'related-products',\n            'threshold' => 21.7,\n        ],\n\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID2',\n            'model' => 'related-products',\n            'threshold' => 21.7,\n        ],\n    ],\n    ],\n);",
      "get multiple recommendations with all parameters": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID1',\n            'model' => 'related-products',\n            'threshold' => 21.7,\n            'maxRecommendations' => 10,\n            'queryParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'query1',\n                ],\n            ],\n            'fallbackParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'fallback1',\n                ],\n            ],\n        ],\n\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID2',\n            'model' => 'related-products',\n            'threshold' => 21.7,\n            'maxRecommendations' => 10,\n            'queryParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'query2',\n                ],\n            ],\n            'fallbackParameters' => ['query' => 'myQuery',\n                'facetFilters' => [\n                    'fallback2',\n                ],\n            ],\n        ],\n    ],\n    ],\n);",
      "get frequently bought together recommendations": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID1',\n            'model' => 'bought-together',\n            'threshold' => 42.7,\n        ],\n    ],\n    ],\n);"
    },
    "searchRecommendRules": {
      "default": "$response = $client->searchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = RecommendClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.recommend.client import RecommendClientSync\nfrom json import loads"
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters with space\",\n    },\n)",
      "requestOptions should be escaped too": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"to be overriden\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-header-1\":\"spaces are left alone\"}\"\"\"),\n        \"query_parameters\": loads(\n            \"\"\"{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}\"\"\"\n        ),\n    },\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)",
      "requestOptions can override default query parameters": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query2\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"isItWorking\":true}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":2}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[\"b and c\",\"d\"]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[true,true,false]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[1,2]}\"\"\"),\n    },\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)"
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)"
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)"
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    task_id=12345,\n)"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID\",\n                \"model\": \"related-products\",\n                \"threshold\": 42.1,\n            },\n        ],\n    },\n)",
      "get recommendations with e2e to check oneOf model": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"Ã†on Flux\",\n                \"model\": \"related-products\",\n                \"threshold\": 20.0,\n                \"maxRecommendations\": 2,\n            },\n        ],\n    },\n)",
      "get recommendations for recommend model with all parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID\",\n                \"model\": \"related-products\",\n                \"threshold\": 42.1,\n                \"maxRecommendations\": 10,\n                \"queryParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"query\",\n                    ],\n                },\n                \"fallbackParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"fallback\",\n                    ],\n                },\n            },\n        ],\n    },\n)",
      "get recommendations for trending model with minimal parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"model\": \"trending-items\",\n                \"threshold\": 42.1,\n                \"facetName\": \"facet\",\n                \"facetValue\": \"value\",\n            },\n        ],\n    },\n)",
      "get recommendations for trending model with all parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"model\": \"trending-items\",\n                \"threshold\": 42.1,\n                \"maxRecommendations\": 10,\n                \"facetName\": \"myFacetName\",\n                \"facetValue\": \"myFacetValue\",\n                \"queryParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"query\",\n                    ],\n                },\n                \"fallbackParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"fallback\",\n                    ],\n                },\n            },\n        ],\n    },\n)",
      "get multiple recommendations with minimal parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID1\",\n                \"model\": \"related-products\",\n                \"threshold\": 21.7,\n            },\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID2\",\n                \"model\": \"related-products\",\n                \"threshold\": 21.7,\n            },\n        ],\n    },\n)",
      "get multiple recommendations with all parameters": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID1\",\n                \"model\": \"related-products\",\n                \"threshold\": 21.7,\n                \"maxRecommendations\": 10,\n                \"queryParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"query1\",\n                    ],\n                },\n                \"fallbackParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"fallback1\",\n                    ],\n                },\n            },\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID2\",\n                \"model\": \"related-products\",\n                \"threshold\": 21.7,\n                \"maxRecommendations\": 10,\n                \"queryParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"query2\",\n                    ],\n                },\n                \"fallbackParameters\": {\n                    \"query\": \"myQuery\",\n                    \"facetFilters\": [\n                        \"fallback2\",\n                    ],\n                },\n            },\n        ],\n    },\n)",
      "get frequently bought together recommendations": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID1\",\n                \"model\": \"bought-together\",\n                \"threshold\": 42.7,\n            },\n        ],\n    },\n)"
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.\nclient = RecommendClientSync(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\"test/minimal\")",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\"test/all\", {query: \"parameters\"})"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\"test/minimal\")",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\"test/all\", {query: \"parameters with space\"})",
      "requestOptions should be escaped too": "response = client.custom_get(\n  \"test/all\",\n  {query: \"to be overriden\"},\n  {\n    :header_params => {\"x-header-1\" => \"spaces are left alone\"},\n    :query_params => JSON.parse(\n      \"{\\\"query\\\":\\\"parameters with space\\\",\\\"and an array\\\":[\\\"array\\\",\\\"with spaces\\\"]}\",\n      :symbolize_names => true\n    )\n  }\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\"test/minimal\")",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})",
      "requestOptions can override default query parameters": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query2\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"isItWorking\\\":true}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":2}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[\\\"b and c\\\",\\\"d\\\"]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[true,true,false]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[1,2]}\", :symbolize_names => true)}\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\"test/minimal\")",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})"
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")"
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")"
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\"<YOUR_INDEX_NAME>\", \"related-products\", 12345)"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID\",\n        model: \"related-products\",\n        threshold: 42.1\n      )\n    ]\n  )\n)",
      "get recommendations with e2e to check oneOf model": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"Ã†on Flux\",\n        model: \"related-products\",\n        threshold: 20.0,\n        max_recommendations: 2\n      )\n    ]\n  )\n)",
      "get recommendations for recommend model with all parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID\",\n        model: \"related-products\",\n        threshold: 42.1,\n        max_recommendations: 10,\n        query_parameters: Algolia::Recommend::RecommendSearchParams.new(query: \"myQuery\", facet_filters: [\"query\"]),\n        fallback_parameters: Algolia::Recommend::FallbackParams.new(query: \"myQuery\", facet_filters: [\"fallback\"])\n      )\n    ]\n  )\n)",
      "get recommendations for trending model with minimal parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::TrendingItemsQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        model: \"trending-items\",\n        threshold: 42.1,\n        facet_name: \"facet\",\n        facet_value: \"value\"\n      )\n    ]\n  )\n)",
      "get recommendations for trending model with all parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::TrendingItemsQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        model: \"trending-items\",\n        threshold: 42.1,\n        max_recommendations: 10,\n        facet_name: \"myFacetName\",\n        facet_value: \"myFacetValue\",\n        query_parameters: Algolia::Recommend::RecommendSearchParams.new(query: \"myQuery\", facet_filters: [\"query\"]),\n        fallback_parameters: Algolia::Recommend::FallbackParams.new(query: \"myQuery\", facet_filters: [\"fallback\"])\n      )\n    ]\n  )\n)",
      "get multiple recommendations with minimal parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID1\",\n        model: \"related-products\",\n        threshold: 21.7\n      ),\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID2\",\n        model: \"related-products\",\n        threshold: 21.7\n      )\n    ]\n  )\n)",
      "get multiple recommendations with all parameters": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID1\",\n        model: \"related-products\",\n        threshold: 21.7,\n        max_recommendations: 10,\n        query_parameters: Algolia::Recommend::RecommendSearchParams.new(query: \"myQuery\", facet_filters: [\"query1\"]),\n        fallback_parameters: Algolia::Recommend::FallbackParams.new(query: \"myQuery\", facet_filters: [\"fallback1\"])\n      ),\n      Algolia::Recommend::RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID2\",\n        model: \"related-products\",\n        threshold: 21.7,\n        max_recommendations: 10,\n        query_parameters: Algolia::Recommend::RecommendSearchParams.new(query: \"myQuery\", facet_filters: [\"query2\"]),\n        fallback_parameters: Algolia::Recommend::FallbackParams.new(query: \"myQuery\", facet_filters: [\"fallback2\"])\n      )\n    ]\n  )\n)",
      "get frequently bought together recommendations": "response = client.get_recommendations(\n  Algolia::Recommend::GetRecommendationsParams.new(\n    requests: [\n      Algolia::Recommend::BoughtTogetherQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        algolia_object_id: \"objectID1\",\n        model: \"bought-together\",\n        threshold: 42.7\n      )\n    ]\n  )\n)"
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::RecommendClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.RecommendClient\nimport algoliasearch.config.*"
    },
    "batchRecommendRules": {
      "default": "val response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)",
      "allow del method for a custom path with all parameters": "val response = client.customDelete[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\"))\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)",
      "allow get method for a custom path with all parameters": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters with space\"))\n)",
      "requestOptions should be escaped too": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"to be overriden\")),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"parameters with space\")\n      .withQueryParameter(\"and an array\", Seq(\"array\", \"with spaces\"))\n      .withHeader(\"x-header-1\", \"spaces are left alone\")\n      .build()\n  )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)",
      "allow post method for a custom path with all parameters": "val response = client.customPost[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)",
      "requestOptions can override default query parameters": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions merges query parameters with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query2\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions can override default headers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions merges headers with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"isItWorking\", true)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", 2)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of string": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(\"b and c\", \"d\"))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(true, true, false))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(1, 2))\n      .build()\n  )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)",
      "allow put method for a custom path with all parameters": "val response = client.customPut[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)"
    },
    "deleteRecommendRule": {
      "default": "val response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)"
    },
    "getRecommendRule": {
      "default": "val response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)"
    },
    "getRecommendStatus": {
      "default": "val response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  taskID = 12345L\n)"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 42.1\n      )\n    )\n  )\n)",
      "get recommendations with e2e to check oneOf model": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"Ã†on Flux\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 20.0,\n        maxRecommendations = Some(2)\n      )\n    )\n  )\n)",
      "get recommendations for recommend model with all parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 42.1,\n        maxRecommendations = Some(10),\n        queryParameters = Some(\n          RecommendSearchParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"query\"))))\n          )\n        ),\n        fallbackParameters = Some(\n          FallbackParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"fallback\"))))\n          )\n        )\n      )\n    )\n  )\n)",
      "get recommendations for trending model with minimal parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      TrendingItemsQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        model = TrendingItemsModel.withName(\"trending-items\"),\n        threshold = 42.1,\n        facetName = Some(\"facet\"),\n        facetValue = Some(\"value\")\n      )\n    )\n  )\n)",
      "get recommendations for trending model with all parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      TrendingItemsQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        model = TrendingItemsModel.withName(\"trending-items\"),\n        threshold = 42.1,\n        maxRecommendations = Some(10),\n        facetName = Some(\"myFacetName\"),\n        facetValue = Some(\"myFacetValue\"),\n        queryParameters = Some(\n          RecommendSearchParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"query\"))))\n          )\n        ),\n        fallbackParameters = Some(\n          FallbackParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"fallback\"))))\n          )\n        )\n      )\n    )\n  )\n)",
      "get multiple recommendations with minimal parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 21.7\n      ),\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID2\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 21.7\n      )\n    )\n  )\n)",
      "get multiple recommendations with all parameters": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 21.7,\n        maxRecommendations = Some(10),\n        queryParameters = Some(\n          RecommendSearchParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"query1\"))))\n          )\n        ),\n        fallbackParameters = Some(\n          FallbackParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"fallback1\"))))\n          )\n        )\n      ),\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID2\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 21.7,\n        maxRecommendations = Some(10),\n        queryParameters = Some(\n          RecommendSearchParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"query2\"))))\n          )\n        ),\n        fallbackParameters = Some(\n          FallbackParams(\n            query = Some(\"myQuery\"),\n            facetFilters = Some(FacetFilters(Seq(FacetFilters(\"fallback2\"))))\n          )\n        )\n      )\n    )\n  )\n)",
      "get frequently bought together recommendations": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      BoughtTogetherQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID1\",\n        model = FbtModel.withName(\"bought-together\"),\n        threshold = 42.7\n      )\n    )\n  )\n)"
    },
    "searchRecommendRules": {
      "default": "val response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "swift": {
    "import": {
      "default": "import Recommend"
    },
    "batchRecommendRules": {
      "default": "let response = try await client.batchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "let response = try await client.customDelete(path: \"test/minimal\")",
      "allow del method for a custom path with all parameters": "let response = try await client.customDelete(path: \"test/all\", parameters: [\"query\": AnyCodable(\"parameters\")])"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "let response = try await client.customGet(path: \"test/minimal\")",
      "allow get method for a custom path with all parameters": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters with space\")]\n)",
      "requestOptions should be escaped too": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"to be overriden\")],\n    requestOptions: RequestOptions(\n        headers: [\"x-header-1\": \"spaces are left alone\"],\n\n        queryParameters: [\"query\": \"parameters with space\", \"and an array\": [\"array\", \"with spaces\"]]\n    )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "let response = try await client.customPost(path: \"test/minimal\")",
      "allow post method for a custom path with all parameters": "let response = try await client.customPost(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)",
      "requestOptions can override default query parameters": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions merges query parameters with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query2\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions can override default headers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions merges headers with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions queryParameters accepts booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"isItWorking\": true]\n    )\n)",
      "requestOptions queryParameters accepts integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": 2]\n    )\n)",
      "requestOptions queryParameters accepts list of string": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [\"b and c\", \"d\"]]\n    )\n)",
      "requestOptions queryParameters accepts list of booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [true, true, false]]\n    )\n)",
      "requestOptions queryParameters accepts list of integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [1, 2]]\n    )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "let response = try await client.customPut(path: \"test/minimal\")",
      "allow put method for a custom path with all parameters": "let response = try await client.customPut(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)"
    },
    "deleteRecommendRule": {
      "default": "let response = try await client.deleteRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendRule": {
      "default": "let response = try await client.getRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendStatus": {
      "default": "let response = try await client.getRecommendStatus(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    taskID: Int64(12345)\n)"
    },
    "getRecommendations": {
      "get recommendations for recommend model with minimal parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                model: RelatedModel.relatedProducts,\n                objectID: \"objectID\"\n            )),\n    ]))",
      "get recommendations with e2e to check oneOf model": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 20.0,\n                maxRecommendations: 2,\n                model: RelatedModel.relatedProducts,\n                objectID: \"Ã†on Flux\"\n            )),\n    ]))",
      "get recommendations for recommend model with all parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                maxRecommendations: 10,\n                queryParameters: RecommendSearchParams(\n                    facetFilters: RecommendFacetFilters.arrayOfRecommendFacetFilters(\n                        [RecommendFacetFilters.string(\"query\")]\n                    ),\n                    query: \"myQuery\"\n                ),\n                model: RelatedModel.relatedProducts,\n                objectID: \"objectID\",\n                fallbackParameters: FallbackParams(\n                    facetFilters: RecommendFacetFilters\n                        .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"fallback\")]),\n                    query: \"myQuery\"\n                )\n            )),\n    ]))",
      "get recommendations for trending model with minimal parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .trendingItemsQuery(TrendingItemsQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                facetName: \"facet\",\n                facetValue: \"value\",\n                model: TrendingItemsModel.trendingItems\n            )),\n    ]))",
      "get recommendations for trending model with all parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .trendingItemsQuery(TrendingItemsQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                maxRecommendations: 10,\n                queryParameters: RecommendSearchParams(\n                    facetFilters: RecommendFacetFilters.arrayOfRecommendFacetFilters(\n                        [RecommendFacetFilters.string(\"query\")]\n                    ),\n                    query: \"myQuery\"\n                ),\n                facetName: \"myFacetName\",\n                facetValue: \"myFacetValue\",\n                model: TrendingItemsModel.trendingItems,\n                fallbackParameters: FallbackParams(\n                    facetFilters: RecommendFacetFilters\n                        .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"fallback\")]),\n                    query: \"myQuery\"\n                )\n            )),\n    ]))",
      "get multiple recommendations with minimal parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest.relatedQuery(RelatedQuery(\n            indexName: \"<YOUR_INDEX_NAME>\",\n            threshold: 21.7,\n            model: RelatedModel.relatedProducts,\n            objectID: \"objectID1\"\n        )),\n        RecommendationsRequest.relatedQuery(RelatedQuery(\n            indexName: \"<YOUR_INDEX_NAME>\",\n            threshold: 21.7,\n            model: RelatedModel.relatedProducts,\n            objectID: \"objectID2\"\n        )),\n    ]))",
      "get multiple recommendations with all parameters": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest.relatedQuery(RelatedQuery(\n            indexName: \"<YOUR_INDEX_NAME>\",\n            threshold: 21.7,\n            maxRecommendations: 10,\n            queryParameters: RecommendSearchParams(\n                facetFilters: RecommendFacetFilters\n                    .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"query1\")]),\n                query: \"myQuery\"\n            ),\n            model: RelatedModel.relatedProducts,\n            objectID: \"objectID1\",\n            fallbackParameters: FallbackParams(\n                facetFilters: RecommendFacetFilters\n                    .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"fallback1\")]),\n                query: \"myQuery\"\n            )\n        )),\n        RecommendationsRequest.relatedQuery(RelatedQuery(\n            indexName: \"<YOUR_INDEX_NAME>\",\n            threshold: 21.7,\n            maxRecommendations: 10,\n            queryParameters: RecommendSearchParams(\n                facetFilters: RecommendFacetFilters\n                    .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"query2\")]),\n                query: \"myQuery\"\n            ),\n            model: RelatedModel.relatedProducts,\n            objectID: \"objectID2\",\n            fallbackParameters: FallbackParams(\n                facetFilters: RecommendFacetFilters\n                    .arrayOfRecommendFacetFilters([RecommendFacetFilters.string(\"fallback2\")]),\n                query: \"myQuery\"\n            )\n        )),\n    ]))",
      "get frequently bought together recommendations": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .boughtTogetherQuery(BoughtTogetherQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.7,\n                model: FbtModel.boughtTogether,\n                objectID: \"objectID1\"\n            )),\n    ]))"
    },
    "searchRecommendRules": {
      "default": "let response = try await client.searchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try RecommendClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\")"
    }
  }
}