{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Models.Recommend;"
    },
    "batchRecommendRules": {
      "default": "var response = await client.BatchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");"
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");"
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");"
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");"
    },
    "deleteRecommendRule": {
      "default": "var response = await client.DeleteRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendRule": {
      "default": "var response = await client.GetRecommendRuleAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendStatus": {
      "default": "var response = await client.GetRecommendStatusAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  12345L\n);"
    },
    "getRecommendations": {
      "default": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"<YOUR_INDEX_NAME>\",\n          ObjectID = \"objectID\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 42.1,\n        }\n      ),\n    },\n  }\n);"
    },
    "searchRecommendRules": {
      "default": "var response = await client.SearchRecommendRulesAsync(\n  \"<YOUR_INDEX_NAME>\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new RecommendClient(\n  new RecommendConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_recommend/algolia_client_recommend.dart';"
    },
    "batchRecommendRules": {
      "default": "final response = await client.batchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);"
    },
    "customDelete": {
      "default": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);"
    },
    "customGet": {
      "default": "final response = await client.customGet(\n  path: \"test/minimal\",\n);"
    },
    "customPost": {
      "default": "final response = await client.customPost(\n  path: \"test/minimal\",\n);"
    },
    "customPut": {
      "default": "final response = await client.customPut(\n  path: \"test/minimal\",\n);"
    },
    "deleteRecommendRule": {
      "default": "final response = await client.deleteRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendRule": {
      "default": "final response = await client.getRecommendRule(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendStatus": {
      "default": "final response = await client.getRecommendStatus(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  taskID: 12345,\n);"
    },
    "getRecommendations": {
      "default": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"<YOUR_INDEX_NAME>\",\n        objectID: \"objectID\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 42.1,\n      ),\n    ],\n  ),\n);"
    },
    "searchRecommendRules": {
      "default": "final response = await client.searchRecommendRules(\n  indexName: \"<YOUR_INDEX_NAME>\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);"
    },
    "init": {
      "default": "final client = RecommendClient(\n    appId: 'ALGOLIA_APPLICATION_ID', apiKey: 'ALGOLIA_API_KEY');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/recommend\""
    },
    "batchRecommendRules": {
      "default": "response, err := client.BatchRecommendRules(client.NewApiBatchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteRecommendRule": {
      "default": "response, err := client.DeleteRecommendRule(client.NewApiDeleteRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendRule": {
      "default": "response, err := client.GetRecommendRule(client.NewApiGetRecommendRuleRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendStatus": {
      "default": "response, err := client.GetRecommendStatus(client.NewApiGetRecommendStatusRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"), 12345,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRecommendations": {
      "default": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"<YOUR_INDEX_NAME>\").SetObjectID(\"objectID\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(42.1))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchRecommendRules": {
      "default": "response, err := client.SearchRecommendRules(client.NewApiSearchRecommendRulesRequest(\n  \"<YOUR_INDEX_NAME>\", recommend.RecommendModels(\"related-products\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\",\n)\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := recommend.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.RecommendClient;\nimport com.algolia.model.recommend.*;"
    },
    "batchRecommendRules": {
      "default": "client.batchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");"
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");"
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");"
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");"
    },
    "deleteRecommendRule": {
      "default": "client.deleteRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendRule": {
      "default": "client.getRecommendRule(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendStatus": {
      "default": "client.getRecommendStatus(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS, 12345L);"
    },
    "getRecommendations": {
      "default": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      Arrays.asList(\n        new RelatedQuery()\n          .setIndexName(\"<YOUR_INDEX_NAME>\")\n          .setObjectID(\"objectID\")\n          .setModel(RelatedModel.RELATED_PRODUCTS)\n          .setThreshold(42.1)\n      )\n    )\n);"
    },
    "searchRecommendRules": {
      "default": "client.searchRecommendRules(\"<YOUR_INDEX_NAME>\", RecommendModels.RELATED_PRODUCTS);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "RecommendClient client = new RecommendClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { recommendClient } from '@algolia/recommend';"
    },
    "batchRecommendRules": {
      "default": "const response = await client.batchRecommendRules({ indexName: 'indexName', model: 'related-products' });"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });"
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });"
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });"
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });"
    },
    "deleteRecommendRule": {
      "default": "const response = await client.deleteRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});"
    },
    "getRecommendRule": {
      "default": "const response = await client.getRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});"
    },
    "getRecommendStatus": {
      "default": "const response = await client.getRecommendStatus({\n  indexName: 'indexName',\n  model: 'related-products',\n  taskID: 12345,\n});"
    },
    "getRecommendations": {
      "default": "const response = await client.getRecommendations({\n  requests: [{ indexName: 'indexName', objectID: 'objectID', model: 'related-products', threshold: 42.1 }],\n});"
    },
    "searchRecommendRules": {
      "default": "const response = await client.searchRecommendRules({ indexName: 'indexName', model: 'related-products' });"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "//\nconst client = recommendClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.RecommendClient"
    },
    "batchRecommendRules": {
      "default": "var response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)"
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)"
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)"
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)"
    },
    "deleteRecommendRule": {
      "default": "var response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)"
    },
    "getRecommendRule": {
      "default": "var response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)"
    },
    "getRecommendStatus": {
      "default": "var response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  taskID = 12345L,\n)"
    },
    "getRecommendations": {
      "default": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 42.1,\n      ),\n    ),\n  ),\n)"
    },
    "searchRecommendRules": {
      "default": "var response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\RecommendClient;"
    },
    "batchRecommendRules": {
      "default": "$response = $client->batchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);"
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);"
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);"
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);"
    },
    "deleteRecommendRule": {
      "default": "$response = $client->deleteRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);"
    },
    "getRecommendRule": {
      "default": "$response = $client->getRecommendRule(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    'objectID',\n);"
    },
    "getRecommendStatus": {
      "default": "$response = $client->getRecommendStatus(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n    12345,\n);"
    },
    "getRecommendations": {
      "default": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => '<YOUR_INDEX_NAME>',\n            'objectID' => 'objectID',\n            'model' => 'related-products',\n            'threshold' => 42.1,\n        ],\n    ],\n    ],\n);"
    },
    "searchRecommendRules": {
      "default": "$response = $client->searchRecommendRules(\n    '<YOUR_INDEX_NAME>',\n    'related-products',\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = RecommendClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.recommend.client import RecommendClientSync"
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\n    path=\"test/minimal\",\n)"
    },
    "customGet": {
      "default": "response = client.custom_get(\n    path=\"test/minimal\",\n)"
    },
    "customPost": {
      "default": "response = client.custom_post(\n    path=\"test/minimal\",\n)"
    },
    "customPut": {
      "default": "response = client.custom_put(\n    path=\"test/minimal\",\n)"
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)"
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)"
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n    task_id=12345,\n)"
    },
    "getRecommendations": {
      "default": "response = client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"<YOUR_INDEX_NAME>\",\n                \"objectID\": \"objectID\",\n                \"model\": \"related-products\",\n                \"threshold\": 42.1,\n            },\n        ],\n    },\n)"
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\n    index_name=\"<YOUR_INDEX_NAME>\",\n    model=\"related-products\",\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.\nclient = RecommendClientSync(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "batchRecommendRules": {
      "default": "response = client.batch_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")"
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")"
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")"
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")"
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")"
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\"<YOUR_INDEX_NAME>\", \"related-products\", \"objectID\")"
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\"<YOUR_INDEX_NAME>\", \"related-products\", 12345)"
    },
    "getRecommendations": {
      "default": "response = client.get_recommendations(\n  GetRecommendationsParams.new(\n    requests: [\n      RelatedQuery.new(\n        index_name: \"<YOUR_INDEX_NAME>\",\n        object_id: \"objectID\",\n        model: \"related-products\",\n        threshold: 42.1\n      )\n    ]\n  )\n)"
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\"<YOUR_INDEX_NAME>\", \"related-products\")"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::RecommendClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.RecommendClient"
    },
    "batchRecommendRules": {
      "default": "val response = client.batchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)"
    },
    "deleteRecommendRule": {
      "default": "val response = client.deleteRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)"
    },
    "getRecommendRule": {
      "default": "val response = client.getRecommendRule(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)"
    },
    "getRecommendStatus": {
      "default": "val response = client.getRecommendStatus(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\"),\n  taskID = 12345L\n)"
    },
    "getRecommendations": {
      "default": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"<YOUR_INDEX_NAME>\",\n        objectID = \"objectID\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 42.1\n      )\n    )\n  )\n)"
    },
    "searchRecommendRules": {
      "default": "val response = client.searchRecommendRules(\n  indexName = \"<YOUR_INDEX_NAME>\",\n  model = RecommendModels.withName(\"related-products\")\n)"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "swift": {
    "import": {
      "default": "import Recommend"
    },
    "batchRecommendRules": {
      "default": "let response = try await client.batchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")"
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")"
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")"
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")"
    },
    "deleteRecommendRule": {
      "default": "let response = try await client.deleteRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendRule": {
      "default": "let response = try await client.getRecommendRule(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendStatus": {
      "default": "let response = try await client.getRecommendStatus(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts,\n    taskID: Int64(12345)\n)"
    },
    "getRecommendations": {
      "default": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"<YOUR_INDEX_NAME>\",\n                threshold: 42.1,\n                model: RelatedModel.relatedProducts,\n                objectID: \"objectID\"\n            )),\n    ]))"
    },
    "searchRecommendRules": {
      "default": "let response = try await client.searchRecommendRules(\n    indexName: \"<YOUR_INDEX_NAME>\",\n    model: RecommendModels.relatedProducts\n)"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try RecommendClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\")"
    }
  }
}