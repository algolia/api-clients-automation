openapi: 3.0.2
info:
  title: A/B Testing API
  description: >
    The Algolia A/B Testing API lets you manage your Algolia A/B tests to
    optimize your search experience.


    ## Base URLs


    The base URLs for requests to the A/B testing API are:


    - `https://analytics.us.algolia.com`

    - `https://analytics.de.algolia.com`

    - `https://analytics.algolia.com` (routes requests to the closest of the
    above servers, based on your geographical location)


    Use the URL that matches your [analytics
    region](https://dashboard.algolia.com/account/infrastructure/analytics).


    **All requests must use HTTPS.**


    ## Availability and authentication


    Access to the A/B testing API is available as part of the [Premium or
    Elevate plans](https://www.algolia.com/pricing).


    To authenticate your API requests, add these headers:


    - `x-algolia-application-id`. Your Algolia application ID.

    - `x-algolia-api-key`. An API key with the necessary permissions to make the
    request.
      The required access control list (ACL) to make a request is listed in each endpoint's reference.

    You can find your application ID and API key in the [Algolia
    dashboard](https://dashboard.algolia.com/account).


    ## Rate limits


    You can make up to **100 requests per minute per app** to the A/B testing
    API.

    The response includes headers with information about the limits.


    ## Parameters


    Query parameters must be
    [URL-encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding).

    Non-ASCII characters must be UTF-8 encoded.

    Plus characters (`+`) are interpreted as spaces.


    ## Response status and errors


    The A/B testing API returns JSON responses.

    Since JSON doesn't guarantee any specific ordering, don't rely on the order
    of attributes in the API response.


    Successful responses return a `2xx` status. Client errors return a `4xx`
    status. Server errors are indicated by a `5xx` status.

    Error responses have a `message` property with more information.


    ## Version


    The current version of the A/B Testing API is version 3, as indicated by the
    `/3/` in each endpoint's URL.
  version: 3.0.0
servers:
  - url: https://analytics.{region}.algolia.com
    variables:
      region:
        enum:
          - us
          - de
        default: us
  - url: https://analytics.algolia.com
security:
  - appId: []
    apiKey: []
tags:
  - name: abtest
    x-displayName: A/B testing
    description: >
      Manage A/B tests.


      A/B tests are configurations one or more indices, usually your production
      index and an index with different settings that you want to test.
externalDocs:
  url: https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing
  description: A/B testing.
paths:
  /{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.CustomGetAsync("test/minimal");
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.customGet(
              path: "test/minimal",
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomGet(client.NewApiCustomGetRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.customGet("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.customGet({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.customGet(path = "test/minimal")


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customGet(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_get(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_get("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.customGet[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customGet(path: "test/minimal")

            // >LOG
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.CustomPostAsync("test/minimal");
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.customPost(
              path: "test/minimal",
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPost(client.NewApiCustomPostRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.customPost("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.customPost({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.customPost(path = "test/minimal")


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customPost(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_post(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_post("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.customPost[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customPost(path: "test/minimal")

            // >LOG
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.CustomPutAsync("test/minimal");
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.customPut(
              path: "test/minimal",
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPut(client.NewApiCustomPutRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.customPut("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.customPut({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.customPut(path = "test/minimal")


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customPut(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_put(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_put("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.customPut[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customPut(path: "test/minimal")

            // >LOG
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.CustomDeleteAsync("test/minimal");
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.customDelete(
              path: "test/minimal",
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CustomDelete(client.NewApiCustomDeleteRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.customDelete("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.customDelete({ path: 'test/minimal'
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.customDelete(path = "test/minimal")


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customDelete(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_delete(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_delete("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.customDelete[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customDelete(path: "test/minimal")

            // >LOG
  /3/abtests:
    post:
      tags:
        - abtest
      operationId: addABTests
      x-acl:
        - editSettings
      summary: Create an A/B test
      description: Creates a new A/B test.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: addABTestsRequest
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/name'
                variants:
                  type: array
                  description: A/B test variants.
                  minItems: 2
                  items:
                    $ref: '#/components/schemas/AddABTestsVariant'
                metrics:
                  type: array
                  description: >-
                    A/B test metrics involved in the test. Only these metrics
                    will be considered when calculating results.
                  items:
                    $ref: '#/components/schemas/createMetric'
                configuration:
                  $ref: '#/components/schemas/ABTestConfiguration'
                endAt:
                  $ref: '#/components/schemas/endAt'
              required:
                - name
                - variants
                - metrics
                - endAt
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.AddABTestsAsync(
              new AddABTestsRequest
              {
                EndAt = "2022-12-31T00:00:00.000Z",
                Name = "myABTest",
                Metrics = new List<CreateMetric> { new CreateMetric { Name = "myMetric" } },
                Variants = new List<AddABTestsVariant>
                {
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 30 }),
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
                },
              }
            );
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.addABTests(
              addABTestsRequest: AddABTestsRequest(
                endAt: "2022-12-31T00:00:00.000Z",
                name: "myABTest",
                metrics: [
                  CreateMetric(
                    name: "myMetric",
                  ),
                ],
                variants: [
                  AbTestsVariant(
                    index: "AB_TEST_1",
                    trafficPercentage: 30,
                  ),
                  AbTestsVariant(
                    index: "AB_TEST_2",
                    trafficPercentage: 50,
                  ),
                ],
              ),
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.AddABTests(client.NewApiAddABTestsRequest(

              abtestingV3.NewEmptyAddABTestsRequest().SetEndAt("2022-12-31T00:00:00.000Z").SetName("myABTest").SetMetrics(
                []abtestingV3.CreateMetric{*abtestingV3.NewEmptyCreateMetric().SetName("myMetric")}).SetVariants(
                []abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
                  abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(30)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
                  abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.addABTests(
              new AddABTestsRequest()
                .setEndAt("2022-12-31T00:00:00.000Z")
                .setName("myABTest")
                .setMetrics(Arrays.asList(new CreateMetric().setName("myMetric")))
                .setVariants(
                  Arrays.asList(
                    new AbTestsVariant().setIndex("AB_TEST_1").setTrafficPercentage(30),
                    new AbTestsVariant().setIndex("AB_TEST_2").setTrafficPercentage(50)
                  )
                )
            );

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.addABTests({
              endAt: '2022-12-31T00:00:00.000Z',
              name: 'myABTest',
              metrics: [{ name: 'myMetric' }],
              variants: [
                { index: 'AB_TEST_1', trafficPercentage: 30 },
                { index: 'AB_TEST_2', trafficPercentage: 50 },
              ],
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.addABTests(
              addABTestsRequest = AddABTestsRequest(
                endAt = "2022-12-31T00:00:00.000Z",
                name = "myABTest",
                metrics = listOf(
                  CreateMetric(
                    name = "myMetric",
                  ),
                ),
                variants = listOf(
                  AbTestsVariant(
                    index = "AB_TEST_1",
                    trafficPercentage = 30,
                  ),
                  AbTestsVariant(
                    index = "AB_TEST_2",
                    trafficPercentage = 50,
                  ),
                ),
              ),
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->addABTests(
                ['endAt' => '2022-12-31T00:00:00.000Z',
                    'name' => 'myABTest',
                    'metrics' => [
                        ['name' => 'myMetric',
                        ],
                    ],
                    'variants' => [
                        ['index' => 'AB_TEST_1',
                            'trafficPercentage' => 30,
                        ],

                        ['index' => 'AB_TEST_2',
                            'trafficPercentage' => 50,
                        ],
                    ],
                ],
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.add_ab_tests(
                add_ab_tests_request={
                    "endAt": "2022-12-31T00:00:00.000Z",
                    "name": "myABTest",
                    "metrics": [
                        {
                            "name": "myMetric",
                        },
                    ],
                    "variants": [
                        {
                            "index": "AB_TEST_1",
                            "trafficPercentage": 30,
                        },
                        {
                            "index": "AB_TEST_2",
                            "trafficPercentage": 50,
                        },
                    ],
                },
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.add_ab_tests(
              Algolia::AbtestingV3::AddABTestsRequest.new(
                end_at: "2022-12-31T00:00:00.000Z",
                name: "myABTest",
                metrics: [Algolia::AbtestingV3::CreateMetric.new(name: "myMetric")],
                variants: [
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_1", traffic_percentage: 30),
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_2", traffic_percentage: 50)
                ]
              )
            )


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.addABTests(
                addABTestsRequest = AddABTestsRequest(
                  endAt = "2022-12-31T00:00:00.000Z",
                  name = "myABTest",
                  metrics = Seq(
                    CreateMetric(
                      name = "myMetric"
                    )
                  ),
                  variants = Seq(
                    AbTestsVariant(
                      index = "AB_TEST_1",
                      trafficPercentage = 30
                    ),
                    AbTestsVariant(
                      index = "AB_TEST_2",
                      trafficPercentage = 50
                    )
                  )
                )
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.addABTests(addABTestsRequest:
            AbtestingV3AddABTestsRequest(
                name: "myABTest",
                variants: [
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_1",
                        trafficPercentage: 30
                    )),
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_2",
                        trafficPercentage: 50
                    )),
                ],
                metrics: [CreateMetric(name: "myMetric")],
                endAt: "2022-12-31T00:00:00.000Z"
            ))

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://analytics.us.algolia.com/3/abtests \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"name":"Custom ranking sales rank test","variants":[{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"},{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"}],"metrics":[[{"name":"revenue","dimension":"USD"},{"name":"conversionRate"},{"name":"clickThroughRate"},{"name":"trackedSearchCount"}]],"configuration":{"minimumDetectableEffect":{"size":0,"metric":"addToCartRate"},"filters":[{"domain":"abtesting","name":"isOutlier","trackEffects":true,"includes":true}],"errorCorrection":"bonferroni"},"endAt":"2023-06-17T00:00:00Z"}'
    get:
      tags:
        - abtest
      operationId: listABTests
      x-acl:
        - analytics
      summary: List all A/B tests
      description: Lists all A/B tests you configured for this application.
      parameters:
        - name: offset
          in: query
          description: Position of the first item to return.
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: Number of items to return.
          required: false
          schema:
            type: integer
            default: 10
        - name: indexPrefix
          in: query
          description: >-
            Index name prefix. Only A/B tests for indices starting with this
            string are included in the response.
          example: dev_
          schema:
            type: string
        - name: indexSuffix
          in: query
          description: >-
            Index name suffix. Only A/B tests for indices ending with this
            string are included in the response.
          example: _development
          schema:
            type: string
        - name: direction
          in: query
          description: >
            Sort order for A/B tests by start date.

            Use 'asc' for ascending or 'desc' for descending. Active A/B tests
            are always listed first.
          example: desc
          schema:
            $ref: '#/components/schemas/direction'
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                title: listABTestsResponse
                type: object
                additionalProperties: false
                properties:
                  abtests:
                    $ref: '#/components/schemas/ABTests'
                  count:
                    type: integer
                    description: Number of A/B tests.
                    example: 10
                  total:
                    type: integer
                    description: Number of retrievable A/B tests.
                    example: 12
                required:
                  - abtests
                  - count
                  - total
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.ListABTestsAsync();
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.listABTests();
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListABTests(client.NewApiListABTestsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.listABTests();

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.listABTests();


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.listABTests()


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listABTests();


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_ab_tests()


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_ab_tests


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.listABTests(
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listABTests()

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://analytics.us.algolia.com/3/abtests?offset=0&limit=10&indexPrefix=dev_&indexSuffix=_development&direction=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /3/abtests/{id}:
    get:
      tags:
        - abtest
      operationId: getABTest
      x-acl:
        - analytics
      summary: Retrieve A/B test details
      description: Retrieves the details for an A/B test by its ID.
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.GetABTestAsync(42);
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.getABTest(
              id: 42,
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetABTest(client.NewApiGetABTestRequest(
              42))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.getABTest(42);

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.getABTest({ id: 42 });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.getABTest(id = 42)


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getABTest(
                42,
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_ab_test(
                id=42,
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_ab_test(42)


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.getABTest(
                id = 42
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getABTest(id: 42)

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://analytics.us.algolia.com/3/abtests/224 \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    delete:
      tags:
        - abtest
      operationId: deleteABTest
      x-acl:
        - editSettings
      summary: Delete an A/B test
      description: Deletes an A/B test by its ID.
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.DeleteABTestAsync(42);
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.deleteABTest(
              id: 42,
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteABTest(client.NewApiDeleteABTestRequest(
              42))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.deleteABTest(42);

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.deleteABTest({ id: 42 });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.deleteABTest(id = 42)


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteABTest(
                42,
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_ab_test(
                id=42,
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.delete_ab_test(42)


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.deleteABTest(
                id = 42
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.deleteABTest(id: 42)

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://analytics.us.algolia.com/3/abtests/224 \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /3/abtests/{id}/stop:
    post:
      tags:
        - abtest
      operationId: stopABTest
      x-acl:
        - editSettings
      summary: Stop an A/B test
      description: |
        Stops an A/B test by its ID.

        You can't restart stopped A/B tests.
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.StopABTestAsync(42);
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.stopABTest(
              id: 42,
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.StopABTest(client.NewApiStopABTestRequest(
              42))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.stopABTest(42);

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.stopABTest({ id: 42 });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.stopABTest(id = 42)


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->stopABTest(
                42,
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.stop_ab_test(
                id=42,
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.stop_ab_test(42)


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.stopABTest(
                id = 42
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.stopABTest(id: 42)

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://analytics.us.algolia.com/3/abtests/224/stop \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /3/abtests/schedule:
    post:
      tags:
        - abtest
      operationId: scheduleABTest
      x-acl:
        - editSettings
      summary: Schedule an A/B test
      description: |
        Schedule an A/B test to be started at a later time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: scheduleABTestsRequest
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/name'
                variants:
                  type: array
                  description: A/B test variants.
                  minItems: 2
                  items:
                    $ref: '#/components/schemas/AddABTestsVariant'
                metrics:
                  type: array
                  description: >-
                    A/B test metrics involved in the test. Only these metrics
                    will be considered when calculating results.
                  items:
                    $ref: '#/components/schemas/createMetric'
                configuration:
                  $ref: '#/components/schemas/ABTestConfiguration'
                scheduledAt:
                  $ref: '#/components/schemas/scheduledAt'
                endAt:
                  $ref: '#/components/schemas/endAt'
              required:
                - name
                - variants
                - metrics
                - scheduledAt
                - endAt
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.ScheduleABTestAsync(
              new ScheduleABTestsRequest
              {
                EndAt = "2022-12-31T00:00:00.000Z",
                ScheduledAt = "2022-11-31T00:00:00.000Z",
                Name = "myABTest",
                Metrics = new List<CreateMetric> { new CreateMetric { Name = "myMetric" } },
                Variants = new List<AddABTestsVariant>
                {
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 30 }),
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
                },
              }
            );
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.scheduleABTest(
              scheduleABTestsRequest: ScheduleABTestsRequest(
                endAt: "2022-12-31T00:00:00.000Z",
                scheduledAt: "2022-11-31T00:00:00.000Z",
                name: "myABTest",
                metrics: [
                  CreateMetric(
                    name: "myMetric",
                  ),
                ],
                variants: [
                  AbTestsVariant(
                    index: "AB_TEST_1",
                    trafficPercentage: 30,
                  ),
                  AbTestsVariant(
                    index: "AB_TEST_2",
                    trafficPercentage: 50,
                  ),
                ],
              ),
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ScheduleABTest(client.NewApiScheduleABTestRequest(
              abtestingV3.NewEmptyScheduleABTestsRequest().
                SetEndAt("2022-12-31T00:00:00.000Z").
                SetScheduledAt("2022-11-31T00:00:00.000Z").
                SetName("myABTest").
                SetMetrics(
                  []abtestingV3.CreateMetric{*abtestingV3.NewEmptyCreateMetric().SetName("myMetric")}).
                SetVariants(
                  []abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
                    abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(30)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
                    abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.scheduleABTest(
              new ScheduleABTestsRequest()
                .setEndAt("2022-12-31T00:00:00.000Z")
                .setScheduledAt("2022-11-31T00:00:00.000Z")
                .setName("myABTest")
                .setMetrics(Arrays.asList(new CreateMetric().setName("myMetric")))
                .setVariants(
                  Arrays.asList(
                    new AbTestsVariant().setIndex("AB_TEST_1").setTrafficPercentage(30),
                    new AbTestsVariant().setIndex("AB_TEST_2").setTrafficPercentage(50)
                  )
                )
            );

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.scheduleABTest({
              endAt: '2022-12-31T00:00:00.000Z',
              scheduledAt: '2022-11-31T00:00:00.000Z',
              name: 'myABTest',
              metrics: [{ name: 'myMetric' }],
              variants: [
                { index: 'AB_TEST_1', trafficPercentage: 30 },
                { index: 'AB_TEST_2', trafficPercentage: 50 },
              ],
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.scheduleABTest(
              scheduleABTestsRequest = ScheduleABTestsRequest(
                endAt = "2022-12-31T00:00:00.000Z",
                scheduledAt = "2022-11-31T00:00:00.000Z",
                name = "myABTest",
                metrics = listOf(
                  CreateMetric(
                    name = "myMetric",
                  ),
                ),
                variants = listOf(
                  AbTestsVariant(
                    index = "AB_TEST_1",
                    trafficPercentage = 30,
                  ),
                  AbTestsVariant(
                    index = "AB_TEST_2",
                    trafficPercentage = 50,
                  ),
                ),
              ),
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->scheduleABTest(
                ['endAt' => '2022-12-31T00:00:00.000Z',
                    'scheduledAt' => '2022-11-31T00:00:00.000Z',
                    'name' => 'myABTest',
                    'metrics' => [
                        ['name' => 'myMetric',
                        ],
                    ],
                    'variants' => [
                        ['index' => 'AB_TEST_1',
                            'trafficPercentage' => 30,
                        ],

                        ['index' => 'AB_TEST_2',
                            'trafficPercentage' => 50,
                        ],
                    ],
                ],
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.schedule_ab_test(
                schedule_ab_tests_request={
                    "endAt": "2022-12-31T00:00:00.000Z",
                    "scheduledAt": "2022-11-31T00:00:00.000Z",
                    "name": "myABTest",
                    "metrics": [
                        {
                            "name": "myMetric",
                        },
                    ],
                    "variants": [
                        {
                            "index": "AB_TEST_1",
                            "trafficPercentage": 30,
                        },
                        {
                            "index": "AB_TEST_2",
                            "trafficPercentage": 50,
                        },
                    ],
                },
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.schedule_ab_test(
              Algolia::AbtestingV3::ScheduleABTestsRequest.new(
                end_at: "2022-12-31T00:00:00.000Z",
                scheduled_at: "2022-11-31T00:00:00.000Z",
                name: "myABTest",
                metrics: [Algolia::AbtestingV3::CreateMetric.new(name: "myMetric")],
                variants: [
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_1", traffic_percentage: 30),
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_2", traffic_percentage: 50)
                ]
              )
            )


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.scheduleABTest(
                scheduleABTestsRequest = ScheduleABTestsRequest(
                  endAt = "2022-12-31T00:00:00.000Z",
                  scheduledAt = "2022-11-31T00:00:00.000Z",
                  name = "myABTest",
                  metrics = Seq(
                    CreateMetric(
                      name = "myMetric"
                    )
                  ),
                  variants = Seq(
                    AbTestsVariant(
                      index = "AB_TEST_1",
                      trafficPercentage = 30
                    ),
                    AbTestsVariant(
                      index = "AB_TEST_2",
                      trafficPercentage = 50
                    )
                  )
                )
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.scheduleABTest(scheduleABTestsRequest:
            AbtestingV3ScheduleABTestsRequest(
                name: "myABTest",
                variants: [
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_1",
                        trafficPercentage: 30
                    )),
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_2",
                        trafficPercentage: 50
                    )),
                ],
                metrics: [CreateMetric(name: "myMetric")],
                scheduledAt: "2022-11-31T00:00:00.000Z",
                endAt: "2022-12-31T00:00:00.000Z"
            ))

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://analytics.us.algolia.com/3/abtests/schedule \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"name":"Custom ranking sales rank test","variants":[{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"},{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"}],"metrics":[[{"name":"revenue","dimension":"USD"},{"name":"conversionRate"},{"name":"clickThroughRate"},{"name":"trackedSearchCount"}]],"configuration":{"minimumDetectableEffect":{"size":0,"metric":"addToCartRate"},"filters":[{"domain":"abtesting","name":"isOutlier","trackEffects":true,"includes":true}],"errorCorrection":"bonferroni"},"scheduledAt":"2023-06-15T15:06:44.400601Z","endAt":"2023-06-17T00:00:00Z"}'
  /3/abtests/estimate:
    post:
      tags:
        - abtest
      operationId: estimateABTest
      x-acl:
        - analytics
      summary: Estimate the sample size and duration of an A/B test
      description: >-
        Given the traffic percentage and the expected effect size, this endpoint
        estimates the sample size and duration of an A/B test based on
        historical traffic.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: estimateABTestRequest
              type: object
              additionalProperties: false
              properties:
                configuration:
                  title: estimateConfiguration
                  type: object
                  description: >-
                    A/B test configuration for estimating the sample size and
                    duration using minimum detectable effect.
                  properties:
                    filters:
                      $ref: '#/components/schemas/MetricsFilters'
                    minimumDetectableEffect:
                      $ref: '#/components/schemas/MinimumDetectableEffect'
                  required:
                    - minimumDetectableEffect
                variants:
                  type: array
                  description: A/B test variants.
                  minItems: 2
                  items:
                    $ref: '#/components/schemas/AddABTestsVariant'
              required:
                - configuration
                - variants
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.EstimateABTestAsync(
              new EstimateABTestRequest
              {
                Configuration = new EstimateConfiguration
                {
                  MinimumDetectableEffect = new MinimumDetectableEffect
                  {
                    Size = 0.03,
                    Metric = Enum.Parse<EffectMetric>("ConversionRate"),
                  },
                },
                Variants = new List<AddABTestsVariant>
                {
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 50 }),
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
                },
              }
            );
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.estimateABTest(
              estimateABTestRequest: EstimateABTestRequest(
                configuration: EstimateConfiguration(
                  minimumDetectableEffect: MinimumDetectableEffect(
                    size: 0.03,
                    metric: EffectMetric.fromJson("conversionRate"),
                  ),
                ),
                variants: [
                  AbTestsVariant(
                    index: "AB_TEST_1",
                    trafficPercentage: 50,
                  ),
                  AbTestsVariant(
                    index: "AB_TEST_2",
                    trafficPercentage: 50,
                  ),
                ],
              ),
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.EstimateABTest(client.NewApiEstimateABTestRequest(

              abtestingV3.NewEmptyEstimateABTestRequest().SetConfiguration(
                abtestingV3.NewEmptyEstimateConfiguration().SetMinimumDetectableEffect(
                  abtestingV3.NewEmptyMinimumDetectableEffect().SetSize(0.03).SetMetric(abtestingV3.EffectMetric("conversionRate")))).SetVariants(
                []abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
                  abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(50)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
                  abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.estimateABTest(
              new EstimateABTestRequest()
                .setConfiguration(
                  new EstimateConfiguration().setMinimumDetectableEffect(
                    new MinimumDetectableEffect().setSize(0.03).setMetric(EffectMetric.CONVERSION_RATE)
                  )
                )
                .setVariants(
                  Arrays.asList(
                    new AbTestsVariant().setIndex("AB_TEST_1").setTrafficPercentage(50),
                    new AbTestsVariant().setIndex("AB_TEST_2").setTrafficPercentage(50)
                  )
                )
            );

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.estimateABTest({
              configuration: { minimumDetectableEffect: { size: 0.03, metric: 'conversionRate' } },
              variants: [
                { index: 'AB_TEST_1', trafficPercentage: 50 },
                { index: 'AB_TEST_2', trafficPercentage: 50 },
              ],
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.estimateABTest(
              estimateABTestRequest = EstimateABTestRequest(
                configuration = EstimateConfiguration(
                  minimumDetectableEffect = MinimumDetectableEffect(
                    size = 0.03,
                    metric = EffectMetric.entries.first { it.value == "conversionRate" },
                  ),
                ),
                variants = listOf(
                  AbTestsVariant(
                    index = "AB_TEST_1",
                    trafficPercentage = 50,
                  ),
                  AbTestsVariant(
                    index = "AB_TEST_2",
                    trafficPercentage = 50,
                  ),
                ),
              ),
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->estimateABTest(
                ['configuration' => ['minimumDetectableEffect' => ['size' => 0.03,
                    'metric' => 'conversionRate',
                ],
                ],
                    'variants' => [
                        ['index' => 'AB_TEST_1',
                            'trafficPercentage' => 50,
                        ],

                        ['index' => 'AB_TEST_2',
                            'trafficPercentage' => 50,
                        ],
                    ],
                ],
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.estimate_ab_test(
                estimate_ab_test_request={
                    "configuration": {
                        "minimumDetectableEffect": {
                            "size": 0.03,
                            "metric": "conversionRate",
                        },
                    },
                    "variants": [
                        {
                            "index": "AB_TEST_1",
                            "trafficPercentage": 50,
                        },
                        {
                            "index": "AB_TEST_2",
                            "trafficPercentage": 50,
                        },
                    ],
                },
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.estimate_ab_test(
              Algolia::AbtestingV3::EstimateABTestRequest.new(
                configuration: Algolia::AbtestingV3::EstimateConfiguration.new(
                  minimum_detectable_effect: Algolia::AbtestingV3::MinimumDetectableEffect.new(
                    size: 0.03,
                    metric: "conversionRate"
                  )
                ),
                variants: [
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_1", traffic_percentage: 50),
                  Algolia::AbtestingV3::AbTestsVariant.new(index: "AB_TEST_2", traffic_percentage: 50)
                ]
              )
            )


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.estimateABTest(
                estimateABTestRequest = EstimateABTestRequest(
                  configuration = EstimateConfiguration(
                    minimumDetectableEffect = MinimumDetectableEffect(
                      size = 0.03,
                      metric = EffectMetric.withName("conversionRate")
                    )
                  ),
                  variants = Seq(
                    AbTestsVariant(
                      index = "AB_TEST_1",
                      trafficPercentage = 50
                    ),
                    AbTestsVariant(
                      index = "AB_TEST_2",
                      trafficPercentage = 50
                    )
                  )
                )
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.estimateABTest(estimateABTestRequest:
            AbtestingV3EstimateABTestRequest(
                configuration: AbtestingV3EstimateConfiguration(minimumDetectableEffect: AbtestingV3MinimumDetectableEffect(
                    size: 0.03,
                    metric: AbtestingV3EffectMetric.conversionRate
                )),
                variants: [
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_1",
                        trafficPercentage: 50
                    )),
                    AbtestingV3AddABTestsVariant.abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant(
                        index: "AB_TEST_2",
                        trafficPercentage: 50
                    )),
                ]
            ))

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://analytics.us.algolia.com/3/abtests/estimate \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"configuration":{"filters":[{"domain":"abtesting","name":"isOutlier","trackEffects":true,"includes":true}],"minimumDetectableEffect":{"size":0,"metric":"addToCartRate"}},"variants":[{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"},{"index":"delcourt_production","trafficPercentage":60,"description":"Current production index"}]}'
  /3/abtests/{id}/timeseries:
    get:
      tags:
        - abtest
      operationId: getTimeseries
      x-acl:
        - analytics
      summary: Retrieve timeseries of an A/B test
      description: Retrieves timeseries for an A/B test by its ID.
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - in: query
          name: metric
          description: >-
            List of metrics to retrieve. If not specified, all metrics are
            returned.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MetricName'
      responses:
        '200':
          description: OK
          headers:
            x-ratelimit-limit:
              $ref: '#/components/headers/x-ratelimit-limit'
            x-ratelimit-remaining:
              $ref: '#/components/headers/x-ratelimit-remaining'
            x-ratelimit-reset:
              $ref: '#/components/headers/x-ratelimit-reset'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeseries'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new AbtestingV3Client(
              new AbtestingV3Config(
                "ALGOLIA_APPLICATION_ID",
                "ALGOLIA_API_KEY",
                "ALGOLIA_APPLICATION_REGION"
              )
            );

            // Call the API
            var response = await client.GetTimeseriesAsync(42);
            // >LOG
        - lang: dart
          label: Dart
          source: |
            // Initialize the client
            final client = AbtestingV3Client(
                appId: 'ALGOLIA_APPLICATION_ID',
                apiKey: 'ALGOLIA_API_KEY',
                region: 'ALGOLIA_APPLICATION_REGION');

            // Call the API
            final response = await client.getTimeseries(
              id: 42,
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client with your application region, eg.
            abtestingV3.ALGOLIA_APPLICATION_REGION

            client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", abtestingV3.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetTimeseries(client.NewApiGetTimeseriesRequest(
              42))
            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            AbtestingV3Client client = new
            AbtestingV3Client("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            client.getTimeseries(42);

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initAbtestingV3({ region: 'us' });


            // Call the API

            const response = await client.getTimeseries({ id: 42 });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingV3Client(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY", region = "ALGOLIA_APPLICATION_REGION")


            // Call the API

            var response = client.getTimeseries(id = 42)


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = AbtestingV3Client::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getTimeseries(
                42,
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use AbtestingV3Client instead,
            which exposes the exact same methods.

            client = AbtestingV3ClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_timeseries(
                id=42,
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingV3Client.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_timeseries(42)


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: |
            // Initialize the client
            val client = AbtestingV3Client(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = Option("ALGOLIA_APPLICATION_REGION")
            )

            // Call the API
            val response = Await.result(
              client.getTimeseries(
                id = 42
              ),
              Duration(100, "sec")
            )
            // >LOG
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try AbtestingV3Client(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getTimeseries(id: 42)

            // >LOG
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://analytics.us.algolia.com/3/abtests/224/timeseries?startDate=2022-09-19&endDate=2023-01-21&metric=search_count' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: x-algolia-application-id
      description: Your Algolia application ID.
    apiKey:
      type: apiKey
      in: header
      name: x-algolia-api-key
      description: >
        Your Algolia API key with the necessary permissions to make the request.

        Permissions are controlled through access control lists (ACL) and access
        restrictions.

        The required ACL to make a request is listed in each endpoint's
        reference.
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, for example `1/newFeature`.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    ID:
      in: path
      name: id
      description: Unique A/B test identifier.
      required: true
      schema:
        $ref: '#/components/schemas/abTestID'
    StartDate:
      in: query
      name: startDate
      description: Start date of the period to analyze, in `YYYY-MM-DD` format.
      schema:
        type: string
        example: '2022-09-19'
    EndDate:
      in: query
      name: endDate
      description: End date of the period to analyze, in `YYYY-MM-DD` format.
      schema:
        type: string
        example: '2023-01-21'
  schemas:
    ErrorBase:
      description: Error.
      type: object
      x-keep-model: true
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    direction:
      type: string
      description: |
        Sort order for A/B tests by start date.
        Use 'asc' for ascending or 'desc' for descending.
        Active A/B tests are always listed first.
      enum:
        - asc
        - desc
      example: desc
    abTestID:
      type: integer
      description: Unique A/B test identifier.
      example: 224
    updatedAt:
      type: string
      description: Date and time when the A/B test was last updated, in RFC 3339 format.
      example: '2023-06-15T15:06:44.400601Z'
    createdAt:
      type: string
      description: Date and time when the A/B test was created, in RFC 3339 format.
      example: '2023-06-15T15:06:04.249906Z'
    endAt:
      type: string
      description: End date and time of the A/B test, in RFC 3339 format.
      example: '2023-06-17T00:00:00Z'
    stoppedAt:
      type: string
      description: Date and time when the A/B test was stopped, in RFC 3339 format.
      example: '2023-06-15T15:06:44.400601Z'
      nullable: true
    name:
      type: string
      description: A/B test name.
      example: Custom ranking sales rank test
    Status:
      type: string
      description: >
        A/B test status.


        - `active`. The A/B test is live and search traffic is split between the
        two variants.

        - `stopped`. You stopped the A/B test. The A/B test data is still
        available for analysis.

        - `expired`. The A/B test was automatically stopped after reaching its
        end date.

        - `failed`. Creating the A/B test failed.
      example: active
      enum:
        - active
        - stopped
        - expired
        - failed
    description:
      type: string
      description: Description for this variant.
      example: Current production index
    index:
      type: string
      description: Index name of the A/B test variant (case-sensitive).
      example: delcourt_production
    trafficPercentage:
      type: integer
      description: Percentage of search requests each variant receives.
      minimum: 1
      maximum: 99
      example: 60
    metricMetadata:
      type: object
      description: Metric specific metadata.
      properties:
        winsorizedValue:
          type: number
          format: double
          description: >
            Only present in case the metric is 'revenue'.

            It is the amount exceeding the 95th percentile of global revenue
            transactions involved in the AB Test. This amount is not considered
            when calculating statistical significance.

            It is tied to a per revenue-currency pair contrary to other

            global filter effects (such as outliers and empty search count).
        mean:
          type: number
          format: double
          description: Mean value for this metric.
          example: 53.7
      example:
        winsorizedValue: 888.8
        mean: 53.7
    metricResult:
      type: object
      properties:
        name:
          type: string
        updatedAt:
          type: string
          description: Date and time when the metric was last updated, in RFC 3339 format.
        value:
          type: number
          format: double
        valueCIHigh:
          type: number
          format: double
          description: >
            The upper bound of the 95% confidence interval for the metric value.
            The confidence interval is calculated using

            either the relative ratio or relative difference between the metric
            values for the control and the variant.

            Relative ratio is used for metrics that are ratios (e.g.,
            click-through rate, conversion rate),

            while relative difference is used for continuous metrics (e.g.,
            revenue).
        valueCILow:
          type: number
          format: double
          description: >
            The lower bound of the 95% confidence interval for the metric value.
            The confidence interval is calculated using

            either the relative ratio or relative difference between the metric
            values for the control and the variant.

            Relative ratio is used for metrics that are ratios (e.g.,
            click-through rate, conversion rate),

            while relative difference is used for continuous metrics (e.g.,
            revenue).
        pValue:
          type: number
          format: double
          description: >-
            PValue for the first variant (control) will always be 0. For the
            other variants, pValue is calculated for the current variant based
            on the control.
        dimension:
          type: string
          description: Dimension defined during test creation.
        metadata:
          $ref: '#/components/schemas/metricMetadata'
        criticalValue:
          type: number
          format: double
          description: >
            The value that was computed during error correction. It is used to
            determine significance of the metric pValue.

            The critical value is calculated using Bonferroni or
            Benjamini-Hochberg corrections, based on the given

            configuration during the A/B test creation.
        significant:
          type: boolean
          description: >
            Whether the pValue is significant or not based on the critical value
            and the error correction algorithm used.
      required:
        - name
        - updatedAt
        - value
        - pValue
      example:
        - name: addToCartCount
          updatedAt: '2025-06-15T15:06:44.400601Z'
          value: 5
          pValue: 0.01
        - name: clickThroughRate
          updatedAt: '2025-05-15T17:52:15.644906Z'
          value: 0.20869847452125934
          pValue: 0.004
        - name: revenue
          dimension: USD
          updatedAt: '2025-05-15T17:52:15.644906Z'
          value: 1200.5
          pValue: 0.04
          metadata:
            winsorizedValue: 80.2
        - name: revenue
          dimension: EUR
          updatedAt: '2025-05-15T17:52:15.644906Z'
          value: 999.66
          pValue: 0.04
          metadata:
            winsorizedValue: 888.8
    metrics:
      type: array
      description: All ABTest metrics that were defined during test creation.
      items:
        $ref: '#/components/schemas/metricResult'
    filterEffects:
      type: object
      description: A/B test filter effects resulting from configuration settings.
      properties:
        outliers:
          title: outliersFilter
          type: object
          description: >-
            Outliers removed from the A/B test as a result of configuration
            settings.
          example:
            usersCount: 1
            trackedSearchesCount: 237
          properties:
            usersCount:
              type: integer
              description: Number of users removed from the A/B test.
              example: 1
            trackedSearchesCount:
              type: integer
              description: Number of tracked searches removed from the A/B test.
              example: 237
        emptySearch:
          title: emptySearchFilter
          type: object
          description: >-
            Empty searches removed from the A/B test as a result of
            configuration settings.
          example:
            usersCount: 1
            trackedSearchesCount: 237
          properties:
            usersCount:
              type: integer
              description: Number of users removed from the A/B test.
              example: 1
            trackedSearchesCount:
              type: integer
              description: Number of tracked searches removed from the A/B test.
              example: 237
    variantMetadata:
      type: object
      description: Variant specific metadata.
      properties:
        filterEffects:
          $ref: '#/components/schemas/filterEffects'
    variant:
      type: object
      additionalProperties: false
      properties:
        description:
          $ref: '#/components/schemas/description'
        estimatedSampleSize:
          type: integer
          description: >
            Estimated number of searches required to achieve the desired
            statistical significance.


            The A/B test configuration must include a `minimumDetectableEffect`
            setting for this number to be included in the response.
          example: 0
        index:
          $ref: '#/components/schemas/index'
        trafficPercentage:
          $ref: '#/components/schemas/trafficPercentage'
        metrics:
          $ref: '#/components/schemas/metrics'
        metadata:
          $ref: '#/components/schemas/variantMetadata'
        customSearchParameters:
          type: object
          description: >
            Search parameters applied to this variant when the same index is
            used for multiple variants.

            Only present if custom search parameters were provided during test
            creation.
          example:
            enablePersonalization: true
            personalizationImpact: 50
      required:
        - index
        - description
        - trafficPercentage
        - metrics
    variants:
      type: array
      description: >
        A/B test variants.


        The first variant is your _control_ index, typically your production
        index.

        All of the additional variants are indexes with changed settings that
        you want to test against the control.
      items:
        $ref: '#/components/schemas/variant'
    EffectMetric:
      type: string
      description: Metric for which you want to detect the smallest relative difference.
      enum:
        - addToCartRate
        - clickThroughRate
        - conversionRate
        - purchaseRate
        - noResultsRate
    MinimumDetectableEffect:
      type: object
      description: >-
        Configuration for the smallest difference between test variants you want
        to detect.
      properties:
        size:
          type: number
          format: double
          minimum: 0
          maximum: 1
          description: >
            Smallest difference in an observable metric between variants.

            For example, to detect a 10% difference between variants, set this
            value to 0.1.
        metric:
          $ref: '#/components/schemas/EffectMetric'
      required:
        - size
        - metric
    MetricsFilter:
      type: object
      additionalProperties: false
      description: >
        Boolean filter applied to the A/B test population. Each filter targets a
        boolean metric

        and decides whether to include (true) or exclude (false) matching
        records.
      properties:
        domain:
          type: string
          description: Metric domain (for example `abtesting`, `personalization`).
          example: abtesting
        name:
          type: string
          description: Public metric name.
          example: isOutlier
        trackEffects:
          type: boolean
          description: Whether the experiment should record the effects of this filter.
        includes:
          type: boolean
          description: If true, keep items that match the filter; if false, exclude them.
      required:
        - domain
        - name
    MetricsFilters:
      type: array
      description: List of metric filters applied to the test population.
      items:
        $ref: '#/components/schemas/MetricsFilter'
    ErrorCorrectionType:
      type: string
      description: >-
        Multiple-testing correction method applied when evaluating metric
        significance.
      enum:
        - bonferroni
        - benjamini-hochberg
    ABTestConfiguration:
      title: configuration
      type: object
      description: A/B test configuration.
      properties:
        minimumDetectableEffect:
          $ref: '#/components/schemas/MinimumDetectableEffect'
        filters:
          $ref: '#/components/schemas/MetricsFilters'
        errorCorrection:
          $ref: '#/components/schemas/ErrorCorrectionType'
    MigratedABTestId:
      type: integer
      description: Unique migrated A/B test identifier.
      example: 224
    ABTest:
      type: object
      additionalProperties: false
      properties:
        abTestID:
          $ref: '#/components/schemas/abTestID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        endAt:
          $ref: '#/components/schemas/endAt'
        stoppedAt:
          $ref: '#/components/schemas/stoppedAt'
        name:
          $ref: '#/components/schemas/name'
        status:
          $ref: '#/components/schemas/Status'
        variants:
          $ref: '#/components/schemas/variants'
        configuration:
          $ref: '#/components/schemas/ABTestConfiguration'
        migratedAbTestID:
          $ref: '#/components/schemas/MigratedABTestId'
      required:
        - status
        - name
        - createdAt
        - endAt
        - updatedAt
        - abTestID
        - variants
    ABTests:
      oneOf:
        - type: array
          description: A/B tests.
          items:
            $ref: '#/components/schemas/ABTest'
        - type: 'null'
    abTestsVariant:
      type: object
      additionalProperties: false
      properties:
        index:
          $ref: '#/components/schemas/index'
        trafficPercentage:
          $ref: '#/components/schemas/trafficPercentage'
        description:
          $ref: '#/components/schemas/description'
      required:
        - index
        - trafficPercentage
    customSearchParams:
      type: object
      description: |
        Search parameters to add to the test variant.
        Only use this parameter if the two variants use the same index.
      example:
        typoTolerance: false
        synonyms: false
      additionalProperties: false
      properties:
        customSearchParameters:
          type: object
      required:
        - customSearchParameters
      x-discriminator-fields:
        - customSearchParameters
    abTestsVariantSearchParams:
      allOf:
        - $ref: '#/components/schemas/abTestsVariant'
        - $ref: '#/components/schemas/customSearchParams'
    AddABTestsVariant:
      oneOf:
        - $ref: '#/components/schemas/abTestsVariant'
        - $ref: '#/components/schemas/abTestsVariantSearchParams'
    createMetric:
      type: object
      description: Defines a metric to be retrieved during an A/B test.
      properties:
        name:
          type: string
          description: Name of the metric.
        dimension:
          type: string
          description: >-
            Dimension of the metric, for example, in case of a revenue metric it
            could be USD, EUR...
      required:
        - name
      example:
        - name: revenue
          dimension: USD
        - name: conversionRate
        - name: clickThroughRate
        - name: trackedSearchCount
    taskID:
      type: integer
      format: int64
      example: 1514562690001
      description: >
        Unique identifier of a task.


        A successful API response means that a task was added to a queue.

        It might not run immediately.

        You can check the task's progress with the [`task`
        operation](https://www.algolia.com/doc/rest-api/search/get-task) and
        this task ID.
    ABTestResponse:
      type: object
      additionalProperties: false
      properties:
        index:
          $ref: '#/components/schemas/index'
        abTestID:
          $ref: '#/components/schemas/abTestID'
        taskID:
          $ref: '#/components/schemas/taskID'
      required:
        - abTestID
        - index
        - taskID
    scheduledAt:
      type: string
      description: >-
        Date and time when the A/B test is scheduled to start, in RFC 3339
        format.
      example: '2023-06-15T15:06:44.400601Z'
    abTestScheduleID:
      type: integer
      description: Unique scheduled A/B test identifier.
      example: 224
    ScheduleABTestResponse:
      type: object
      additionalProperties: false
      properties:
        abTestScheduleID:
          $ref: '#/components/schemas/abTestScheduleID'
      required:
        - abTestScheduleID
    EstimateABTestResponse:
      type: object
      properties:
        durationDays:
          type: integer
          format: int64
          description: >-
            Estimated number of days needed to reach the sample sizes required
            for detecting the configured effect. This value is based on
            historical traffic.
          example: 21
        sampleSizes:
          type: array
          description: >
            Sample size estimates for each variant. The first element is the
            control variant.

            Each element is the estimated number of searches required to achieve
            the desired statistical significance.
          items:
            type: integer
            format: int64
            description: >-
              Number of tracked searches needed to be able to detect the
              configured effect for the control variant.
            example: 23415
    MetricName:
      type: string
      enum:
        - search_count
        - tracked_search_count
        - user_count
        - tracked_user_count
        - no_result_count
        - add_to_cart_count
        - purchase_count
        - clicked_search_count
        - converted_search_count
        - click_through_rate
        - conversion_rate
        - add_to_cart_rate
        - purchase_rate
        - average_click_position
        - revenue
    metricDate:
      type: object
      properties:
        date:
          type: string
          description: Date where the metric was updated, in RFC 3339 format.
          example: '2025-06-15'
        metrics:
          $ref: '#/components/schemas/metrics'
    metricDates:
      type: array
      items:
        $ref: '#/components/schemas/metricDate'
    timeseriesVariant:
      type: object
      properties:
        dates:
          $ref: '#/components/schemas/metricDates'
    timeseriesVariants:
      type: array
      description: >
        A/B test timeseries variants.


        The first variant is your _control_ index, typically your production
        index.

        All of the additional variants are indexes with changed settings that
        you want to test against the control.
      items:
        $ref: '#/components/schemas/timeseriesVariant'
    Timeseries:
      type: object
      additionalProperties: false
      properties:
        abTestID:
          $ref: '#/components/schemas/abTestID'
        variants:
          $ref: '#/components/schemas/timeseriesVariants'
      required:
        - abTestID
        - variants
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
  headers:
    x-ratelimit-limit:
      description: Number of allowed requests per one minute.
      example: 100
      schema:
        type: integer
    x-ratelimit-remaining:
      description: Number of remaining requests in the current period.
      example: 99
      schema:
        type: integer
    x-ratelimit-reset:
      description: >-
        Timstamp when the rate limit will reset, measured in seconds since the
        Unix epoch.
      example: 1710682486
      schema:
        type: integer
x-tagGroups:
  - name: General
    tags:
      - abtest
