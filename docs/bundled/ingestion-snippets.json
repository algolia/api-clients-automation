{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;\nusing Algolia.Search.Models.Ingestion;"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "var response = await client.CreateAuthenticationAsync(\n  new AuthenticationCreate\n  {\n    Type = Enum.Parse<AuthenticationType>(\"Oauth\"),\n    Name = \"authName\",\n    Input = new AuthInput(\n      new AuthOAuth\n      {\n        Url = \"http://test.oauth\",\n        ClientId = \"myID\",\n        ClientSecret = \"mySecret\",\n      }\n    ),\n  }\n);",
      "createAuthenticationAlgolia": "var response = await client.CreateAuthenticationAsync(\n  new AuthenticationCreate\n  {\n    Type = Enum.Parse<AuthenticationType>(\"Algolia\"),\n    Name = \"authName\",\n    Input = new AuthInput(\n      new AuthAlgolia { AppID = \"ALGOLIA_APPLICATION_ID\", ApiKey = \"ALGOLIA_API_KEY\" }\n    ),\n  }\n);"
    },
    "createDestination": {
      "createDestination": "var response = await client.CreateDestinationAsync(\n  new DestinationCreate\n  {\n    Type = Enum.Parse<DestinationType>(\"Search\"),\n    Name = \"destinationName\",\n    Input = new DestinationInput(new DestinationIndexName { IndexName = \"<YOUR_INDEX_NAME>\" }),\n    AuthenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  }\n);",
      "with transformationIDs": "var response = await client.CreateDestinationAsync(\n  new DestinationCreate\n  {\n    Type = Enum.Parse<DestinationType>(\"Search\"),\n    Name = \"destinationName\",\n    Input = new DestinationInput(new DestinationIndexName { IndexName = \"<YOUR_INDEX_NAME>\" }),\n    TransformationIDs = new List<string> { \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\" },\n  }\n);"
    },
    "createSource": {
      "createSource": "var response = await client.CreateSourceAsync(\n  new SourceCreate\n  {\n    Type = Enum.Parse<SourceType>(\"Commercetools\"),\n    Name = \"sourceName\",\n    Input = new SourceInput(\n      new SourceCommercetools\n      {\n        StoreKeys = new List<string> { \"myStore\" },\n        Locales = new List<string> { \"de\" },\n        Url = \"http://commercetools.com\",\n        ProjectKey = \"keyID\",\n      }\n    ),\n    AuthenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  }\n);",
      "push": "var response = await client.CreateSourceAsync(\n  new SourceCreate { Type = Enum.Parse<SourceType>(\"Push\"), Name = \"pushezpourentrer\" }\n);"
    },
    "createTask": {
      "task without cron": "var response = await client.CreateTaskAsync(\n  new TaskCreate\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n  }\n);",
      "task with cron": "var response = await client.CreateTaskAsync(\n  new TaskCreate\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Cron = \"* * * * *\",\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n    Notifications = new Notifications { Email = new EmailNotifications { Enabled = true } },\n    Policies = new Policies { CriticalThreshold = 8 },\n  }\n);",
      "task shopify": "var response = await client.CreateTaskAsync(\n  new TaskCreate\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Cron = \"* * * * *\",\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n    Input = new TaskInput(\n      new DockerStreamsInput\n      {\n        Streams = new List<DockerStreams>\n        {\n          new DockerStreams\n          {\n            Name = \"foo\",\n            SyncMode = Enum.Parse<DockerStreamsSyncMode>(\"Incremental\"),\n          },\n        },\n      }\n    ),\n  }\n);"
    },
    "createTaskV1": {
      "createTaskOnDemand": "var response = await client.CreateTaskV1Async(\n  new TaskCreateV1\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Trigger = new TaskCreateTrigger(\n      new OnDemandTriggerInput { Type = Enum.Parse<OnDemandTriggerType>(\"OnDemand\") }\n    ),\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n  }\n);",
      "createTaskSchedule": "var response = await client.CreateTaskV1Async(\n  new TaskCreateV1\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Trigger = new TaskCreateTrigger(\n      new ScheduleTriggerInput\n      {\n        Type = Enum.Parse<ScheduleTriggerType>(\"Schedule\"),\n        Cron = \"* * * * *\",\n      }\n    ),\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n  }\n);",
      "createTaskSubscription": "var response = await client.CreateTaskV1Async(\n  new TaskCreateV1\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Trigger = new TaskCreateTrigger(\n      new OnDemandTriggerInput { Type = Enum.Parse<OnDemandTriggerType>(\"OnDemand\") }\n    ),\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n  }\n);",
      "task shopify": "var response = await client.CreateTaskV1Async(\n  new TaskCreateV1\n  {\n    SourceID = \"search\",\n    DestinationID = \"destinationName\",\n    Trigger = new TaskCreateTrigger(\n      new OnDemandTriggerInput { Type = Enum.Parse<OnDemandTriggerType>(\"OnDemand\") }\n    ),\n    Action = Enum.Parse<ActionType>(\"Replace\"),\n    Input = new TaskInput(\n      new DockerStreamsInput\n      {\n        Streams = new List<DockerStreams>\n        {\n          new DockerStreams\n          {\n            Name = \"foo\",\n            SyncMode = Enum.Parse<DockerStreamsSyncMode>(\"Incremental\"),\n          },\n        },\n      }\n    ),\n  }\n);"
    },
    "createTransformation": {
      "default": "var response = await client.CreateTransformationAsync(\n  new TransformationCreate\n  {\n    Code = \"foo\",\n    Name = \"bar\",\n    Description = \"baz\",\n  }\n);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "var response = await client.CustomDeleteAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters with space\" } }\n);",
      "requestOptions should be escaped too": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"to be overriden\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"query\", \"parameters with space\")\n    .AddExtraQueryParameters(\"and an array\", new List<object> { \"array\", \"with spaces\" })\n    .AddExtraHeader(\"x-header-1\", \"spaces are left alone\")\n    .Build()\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "var response = await client.CustomPostAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);",
      "requestOptions can override default query parameters": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query\", \"myQueryParameter\").Build()\n);",
      "requestOptions merges query parameters with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query2\", \"myQueryParameter\").Build()\n);",
      "requestOptions can override default headers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions merges headers with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions queryParameters accepts booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"isItWorking\", true).Build()\n);",
      "requestOptions queryParameters accepts integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"myParam\", 2).Build()\n);",
      "requestOptions queryParameters accepts list of string": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { \"b and c\", \"d\" })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { true, true, false })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { 1, 2 })\n    .Build()\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "var response = await client.CustomPutAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);"
    },
    "deleteAuthentication": {
      "default": "var response = await client.DeleteAuthenticationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteDestination": {
      "default": "var response = await client.DeleteDestinationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteSource": {
      "default": "var response = await client.DeleteSourceAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTask": {
      "default": "var response = await client.DeleteTaskAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTaskV1": {
      "default": "var response = await client.DeleteTaskV1Async(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTransformation": {
      "default": "var response = await client.DeleteTransformationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "disableTask": {
      "default": "var response = await client.DisableTaskAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "disableTaskV1": {
      "default": "var response = await client.DisableTaskV1Async(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "enableTask": {
      "default": "var response = await client.EnableTaskAsync(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\");"
    },
    "enableTaskV1": {
      "default": "var response = await client.EnableTaskV1Async(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\");"
    },
    "getAuthentication": {
      "default": "var response = await client.GetAuthenticationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getDestination": {
      "default": "var response = await client.GetDestinationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getEvent": {
      "default": "var response = await client.GetEventAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\"\n);"
    },
    "getRun": {
      "default": "var response = await client.GetRunAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getSource": {
      "default": "var response = await client.GetSourceAsync(\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\");"
    },
    "getTask": {
      "default": "var response = await client.GetTaskAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getTaskV1": {
      "default": "var response = await client.GetTaskV1Async(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getTransformation": {
      "default": "var response = await client.GetTransformationAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "listAuthentications": {
      "getAuthentications": "var response = await client.ListAuthenticationsAsync();",
      "getAuthentications with query params": "var response = await client.ListAuthenticationsAsync(\n  2,\n  1,\n  new List<AuthenticationType>\n  {\n    Enum.Parse<AuthenticationType>(\"Basic\"),\n    Enum.Parse<AuthenticationType>(\"Algolia\"),\n  },\n  new List<PlatformWithNone> { new PlatformWithNone(Enum.Parse<PlatformNone>(\"None\")) },\n  Enum.Parse<AuthenticationSortKeys>(\"CreatedAt\"),\n  Enum.Parse<OrderKeys>(\"Asc\")\n);"
    },
    "listDestinations": {
      "default": "var response = await client.ListDestinationsAsync();"
    },
    "listEvents": {
      "default": "var response = await client.ListEventsAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "listRuns": {
      "default": "var response = await client.ListRunsAsync();"
    },
    "listSources": {
      "default": "var response = await client.ListSourcesAsync();"
    },
    "listTasks": {
      "default": "var response = await client.ListTasksAsync();"
    },
    "listTasksV1": {
      "default": "var response = await client.ListTasksV1Async();"
    },
    "listTransformations": {
      "default": "var response = await client.ListTransformationsAsync();"
    },
    "pushTask": {
      "pushTask": "var response = await client.PushTaskAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new PushTaskPayload\n  {\n    Action = Enum.Parse<Action>(\"AddObject\"),\n    Records = new List<PushTaskRecords>\n    {\n      new PushTaskRecords\n      {\n        ObjectID = \"o\",\n        AdditionalProperties = new Dictionary<string, object>\n        {\n          { \"key\", \"bar\" },\n          { \"foo\", \"1\" },\n        },\n      },\n      new PushTaskRecords\n      {\n        ObjectID = \"k\",\n        AdditionalProperties = new Dictionary<string, object>\n        {\n          { \"key\", \"baz\" },\n          { \"foo\", \"2\" },\n        },\n      },\n    },\n  }\n);",
      "allows for watch query parameter": "var response = await client.PushTaskAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new PushTaskPayload\n  {\n    Action = Enum.Parse<Action>(\"AddObject\"),\n    Records = new List<PushTaskRecords>\n    {\n      new PushTaskRecords\n      {\n        ObjectID = \"o\",\n        AdditionalProperties = new Dictionary<string, object>\n        {\n          { \"key\", \"bar\" },\n          { \"foo\", \"1\" },\n        },\n      },\n      new PushTaskRecords\n      {\n        ObjectID = \"k\",\n        AdditionalProperties = new Dictionary<string, object>\n        {\n          { \"key\", \"baz\" },\n          { \"foo\", \"2\" },\n        },\n      },\n    },\n  },\n  true\n);"
    },
    "runSource": {
      "default": "var response = await client.RunSourceAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new RunSourcePayload\n  {\n    IndexToInclude = new List<string> { \"products_us\", \"products eu\" },\n    EntityIDs = new List<string> { \"1234\", \"5678\" },\n    EntityType = Enum.Parse<EntityType>(\"Product\"),\n  }\n);"
    },
    "runTask": {
      "default": "var response = await client.RunTaskAsync(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "runTaskV1": {
      "default": "var response = await client.RunTaskV1Async(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "searchAuthentications": {
      "default": "var response = await client.SearchAuthenticationsAsync(\n  new AuthenticationSearch\n  {\n    AuthenticationIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    },\n  }\n);"
    },
    "searchDestinations": {
      "default": "var response = await client.SearchDestinationsAsync(\n  new DestinationSearch\n  {\n    DestinationIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    },\n  }\n);"
    },
    "searchSources": {
      "default": "var response = await client.SearchSourcesAsync(\n  new SourceSearch\n  {\n    SourceIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    },\n  }\n);"
    },
    "searchTasks": {
      "default": "var response = await client.SearchTasksAsync(\n  new TaskSearch\n  {\n    TaskIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n    },\n  }\n);"
    },
    "searchTasksV1": {
      "default": "var response = await client.SearchTasksV1Async(\n  new TaskSearch\n  {\n    TaskIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n    },\n  }\n);"
    },
    "searchTransformations": {
      "default": "var response = await client.SearchTransformationsAsync(\n  new TransformationSearch\n  {\n    TransformationIDs = new List<string>\n    {\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n    },\n  }\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "triggerDockerSourceDiscover": {
      "default": "var response = await client.TriggerDockerSourceDiscoverAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n);"
    },
    "tryTransformation": {
      "tryTransformation": "var response = await client.TryTransformationAsync(\n  new TransformationTry\n  {\n    Code = \"foo\",\n    SampleRecord = new Dictionary<string, string> { { \"bar\", \"baz\" } },\n  }\n);",
      "with authentications": "var response = await client.TryTransformationAsync(\n  new TransformationTry\n  {\n    Code = \"foo\",\n    SampleRecord = new Dictionary<string, string> { { \"bar\", \"baz\" } },\n    Authentications = new List<AuthenticationCreate>\n    {\n      new AuthenticationCreate\n      {\n        Type = Enum.Parse<AuthenticationType>(\"Oauth\"),\n        Name = \"authName\",\n        Input = new AuthInput(\n          new AuthOAuth\n          {\n            Url = \"http://test.oauth\",\n            ClientId = \"myID\",\n            ClientSecret = \"mySecret\",\n          }\n        ),\n      },\n    },\n  }\n);"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "var response = await client.TryTransformationBeforeUpdateAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationTry\n  {\n    Code = \"foo\",\n    SampleRecord = new Dictionary<string, string> { { \"bar\", \"baz\" } },\n  }\n);",
      "existing with authentications": "var response = await client.TryTransformationBeforeUpdateAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationTry\n  {\n    Code = \"foo\",\n    SampleRecord = new Dictionary<string, string> { { \"bar\", \"baz\" } },\n    Authentications = new List<AuthenticationCreate>\n    {\n      new AuthenticationCreate\n      {\n        Type = Enum.Parse<AuthenticationType>(\"Oauth\"),\n        Name = \"authName\",\n        Input = new AuthInput(\n          new AuthOAuth\n          {\n            Url = \"http://test.oauth\",\n            ClientId = \"myID\",\n            ClientSecret = \"mySecret\",\n          }\n        ),\n      },\n    },\n  }\n);"
    },
    "updateAuthentication": {
      "default": "var response = await client.UpdateAuthenticationAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new AuthenticationUpdate { Name = \"newName\" }\n);"
    },
    "updateDestination": {
      "default": "var response = await client.UpdateDestinationAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new DestinationUpdate { Name = \"newName\" }\n);"
    },
    "updateSource": {
      "default": "var response = await client.UpdateSourceAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new SourceUpdate { Name = \"newName\" }\n);"
    },
    "updateTask": {
      "default": "var response = await client.UpdateTaskAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TaskUpdate { Enabled = false, Cron = \"* * * * *\" }\n);"
    },
    "updateTaskV1": {
      "default": "var response = await client.UpdateTaskV1Async(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TaskUpdateV1 { Enabled = false }\n);"
    },
    "updateTransformation": {
      "default": "var response = await client.UpdateTransformationAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationCreate\n  {\n    Code = \"foo\",\n    Name = \"bar\",\n    Description = \"baz\",\n  }\n);"
    },
    "validateSource": {
      "default": "var response = await client.ValidateSourceAsync(\n  new SourceCreate\n  {\n    Type = Enum.Parse<SourceType>(\"Commercetools\"),\n    Name = \"sourceName\",\n    Input = new SourceInput(\n      new SourceCommercetools\n      {\n        StoreKeys = new List<string> { \"myStore\" },\n        Locales = new List<string> { \"de\" },\n        Url = \"http://commercetools.com\",\n        ProjectKey = \"keyID\",\n      }\n    ),\n    AuthenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  }\n);"
    },
    "validateSourceBeforeUpdate": {
      "default": "var response = await client.ValidateSourceBeforeUpdateAsync(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new SourceUpdate { Name = \"newName\" }\n);"
    },
    "init": {
      "default": "var client = new IngestionClient(\n  new IngestionConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")\n);"
    }
  },
  "dart": {},
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/ingestion\""
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "response, err := client.CreateAuthentication(client.NewApiCreateAuthenticationRequest(\n\n  ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType(\"oauth\")).SetName(\"authName\").SetInput(ingestion.AuthOAuthAsAuthInput(\n    ingestion.NewEmptyAuthOAuth().SetUrl(\"http://test.oauth\").SetClientId(\"myID\").SetClientSecret(\"mySecret\")))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "createAuthenticationAlgolia": "response, err := client.CreateAuthentication(client.NewApiCreateAuthenticationRequest(\n\n  ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType(\"algolia\")).SetName(\"authName\").SetInput(ingestion.AuthAlgoliaAsAuthInput(\n    ingestion.NewEmptyAuthAlgolia().SetAppID(\"ALGOLIA_APPLICATION_ID\").SetApiKey(\"ALGOLIA_API_KEY\")))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "createDestination": {
      "createDestination": "response, err := client.CreateDestination(client.NewApiCreateDestinationRequest(\n\n  ingestion.NewEmptyDestinationCreate().SetType(ingestion.DestinationType(\"search\")).SetName(\"destinationName\").SetInput(ingestion.DestinationIndexNameAsDestinationInput(\n    ingestion.NewEmptyDestinationIndexName().SetIndexName(\"<YOUR_INDEX_NAME>\"))).SetAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "with transformationIDs": "response, err := client.CreateDestination(client.NewApiCreateDestinationRequest(\n\n  ingestion.NewEmptyDestinationCreate().SetType(ingestion.DestinationType(\"search\")).SetName(\"destinationName\").SetInput(ingestion.DestinationIndexNameAsDestinationInput(\n    ingestion.NewEmptyDestinationIndexName().SetIndexName(\"<YOUR_INDEX_NAME>\"))).SetTransformationIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "createSource": {
      "createSource": "response, err := client.CreateSource(client.NewApiCreateSourceRequest(\n\n  ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType(\"commercetools\")).SetName(\"sourceName\").SetInput(ingestion.SourceCommercetoolsAsSourceInput(\n    ingestion.NewEmptySourceCommercetools().SetStoreKeys(\n      []string{\"myStore\"}).SetLocales(\n      []string{\"de\"}).SetUrl(\"http://commercetools.com\").SetProjectKey(\"keyID\"))).SetAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "push": "response, err := client.CreateSource(client.NewApiCreateSourceRequest(\n\n  ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType(\"push\")).SetName(\"pushezpourentrer\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "createTask": {
      "task without cron": "response, err := client.CreateTask(client.NewApiCreateTaskRequest(\n\n  ingestion.NewEmptyTaskCreate().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetAction(ingestion.ActionType(\"replace\"))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "task with cron": "response, err := client.CreateTask(client.NewApiCreateTaskRequest(\n\n  ingestion.NewEmptyTaskCreate().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetCron(\"* * * * *\").SetAction(ingestion.ActionType(\"replace\")).SetNotifications(\n    ingestion.NewEmptyNotifications().SetEmail(\n      ingestion.NewEmptyEmailNotifications().SetEnabled(true))).SetPolicies(\n    ingestion.NewEmptyPolicies().SetCriticalThreshold(8))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "task shopify": "response, err := client.CreateTask(client.NewApiCreateTaskRequest(\n\n  ingestion.NewEmptyTaskCreate().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetCron(\"* * * * *\").SetAction(ingestion.ActionType(\"replace\")).SetInput(ingestion.DockerStreamsInputAsTaskInput(\n    ingestion.NewEmptyDockerStreamsInput().SetStreams(\n      []ingestion.DockerStreams{*ingestion.NewEmptyDockerStreams().SetName(\"foo\").SetSyncMode(ingestion.DockerStreamsSyncMode(\"incremental\"))})))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "createTaskV1": {
      "createTaskOnDemand": "response, err := client.CreateTaskV1(client.NewApiCreateTaskV1Request(\n\n  ingestion.NewEmptyTaskCreateV1().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(\n    ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType(\"onDemand\")))).SetAction(ingestion.ActionType(\"replace\"))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "createTaskSchedule": "response, err := client.CreateTaskV1(client.NewApiCreateTaskV1Request(\n\n  ingestion.NewEmptyTaskCreateV1().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetTrigger(ingestion.ScheduleTriggerInputAsTaskCreateTrigger(\n    ingestion.NewEmptyScheduleTriggerInput().SetType(ingestion.ScheduleTriggerType(\"schedule\")).SetCron(\"* * * * *\"))).SetAction(ingestion.ActionType(\"replace\"))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "createTaskSubscription": "response, err := client.CreateTaskV1(client.NewApiCreateTaskV1Request(\n\n  ingestion.NewEmptyTaskCreateV1().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(\n    ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType(\"onDemand\")))).SetAction(ingestion.ActionType(\"replace\"))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "task shopify": "response, err := client.CreateTaskV1(client.NewApiCreateTaskV1Request(\n\n  ingestion.NewEmptyTaskCreateV1().SetSourceID(\"search\").SetDestinationID(\"destinationName\").SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(\n    ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType(\"onDemand\")))).SetAction(ingestion.ActionType(\"replace\")).SetInput(ingestion.DockerStreamsInputAsTaskInput(\n    ingestion.NewEmptyDockerStreamsInput().SetStreams(\n      []ingestion.DockerStreams{*ingestion.NewEmptyDockerStreams().SetName(\"foo\").SetSyncMode(ingestion.DockerStreamsSyncMode(\"incremental\"))})))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "createTransformation": {
      "default": "response, err := client.CreateTransformation(client.NewApiCreateTransformationRequest(\n\n  ingestion.NewEmptyTransformationCreate().SetCode(\"foo\").SetName(\"bar\").SetDescription(\"baz\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow del method for a custom path with all parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow get method for a custom path with all parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters with space\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions should be escaped too": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"to be overriden\"}), ingestion.WithQueryParam(\"query\", \"parameters with space\"), ingestion.WithQueryParam(\"and an array\",\n  []string{\"array\", \"with spaces\"}), ingestion.WithHeaderParam(\"x-header-1\", \"spaces are left alone\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow post method for a custom path with all parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default query parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"query\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges query parameters with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"query2\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default headers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges headers with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"isItWorking\", true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"myParam\", 2))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of string": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"myParam\",\n  []string{\"b and c\", \"d\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"myParam\",\n  []bool{true, true, false}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), ingestion.WithQueryParam(\"myParam\",\n  []int32{1, 2}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow put method for a custom path with all parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteAuthentication": {
      "default": "response, err := client.DeleteAuthentication(client.NewApiDeleteAuthenticationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteDestination": {
      "default": "response, err := client.DeleteDestination(client.NewApiDeleteDestinationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteSource": {
      "default": "response, err := client.DeleteSource(client.NewApiDeleteSourceRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteTask": {
      "default": "response, err := client.DeleteTask(client.NewApiDeleteTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteTaskV1": {
      "default": "response, err := client.DeleteTaskV1(client.NewApiDeleteTaskV1Request(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteTransformation": {
      "default": "response, err := client.DeleteTransformation(client.NewApiDeleteTransformationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "disableTask": {
      "default": "response, err := client.DisableTask(client.NewApiDisableTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "disableTaskV1": {
      "default": "response, err := client.DisableTaskV1(client.NewApiDisableTaskV1Request(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "enableTask": {
      "default": "response, err := client.EnableTask(client.NewApiEnableTaskRequest(\n  \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "enableTaskV1": {
      "default": "response, err := client.EnableTaskV1(client.NewApiEnableTaskV1Request(\n  \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getAuthentication": {
      "default": "response, err := client.GetAuthentication(client.NewApiGetAuthenticationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getDestination": {
      "default": "response, err := client.GetDestination(client.NewApiGetDestinationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getEvent": {
      "default": "response, err := client.GetEvent(client.NewApiGetEventRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRun": {
      "default": "response, err := client.GetRun(client.NewApiGetRunRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getSource": {
      "default": "response, err := client.GetSource(client.NewApiGetSourceRequest(\n  \"75eeb306-51d3-4e5e-a279-3c92bd8893ac\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTask": {
      "default": "response, err := client.GetTask(client.NewApiGetTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTaskV1": {
      "default": "response, err := client.GetTaskV1(client.NewApiGetTaskV1Request(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTransformation": {
      "default": "response, err := client.GetTransformation(client.NewApiGetTransformationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listAuthentications": {
      "getAuthentications": "response, err := client.ListAuthentications(client.NewApiListAuthenticationsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "getAuthentications with query params": "response, err := client.ListAuthentications(client.NewApiListAuthenticationsRequest().WithItemsPerPage(2).WithPage(1).WithType(\n  []ingestion.AuthenticationType{ingestion.AuthenticationType(\"basic\"), ingestion.AuthenticationType(\"algolia\")}).WithPlatform(\n  []ingestion.PlatformWithNone{*ingestion.PlatformNoneAsPlatformWithNone(ingestion.PlatformNone(\"none\"))}).WithSort(ingestion.AuthenticationSortKeys(\"createdAt\")).WithOrder(ingestion.OrderKeys(\"asc\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listDestinations": {
      "default": "response, err := client.ListDestinations(client.NewApiListDestinationsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listEvents": {
      "default": "response, err := client.ListEvents(client.NewApiListEventsRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listRuns": {
      "default": "response, err := client.ListRuns(client.NewApiListRunsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listSources": {
      "default": "response, err := client.ListSources(client.NewApiListSourcesRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listTasks": {
      "default": "response, err := client.ListTasks(client.NewApiListTasksRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listTasksV1": {
      "default": "response, err := client.ListTasksV1(client.NewApiListTasksV1Request())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listTransformations": {
      "default": "response, err := client.ListTransformations(client.NewApiListTransformationsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "pushTask": {
      "pushTask": "response, err := client.PushTask(client.NewApiPushTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyPushTaskPayload().SetAction(ingestion.Action(\"addObject\")).SetRecords(\n    []ingestion.PushTaskRecords{*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty(\"key\", \"bar\").SetAdditionalProperty(\"foo\", \"1\").SetObjectID(\"o\"), *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty(\"key\", \"baz\").SetAdditionalProperty(\"foo\", \"2\").SetObjectID(\"k\")})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allows for watch query parameter": "response, err := client.PushTask(client.NewApiPushTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyPushTaskPayload().SetAction(ingestion.Action(\"addObject\")).SetRecords(\n    []ingestion.PushTaskRecords{*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty(\"key\", \"bar\").SetAdditionalProperty(\"foo\", \"1\").SetObjectID(\"o\"), *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty(\"key\", \"baz\").SetAdditionalProperty(\"foo\", \"2\").SetObjectID(\"k\")})).WithWatch(true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "runSource": {
      "default": "response, err := client.RunSource(client.NewApiRunSourceRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\").WithRunSourcePayload(\n  ingestion.NewEmptyRunSourcePayload().SetIndexToInclude(\n    []string{\"products_us\", \"products eu\"}).SetEntityIDs(\n    []string{\"1234\", \"5678\"}).SetEntityType(ingestion.EntityType(\"product\"))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "runTask": {
      "default": "response, err := client.RunTask(client.NewApiRunTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "runTaskV1": {
      "default": "response, err := client.RunTaskV1(client.NewApiRunTaskV1Request(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchAuthentications": {
      "default": "response, err := client.SearchAuthentications(client.NewApiSearchAuthenticationsRequest(\n\n  ingestion.NewEmptyAuthenticationSearch().SetAuthenticationIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchDestinations": {
      "default": "response, err := client.SearchDestinations(client.NewApiSearchDestinationsRequest(\n\n  ingestion.NewEmptyDestinationSearch().SetDestinationIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchSources": {
      "default": "response, err := client.SearchSources(client.NewApiSearchSourcesRequest(\n\n  ingestion.NewEmptySourceSearch().SetSourceIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchTasks": {
      "default": "response, err := client.SearchTasks(client.NewApiSearchTasksRequest(\n\n  ingestion.NewEmptyTaskSearch().SetTaskIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchTasksV1": {
      "default": "response, err := client.SearchTasksV1(client.NewApiSearchTasksV1Request(\n\n  ingestion.NewEmptyTaskSearch().SetTaskIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchTransformations": {
      "default": "response, err := client.SearchTransformations(client.NewApiSearchTransformationsRequest(\n\n  ingestion.NewEmptyTransformationSearch().SetTransformationIDs(\n    []string{\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\")\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "triggerDockerSourceDiscover": {
      "default": "response, err := client.TriggerDockerSourceDiscover(client.NewApiTriggerDockerSourceDiscoverRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "tryTransformation": {
      "tryTransformation": "response, err := client.TryTransformation(client.NewApiTryTransformationRequest(\n\n  ingestion.NewEmptyTransformationTry().SetCode(\"foo\").SetSampleRecord(map[string]any{\"bar\": \"baz\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "with authentications": "response, err := client.TryTransformation(client.NewApiTryTransformationRequest(\n\n  ingestion.NewEmptyTransformationTry().SetCode(\"foo\").SetSampleRecord(map[string]any{\"bar\": \"baz\"}).SetAuthentications(\n    []ingestion.AuthenticationCreate{*ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType(\"oauth\")).SetName(\"authName\").SetInput(ingestion.AuthOAuthAsAuthInput(\n      ingestion.NewEmptyAuthOAuth().SetUrl(\"http://test.oauth\").SetClientId(\"myID\").SetClientSecret(\"mySecret\")))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "response, err := client.TryTransformationBeforeUpdate(client.NewApiTryTransformationBeforeUpdateRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyTransformationTry().SetCode(\"foo\").SetSampleRecord(map[string]any{\"bar\": \"baz\"})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "existing with authentications": "response, err := client.TryTransformationBeforeUpdate(client.NewApiTryTransformationBeforeUpdateRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyTransformationTry().SetCode(\"foo\").SetSampleRecord(map[string]any{\"bar\": \"baz\"}).SetAuthentications(\n    []ingestion.AuthenticationCreate{*ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType(\"oauth\")).SetName(\"authName\").SetInput(ingestion.AuthOAuthAsAuthInput(\n      ingestion.NewEmptyAuthOAuth().SetUrl(\"http://test.oauth\").SetClientId(\"myID\").SetClientSecret(\"mySecret\")))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateAuthentication": {
      "default": "response, err := client.UpdateAuthentication(client.NewApiUpdateAuthenticationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyAuthenticationUpdate().SetName(\"newName\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateDestination": {
      "default": "response, err := client.UpdateDestination(client.NewApiUpdateDestinationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyDestinationUpdate().SetName(\"newName\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateSource": {
      "default": "response, err := client.UpdateSource(client.NewApiUpdateSourceRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptySourceUpdate().SetName(\"newName\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateTask": {
      "default": "response, err := client.UpdateTask(client.NewApiUpdateTaskRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyTaskUpdate().SetEnabled(false).SetCron(\"* * * * *\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateTaskV1": {
      "default": "response, err := client.UpdateTaskV1(client.NewApiUpdateTaskV1Request(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyTaskUpdateV1().SetEnabled(false)))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "updateTransformation": {
      "default": "response, err := client.UpdateTransformation(client.NewApiUpdateTransformationRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptyTransformationCreate().SetCode(\"foo\").SetName(\"bar\").SetDescription(\"baz\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "validateSource": {
      "default": "response, err := client.ValidateSource(client.NewApiValidateSourceRequest().WithSourceCreate(\n  ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType(\"commercetools\")).SetName(\"sourceName\").SetInput(ingestion.SourceCommercetoolsAsSourceInput(\n    ingestion.NewEmptySourceCommercetools().SetStoreKeys(\n      []string{\"myStore\"}).SetLocales(\n      []string{\"de\"}).SetUrl(\"http://commercetools.com\").SetProjectKey(\"keyID\"))).SetAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "validateSourceBeforeUpdate": {
      "default": "response, err := client.ValidateSourceBeforeUpdate(client.NewApiValidateSourceBeforeUpdateRequest(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ingestion.NewEmptySourceUpdate().SetName(\"newName\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := ingestion.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", ingestion.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.IngestionClient;\nimport com.algolia.config.*;"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "client.createAuthentication(\n  new AuthenticationCreate()\n    .setType(AuthenticationType.OAUTH)\n    .setName(\"authName\")\n    .setInput(new AuthOAuth().setUrl(\"http://test.oauth\").setClientId(\"myID\").setClientSecret(\"mySecret\"))\n);",
      "createAuthenticationAlgolia": "client.createAuthentication(\n  new AuthenticationCreate()\n    .setType(AuthenticationType.ALGOLIA)\n    .setName(\"authName\")\n    .setInput(new AuthAlgolia().setAppID(\"ALGOLIA_APPLICATION_ID\").setApiKey(\"ALGOLIA_API_KEY\"))\n);"
    },
    "createDestination": {
      "createDestination": "client.createDestination(\n  new DestinationCreate()\n    .setType(DestinationType.SEARCH)\n    .setName(\"destinationName\")\n    .setInput(new DestinationIndexName().setIndexName(\"<YOUR_INDEX_NAME>\"))\n    .setAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n);",
      "with transformationIDs": "client.createDestination(\n  new DestinationCreate()\n    .setType(DestinationType.SEARCH)\n    .setName(\"destinationName\")\n    .setInput(new DestinationIndexName().setIndexName(\"<YOUR_INDEX_NAME>\"))\n    .setTransformationIDs(Arrays.asList(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\n);"
    },
    "createSource": {
      "createSource": "client.createSource(\n  new SourceCreate()\n    .setType(SourceType.COMMERCETOOLS)\n    .setName(\"sourceName\")\n    .setInput(\n      new SourceCommercetools()\n        .setStoreKeys(Arrays.asList(\"myStore\"))\n        .setLocales(Arrays.asList(\"de\"))\n        .setUrl(\"http://commercetools.com\")\n        .setProjectKey(\"keyID\")\n    )\n    .setAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n);",
      "push": "client.createSource(new SourceCreate().setType(SourceType.PUSH).setName(\"pushezpourentrer\"));"
    },
    "createTask": {
      "task without cron": "client.createTask(new TaskCreate().setSourceID(\"search\").setDestinationID(\"destinationName\").setAction(ActionType.REPLACE));",
      "task with cron": "client.createTask(\n  new TaskCreate()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setCron(\"* * * * *\")\n    .setAction(ActionType.REPLACE)\n    .setNotifications(new Notifications().setEmail(new EmailNotifications().setEnabled(true)))\n    .setPolicies(new Policies().setCriticalThreshold(8))\n);",
      "task shopify": "client.createTask(\n  new TaskCreate()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setCron(\"* * * * *\")\n    .setAction(ActionType.REPLACE)\n    .setInput(\n      new DockerStreamsInput()\n        .setStreams(Arrays.asList(new DockerStreams().setName(\"foo\").setSyncMode(DockerStreamsSyncMode.INCREMENTAL)))\n    )\n);"
    },
    "createTaskV1": {
      "createTaskOnDemand": "client.createTaskV1(\n  new TaskCreateV1()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setTrigger(new OnDemandTriggerInput().setType(OnDemandTriggerType.ON_DEMAND))\n    .setAction(ActionType.REPLACE)\n);",
      "createTaskSchedule": "client.createTaskV1(\n  new TaskCreateV1()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setTrigger(new ScheduleTriggerInput().setType(ScheduleTriggerType.SCHEDULE).setCron(\"* * * * *\"))\n    .setAction(ActionType.REPLACE)\n);",
      "createTaskSubscription": "client.createTaskV1(\n  new TaskCreateV1()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setTrigger(new OnDemandTriggerInput().setType(OnDemandTriggerType.ON_DEMAND))\n    .setAction(ActionType.REPLACE)\n);",
      "task shopify": "client.createTaskV1(\n  new TaskCreateV1()\n    .setSourceID(\"search\")\n    .setDestinationID(\"destinationName\")\n    .setTrigger(new OnDemandTriggerInput().setType(OnDemandTriggerType.ON_DEMAND))\n    .setAction(ActionType.REPLACE)\n    .setInput(\n      new DockerStreamsInput()\n        .setStreams(Arrays.asList(new DockerStreams().setName(\"foo\").setSyncMode(DockerStreamsSyncMode.INCREMENTAL)))\n    )\n);"
    },
    "createTransformation": {
      "default": "client.createTransformation(new TransformationCreate().setCode(\"foo\").setName(\"bar\").setDescription(\"baz\"));"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "client.customDelete(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "client.customDelete(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "client.customGet(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters with space\");\n    }\n  }\n);",
      "requestOptions should be escaped too": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"to be overriden\");\n    }\n  },\n  new RequestOptions()\n    .addExtraQueryParameters(\"query\", \"parameters with space\")\n    .addExtraQueryParameters(\"and an array\", Arrays.asList(\"array\", \"with spaces\"))\n    .addExtraHeader(\"x-header-1\", \"spaces are left alone\")\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "client.customPost(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "client.customPost(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);",
      "requestOptions can override default query parameters": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query\", \"myQueryParameter\")\n);",
      "requestOptions merges query parameters with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query2\", \"myQueryParameter\")\n);",
      "requestOptions can override default headers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions merges headers with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions queryParameters accepts booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"isItWorking\", true)\n);",
      "requestOptions queryParameters accepts integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", 2)\n);",
      "requestOptions queryParameters accepts list of string": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(\"b and c\", \"d\"))\n);",
      "requestOptions queryParameters accepts list of booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(true, true, false))\n);",
      "requestOptions queryParameters accepts list of integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(1, 2))\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "client.customPut(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "client.customPut(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);"
    },
    "deleteAuthentication": {
      "default": "client.deleteAuthentication(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteDestination": {
      "default": "client.deleteDestination(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteSource": {
      "default": "client.deleteSource(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTask": {
      "default": "client.deleteTask(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTaskV1": {
      "default": "client.deleteTaskV1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "deleteTransformation": {
      "default": "client.deleteTransformation(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "disableTask": {
      "default": "client.disableTask(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "disableTaskV1": {
      "default": "client.disableTaskV1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "enableTask": {
      "default": "client.enableTask(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\");"
    },
    "enableTaskV1": {
      "default": "client.enableTaskV1(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\");"
    },
    "getAuthentication": {
      "default": "client.getAuthentication(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getDestination": {
      "default": "client.getDestination(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getEvent": {
      "default": "client.getEvent(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\");"
    },
    "getRun": {
      "default": "client.getRun(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getSource": {
      "default": "client.getSource(\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\");"
    },
    "getTask": {
      "default": "client.getTask(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getTaskV1": {
      "default": "client.getTaskV1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "getTransformation": {
      "default": "client.getTransformation(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "listAuthentications": {
      "getAuthentications": "client.listAuthentications();",
      "getAuthentications with query params": "client.listAuthentications(\n  2,\n  1,\n  Arrays.asList(AuthenticationType.BASIC, AuthenticationType.ALGOLIA),\n  Arrays.asList(PlatformNone.NONE),\n  AuthenticationSortKeys.CREATED_AT,\n  OrderKeys.ASC\n);"
    },
    "listDestinations": {
      "default": "client.listDestinations();"
    },
    "listEvents": {
      "default": "client.listEvents(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "listRuns": {
      "default": "client.listRuns();"
    },
    "listSources": {
      "default": "client.listSources();"
    },
    "listTasks": {
      "default": "client.listTasks();"
    },
    "listTasksV1": {
      "default": "client.listTasksV1();"
    },
    "listTransformations": {
      "default": "client.listTransformations();"
    },
    "pushTask": {
      "pushTask": "client.pushTask(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new PushTaskPayload()\n    .setAction(Action.ADD_OBJECT)\n    .setRecords(\n      Arrays.asList(\n        new PushTaskRecords().setAdditionalProperty(\"key\", \"bar\").setAdditionalProperty(\"foo\", \"1\").setObjectID(\"o\"),\n        new PushTaskRecords().setAdditionalProperty(\"key\", \"baz\").setAdditionalProperty(\"foo\", \"2\").setObjectID(\"k\")\n      )\n    )\n);",
      "allows for watch query parameter": "client.pushTask(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new PushTaskPayload()\n    .setAction(Action.ADD_OBJECT)\n    .setRecords(\n      Arrays.asList(\n        new PushTaskRecords().setAdditionalProperty(\"key\", \"bar\").setAdditionalProperty(\"foo\", \"1\").setObjectID(\"o\"),\n        new PushTaskRecords().setAdditionalProperty(\"key\", \"baz\").setAdditionalProperty(\"foo\", \"2\").setObjectID(\"k\")\n      )\n    ),\n  true\n);"
    },
    "runSource": {
      "default": "client.runSource(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new RunSourcePayload()\n    .setIndexToInclude(Arrays.asList(\"products_us\", \"products eu\"))\n    .setEntityIDs(Arrays.asList(\"1234\", \"5678\"))\n    .setEntityType(EntityType.PRODUCT)\n);"
    },
    "runTask": {
      "default": "client.runTask(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "runTaskV1": {
      "default": "client.runTaskV1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "searchAuthentications": {
      "default": "client.searchAuthentications(\n  new AuthenticationSearch()\n    .setAuthenticationIDs(Arrays.asList(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"))\n);"
    },
    "searchDestinations": {
      "default": "client.searchDestinations(\n  new DestinationSearch()\n    .setDestinationIDs(Arrays.asList(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"))\n);"
    },
    "searchSources": {
      "default": "client.searchSources(\n  new SourceSearch().setSourceIDs(Arrays.asList(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"))\n);"
    },
    "searchTasks": {
      "default": "client.searchTasks(\n  new TaskSearch()\n    .setTaskIDs(\n      Arrays.asList(\n        \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n      )\n    )\n);"
    },
    "searchTasksV1": {
      "default": "client.searchTasksV1(\n  new TaskSearch()\n    .setTaskIDs(\n      Arrays.asList(\n        \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n      )\n    )\n);"
    },
    "searchTransformations": {
      "default": "client.searchTransformations(\n  new TransformationSearch()\n    .setTransformationIDs(\n      Arrays.asList(\n        \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n      )\n    )\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "triggerDockerSourceDiscover": {
      "default": "client.triggerDockerSourceDiscover(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\");"
    },
    "tryTransformation": {
      "tryTransformation": "client.tryTransformation(\n  new TransformationTry()\n    .setCode(\"foo\")\n    .setSampleRecord(\n      new HashMap() {\n        {\n          put(\"bar\", \"baz\");\n        }\n      }\n    )\n);",
      "with authentications": "client.tryTransformation(\n  new TransformationTry()\n    .setCode(\"foo\")\n    .setSampleRecord(\n      new HashMap() {\n        {\n          put(\"bar\", \"baz\");\n        }\n      }\n    )\n    .setAuthentications(\n      Arrays.asList(\n        new AuthenticationCreate()\n          .setType(AuthenticationType.OAUTH)\n          .setName(\"authName\")\n          .setInput(new AuthOAuth().setUrl(\"http://test.oauth\").setClientId(\"myID\").setClientSecret(\"mySecret\"))\n      )\n    )\n);"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "client.tryTransformationBeforeUpdate(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationTry()\n    .setCode(\"foo\")\n    .setSampleRecord(\n      new HashMap() {\n        {\n          put(\"bar\", \"baz\");\n        }\n      }\n    )\n);",
      "existing with authentications": "client.tryTransformationBeforeUpdate(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationTry()\n    .setCode(\"foo\")\n    .setSampleRecord(\n      new HashMap() {\n        {\n          put(\"bar\", \"baz\");\n        }\n      }\n    )\n    .setAuthentications(\n      Arrays.asList(\n        new AuthenticationCreate()\n          .setType(AuthenticationType.OAUTH)\n          .setName(\"authName\")\n          .setInput(new AuthOAuth().setUrl(\"http://test.oauth\").setClientId(\"myID\").setClientSecret(\"mySecret\"))\n      )\n    )\n);"
    },
    "updateAuthentication": {
      "default": "client.updateAuthentication(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new AuthenticationUpdate().setName(\"newName\"));"
    },
    "updateDestination": {
      "default": "client.updateDestination(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new DestinationUpdate().setName(\"newName\"));"
    },
    "updateSource": {
      "default": "client.updateSource(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new SourceUpdate().setName(\"newName\"));"
    },
    "updateTask": {
      "default": "client.updateTask(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new TaskUpdate().setEnabled(false).setCron(\"* * * * *\"));"
    },
    "updateTaskV1": {
      "default": "client.updateTaskV1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new TaskUpdateV1().setEnabled(false));"
    },
    "updateTransformation": {
      "default": "client.updateTransformation(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  new TransformationCreate().setCode(\"foo\").setName(\"bar\").setDescription(\"baz\")\n);"
    },
    "validateSource": {
      "default": "client.validateSource(\n  new SourceCreate()\n    .setType(SourceType.COMMERCETOOLS)\n    .setName(\"sourceName\")\n    .setInput(\n      new SourceCommercetools()\n        .setStoreKeys(Arrays.asList(\"myStore\"))\n        .setLocales(Arrays.asList(\"de\"))\n        .setUrl(\"http://commercetools.com\")\n        .setProjectKey(\"keyID\")\n    )\n    .setAuthenticationID(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n);"
    },
    "validateSourceBeforeUpdate": {
      "default": "client.validateSourceBeforeUpdate(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", new SourceUpdate().setName(\"newName\"));"
    },
    "init": {
      "default": "IngestionClient client = new IngestionClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "const response = await client.createAuthentication({\n  type: 'oauth',\n  name: 'authName',\n  input: { url: 'http://test.oauth', client_id: 'myID', client_secret: 'mySecret' },\n});",
      "createAuthenticationAlgolia": "const response = await client.createAuthentication({\n  type: 'algolia',\n  name: 'authName',\n  input: { appID: 'ALGOLIA_APPLICATION_ID', apiKey: 'ALGOLIA_API_KEY' },\n});"
    },
    "createDestination": {
      "createDestination": "const response = await client.createDestination({\n  type: 'search',\n  name: 'destinationName',\n  input: { indexName: 'full_name______' },\n  authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n});",
      "with transformationIDs": "const response = await client.createDestination({\n  type: 'search',\n  name: 'destinationName',\n  input: { indexName: 'full_name______' },\n  transformationIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f'],\n});"
    },
    "createSource": {
      "createSource": "const response = await client.createSource({\n  type: 'commercetools',\n  name: 'sourceName',\n  input: { storeKeys: ['myStore'], locales: ['de'], url: 'http://commercetools.com', projectKey: 'keyID' },\n  authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n});",
      "push": "const response = await client.createSource({ type: 'push', name: 'pushezpourentrer' });"
    },
    "createTask": {
      "task without cron": "const response = await client.createTask({ sourceID: 'search', destinationID: 'destinationName', action: 'replace' });",
      "task with cron": "const response = await client.createTask({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  cron: '* * * * *',\n  action: 'replace',\n  notifications: { email: { enabled: true } },\n  policies: { criticalThreshold: 8 },\n});",
      "task shopify": "const response = await client.createTask({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  cron: '* * * * *',\n  action: 'replace',\n  input: { streams: [{ name: 'foo', syncMode: 'incremental' }] },\n});"
    },
    "createTaskV1": {
      "createTaskOnDemand": "const response = await client.createTaskV1({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  trigger: { type: 'onDemand' },\n  action: 'replace',\n});",
      "createTaskSchedule": "const response = await client.createTaskV1({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  trigger: { type: 'schedule', cron: '* * * * *' },\n  action: 'replace',\n});",
      "createTaskSubscription": "const response = await client.createTaskV1({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  trigger: { type: 'onDemand' },\n  action: 'replace',\n});",
      "task shopify": "const response = await client.createTaskV1({\n  sourceID: 'search',\n  destinationID: 'destinationName',\n  trigger: { type: 'onDemand' },\n  action: 'replace',\n  input: { streams: [{ name: 'foo', syncMode: 'incremental' }] },\n});"
    },
    "createTransformation": {
      "default": "const response = await client.createTransformation({ code: 'foo', name: 'bar', description: 'baz' });"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "const response = await client.customDelete({ path: 'test/minimal' });",
      "allow del method for a custom path with all parameters": "const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "const response = await client.customGet({ path: 'test/minimal' });",
      "allow get method for a custom path with all parameters": "const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });",
      "requestOptions should be escaped too": "const response = await client.customGet(\n  { path: 'test/all', parameters: { query: 'to be overriden' } },\n  {\n    queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },\n    headers: { 'x-header-1': 'spaces are left alone' },\n  },\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "const response = await client.customPost({ path: 'test/minimal' });",
      "allow post method for a custom path with all parameters": "const response = await client.customPost({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});",
      "requestOptions can override default query parameters": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query: 'myQueryParameter' },\n  },\n);",
      "requestOptions merges query parameters with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query2: 'myQueryParameter' },\n  },\n);",
      "requestOptions can override default headers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions merges headers with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions queryParameters accepts booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { isItWorking: true },\n  },\n);",
      "requestOptions queryParameters accepts integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: 2 },\n  },\n);",
      "requestOptions queryParameters accepts list of string": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: ['b and c', 'd'] },\n  },\n);",
      "requestOptions queryParameters accepts list of booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [true, true, false] },\n  },\n);",
      "requestOptions queryParameters accepts list of integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [1, 2] },\n  },\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "const response = await client.customPut({ path: 'test/minimal' });",
      "allow put method for a custom path with all parameters": "const response = await client.customPut({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});"
    },
    "deleteAuthentication": {
      "default": "const response = await client.deleteAuthentication({ authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "deleteDestination": {
      "default": "const response = await client.deleteDestination({ destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "deleteSource": {
      "default": "const response = await client.deleteSource({ sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "deleteTask": {
      "default": "const response = await client.deleteTask({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "deleteTaskV1": {
      "default": "const response = await client.deleteTaskV1({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "deleteTransformation": {
      "default": "const response = await client.deleteTransformation({ transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "disableTask": {
      "default": "const response = await client.disableTask({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "disableTaskV1": {
      "default": "const response = await client.disableTaskV1({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "enableTask": {
      "default": "const response = await client.enableTask({ taskID: '76ab4c2a-ce17-496f-b7a6-506dc59ee498' });"
    },
    "enableTaskV1": {
      "default": "const response = await client.enableTaskV1({ taskID: '76ab4c2a-ce17-496f-b7a6-506dc59ee498' });"
    },
    "getAuthentication": {
      "default": "const response = await client.getAuthentication({ authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "getDestination": {
      "default": "const response = await client.getDestination({ destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "getEvent": {
      "default": "const response = await client.getEvent({\n  runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  eventID: '6c02aeb1-775e-418e-870b-1faccd4b2c0c',\n});"
    },
    "getRun": {
      "default": "const response = await client.getRun({ runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "getSource": {
      "default": "const response = await client.getSource({ sourceID: '75eeb306-51d3-4e5e-a279-3c92bd8893ac' });"
    },
    "getTask": {
      "default": "const response = await client.getTask({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "getTaskV1": {
      "default": "const response = await client.getTaskV1({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "getTransformation": {
      "default": "const response = await client.getTransformation({ transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "listAuthentications": {
      "getAuthentications": "const response = await client.listAuthentications();",
      "getAuthentications with query params": "const response = await client.listAuthentications({\n  itemsPerPage: 2,\n  page: 1,\n  type: ['basic', 'algolia'],\n  platform: ['none'],\n  sort: 'createdAt',\n  order: 'asc',\n});"
    },
    "listDestinations": {
      "default": "const response = await client.listDestinations();"
    },
    "listEvents": {
      "default": "const response = await client.listEvents({ runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "listRuns": {
      "default": "const response = await client.listRuns();"
    },
    "listSources": {
      "default": "const response = await client.listSources();"
    },
    "listTasks": {
      "default": "const response = await client.listTasks();"
    },
    "listTasksV1": {
      "default": "const response = await client.listTasksV1();"
    },
    "listTransformations": {
      "default": "const response = await client.listTransformations();"
    },
    "pushTask": {
      "pushTask": "const response = await client.pushTask({\n  taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  pushTaskPayload: {\n    action: 'addObject',\n    records: [\n      { key: 'bar', foo: '1', objectID: 'o' },\n      { key: 'baz', foo: '2', objectID: 'k' },\n    ],\n  },\n});",
      "allows for watch query parameter": "const response = await client.pushTask({\n  taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  pushTaskPayload: {\n    action: 'addObject',\n    records: [\n      { key: 'bar', foo: '1', objectID: 'o' },\n      { key: 'baz', foo: '2', objectID: 'k' },\n    ],\n  },\n  watch: true,\n});"
    },
    "runSource": {
      "default": "const response = await client.runSource({\n  sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  runSourcePayload: {\n    indexToInclude: ['products_us', 'products eu'],\n    entityIDs: ['1234', '5678'],\n    entityType: 'product',\n  },\n});"
    },
    "runTask": {
      "default": "const response = await client.runTask({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "runTaskV1": {
      "default": "const response = await client.runTaskV1({ taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "searchAuthentications": {
      "default": "const response = await client.searchAuthentications({\n  authenticationIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],\n});"
    },
    "searchDestinations": {
      "default": "const response = await client.searchDestinations({\n  destinationIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],\n});"
    },
    "searchSources": {
      "default": "const response = await client.searchSources({\n  sourceIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],\n});"
    },
    "searchTasks": {
      "default": "const response = await client.searchTasks({\n  taskIDs: [\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n  ],\n});"
    },
    "searchTasksV1": {
      "default": "const response = await client.searchTasksV1({\n  taskIDs: [\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n  ],\n});"
    },
    "searchTransformations": {
      "default": "const response = await client.searchTransformations({\n  transformationIDs: [\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n  ],\n});"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "triggerDockerSourceDiscover": {
      "default": "const response = await client.triggerDockerSourceDiscover({ sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });"
    },
    "tryTransformation": {
      "tryTransformation": "const response = await client.tryTransformation({ code: 'foo', sampleRecord: { bar: 'baz' } });",
      "with authentications": "const response = await client.tryTransformation({\n  code: 'foo',\n  sampleRecord: { bar: 'baz' },\n  authentications: [\n    {\n      type: 'oauth',\n      name: 'authName',\n      input: { url: 'http://test.oauth', client_id: 'myID', client_secret: 'mySecret' },\n    },\n  ],\n});"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "const response = await client.tryTransformationBeforeUpdate({\n  transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  transformationTry: { code: 'foo', sampleRecord: { bar: 'baz' } },\n});",
      "existing with authentications": "const response = await client.tryTransformationBeforeUpdate({\n  transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  transformationTry: {\n    code: 'foo',\n    sampleRecord: { bar: 'baz' },\n    authentications: [\n      {\n        type: 'oauth',\n        name: 'authName',\n        input: { url: 'http://test.oauth', client_id: 'myID', client_secret: 'mySecret' },\n      },\n    ],\n  },\n});"
    },
    "updateAuthentication": {
      "default": "const response = await client.updateAuthentication({\n  authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  authenticationUpdate: { name: 'newName' },\n});"
    },
    "updateDestination": {
      "default": "const response = await client.updateDestination({\n  destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  destinationUpdate: { name: 'newName' },\n});"
    },
    "updateSource": {
      "default": "const response = await client.updateSource({\n  sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  sourceUpdate: { name: 'newName' },\n});"
    },
    "updateTask": {
      "default": "const response = await client.updateTask({\n  taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  taskUpdate: { enabled: false, cron: '* * * * *' },\n});"
    },
    "updateTaskV1": {
      "default": "const response = await client.updateTaskV1({\n  taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  taskUpdate: { enabled: false },\n});"
    },
    "updateTransformation": {
      "default": "const response = await client.updateTransformation({\n  transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  transformationCreate: { code: 'foo', name: 'bar', description: 'baz' },\n});"
    },
    "validateSource": {
      "default": "const response = await client.validateSource({\n  type: 'commercetools',\n  name: 'sourceName',\n  input: { storeKeys: ['myStore'], locales: ['de'], url: 'http://commercetools.com', projectKey: 'keyID' },\n  authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n});"
    },
    "validateSourceBeforeUpdate": {
      "default": "const response = await client.validateSourceBeforeUpdate({\n  sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n  sourceUpdate: { name: 'newName' },\n});"
    },
    "init": {
      "default": "// Replace 'us' with your Algolia Application Region\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initIngestion({ region: 'us' });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.IngestionClient\nimport com.algolia.client.configuration.*\nimport com.algolia.client.transport.*"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "var response = client.createAuthentication(\n  authenticationCreate = AuthenticationCreate(\n    type = AuthenticationType.entries.first { it.value == \"oauth\" },\n    name = \"authName\",\n    input = AuthOAuth(\n      url = \"http://test.oauth\",\n      clientId = \"myID\",\n      clientSecret = \"mySecret\",\n    ),\n  ),\n)",
      "createAuthenticationAlgolia": "var response = client.createAuthentication(\n  authenticationCreate = AuthenticationCreate(\n    type = AuthenticationType.entries.first { it.value == \"algolia\" },\n    name = \"authName\",\n    input = AuthAlgolia(\n      appID = \"ALGOLIA_APPLICATION_ID\",\n      apiKey = \"ALGOLIA_API_KEY\",\n    ),\n  ),\n)"
    },
    "createDestination": {
      "createDestination": "var response = client.createDestination(\n  destinationCreate = DestinationCreate(\n    type = DestinationType.entries.first { it.value == \"search\" },\n    name = \"destinationName\",\n    input = DestinationIndexName(\n      indexName = \"<YOUR_INDEX_NAME>\",\n    ),\n    authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ),\n)",
      "with transformationIDs": "var response = client.createDestination(\n  destinationCreate = DestinationCreate(\n    type = DestinationType.entries.first { it.value == \"search\" },\n    name = \"destinationName\",\n    input = DestinationIndexName(\n      indexName = \"<YOUR_INDEX_NAME>\",\n    ),\n    transformationIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"),\n  ),\n)"
    },
    "createSource": {
      "createSource": "var response = client.createSource(\n  sourceCreate = SourceCreate(\n    type = SourceType.entries.first { it.value == \"commercetools\" },\n    name = \"sourceName\",\n    input = SourceCommercetools(\n      storeKeys = listOf(\"myStore\"),\n      locales = listOf(\"de\"),\n      url = \"http://commercetools.com\",\n      projectKey = \"keyID\",\n    ),\n    authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ),\n)",
      "push": "var response = client.createSource(\n  sourceCreate = SourceCreate(\n    type = SourceType.entries.first { it.value == \"push\" },\n    name = \"pushezpourentrer\",\n  ),\n)"
    },
    "createTask": {
      "task without cron": "var response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    action = ActionType.entries.first { it.value == \"replace\" },\n  ),\n)",
      "task with cron": "var response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    cron = \"* * * * *\",\n    action = ActionType.entries.first { it.value == \"replace\" },\n    notifications = Notifications(\n      email = EmailNotifications(\n        enabled = true,\n      ),\n    ),\n    policies = Policies(\n      criticalThreshold = 8,\n    ),\n  ),\n)",
      "task shopify": "var response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    cron = \"* * * * *\",\n    action = ActionType.entries.first { it.value == \"replace\" },\n    input = DockerStreamsInput(\n      streams = listOf(\n        DockerStreams(\n          name = \"foo\",\n          syncMode = DockerStreamsSyncMode.entries.first { it.value == \"incremental\" },\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "createTaskV1": {
      "createTaskOnDemand": "var response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      type = OnDemandTriggerType.entries.first { it.value == \"onDemand\" },\n    ),\n    action = ActionType.entries.first { it.value == \"replace\" },\n  ),\n)",
      "createTaskSchedule": "var response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = ScheduleTriggerInput(\n      type = ScheduleTriggerType.entries.first { it.value == \"schedule\" },\n      cron = \"* * * * *\",\n    ),\n    action = ActionType.entries.first { it.value == \"replace\" },\n  ),\n)",
      "createTaskSubscription": "var response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      type = OnDemandTriggerType.entries.first { it.value == \"onDemand\" },\n    ),\n    action = ActionType.entries.first { it.value == \"replace\" },\n  ),\n)",
      "task shopify": "var response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      type = OnDemandTriggerType.entries.first { it.value == \"onDemand\" },\n    ),\n    action = ActionType.entries.first { it.value == \"replace\" },\n    input = DockerStreamsInput(\n      streams = listOf(\n        DockerStreams(\n          name = \"foo\",\n          syncMode = DockerStreamsSyncMode.entries.first { it.value == \"incremental\" },\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "createTransformation": {
      "default": "var response = client.createTransformation(\n  transformationCreate = TransformationCreate(\n    code = \"foo\",\n    name = \"bar\",\n    description = \"baz\",\n  ),\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "var response = client.customDelete(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters with space\"),\n)",
      "requestOptions should be escaped too": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"to be overriden\"),\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"parameters with space\")\n      put(\"and an array\", listOf(\"array\", \"with spaces\"))\n    },\n    headers = buildMap {\n      put(\"x-header-1\", \"spaces are left alone\")\n    },\n  ),\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "var response = client.customPost(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)",
      "requestOptions can override default query parameters": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions merges query parameters with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query2\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions can override default headers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions merges headers with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions queryParameters accepts booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"isItWorking\", true)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", 2)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of string": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(\"b and c\", \"d\"))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(true, true, false))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(1, 2))\n    },\n  ),\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "var response = client.customPut(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)"
    },
    "deleteAuthentication": {
      "default": "var response = client.deleteAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteDestination": {
      "default": "var response = client.deleteDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteSource": {
      "default": "var response = client.deleteSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTask": {
      "default": "var response = client.deleteTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTaskV1": {
      "default": "var response = client.deleteTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTransformation": {
      "default": "var response = client.deleteTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "disableTask": {
      "default": "var response = client.disableTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "disableTaskV1": {
      "default": "var response = client.disableTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "enableTask": {
      "default": "var response = client.enableTask(\n  taskID = \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n)"
    },
    "enableTaskV1": {
      "default": "var response = client.enableTaskV1(\n  taskID = \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n)"
    },
    "getAuthentication": {
      "default": "var response = client.getAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getDestination": {
      "default": "var response = client.getDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getEvent": {
      "default": "var response = client.getEvent(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  eventID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\",\n)"
    },
    "getRun": {
      "default": "var response = client.getRun(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getSource": {
      "default": "var response = client.getSource(\n  sourceID = \"75eeb306-51d3-4e5e-a279-3c92bd8893ac\",\n)"
    },
    "getTask": {
      "default": "var response = client.getTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getTaskV1": {
      "default": "var response = client.getTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getTransformation": {
      "default": "var response = client.getTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "listAuthentications": {
      "getAuthentications": "var response = client.listAuthentications()",
      "getAuthentications with query params": "var response = client.listAuthentications(\n  itemsPerPage = 2,\n  page = 1,\n  type = listOf(AuthenticationType.entries.first { it.value == \"basic\" }, AuthenticationType.entries.first { it.value == \"algolia\" }),\n  platform = listOf(PlatformNone.entries.first { it.value == \"none\" }),\n  sort = AuthenticationSortKeys.entries.first { it.value == \"createdAt\" },\n  order = OrderKeys.entries.first { it.value == \"asc\" },\n)"
    },
    "listDestinations": {
      "default": "var response = client.listDestinations()"
    },
    "listEvents": {
      "default": "var response = client.listEvents(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "listRuns": {
      "default": "var response = client.listRuns()"
    },
    "listSources": {
      "default": "var response = client.listSources()"
    },
    "listTasks": {
      "default": "var response = client.listTasks()"
    },
    "listTasksV1": {
      "default": "var response = client.listTasksV1()"
    },
    "listTransformations": {
      "default": "var response = client.listTransformations()"
    },
    "pushTask": {
      "pushTask": "var response = client.pushTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  pushTaskPayload = PushTaskPayload(\n    action = Action.entries.first { it.value == \"addObject\" },\n    records = listOf(\n      PushTaskRecords(\n        objectID = \"o\",\n        additionalProperties = mapOf(\n          \"key\" to JsonPrimitive(\"bar\"),\n          \"foo\" to JsonPrimitive(\"1\"),\n        ),\n      ),\n      PushTaskRecords(\n        objectID = \"k\",\n        additionalProperties = mapOf(\n          \"key\" to JsonPrimitive(\"baz\"),\n          \"foo\" to JsonPrimitive(\"2\"),\n        ),\n      ),\n    ),\n  ),\n)",
      "allows for watch query parameter": "var response = client.pushTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  pushTaskPayload = PushTaskPayload(\n    action = Action.entries.first { it.value == \"addObject\" },\n    records = listOf(\n      PushTaskRecords(\n        objectID = \"o\",\n        additionalProperties = mapOf(\n          \"key\" to JsonPrimitive(\"bar\"),\n          \"foo\" to JsonPrimitive(\"1\"),\n        ),\n      ),\n      PushTaskRecords(\n        objectID = \"k\",\n        additionalProperties = mapOf(\n          \"key\" to JsonPrimitive(\"baz\"),\n          \"foo\" to JsonPrimitive(\"2\"),\n        ),\n      ),\n    ),\n  ),\n  watch = true,\n)"
    },
    "runSource": {
      "default": "var response = client.runSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  runSourcePayload = RunSourcePayload(\n    indexToInclude = listOf(\"products_us\", \"products eu\"),\n    entityIDs = listOf(\"1234\", \"5678\"),\n    entityType = EntityType.entries.first { it.value == \"product\" },\n  ),\n)"
    },
    "runTask": {
      "default": "var response = client.runTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "runTaskV1": {
      "default": "var response = client.runTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "searchAuthentications": {
      "default": "var response = client.searchAuthentications(\n  authenticationSearch = AuthenticationSearch(\n    authenticationIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"),\n  ),\n)"
    },
    "searchDestinations": {
      "default": "var response = client.searchDestinations(\n  destinationSearch = DestinationSearch(\n    destinationIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"),\n  ),\n)"
    },
    "searchSources": {
      "default": "var response = client.searchSources(\n  sourceSearch = SourceSearch(\n    sourceIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"),\n  ),\n)"
    },
    "searchTasks": {
      "default": "var response = client.searchTasks(\n  taskSearch = TaskSearch(\n    taskIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"),\n  ),\n)"
    },
    "searchTasksV1": {
      "default": "var response = client.searchTasksV1(\n  taskSearch = TaskSearch(\n    taskIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"),\n  ),\n)"
    },
    "searchTransformations": {
      "default": "var response = client.searchTransformations(\n  transformationSearch = TransformationSearch(\n    transformationIDs = listOf(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\", \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"),\n  ),\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "triggerDockerSourceDiscover": {
      "default": "var response = client.triggerDockerSourceDiscover(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "tryTransformation": {
      "tryTransformation": "var response = client.tryTransformation(\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = buildJsonObject {\n      put(\n        \"bar\",\n        JsonPrimitive(\"baz\"),\n      )\n    },\n  ),\n)",
      "with authentications": "var response = client.tryTransformation(\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = buildJsonObject {\n      put(\n        \"bar\",\n        JsonPrimitive(\"baz\"),\n      )\n    },\n    authentications = listOf(\n      AuthenticationCreate(\n        type = AuthenticationType.entries.first { it.value == \"oauth\" },\n        name = \"authName\",\n        input = AuthOAuth(\n          url = \"http://test.oauth\",\n          clientId = \"myID\",\n          clientSecret = \"mySecret\",\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "var response = client.tryTransformationBeforeUpdate(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = buildJsonObject {\n      put(\n        \"bar\",\n        JsonPrimitive(\"baz\"),\n      )\n    },\n  ),\n)",
      "existing with authentications": "var response = client.tryTransformationBeforeUpdate(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = buildJsonObject {\n      put(\n        \"bar\",\n        JsonPrimitive(\"baz\"),\n      )\n    },\n    authentications = listOf(\n      AuthenticationCreate(\n        type = AuthenticationType.entries.first { it.value == \"oauth\" },\n        name = \"authName\",\n        input = AuthOAuth(\n          url = \"http://test.oauth\",\n          clientId = \"myID\",\n          clientSecret = \"mySecret\",\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "updateAuthentication": {
      "default": "var response = client.updateAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  authenticationUpdate = AuthenticationUpdate(\n    name = \"newName\",\n  ),\n)"
    },
    "updateDestination": {
      "default": "var response = client.updateDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  destinationUpdate = DestinationUpdate(\n    name = \"newName\",\n  ),\n)"
    },
    "updateSource": {
      "default": "var response = client.updateSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  sourceUpdate = SourceUpdate(\n    name = \"newName\",\n  ),\n)"
    },
    "updateTask": {
      "default": "var response = client.updateTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  taskUpdate = TaskUpdate(\n    enabled = false,\n    cron = \"* * * * *\",\n  ),\n)"
    },
    "updateTaskV1": {
      "default": "var response = client.updateTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  taskUpdate = TaskUpdateV1(\n    enabled = false,\n  ),\n)"
    },
    "updateTransformation": {
      "default": "var response = client.updateTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationCreate = TransformationCreate(\n    code = \"foo\",\n    name = \"bar\",\n    description = \"baz\",\n  ),\n)"
    },
    "validateSource": {
      "default": "var response = client.validateSource(\n  sourceCreate = SourceCreate(\n    type = SourceType.entries.first { it.value == \"commercetools\" },\n    name = \"sourceName\",\n    input = SourceCommercetools(\n      storeKeys = listOf(\"myStore\"),\n      locales = listOf(\"de\"),\n      url = \"http://commercetools.com\",\n      projectKey = \"keyID\",\n    ),\n    authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  ),\n)"
    },
    "validateSourceBeforeUpdate": {
      "default": "var response = client.validateSourceBeforeUpdate(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  sourceUpdate = SourceUpdate(\n    name = \"newName\",\n  ),\n)"
    },
    "init": {
      "default": "val client = IngestionClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\", region = \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\IngestionClient;"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "$response = $client->createAuthentication(\n    ['type' => 'oauth',\n        'name' => 'authName',\n        'input' => ['url' => 'http://test.oauth',\n            'client_id' => 'myID',\n            'client_secret' => 'mySecret',\n        ],\n    ],\n);",
      "createAuthenticationAlgolia": "$response = $client->createAuthentication(\n    ['type' => 'algolia',\n        'name' => 'authName',\n        'input' => ['appID' => 'ALGOLIA_APPLICATION_ID',\n            'apiKey' => 'ALGOLIA_API_KEY',\n        ],\n    ],\n);"
    },
    "createDestination": {
      "createDestination": "$response = $client->createDestination(\n    ['type' => 'search',\n        'name' => 'destinationName',\n        'input' => ['indexName' => '<YOUR_INDEX_NAME>',\n        ],\n        'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ],\n);",
      "with transformationIDs": "$response = $client->createDestination(\n    ['type' => 'search',\n        'name' => 'destinationName',\n        'input' => ['indexName' => '<YOUR_INDEX_NAME>',\n        ],\n        'transformationIDs' => [\n            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n        ],\n    ],\n);"
    },
    "createSource": {
      "createSource": "$response = $client->createSource(\n    ['type' => 'commercetools',\n        'name' => 'sourceName',\n        'input' => ['storeKeys' => [\n            'myStore',\n        ],\n            'locales' => [\n                'de',\n            ],\n            'url' => 'http://commercetools.com',\n            'projectKey' => 'keyID',\n        ],\n        'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ],\n);",
      "push": "$response = $client->createSource(\n    ['type' => 'push',\n        'name' => 'pushezpourentrer',\n    ],\n);"
    },
    "createTask": {
      "task without cron": "$response = $client->createTask(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'action' => 'replace',\n    ],\n);",
      "task with cron": "$response = $client->createTask(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'cron' => '* * * * *',\n        'action' => 'replace',\n        'notifications' => ['email' => ['enabled' => true,\n        ],\n        ],\n        'policies' => ['criticalThreshold' => 8,\n        ],\n    ],\n);",
      "task shopify": "$response = $client->createTask(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'cron' => '* * * * *',\n        'action' => 'replace',\n        'input' => ['streams' => [\n            ['name' => 'foo',\n                'syncMode' => 'incremental',\n            ],\n        ],\n        ],\n    ],\n);"
    },
    "createTaskV1": {
      "createTaskOnDemand": "$response = $client->createTaskV1(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'trigger' => ['type' => 'onDemand',\n        ],\n        'action' => 'replace',\n    ],\n);",
      "createTaskSchedule": "$response = $client->createTaskV1(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'trigger' => ['type' => 'schedule',\n            'cron' => '* * * * *',\n        ],\n        'action' => 'replace',\n    ],\n);",
      "createTaskSubscription": "$response = $client->createTaskV1(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'trigger' => ['type' => 'onDemand',\n        ],\n        'action' => 'replace',\n    ],\n);",
      "task shopify": "$response = $client->createTaskV1(\n    ['sourceID' => 'search',\n        'destinationID' => 'destinationName',\n        'trigger' => ['type' => 'onDemand',\n        ],\n        'action' => 'replace',\n        'input' => ['streams' => [\n            ['name' => 'foo',\n                'syncMode' => 'incremental',\n            ],\n        ],\n        ],\n    ],\n);"
    },
    "createTransformation": {
      "default": "$response = $client->createTransformation(\n    ['code' => 'foo',\n        'name' => 'bar',\n        'description' => 'baz',\n    ],\n);"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "allow del method for a custom path with all parameters": "$response = $client->customDelete(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "$response = $client->customGet(\n    'test/minimal',\n);",
      "allow get method for a custom path with all parameters": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'parameters with space',\n    ],\n);",
      "requestOptions should be escaped too": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'to be overriden',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'parameters with space',\n            'and an array' => ['array', 'with spaces',\n            ],\n        ],\n        'headers' => [\n            'x-header-1' => 'spaces are left alone',\n        ],\n    ]\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "$response = $client->customPost(\n    'test/minimal',\n);",
      "allow post method for a custom path with all parameters": "$response = $client->customPost(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);",
      "requestOptions can override default query parameters": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions merges query parameters with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query2' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions can override default headers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions merges headers with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions queryParameters accepts booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'isItWorking' => true,\n        ], ]\n);",
      "requestOptions queryParameters accepts integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => 2,\n        ], ]\n);",
      "requestOptions queryParameters accepts list of string": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => ['b and c', 'd',\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [true, true, false,\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [1, 2,\n            ],\n        ], ]\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "$response = $client->customPut(\n    'test/minimal',\n);",
      "allow put method for a custom path with all parameters": "$response = $client->customPut(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);"
    },
    "deleteAuthentication": {
      "default": "$response = $client->deleteAuthentication(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "deleteDestination": {
      "default": "$response = $client->deleteDestination(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "deleteSource": {
      "default": "$response = $client->deleteSource(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "deleteTask": {
      "default": "$response = $client->deleteTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "deleteTaskV1": {
      "default": "$response = $client->deleteTaskV1(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "deleteTransformation": {
      "default": "$response = $client->deleteTransformation(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "disableTask": {
      "default": "$response = $client->disableTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "disableTaskV1": {
      "default": "$response = $client->disableTaskV1(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "enableTask": {
      "default": "$response = $client->enableTask(\n    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n);"
    },
    "enableTaskV1": {
      "default": "$response = $client->enableTaskV1(\n    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n);"
    },
    "getAuthentication": {
      "default": "$response = $client->getAuthentication(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "getDestination": {
      "default": "$response = $client->getDestination(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "getEvent": {
      "default": "$response = $client->getEvent(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0c',\n);"
    },
    "getRun": {
      "default": "$response = $client->getRun(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "getSource": {
      "default": "$response = $client->getSource(\n    '75eeb306-51d3-4e5e-a279-3c92bd8893ac',\n);"
    },
    "getTask": {
      "default": "$response = $client->getTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "getTaskV1": {
      "default": "$response = $client->getTaskV1(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "getTransformation": {
      "default": "$response = $client->getTransformation(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "listAuthentications": {
      "getAuthentications": "$response = $client->listAuthentications();",
      "getAuthentications with query params": "$response = $client->listAuthentications(\n    2,\n    1,\n    [\n        'basic',\n\n        'algolia',\n    ],\n    [\n        'none',\n    ],\n    'createdAt',\n    'asc',\n);"
    },
    "listDestinations": {
      "default": "$response = $client->listDestinations();"
    },
    "listEvents": {
      "default": "$response = $client->listEvents(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "listRuns": {
      "default": "$response = $client->listRuns();"
    },
    "listSources": {
      "default": "$response = $client->listSources();"
    },
    "listTasks": {
      "default": "$response = $client->listTasks();"
    },
    "listTasksV1": {
      "default": "$response = $client->listTasksV1();"
    },
    "listTransformations": {
      "default": "$response = $client->listTransformations();"
    },
    "pushTask": {
      "pushTask": "$response = $client->pushTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['action' => 'addObject',\n        'records' => [\n            ['key' => 'bar',\n                'foo' => '1',\n                'objectID' => 'o',\n            ],\n\n            ['key' => 'baz',\n                'foo' => '2',\n                'objectID' => 'k',\n            ],\n        ],\n    ],\n);",
      "allows for watch query parameter": "$response = $client->pushTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['action' => 'addObject',\n        'records' => [\n            ['key' => 'bar',\n                'foo' => '1',\n                'objectID' => 'o',\n            ],\n\n            ['key' => 'baz',\n                'foo' => '2',\n                'objectID' => 'k',\n            ],\n        ],\n    ],\n    true,\n);"
    },
    "runSource": {
      "default": "$response = $client->runSource(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['indexToInclude' => [\n        'products_us',\n\n        'products eu',\n    ],\n        'entityIDs' => [\n            '1234',\n\n            '5678',\n        ],\n        'entityType' => 'product',\n    ],\n);"
    },
    "runTask": {
      "default": "$response = $client->runTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "runTaskV1": {
      "default": "$response = $client->runTaskV1(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "searchAuthentications": {
      "default": "$response = $client->searchAuthentications(\n    ['authenticationIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    ],\n    ],\n);"
    },
    "searchDestinations": {
      "default": "$response = $client->searchDestinations(\n    ['destinationIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    ],\n    ],\n);"
    },
    "searchSources": {
      "default": "$response = $client->searchSources(\n    ['sourceIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n    ],\n    ],\n);"
    },
    "searchTasks": {
      "default": "$response = $client->searchTasks(\n    ['taskIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n\n        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n    ],\n    ],\n);"
    },
    "searchTasksV1": {
      "default": "$response = $client->searchTasksV1(\n    ['taskIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n\n        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n    ],\n    ],\n);"
    },
    "searchTransformations": {
      "default": "$response = $client->searchTransformations(\n    ['transformationIDs' => [\n        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n\n        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',\n\n        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',\n    ],\n    ],\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "triggerDockerSourceDiscover": {
      "default": "$response = $client->triggerDockerSourceDiscover(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n);"
    },
    "tryTransformation": {
      "tryTransformation": "$response = $client->tryTransformation(\n    ['code' => 'foo',\n        'sampleRecord' => ['bar' => 'baz',\n        ],\n    ],\n);",
      "with authentications": "$response = $client->tryTransformation(\n    ['code' => 'foo',\n        'sampleRecord' => ['bar' => 'baz',\n        ],\n        'authentications' => [\n            ['type' => 'oauth',\n                'name' => 'authName',\n                'input' => ['url' => 'http://test.oauth',\n                    'client_id' => 'myID',\n                    'client_secret' => 'mySecret',\n                ],\n            ],\n        ],\n    ],\n);"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "$response = $client->tryTransformationBeforeUpdate(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['code' => 'foo',\n        'sampleRecord' => ['bar' => 'baz',\n        ],\n    ],\n);",
      "existing with authentications": "$response = $client->tryTransformationBeforeUpdate(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['code' => 'foo',\n        'sampleRecord' => ['bar' => 'baz',\n        ],\n        'authentications' => [\n            ['type' => 'oauth',\n                'name' => 'authName',\n                'input' => ['url' => 'http://test.oauth',\n                    'client_id' => 'myID',\n                    'client_secret' => 'mySecret',\n                ],\n            ],\n        ],\n    ],\n);"
    },
    "updateAuthentication": {
      "default": "$response = $client->updateAuthentication(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['name' => 'newName',\n    ],\n);"
    },
    "updateDestination": {
      "default": "$response = $client->updateDestination(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['name' => 'newName',\n    ],\n);"
    },
    "updateSource": {
      "default": "$response = $client->updateSource(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['name' => 'newName',\n    ],\n);"
    },
    "updateTask": {
      "default": "$response = $client->updateTask(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['enabled' => false,\n        'cron' => '* * * * *',\n    ],\n);"
    },
    "updateTaskV1": {
      "default": "$response = $client->updateTaskV1(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['enabled' => false,\n    ],\n);"
    },
    "updateTransformation": {
      "default": "$response = $client->updateTransformation(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['code' => 'foo',\n        'name' => 'bar',\n        'description' => 'baz',\n    ],\n);"
    },
    "validateSource": {
      "default": "$response = $client->validateSource(\n    ['type' => 'commercetools',\n        'name' => 'sourceName',\n        'input' => ['storeKeys' => [\n            'myStore',\n        ],\n            'locales' => [\n                'de',\n            ],\n            'url' => 'http://commercetools.com',\n            'projectKey' => 'keyID',\n        ],\n        'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ],\n);"
    },
    "validateSourceBeforeUpdate": {
      "default": "$response = $client->validateSourceBeforeUpdate(\n    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',\n    ['name' => 'newName',\n    ],\n);"
    },
    "init": {
      "default": "$client = IngestionClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.ingestion.client import IngestionClientSync\nfrom json import loads"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "response = client.create_authentication(\n    authentication_create={\n        \"type\": \"oauth\",\n        \"name\": \"authName\",\n        \"input\": {\n            \"url\": \"http://test.oauth\",\n            \"client_id\": \"myID\",\n            \"client_secret\": \"mySecret\",\n        },\n    },\n)",
      "createAuthenticationAlgolia": "response = client.create_authentication(\n    authentication_create={\n        \"type\": \"algolia\",\n        \"name\": \"authName\",\n        \"input\": {\n            \"appID\": \"ALGOLIA_APPLICATION_ID\",\n            \"apiKey\": \"ALGOLIA_API_KEY\",\n        },\n    },\n)"
    },
    "createDestination": {
      "createDestination": "response = client.create_destination(\n    destination_create={\n        \"type\": \"search\",\n        \"name\": \"destinationName\",\n        \"input\": {\n            \"indexName\": \"<YOUR_INDEX_NAME>\",\n        },\n        \"authenticationID\": \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    },\n)",
      "with transformationIDs": "response = client.create_destination(\n    destination_create={\n        \"type\": \"search\",\n        \"name\": \"destinationName\",\n        \"input\": {\n            \"indexName\": \"<YOUR_INDEX_NAME>\",\n        },\n        \"transformationIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        ],\n    },\n)"
    },
    "createSource": {
      "createSource": "response = client.create_source(\n    source_create={\n        \"type\": \"commercetools\",\n        \"name\": \"sourceName\",\n        \"input\": {\n            \"storeKeys\": [\n                \"myStore\",\n            ],\n            \"locales\": [\n                \"de\",\n            ],\n            \"url\": \"http://commercetools.com\",\n            \"projectKey\": \"keyID\",\n        },\n        \"authenticationID\": \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    },\n)",
      "push": "response = client.create_source(\n    source_create={\n        \"type\": \"push\",\n        \"name\": \"pushezpourentrer\",\n    },\n)"
    },
    "createTask": {
      "task without cron": "response = client.create_task(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"action\": \"replace\",\n    },\n)",
      "task with cron": "response = client.create_task(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"cron\": \"* * * * *\",\n        \"action\": \"replace\",\n        \"notifications\": {\n            \"email\": {\n                \"enabled\": True,\n            },\n        },\n        \"policies\": {\n            \"criticalThreshold\": 8,\n        },\n    },\n)",
      "task shopify": "response = client.create_task(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"cron\": \"* * * * *\",\n        \"action\": \"replace\",\n        \"input\": {\n            \"streams\": [\n                {\n                    \"name\": \"foo\",\n                    \"syncMode\": \"incremental\",\n                },\n            ],\n        },\n    },\n)"
    },
    "createTaskV1": {
      "createTaskOnDemand": "response = client.create_task_v1(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"trigger\": {\n            \"type\": \"onDemand\",\n        },\n        \"action\": \"replace\",\n    },\n)",
      "createTaskSchedule": "response = client.create_task_v1(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"trigger\": {\n            \"type\": \"schedule\",\n            \"cron\": \"* * * * *\",\n        },\n        \"action\": \"replace\",\n    },\n)",
      "createTaskSubscription": "response = client.create_task_v1(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"trigger\": {\n            \"type\": \"onDemand\",\n        },\n        \"action\": \"replace\",\n    },\n)",
      "task shopify": "response = client.create_task_v1(\n    task_create={\n        \"sourceID\": \"search\",\n        \"destinationID\": \"destinationName\",\n        \"trigger\": {\n            \"type\": \"onDemand\",\n        },\n        \"action\": \"replace\",\n        \"input\": {\n            \"streams\": [\n                {\n                    \"name\": \"foo\",\n                    \"syncMode\": \"incremental\",\n                },\n            ],\n        },\n    },\n)"
    },
    "createTransformation": {
      "default": "response = client.create_transformation(\n    transformation_create={\n        \"code\": \"foo\",\n        \"name\": \"bar\",\n        \"description\": \"baz\",\n    },\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters with space\",\n    },\n)",
      "requestOptions should be escaped too": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"to be overriden\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-header-1\":\"spaces are left alone\"}\"\"\"),\n        \"query_parameters\": loads(\n            \"\"\"{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}\"\"\"\n        ),\n    },\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)",
      "requestOptions can override default query parameters": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query2\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"isItWorking\":true}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":2}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[\"b and c\",\"d\"]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[true,true,false]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[1,2]}\"\"\"),\n    },\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)"
    },
    "deleteAuthentication": {
      "default": "response = client.delete_authentication(\n    authentication_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteDestination": {
      "default": "response = client.delete_destination(\n    destination_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteSource": {
      "default": "response = client.delete_source(\n    source_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTask": {
      "default": "response = client.delete_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTaskV1": {
      "default": "response = client.delete_task_v1(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "deleteTransformation": {
      "default": "response = client.delete_transformation(\n    transformation_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "disableTask": {
      "default": "response = client.disable_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "disableTaskV1": {
      "default": "response = client.disable_task_v1(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "enableTask": {
      "default": "response = client.enable_task(\n    task_id=\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n)"
    },
    "enableTaskV1": {
      "default": "response = client.enable_task_v1(\n    task_id=\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n)"
    },
    "getAuthentication": {
      "default": "response = client.get_authentication(\n    authentication_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getDestination": {
      "default": "response = client.get_destination(\n    destination_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getEvent": {
      "default": "response = client.get_event(\n    run_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    event_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0c\",\n)"
    },
    "getRun": {
      "default": "response = client.get_run(\n    run_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getSource": {
      "default": "response = client.get_source(\n    source_id=\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\",\n)"
    },
    "getTask": {
      "default": "response = client.get_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getTaskV1": {
      "default": "response = client.get_task_v1(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "getTransformation": {
      "default": "response = client.get_transformation(\n    transformation_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "listAuthentications": {
      "getAuthentications": "response = client.list_authentications()",
      "getAuthentications with query params": "response = client.list_authentications(\n    items_per_page=2,\n    page=1,\n    type=[\n        \"basic\",\n        \"algolia\",\n    ],\n    platform=[\n        \"none\",\n    ],\n    sort=\"createdAt\",\n    order=\"asc\",\n)"
    },
    "listDestinations": {
      "default": "response = client.list_destinations()"
    },
    "listEvents": {
      "default": "response = client.list_events(\n    run_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "listRuns": {
      "default": "response = client.list_runs()"
    },
    "listSources": {
      "default": "response = client.list_sources()"
    },
    "listTasks": {
      "default": "response = client.list_tasks()"
    },
    "listTasksV1": {
      "default": "response = client.list_tasks_v1()"
    },
    "listTransformations": {
      "default": "response = client.list_transformations()"
    },
    "pushTask": {
      "pushTask": "response = client.push_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    push_task_payload={\n        \"action\": \"addObject\",\n        \"records\": [\n            {\n                \"key\": \"bar\",\n                \"foo\": \"1\",\n                \"objectID\": \"o\",\n            },\n            {\n                \"key\": \"baz\",\n                \"foo\": \"2\",\n                \"objectID\": \"k\",\n            },\n        ],\n    },\n)",
      "allows for watch query parameter": "response = client.push_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    push_task_payload={\n        \"action\": \"addObject\",\n        \"records\": [\n            {\n                \"key\": \"bar\",\n                \"foo\": \"1\",\n                \"objectID\": \"o\",\n            },\n            {\n                \"key\": \"baz\",\n                \"foo\": \"2\",\n                \"objectID\": \"k\",\n            },\n        ],\n    },\n    watch=True,\n)"
    },
    "runSource": {
      "default": "response = client.run_source(\n    source_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    run_source_payload={\n        \"indexToInclude\": [\n            \"products_us\",\n            \"products eu\",\n        ],\n        \"entityIDs\": [\n            \"1234\",\n            \"5678\",\n        ],\n        \"entityType\": \"product\",\n    },\n)"
    },
    "runTask": {
      "default": "response = client.run_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "runTaskV1": {
      "default": "response = client.run_task_v1(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "searchAuthentications": {
      "default": "response = client.search_authentications(\n    authentication_search={\n        \"authenticationIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        ],\n    },\n)"
    },
    "searchDestinations": {
      "default": "response = client.search_destinations(\n    destination_search={\n        \"destinationIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        ],\n    },\n)"
    },
    "searchSources": {
      "default": "response = client.search_sources(\n    source_search={\n        \"sourceIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        ],\n    },\n)"
    },
    "searchTasks": {
      "default": "response = client.search_tasks(\n    task_search={\n        \"taskIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n            \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n        ],\n    },\n)"
    },
    "searchTasksV1": {
      "default": "response = client.search_tasks_v1(\n    task_search={\n        \"taskIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n            \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n        ],\n    },\n)"
    },
    "searchTransformations": {
      "default": "response = client.search_transformations(\n    transformation_search={\n        \"transformationIDs\": [\n            \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n            \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n            \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n        ],\n    },\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "triggerDockerSourceDiscover": {
      "default": "response = client.trigger_docker_source_discover(\n    source_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n)"
    },
    "tryTransformation": {
      "tryTransformation": "response = client.try_transformation(\n    transformation_try={\n        \"code\": \"foo\",\n        \"sampleRecord\": {\n            \"bar\": \"baz\",\n        },\n    },\n)",
      "with authentications": "response = client.try_transformation(\n    transformation_try={\n        \"code\": \"foo\",\n        \"sampleRecord\": {\n            \"bar\": \"baz\",\n        },\n        \"authentications\": [\n            {\n                \"type\": \"oauth\",\n                \"name\": \"authName\",\n                \"input\": {\n                    \"url\": \"http://test.oauth\",\n                    \"client_id\": \"myID\",\n                    \"client_secret\": \"mySecret\",\n                },\n            },\n        ],\n    },\n)"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "response = client.try_transformation_before_update(\n    transformation_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformation_try={\n        \"code\": \"foo\",\n        \"sampleRecord\": {\n            \"bar\": \"baz\",\n        },\n    },\n)",
      "existing with authentications": "response = client.try_transformation_before_update(\n    transformation_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformation_try={\n        \"code\": \"foo\",\n        \"sampleRecord\": {\n            \"bar\": \"baz\",\n        },\n        \"authentications\": [\n            {\n                \"type\": \"oauth\",\n                \"name\": \"authName\",\n                \"input\": {\n                    \"url\": \"http://test.oauth\",\n                    \"client_id\": \"myID\",\n                    \"client_secret\": \"mySecret\",\n                },\n            },\n        ],\n    },\n)"
    },
    "updateAuthentication": {
      "default": "response = client.update_authentication(\n    authentication_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    authentication_update={\n        \"name\": \"newName\",\n    },\n)"
    },
    "updateDestination": {
      "default": "response = client.update_destination(\n    destination_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    destination_update={\n        \"name\": \"newName\",\n    },\n)"
    },
    "updateSource": {
      "default": "response = client.update_source(\n    source_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    source_update={\n        \"name\": \"newName\",\n    },\n)"
    },
    "updateTask": {
      "default": "response = client.update_task(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    task_update={\n        \"enabled\": False,\n        \"cron\": \"* * * * *\",\n    },\n)"
    },
    "updateTaskV1": {
      "default": "response = client.update_task_v1(\n    task_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    task_update={\n        \"enabled\": False,\n    },\n)"
    },
    "updateTransformation": {
      "default": "response = client.update_transformation(\n    transformation_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformation_create={\n        \"code\": \"foo\",\n        \"name\": \"bar\",\n        \"description\": \"baz\",\n    },\n)"
    },
    "validateSource": {
      "default": "response = client.validate_source(\n    source_create={\n        \"type\": \"commercetools\",\n        \"name\": \"sourceName\",\n        \"input\": {\n            \"storeKeys\": [\n                \"myStore\",\n            ],\n            \"locales\": [\n                \"de\",\n            ],\n            \"url\": \"http://commercetools.com\",\n            \"projectKey\": \"keyID\",\n        },\n        \"authenticationID\": \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    },\n)"
    },
    "validateSourceBeforeUpdate": {
      "default": "response = client.validate_source_before_update(\n    source_id=\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    source_update={\n        \"name\": \"newName\",\n    },\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use IngestionClient instead, which exposes the exact same methods.\nclient = IngestionClientSync(\n    \"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "response = client.create_authentication(\n  Algolia::Ingestion::AuthenticationCreate.new(\n    type: \"oauth\",\n    name: \"authName\",\n    input: Algolia::Ingestion::AuthOAuth.new(url: \"http://test.oauth\", client_id: \"myID\", client_secret: \"mySecret\")\n  )\n)",
      "createAuthenticationAlgolia": "response = client.create_authentication(\n  Algolia::Ingestion::AuthenticationCreate.new(\n    type: \"algolia\",\n    name: \"authName\",\n    input: Algolia::Ingestion::AuthAlgolia.new(app_id: \"ALGOLIA_APPLICATION_ID\", api_key: \"ALGOLIA_API_KEY\")\n  )\n)"
    },
    "createDestination": {
      "createDestination": "response = client.create_destination(\n  Algolia::Ingestion::DestinationCreate.new(\n    type: \"search\",\n    name: \"destinationName\",\n    input: Algolia::Ingestion::DestinationIndexName.new(index_name: \"<YOUR_INDEX_NAME>\"),\n    authentication_id: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n  )\n)",
      "with transformationIDs": "response = client.create_destination(\n  Algolia::Ingestion::DestinationCreate.new(\n    type: \"search\",\n    name: \"destinationName\",\n    input: Algolia::Ingestion::DestinationIndexName.new(index_name: \"<YOUR_INDEX_NAME>\"),\n    transformation_ids: [\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"]\n  )\n)"
    },
    "createSource": {
      "createSource": "response = client.create_source(\n  Algolia::Ingestion::SourceCreate.new(\n    type: \"commercetools\",\n    name: \"sourceName\",\n    input: Algolia::Ingestion::SourceCommercetools.new(\n      store_keys: [\"myStore\"],\n      locales: [\"de\"],\n      url: \"http://commercetools.com\",\n      project_key: \"keyID\"\n    ),\n    authentication_id: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n  )\n)",
      "push": "response = client.create_source(Algolia::Ingestion::SourceCreate.new(type: \"push\", name: \"pushezpourentrer\"))"
    },
    "createTask": {
      "task without cron": "response = client.create_task(\n  Algolia::Ingestion::TaskCreate.new(source_id: \"search\", destination_id: \"destinationName\", action: \"replace\")\n)",
      "task with cron": "response = client.create_task(\n  Algolia::Ingestion::TaskCreate.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    cron: \"* * * * *\",\n    action: \"replace\",\n    notifications: Algolia::Ingestion::Notifications.new(\n      email: Algolia::Ingestion::EmailNotifications.new(enabled: true)\n    ),\n    policies: Algolia::Ingestion::Policies.new(critical_threshold: 8)\n  )\n)",
      "task shopify": "response = client.create_task(\n  Algolia::Ingestion::TaskCreate.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    cron: \"* * * * *\",\n    action: \"replace\",\n    input: Algolia::Ingestion::DockerStreamsInput.new(\n      streams: [Algolia::Ingestion::DockerStreams.new(name: \"foo\", sync_mode: \"incremental\")]\n    )\n  )\n)"
    },
    "createTaskV1": {
      "createTaskOnDemand": "response = client.create_task_v1(\n  Algolia::Ingestion::TaskCreateV1.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    trigger: Algolia::Ingestion::OnDemandTriggerInput.new(type: \"onDemand\"),\n    action: \"replace\"\n  )\n)",
      "createTaskSchedule": "response = client.create_task_v1(\n  Algolia::Ingestion::TaskCreateV1.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    trigger: Algolia::Ingestion::ScheduleTriggerInput.new(type: \"schedule\", cron: \"* * * * *\"),\n    action: \"replace\"\n  )\n)",
      "createTaskSubscription": "response = client.create_task_v1(\n  Algolia::Ingestion::TaskCreateV1.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    trigger: Algolia::Ingestion::OnDemandTriggerInput.new(type: \"onDemand\"),\n    action: \"replace\"\n  )\n)",
      "task shopify": "response = client.create_task_v1(\n  Algolia::Ingestion::TaskCreateV1.new(\n    source_id: \"search\",\n    destination_id: \"destinationName\",\n    trigger: Algolia::Ingestion::OnDemandTriggerInput.new(type: \"onDemand\"),\n    action: \"replace\",\n    input: Algolia::Ingestion::DockerStreamsInput.new(\n      streams: [Algolia::Ingestion::DockerStreams.new(name: \"foo\", sync_mode: \"incremental\")]\n    )\n  )\n)"
    },
    "createTransformation": {
      "default": "response = client.create_transformation(\n  Algolia::Ingestion::TransformationCreate.new(code: \"foo\", name: \"bar\", description: \"baz\")\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\"test/minimal\")",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\"test/all\", {query: \"parameters\"})"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\"test/minimal\")",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\"test/all\", {query: \"parameters with space\"})",
      "requestOptions should be escaped too": "response = client.custom_get(\n  \"test/all\",\n  {query: \"to be overriden\"},\n  {\n    :header_params => JSON.parse(\"{\\\"x-header-1\\\":\\\"spaces are left alone\\\"}\", :symbolize_names => true),\n    :query_params => JSON.parse(\n      \"{\\\"query\\\":\\\"parameters with space\\\",\\\"and an array\\\":[\\\"array\\\",\\\"with spaces\\\"]}\",\n      :symbolize_names => true\n    )\n  }\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\"test/minimal\")",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})",
      "requestOptions can override default query parameters": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query2\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => JSON.parse(\"{\\\"x-algolia-api-key\\\":\\\"ALGOLIA_API_KEY\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => JSON.parse(\"{\\\"x-algolia-api-key\\\":\\\"ALGOLIA_API_KEY\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"isItWorking\\\":true}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":2}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[\\\"b and c\\\",\\\"d\\\"]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[true,true,false]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[1,2]}\", :symbolize_names => true)}\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\"test/minimal\")",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})"
    },
    "deleteAuthentication": {
      "default": "response = client.delete_authentication(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteDestination": {
      "default": "response = client.delete_destination(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteSource": {
      "default": "response = client.delete_source(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTask": {
      "default": "response = client.delete_task(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTaskV1": {
      "default": "response = client.delete_task_v1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTransformation": {
      "default": "response = client.delete_transformation(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "disableTask": {
      "default": "response = client.disable_task(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "disableTaskV1": {
      "default": "response = client.disable_task_v1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "enableTask": {
      "default": "response = client.enable_task(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\")"
    },
    "enableTaskV1": {
      "default": "response = client.enable_task_v1(\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\")"
    },
    "getAuthentication": {
      "default": "response = client.get_authentication(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getDestination": {
      "default": "response = client.get_destination(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getEvent": {
      "default": "response = client.get_event(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\")"
    },
    "getRun": {
      "default": "response = client.get_run(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getSource": {
      "default": "response = client.get_source(\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\")"
    },
    "getTask": {
      "default": "response = client.get_task(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getTaskV1": {
      "default": "response = client.get_task_v1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getTransformation": {
      "default": "response = client.get_transformation(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "listAuthentications": {
      "getAuthentications": "response = client.list_authentications",
      "getAuthentications with query params": "response = client.list_authentications(2, 1, [\"basic\", \"algolia\"], [\"none\"], \"createdAt\", \"asc\")"
    },
    "listDestinations": {
      "default": "response = client.list_destinations"
    },
    "listEvents": {
      "default": "response = client.list_events(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "listRuns": {
      "default": "response = client.list_runs"
    },
    "listSources": {
      "default": "response = client.list_sources"
    },
    "listTasks": {
      "default": "response = client.list_tasks"
    },
    "listTasksV1": {
      "default": "response = client.list_tasks_v1"
    },
    "listTransformations": {
      "default": "response = client.list_transformations"
    },
    "pushTask": {
      "pushTask": "response = client.push_task(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::PushTaskPayload.new(\n    action: \"addObject\",\n    records: [\n      Algolia::Ingestion::PushTaskRecords.new(key: \"bar\", foo: \"1\", algolia_object_id: \"o\"),\n      Algolia::Ingestion::PushTaskRecords.new(key: \"baz\", foo: \"2\", algolia_object_id: \"k\")\n    ]\n  )\n)",
      "allows for watch query parameter": "response = client.push_task(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::PushTaskPayload.new(\n    action: \"addObject\",\n    records: [\n      Algolia::Ingestion::PushTaskRecords.new(key: \"bar\", foo: \"1\", algolia_object_id: \"o\"),\n      Algolia::Ingestion::PushTaskRecords.new(key: \"baz\", foo: \"2\", algolia_object_id: \"k\")\n    ]\n  ),\n  true\n)"
    },
    "runSource": {
      "default": "response = client.run_source(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::RunSourcePayload.new(\n    index_to_include: [\"products_us\", \"products eu\"],\n    entity_ids: [\"1234\", \"5678\"],\n    entity_type: \"product\"\n  )\n)"
    },
    "runTask": {
      "default": "response = client.run_task(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "runTaskV1": {
      "default": "response = client.run_task_v1(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "searchAuthentications": {
      "default": "response = client.search_authentications(\n  Algolia::Ingestion::AuthenticationSearch.new(\n    authentication_ids: [\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]\n  )\n)"
    },
    "searchDestinations": {
      "default": "response = client.search_destinations(\n  Algolia::Ingestion::DestinationSearch.new(\n    destination_ids: [\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]\n  )\n)"
    },
    "searchSources": {
      "default": "response = client.search_sources(\n  Algolia::Ingestion::SourceSearch.new(\n    source_ids: [\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]\n  )\n)"
    },
    "searchTasks": {
      "default": "response = client.search_tasks(\n  Algolia::Ingestion::TaskSearch.new(\n    task_ids: [\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    ]\n  )\n)"
    },
    "searchTasksV1": {
      "default": "response = client.search_tasks_v1(\n  Algolia::Ingestion::TaskSearch.new(\n    task_ids: [\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    ]\n  )\n)"
    },
    "searchTransformations": {
      "default": "response = client.search_transformations(\n  Algolia::Ingestion::TransformationSearch.new(\n    transformation_ids: [\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    ]\n  )\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "triggerDockerSourceDiscover": {
      "default": "response = client.trigger_docker_source_discover(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "tryTransformation": {
      "tryTransformation": "response = client.try_transformation(\n  Algolia::Ingestion::TransformationTry.new(code: \"foo\", sample_record: {bar: \"baz\"})\n)",
      "with authentications": "response = client.try_transformation(\n  Algolia::Ingestion::TransformationTry.new(\n    code: \"foo\",\n    sample_record: {bar: \"baz\"},\n    authentications: [\n      Algolia::Ingestion::AuthenticationCreate.new(\n        type: \"oauth\",\n        name: \"authName\",\n        input: Algolia::Ingestion::AuthOAuth.new(\n          url: \"http://test.oauth\",\n          client_id: \"myID\",\n          client_secret: \"mySecret\"\n        )\n      )\n    ]\n  )\n)"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "response = client.try_transformation_before_update(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::TransformationTry.new(code: \"foo\", sample_record: {bar: \"baz\"})\n)",
      "existing with authentications": "response = client.try_transformation_before_update(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::TransformationTry.new(\n    code: \"foo\",\n    sample_record: {bar: \"baz\"},\n    authentications: [\n      Algolia::Ingestion::AuthenticationCreate.new(\n        type: \"oauth\",\n        name: \"authName\",\n        input: Algolia::Ingestion::AuthOAuth.new(\n          url: \"http://test.oauth\",\n          client_id: \"myID\",\n          client_secret: \"mySecret\"\n        )\n      )\n    ]\n  )\n)"
    },
    "updateAuthentication": {
      "default": "response = client.update_authentication(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::AuthenticationUpdate.new(name: \"newName\")\n)"
    },
    "updateDestination": {
      "default": "response = client.update_destination(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::DestinationUpdate.new(name: \"newName\")\n)"
    },
    "updateSource": {
      "default": "response = client.update_source(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::SourceUpdate.new(name: \"newName\")\n)"
    },
    "updateTask": {
      "default": "response = client.update_task(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::TaskUpdate.new(enabled: false, cron: \"* * * * *\")\n)"
    },
    "updateTaskV1": {
      "default": "response = client.update_task_v1(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::TaskUpdateV1.new(enabled: false)\n)"
    },
    "updateTransformation": {
      "default": "response = client.update_transformation(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::TransformationCreate.new(code: \"foo\", name: \"bar\", description: \"baz\")\n)"
    },
    "validateSource": {
      "default": "response = client.validate_source(\n  Algolia::Ingestion::SourceCreate.new(\n    type: \"commercetools\",\n    name: \"sourceName\",\n    input: Algolia::Ingestion::SourceCommercetools.new(\n      store_keys: [\"myStore\"],\n      locales: [\"de\"],\n      url: \"http://commercetools.com\",\n      project_key: \"keyID\"\n    ),\n    authentication_id: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n  )\n)"
    },
    "validateSourceBeforeUpdate": {
      "default": "response = client.validate_source_before_update(\n  \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  Algolia::Ingestion::SourceUpdate.new(name: \"newName\")\n)"
    },
    "init": {
      "default": "client = Algolia::IngestionClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.IngestionClient\nimport algoliasearch.config.*"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "val response = client.createAuthentication(\n  authenticationCreate = AuthenticationCreate(\n    `type` = AuthenticationType.withName(\"oauth\"),\n    name = \"authName\",\n    input = AuthOAuth(\n      url = \"http://test.oauth\",\n      client_id = \"myID\",\n      client_secret = \"mySecret\"\n    )\n  )\n)",
      "createAuthenticationAlgolia": "val response = client.createAuthentication(\n  authenticationCreate = AuthenticationCreate(\n    `type` = AuthenticationType.withName(\"algolia\"),\n    name = \"authName\",\n    input = AuthAlgolia(\n      appID = \"ALGOLIA_APPLICATION_ID\",\n      apiKey = \"ALGOLIA_API_KEY\"\n    )\n  )\n)"
    },
    "createDestination": {
      "createDestination": "val response = client.createDestination(\n  destinationCreate = DestinationCreate(\n    `type` = DestinationType.withName(\"search\"),\n    name = \"destinationName\",\n    input = DestinationIndexName(\n      indexName = \"<YOUR_INDEX_NAME>\"\n    ),\n    authenticationID = Some(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n  )\n)",
      "with transformationIDs": "val response = client.createDestination(\n  destinationCreate = DestinationCreate(\n    `type` = DestinationType.withName(\"search\"),\n    name = \"destinationName\",\n    input = DestinationIndexName(\n      indexName = \"<YOUR_INDEX_NAME>\"\n    ),\n    transformationIDs = Some(Seq(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"))\n  )\n)"
    },
    "createSource": {
      "createSource": "val response = client.createSource(\n  sourceCreate = SourceCreate(\n    `type` = SourceType.withName(\"commercetools\"),\n    name = \"sourceName\",\n    input = Some(\n      SourceCommercetools(\n        storeKeys = Some(Seq(\"myStore\")),\n        locales = Some(Seq(\"de\")),\n        url = \"http://commercetools.com\",\n        projectKey = \"keyID\"\n      )\n    ),\n    authenticationID = Some(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n  )\n)",
      "push": "val response = client.createSource(\n  sourceCreate = SourceCreate(\n    `type` = SourceType.withName(\"push\"),\n    name = \"pushezpourentrer\"\n  )\n)"
    },
    "createTask": {
      "task without cron": "val response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    action = ActionType.withName(\"replace\")\n  )\n)",
      "task with cron": "val response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    cron = Some(\"* * * * *\"),\n    action = ActionType.withName(\"replace\"),\n    notifications = Some(\n      Notifications(\n        email = EmailNotifications(\n          enabled = Some(true)\n        )\n      )\n    ),\n    policies = Some(\n      Policies(\n        criticalThreshold = Some(8)\n      )\n    )\n  )\n)",
      "task shopify": "val response = client.createTask(\n  taskCreate = TaskCreate(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    cron = Some(\"* * * * *\"),\n    action = ActionType.withName(\"replace\"),\n    input = Some(\n      DockerStreamsInput(\n        streams = Seq(\n          DockerStreams(\n            name = \"foo\",\n            syncMode = DockerStreamsSyncMode.withName(\"incremental\")\n          )\n        )\n      )\n    )\n  )\n)"
    },
    "createTaskV1": {
      "createTaskOnDemand": "val response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      `type` = OnDemandTriggerType.withName(\"onDemand\")\n    ),\n    action = ActionType.withName(\"replace\")\n  )\n)",
      "createTaskSchedule": "val response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = ScheduleTriggerInput(\n      `type` = ScheduleTriggerType.withName(\"schedule\"),\n      cron = \"* * * * *\"\n    ),\n    action = ActionType.withName(\"replace\")\n  )\n)",
      "createTaskSubscription": "val response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      `type` = OnDemandTriggerType.withName(\"onDemand\")\n    ),\n    action = ActionType.withName(\"replace\")\n  )\n)",
      "task shopify": "val response = client.createTaskV1(\n  taskCreate = TaskCreateV1(\n    sourceID = \"search\",\n    destinationID = \"destinationName\",\n    trigger = OnDemandTriggerInput(\n      `type` = OnDemandTriggerType.withName(\"onDemand\")\n    ),\n    action = ActionType.withName(\"replace\"),\n    input = Some(\n      DockerStreamsInput(\n        streams = Seq(\n          DockerStreams(\n            name = \"foo\",\n            syncMode = DockerStreamsSyncMode.withName(\"incremental\")\n          )\n        )\n      )\n    )\n  )\n)"
    },
    "createTransformation": {
      "default": "val response = client.createTransformation(\n  transformationCreate = TransformationCreate(\n    code = \"foo\",\n    name = \"bar\",\n    description = Some(\"baz\")\n  )\n)"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)",
      "allow del method for a custom path with all parameters": "val response = client.customDelete[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\"))\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)",
      "allow get method for a custom path with all parameters": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters with space\"))\n)",
      "requestOptions should be escaped too": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"to be overriden\")),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"parameters with space\")\n      .withQueryParameter(\"and an array\", Seq(\"array\", \"with spaces\"))\n      .withHeader(\"x-header-1\", \"spaces are left alone\")\n      .build()\n  )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)",
      "allow post method for a custom path with all parameters": "val response = client.customPost[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)",
      "requestOptions can override default query parameters": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions merges query parameters with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query2\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions can override default headers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions merges headers with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"isItWorking\", true)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", 2)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of string": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(\"b and c\", \"d\"))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(true, true, false))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(1, 2))\n      .build()\n  )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)",
      "allow put method for a custom path with all parameters": "val response = client.customPut[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)"
    },
    "deleteAuthentication": {
      "default": "val response = client.deleteAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "deleteDestination": {
      "default": "val response = client.deleteDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "deleteSource": {
      "default": "val response = client.deleteSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "deleteTask": {
      "default": "val response = client.deleteTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "deleteTaskV1": {
      "default": "val response = client.deleteTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "deleteTransformation": {
      "default": "val response = client.deleteTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "disableTask": {
      "default": "val response = client.disableTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "disableTaskV1": {
      "default": "val response = client.disableTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "enableTask": {
      "default": "val response = client.enableTask(\n  taskID = \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n)"
    },
    "enableTaskV1": {
      "default": "val response = client.enableTaskV1(\n  taskID = \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n)"
    },
    "getAuthentication": {
      "default": "val response = client.getAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "getDestination": {
      "default": "val response = client.getDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "getEvent": {
      "default": "val response = client.getEvent(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  eventID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\"\n)"
    },
    "getRun": {
      "default": "val response = client.getRun(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "getSource": {
      "default": "val response = client.getSource(\n  sourceID = \"75eeb306-51d3-4e5e-a279-3c92bd8893ac\"\n)"
    },
    "getTask": {
      "default": "val response = client.getTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "getTaskV1": {
      "default": "val response = client.getTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "getTransformation": {
      "default": "val response = client.getTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "listAuthentications": {
      "getAuthentications": "val response = client.listAuthentications(\n)",
      "getAuthentications with query params": "val response = client.listAuthentications(\n  itemsPerPage = Some(2),\n  page = Some(1),\n  `type` = Some(Seq(AuthenticationType.withName(\"basic\"), AuthenticationType.withName(\"algolia\"))),\n  platform = Some(Seq(PlatformNone.withName(\"none\"))),\n  sort = Some(AuthenticationSortKeys.withName(\"createdAt\")),\n  order = Some(OrderKeys.withName(\"asc\"))\n)"
    },
    "listDestinations": {
      "default": "val response = client.listDestinations(\n)"
    },
    "listEvents": {
      "default": "val response = client.listEvents(\n  runID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "listRuns": {
      "default": "val response = client.listRuns(\n)"
    },
    "listSources": {
      "default": "val response = client.listSources(\n)"
    },
    "listTasks": {
      "default": "val response = client.listTasks(\n)"
    },
    "listTasksV1": {
      "default": "val response = client.listTasksV1(\n)"
    },
    "listTransformations": {
      "default": "val response = client.listTransformations(\n)"
    },
    "pushTask": {
      "pushTask": "val response = client.pushTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  pushTaskPayload = PushTaskPayload(\n    action = Action.withName(\"addObject\"),\n    records = Seq(\n      PushTaskRecords(\n        objectID = \"o\",\n        additionalProperties = Some(List(JField(\"key\", JString(\"bar\")), JField(\"foo\", JString(\"1\"))))\n      ),\n      PushTaskRecords(\n        objectID = \"k\",\n        additionalProperties = Some(List(JField(\"key\", JString(\"baz\")), JField(\"foo\", JString(\"2\"))))\n      )\n    )\n  )\n)",
      "allows for watch query parameter": "val response = client.pushTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  pushTaskPayload = PushTaskPayload(\n    action = Action.withName(\"addObject\"),\n    records = Seq(\n      PushTaskRecords(\n        objectID = \"o\",\n        additionalProperties = Some(List(JField(\"key\", JString(\"bar\")), JField(\"foo\", JString(\"1\"))))\n      ),\n      PushTaskRecords(\n        objectID = \"k\",\n        additionalProperties = Some(List(JField(\"key\", JString(\"baz\")), JField(\"foo\", JString(\"2\"))))\n      )\n    )\n  ),\n  watch = Some(true)\n)"
    },
    "runSource": {
      "default": "val response = client.runSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  runSourcePayload = Some(\n    RunSourcePayload(\n      indexToInclude = Some(Seq(\"products_us\", \"products eu\")),\n      entityIDs = Some(Seq(\"1234\", \"5678\")),\n      entityType = Some(EntityType.withName(\"product\"))\n    )\n  )\n)"
    },
    "runTask": {
      "default": "val response = client.runTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "runTaskV1": {
      "default": "val response = client.runTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "searchAuthentications": {
      "default": "val response = client.searchAuthentications(\n  authenticationSearch = AuthenticationSearch(\n    authenticationIDs = Seq(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\")\n  )\n)"
    },
    "searchDestinations": {
      "default": "val response = client.searchDestinations(\n  destinationSearch = DestinationSearch(\n    destinationIDs = Seq(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\")\n  )\n)"
    },
    "searchSources": {
      "default": "val response = client.searchSources(\n  sourceSearch = SourceSearch(\n    sourceIDs = Seq(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\", \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\")\n  )\n)"
    },
    "searchTasks": {
      "default": "val response = client.searchTasks(\n  taskSearch = TaskSearch(\n    taskIDs = Seq(\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    )\n  )\n)"
    },
    "searchTasksV1": {
      "default": "val response = client.searchTasksV1(\n  taskSearch = TaskSearch(\n    taskIDs = Seq(\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    )\n  )\n)"
    },
    "searchTransformations": {
      "default": "val response = client.searchTransformations(\n  transformationSearch = TransformationSearch(\n    transformationIDs = Seq(\n      \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n      \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n      \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"\n    )\n  )\n)"
    },
    "triggerDockerSourceDiscover": {
      "default": "val response = client.triggerDockerSourceDiscover(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n)"
    },
    "tryTransformation": {
      "tryTransformation": "val response = client.tryTransformation(\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = JObject(List(JField(\"bar\", JString(\"baz\"))))\n  )\n)",
      "with authentications": "val response = client.tryTransformation(\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = JObject(List(JField(\"bar\", JString(\"baz\")))),\n    authentications = Some(\n      Seq(\n        AuthenticationCreate(\n          `type` = AuthenticationType.withName(\"oauth\"),\n          name = \"authName\",\n          input = AuthOAuth(\n            url = \"http://test.oauth\",\n            client_id = \"myID\",\n            client_secret = \"mySecret\"\n          )\n        )\n      )\n    )\n  )\n)"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "val response = client.tryTransformationBeforeUpdate(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = JObject(List(JField(\"bar\", JString(\"baz\"))))\n  )\n)",
      "existing with authentications": "val response = client.tryTransformationBeforeUpdate(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationTry = TransformationTry(\n    code = \"foo\",\n    sampleRecord = JObject(List(JField(\"bar\", JString(\"baz\")))),\n    authentications = Some(\n      Seq(\n        AuthenticationCreate(\n          `type` = AuthenticationType.withName(\"oauth\"),\n          name = \"authName\",\n          input = AuthOAuth(\n            url = \"http://test.oauth\",\n            client_id = \"myID\",\n            client_secret = \"mySecret\"\n          )\n        )\n      )\n    )\n  )\n)"
    },
    "updateAuthentication": {
      "default": "val response = client.updateAuthentication(\n  authenticationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  authenticationUpdate = AuthenticationUpdate(\n    name = Some(\"newName\")\n  )\n)"
    },
    "updateDestination": {
      "default": "val response = client.updateDestination(\n  destinationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  destinationUpdate = DestinationUpdate(\n    name = Some(\"newName\")\n  )\n)"
    },
    "updateSource": {
      "default": "val response = client.updateSource(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  sourceUpdate = SourceUpdate(\n    name = Some(\"newName\")\n  )\n)"
    },
    "updateTask": {
      "default": "val response = client.updateTask(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  taskUpdate = TaskUpdate(\n    enabled = Some(false),\n    cron = Some(\"* * * * *\")\n  )\n)"
    },
    "updateTaskV1": {
      "default": "val response = client.updateTaskV1(\n  taskID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  taskUpdate = TaskUpdateV1(\n    enabled = Some(false)\n  )\n)"
    },
    "updateTransformation": {
      "default": "val response = client.updateTransformation(\n  transformationID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  transformationCreate = TransformationCreate(\n    code = \"foo\",\n    name = \"bar\",\n    description = Some(\"baz\")\n  )\n)"
    },
    "validateSource": {
      "default": "val response = client.validateSource(\n  sourceCreate = Some(\n    SourceCreate(\n      `type` = SourceType.withName(\"commercetools\"),\n      name = \"sourceName\",\n      input = Some(\n        SourceCommercetools(\n          storeKeys = Some(Seq(\"myStore\")),\n          locales = Some(Seq(\"de\")),\n          url = \"http://commercetools.com\",\n          projectKey = \"keyID\"\n        )\n      ),\n      authenticationID = Some(\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")\n    )\n  )\n)"
    },
    "validateSourceBeforeUpdate": {
      "default": "val response = client.validateSourceBeforeUpdate(\n  sourceID = \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n  sourceUpdate = SourceUpdate(\n    name = Some(\"newName\")\n  )\n)"
    },
    "init": {
      "default": "val client = IngestionClient(\n  appId = \"ALGOLIA_APPLICATION_ID\",\n  apiKey = \"ALGOLIA_API_KEY\",\n  region = \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "swift": {
    "import": {
      "default": "import Ingestion"
    },
    "createAuthentication": {
      "createAuthenticationOAuth": "let response = try await client.createAuthentication(authenticationCreate: AuthenticationCreate(\n    type: AuthenticationType.oauth,\n    name: \"authName\",\n    input: AuthInput.authOAuth(AuthOAuth(url: \"http://test.oauth\", clientId: \"myID\", clientSecret: \"mySecret\"))\n))",
      "createAuthenticationAlgolia": "let response = try await client.createAuthentication(authenticationCreate: AuthenticationCreate(\n    type: AuthenticationType.algolia,\n    name: \"authName\",\n    input: AuthInput.authAlgolia(AuthAlgolia(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\"))\n))"
    },
    "createDestination": {
      "createDestination": "let response = try await client.createDestination(destinationCreate: DestinationCreate(\n    type: DestinationType.search,\n    name: \"destinationName\",\n    input: DestinationInput.destinationIndexName(DestinationIndexName(indexName: \"<YOUR_INDEX_NAME>\")),\n    authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n))",
      "with transformationIDs": "let response = try await client.createDestination(destinationCreate: DestinationCreate(\n    type: DestinationType.search,\n    name: \"destinationName\",\n    input: DestinationInput.destinationIndexName(DestinationIndexName(indexName: \"<YOUR_INDEX_NAME>\")),\n    transformationIDs: [\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"]\n))"
    },
    "createSource": {
      "createSource": "let response = try await client.createSource(sourceCreate: SourceCreate(\n    type: SourceType.commercetools,\n    name: \"sourceName\",\n    input: SourceInput.sourceCommercetools(SourceCommercetools(\n        storeKeys: [\"myStore\"],\n        locales: [\"de\"],\n        url: \"http://commercetools.com\",\n        projectKey: \"keyID\"\n    )),\n    authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n))",
      "push": "let response = try await client.createSource(sourceCreate: SourceCreate(\n    type: SourceType.push,\n    name: \"pushezpourentrer\"\n))"
    },
    "createTask": {
      "task without cron": "let response = try await client.createTask(taskCreate: TaskCreate(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    action: ActionType.replace\n))",
      "task with cron": "let response = try await client.createTask(taskCreate: TaskCreate(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    action: ActionType.replace,\n    cron: \"* * * * *\",\n    notifications: Notifications(email: EmailNotifications(enabled: true)),\n    policies: Policies(criticalThreshold: 8)\n))",
      "task shopify": "let response = try await client.createTask(taskCreate: TaskCreate(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    action: ActionType.replace,\n    cron: \"* * * * *\",\n    input: TaskInput.dockerStreamsInput(DockerStreamsInput(streams: [DockerStreams(\n        name: \"foo\",\n        syncMode: DockerStreamsSyncMode.incremental\n    )]))\n))"
    },
    "createTaskV1": {
      "createTaskOnDemand": "let response = try await client.createTaskV1(taskCreate: TaskCreateV1(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    trigger: TaskCreateTrigger.onDemandTriggerInput(OnDemandTriggerInput(type: OnDemandTriggerType.onDemand)),\n    action: ActionType.replace\n))",
      "createTaskSchedule": "let response = try await client.createTaskV1(taskCreate: TaskCreateV1(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    trigger: TaskCreateTrigger.scheduleTriggerInput(ScheduleTriggerInput(\n        type: ScheduleTriggerType.schedule,\n        cron: \"* * * * *\"\n    )),\n    action: ActionType.replace\n))",
      "createTaskSubscription": "let response = try await client.createTaskV1(taskCreate: TaskCreateV1(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    trigger: TaskCreateTrigger.onDemandTriggerInput(OnDemandTriggerInput(type: OnDemandTriggerType.onDemand)),\n    action: ActionType.replace\n))",
      "task shopify": "let response = try await client.createTaskV1(taskCreate: TaskCreateV1(\n    sourceID: \"search\",\n    destinationID: \"destinationName\",\n    trigger: TaskCreateTrigger.onDemandTriggerInput(OnDemandTriggerInput(type: OnDemandTriggerType.onDemand)),\n    action: ActionType.replace,\n    input: TaskInput.dockerStreamsInput(DockerStreamsInput(streams: [DockerStreams(\n        name: \"foo\",\n        syncMode: DockerStreamsSyncMode.incremental\n    )]))\n))"
    },
    "createTransformation": {
      "default": "let response = try await client.createTransformation(transformationCreate: TransformationCreate(\n    code: \"foo\",\n    name: \"bar\",\n    description: \"baz\"\n))"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "let response = try await client.customDelete(path: \"test/minimal\")",
      "allow del method for a custom path with all parameters": "let response = try await client.customDelete(path: \"test/all\", parameters: [\"query\": AnyCodable(\"parameters\")])"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "let response = try await client.customGet(path: \"test/minimal\")",
      "allow get method for a custom path with all parameters": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters with space\")]\n)",
      "requestOptions should be escaped too": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"to be overriden\")],\n    requestOptions: RequestOptions(\n        headers: [\"x-header-1\": \"spaces are left alone\"],\n\n        queryParameters: [\"query\": \"parameters with space\", \"and an array\": [\"array\", \"with spaces\"]]\n    )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "let response = try await client.customPost(path: \"test/minimal\")",
      "allow post method for a custom path with all parameters": "let response = try await client.customPost(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)",
      "requestOptions can override default query parameters": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions merges query parameters with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query2\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions can override default headers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions merges headers with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions queryParameters accepts booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"isItWorking\": true]\n    )\n)",
      "requestOptions queryParameters accepts integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": 2]\n    )\n)",
      "requestOptions queryParameters accepts list of string": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [\"b and c\", \"d\"]]\n    )\n)",
      "requestOptions queryParameters accepts list of booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [true, true, false]]\n    )\n)",
      "requestOptions queryParameters accepts list of integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [1, 2]]\n    )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "let response = try await client.customPut(path: \"test/minimal\")",
      "allow put method for a custom path with all parameters": "let response = try await client.customPut(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)"
    },
    "deleteAuthentication": {
      "default": "let response = try await client.deleteAuthentication(authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteDestination": {
      "default": "let response = try await client.deleteDestination(destinationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteSource": {
      "default": "let response = try await client.deleteSource(sourceID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTask": {
      "default": "let response = try await client.deleteTask(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTaskV1": {
      "default": "let response = try await client.deleteTaskV1(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "deleteTransformation": {
      "default": "let response = try await client.deleteTransformation(transformationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "disableTask": {
      "default": "let response = try await client.disableTask(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "disableTaskV1": {
      "default": "let response = try await client.disableTaskV1(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "enableTask": {
      "default": "let response = try await client.enableTask(taskID: \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\")"
    },
    "enableTaskV1": {
      "default": "let response = try await client.enableTaskV1(taskID: \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\")"
    },
    "getAuthentication": {
      "default": "let response = try await client.getAuthentication(authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getDestination": {
      "default": "let response = try await client.getDestination(destinationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getEvent": {
      "default": "let response = try await client.getEvent(\n    runID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    eventID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0c\"\n)"
    },
    "getRun": {
      "default": "let response = try await client.getRun(runID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getSource": {
      "default": "let response = try await client.getSource(sourceID: \"75eeb306-51d3-4e5e-a279-3c92bd8893ac\")"
    },
    "getTask": {
      "default": "let response = try await client.getTask(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getTaskV1": {
      "default": "let response = try await client.getTaskV1(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "getTransformation": {
      "default": "let response = try await client.getTransformation(transformationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "listAuthentications": {
      "getAuthentications": "let response = try await client.listAuthentications()",
      "getAuthentications with query params": "let response = try await client.listAuthentications(\n    itemsPerPage: 2,\n    page: 1,\n    type: [AuthenticationType.basic, AuthenticationType.algolia],\n    platform: [PlatformWithNone.platformNone(PlatformNone.`none`)],\n    sort: AuthenticationSortKeys.createdAt,\n    order: OrderKeys.asc\n)"
    },
    "listDestinations": {
      "default": "let response = try await client.listDestinations()"
    },
    "listEvents": {
      "default": "let response = try await client.listEvents(runID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "listRuns": {
      "default": "let response = try await client.listRuns()"
    },
    "listSources": {
      "default": "let response = try await client.listSources()"
    },
    "listTasks": {
      "default": "let response = try await client.listTasks()"
    },
    "listTasksV1": {
      "default": "let response = try await client.listTasksV1()"
    },
    "listTransformations": {
      "default": "let response = try await client.listTransformations()"
    },
    "pushTask": {
      "pushTask": "let response = try await client.pushTask(\n    taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    pushTaskPayload: PushTaskPayload(\n        action: IngestionAction.addObject,\n        records: [\n            PushTaskRecords(from: [\n                \"objectID\": AnyCodable(\"o\"),\n                \"key\": AnyCodable(\"bar\"),\n                \"foo\": AnyCodable(\"1\"),\n            ]),\n            PushTaskRecords(from: [\n                \"objectID\": AnyCodable(\"k\"),\n                \"key\": AnyCodable(\"baz\"),\n                \"foo\": AnyCodable(\"2\"),\n            ]),\n        ]\n    )\n)",
      "allows for watch query parameter": "let response = try await client.pushTask(\n    taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    pushTaskPayload: PushTaskPayload(\n        action: IngestionAction.addObject,\n        records: [\n            PushTaskRecords(from: [\n                \"objectID\": AnyCodable(\"o\"),\n                \"key\": AnyCodable(\"bar\"),\n                \"foo\": AnyCodable(\"1\"),\n            ]),\n            PushTaskRecords(from: [\n                \"objectID\": AnyCodable(\"k\"),\n                \"key\": AnyCodable(\"baz\"),\n                \"foo\": AnyCodable(\"2\"),\n            ]),\n        ]\n    ),\n    watch: true\n)"
    },
    "runSource": {
      "default": "let response = try await client.runSource(\n    sourceID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    runSourcePayload: RunSourcePayload(\n        indexToInclude: [\"products_us\", \"products eu\"],\n        entityIDs: [\"1234\", \"5678\"],\n        entityType: EntityType.product\n    )\n)"
    },
    "runTask": {
      "default": "let response = try await client.runTask(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "runTaskV1": {
      "default": "let response = try await client.runTaskV1(taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "searchAuthentications": {
      "default": "let response = try await client\n    .searchAuthentications(authenticationSearch: AuthenticationSearch(authenticationIDs: [\n        \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    ]))"
    },
    "searchDestinations": {
      "default": "let response = try await client.searchDestinations(destinationSearch: DestinationSearch(destinationIDs: [\n    \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n]))"
    },
    "searchSources": {
      "default": "let response = try await client.searchSources(sourceSearch: SourceSearch(sourceIDs: [\n    \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n]))"
    },
    "searchTasks": {
      "default": "let response = try await client.searchTasks(taskSearch: TaskSearch(taskIDs: [\n    \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n]))"
    },
    "searchTasksV1": {
      "default": "let response = try await client.searchTasksV1(taskSearch: TaskSearch(taskIDs: [\n    \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n    \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n]))"
    },
    "searchTransformations": {
      "default": "let response = try await client\n    .searchTransformations(transformationSearch: TransformationSearch(transformationIDs: [\n        \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n        \"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\n        \"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\n    ]))"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "triggerDockerSourceDiscover": {
      "default": "let response = try await client.triggerDockerSourceDiscover(sourceID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\")"
    },
    "tryTransformation": {
      "tryTransformation": "let response = try await client.tryTransformation(transformationTry: TransformationTry(\n    code: \"foo\",\n    sampleRecord: [\"bar\": \"baz\"]\n))",
      "with authentications": "let response = try await client.tryTransformation(transformationTry: TransformationTry(\n    code: \"foo\",\n    sampleRecord: [\"bar\": \"baz\"],\n    authentications: [AuthenticationCreate(\n        type: AuthenticationType.oauth,\n        name: \"authName\",\n        input: AuthInput.authOAuth(AuthOAuth(\n            url: \"http://test.oauth\",\n            clientId: \"myID\",\n            clientSecret: \"mySecret\"\n        ))\n    )]\n))"
    },
    "tryTransformationBeforeUpdate": {
      "tryTransformationBeforeUpdate": "let response = try await client.tryTransformationBeforeUpdate(\n    transformationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformationTry: TransformationTry(code: \"foo\", sampleRecord: [\"bar\": \"baz\"])\n)",
      "existing with authentications": "let response = try await client.tryTransformationBeforeUpdate(\n    transformationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformationTry: TransformationTry(\n        code: \"foo\",\n        sampleRecord: [\"bar\": \"baz\"],\n        authentications: [AuthenticationCreate(\n            type: AuthenticationType.oauth,\n            name: \"authName\",\n            input: AuthInput.authOAuth(AuthOAuth(\n                url: \"http://test.oauth\",\n                clientId: \"myID\",\n                clientSecret: \"mySecret\"\n            ))\n        )]\n    )\n)"
    },
    "updateAuthentication": {
      "default": "let response = try await client.updateAuthentication(\n    authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    authenticationUpdate: AuthenticationUpdate(name: \"newName\")\n)"
    },
    "updateDestination": {
      "default": "let response = try await client.updateDestination(\n    destinationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    destinationUpdate: DestinationUpdate(name: \"newName\")\n)"
    },
    "updateSource": {
      "default": "let response = try await client.updateSource(\n    sourceID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    sourceUpdate: SourceUpdate(name: \"newName\")\n)"
    },
    "updateTask": {
      "default": "let response = try await client.updateTask(\n    taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    taskUpdate: TaskUpdate(cron: \"* * * * *\", enabled: false)\n)"
    },
    "updateTaskV1": {
      "default": "let response = try await client.updateTaskV1(\n    taskID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    taskUpdate: TaskUpdateV1(enabled: false)\n)"
    },
    "updateTransformation": {
      "default": "let response = try await client.updateTransformation(\n    transformationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    transformationCreate: TransformationCreate(code: \"foo\", name: \"bar\", description: \"baz\")\n)"
    },
    "validateSource": {
      "default": "let response = try await client.validateSource(sourceCreate: SourceCreate(\n    type: SourceType.commercetools,\n    name: \"sourceName\",\n    input: SourceInput.sourceCommercetools(SourceCommercetools(\n        storeKeys: [\"myStore\"],\n        locales: [\"de\"],\n        url: \"http://commercetools.com\",\n        projectKey: \"keyID\"\n    )),\n    authenticationID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"\n))"
    },
    "validateSourceBeforeUpdate": {
      "default": "let response = try await client.validateSourceBeforeUpdate(\n    sourceID: \"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\n    sourceUpdate: SourceUpdate(name: \"newName\")\n)"
    },
    "init": {
      "default": "let client = try IngestionClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\", region: .us)"
    }
  }
}