{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;\nusing Algolia.Search.Models.Insights;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "var response = await client.CustomDeleteAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters with space\" } }\n);",
      "requestOptions should be escaped too": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"to be overriden\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"query\", \"parameters with space\")\n    .AddExtraQueryParameters(\"and an array\", new List<object> { \"array\", \"with spaces\" })\n    .AddExtraHeader(\"x-header-1\", \"spaces are left alone\")\n    .Build()\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "var response = await client.CustomPostAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);",
      "requestOptions can override default query parameters": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query\", \"myQueryParameter\").Build()\n);",
      "requestOptions merges query parameters with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query2\", \"myQueryParameter\").Build()\n);",
      "requestOptions can override default headers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions merges headers with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions queryParameters accepts booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"isItWorking\", true).Build()\n);",
      "requestOptions queryParameters accepts integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"myParam\", 2).Build()\n);",
      "requestOptions queryParameters accepts list of string": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { \"b and c\", \"d\" })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { true, true, false })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { 1, 2 })\n    .Build()\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "var response = await client.CustomPutAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);"
    },
    "deleteUserToken": {
      "default": "await client.DeleteUserTokenAsync(\"test-user-1\");"
    },
    "pushEvents": {
      "pushEvents": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new ClickedObjectIDsAfterSearch\n        {\n          EventType = Enum.Parse<ClickEvent>(\"Click\"),\n          EventName = \"Product Clicked\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1641290601962L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n          QueryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n          Positions = new List<int> { 7, 6 },\n        }\n      ),\n    },\n  }\n);",
      "Many events type": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new ConvertedObjectIDsAfterSearch\n        {\n          EventType = Enum.Parse<ConversionEvent>(\"Conversion\"),\n          EventName = \"Product Purchased\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1742083200000L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n          QueryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        }\n      ),\n      new EventsItems(\n        new ViewedObjectIDs\n        {\n          EventType = Enum.Parse<ViewEvent>(\"View\"),\n          EventName = \"Product Detail Page Viewed\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1742083200000L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n        }\n      ),\n    },\n  }\n);",
      "ConvertedObjectIDsAfterSearch": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new ConvertedObjectIDsAfterSearch\n        {\n          EventType = Enum.Parse<ConversionEvent>(\"Conversion\"),\n          EventName = \"Product Purchased\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1641290601962L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n          QueryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        }\n      ),\n    },\n  }\n);",
      "ViewedObjectIDs": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new ViewedObjectIDs\n        {\n          EventType = Enum.Parse<ViewEvent>(\"View\"),\n          EventName = \"Product Detail Page Viewed\",\n          Index = \"products\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1641290601962L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n        }\n      ),\n    },\n  }\n);",
      "AddedToCartObjectIDs": "var response = await client.PushEventsAsync(\n  new InsightsEvents\n  {\n    Events = new List<EventsItems>\n    {\n      new EventsItems(\n        new AddedToCartObjectIDsAfterSearch\n        {\n          EventType = Enum.Parse<ConversionEvent>(\"Conversion\"),\n          EventSubtype = Enum.Parse<AddToCartEvent>(\"AddToCart\"),\n          EventName = \"Product Added To Cart\",\n          Index = \"products\",\n          QueryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n          UserToken = \"user-123456\",\n          AuthenticatedUserToken = \"user-123456\",\n          Timestamp = 1641290601962L,\n          ObjectIDs = new List<string> { \"9780545139700\", \"9780439784542\" },\n          ObjectData = new List<ObjectDataAfterSearch>\n          {\n            new ObjectDataAfterSearch\n            {\n              Price = new Price(19.99),\n              Quantity = 10,\n              Discount = new Discount(2.5),\n            },\n            new ObjectDataAfterSearch\n            {\n              Price = new Price(\"8$\"),\n              Quantity = 7,\n              Discount = new Discount(\"30%\"),\n            },\n          },\n          Currency = \"USD\",\n        }\n      ),\n    },\n  }\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new InsightsClient(\n  new InsightsConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_insights/algolia_client_insights.dart';"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);",
      "allow del method for a custom path with all parameters": "final response = await client.customDelete(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "final response = await client.customGet(\n  path: \"test/minimal\",\n);",
      "allow get method for a custom path with all parameters": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters with space\",\n  },\n);",
      "requestOptions should be escaped too": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"to be overriden\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-header-1': 'spaces are left alone',\n    },\n    urlParameters: {\n      'query': \"parameters with space\",\n      'and an array': [\n        \"array\",\n        \"with spaces\",\n      ],\n    },\n  ),\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "final response = await client.customPost(\n  path: \"test/minimal\",\n);",
      "allow post method for a custom path with all parameters": "final response = await client.customPost(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);",
      "requestOptions can override default query parameters": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions merges query parameters with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query2': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions can override default headers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions merges headers with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions queryParameters accepts booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'isItWorking': true,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': 2,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of string": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        \"b and c\",\n        \"d\",\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        true,\n        true,\n        false,\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        1,\n        2,\n      ],\n    },\n  ),\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "final response = await client.customPut(\n  path: \"test/minimal\",\n);",
      "allow put method for a custom path with all parameters": "final response = await client.customPut(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);"
    },
    "deleteUserToken": {
      "default": "await client.deleteUserToken(\n  userToken: \"test-user-1\",\n);"
    },
    "pushEvents": {
      "pushEvents": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      ClickedObjectIDsAfterSearch(\n        eventType: ClickEvent.fromJson(\"click\"),\n        eventName: \"Product Clicked\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1641290601962,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions: [\n          7,\n          6,\n        ],\n      ),\n    ],\n  ),\n);",
      "Many events type": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      ConvertedObjectIDsAfterSearch(\n        eventType: ConversionEvent.fromJson(\"conversion\"),\n        eventName: \"Product Purchased\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1742083200000,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n      ),\n      ViewedObjectIDs(\n        eventType: ViewEvent.fromJson(\"view\"),\n        eventName: \"Product Detail Page Viewed\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1742083200000,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n      ),\n    ],\n  ),\n);",
      "ConvertedObjectIDsAfterSearch": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      ConvertedObjectIDsAfterSearch(\n        eventType: ConversionEvent.fromJson(\"conversion\"),\n        eventName: \"Product Purchased\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1641290601962,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n      ),\n    ],\n  ),\n);",
      "ViewedObjectIDs": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      ViewedObjectIDs(\n        eventType: ViewEvent.fromJson(\"view\"),\n        eventName: \"Product Detail Page Viewed\",\n        index: \"products\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1641290601962,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n      ),\n    ],\n  ),\n);",
      "AddedToCartObjectIDs": "final response = await client.pushEvents(\n  insightsEvents: InsightsEvents(\n    events: [\n      AddedToCartObjectIDsAfterSearch(\n        eventType: ConversionEvent.fromJson(\"conversion\"),\n        eventSubtype: AddToCartEvent.fromJson(\"addToCart\"),\n        eventName: \"Product Added To Cart\",\n        index: \"products\",\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: 1641290601962,\n        objectIDs: [\n          \"9780545139700\",\n          \"9780439784542\",\n        ],\n        objectData: [\n          ObjectDataAfterSearch(\n            price: 19.99,\n            quantity: 10,\n            discount: 2.5,\n          ),\n          ObjectDataAfterSearch(\n            price: \"8\\$\",\n            quantity: 7,\n            discount: \"30%\",\n          ),\n        ],\n        currency: \"USD\",\n      ),\n    ],\n  ),\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);"
    },
    "init": {
      "default": "final client = InsightsClient(\n    appId: 'ALGOLIA_APPLICATION_ID',\n    apiKey: 'ALGOLIA_API_KEY',\n    region: 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/insights\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow del method for a custom path with all parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow get method for a custom path with all parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters with space\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions should be escaped too": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"to be overriden\"}), insights.WithQueryParam(\"query\", \"parameters with space\"), insights.WithQueryParam(\"and an array\",\n  []string{\"array\", \"with spaces\"}), insights.WithHeaderParam(\"x-header-1\", \"spaces are left alone\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow post method for a custom path with all parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default query parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"query\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges query parameters with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"query2\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default headers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges headers with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"isItWorking\", true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"myParam\", 2))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of string": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"myParam\",\n  []string{\"b and c\", \"d\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"myParam\",\n  []bool{true, true, false}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), insights.WithQueryParam(\"myParam\",\n  []int32{1, 2}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow put method for a custom path with all parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteUserToken": {
      "default": "err = client.DeleteUserToken(client.NewApiDeleteUserTokenRequest(\n  \"test-user-1\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "pushEvents": {
      "pushEvents": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.ClickedObjectIDsAfterSearchAsEventsItems(\n      insights.NewEmptyClickedObjectIDsAfterSearch().SetEventType(insights.ClickEvent(\"click\")).SetEventName(\"Product Clicked\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1641290601962).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}).SetQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\").SetPositions(\n        []int32{7, 6}))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "Many events type": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.ConvertedObjectIDsAfterSearchAsEventsItems(\n      insights.NewEmptyConvertedObjectIDsAfterSearch().SetEventType(insights.ConversionEvent(\"conversion\")).SetEventName(\"Product Purchased\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1742083200000).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}).SetQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\")), *insights.ViewedObjectIDsAsEventsItems(\n      insights.NewEmptyViewedObjectIDs().SetEventType(insights.ViewEvent(\"view\")).SetEventName(\"Product Detail Page Viewed\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1742083200000).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "ConvertedObjectIDsAfterSearch": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.ConvertedObjectIDsAfterSearchAsEventsItems(\n      insights.NewEmptyConvertedObjectIDsAfterSearch().SetEventType(insights.ConversionEvent(\"conversion\")).SetEventName(\"Product Purchased\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1641290601962).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}).SetQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\"))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "ViewedObjectIDs": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.ViewedObjectIDsAsEventsItems(\n      insights.NewEmptyViewedObjectIDs().SetEventType(insights.ViewEvent(\"view\")).SetEventName(\"Product Detail Page Viewed\").SetIndex(\"products\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1641290601962).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "AddedToCartObjectIDs": "response, err := client.PushEvents(client.NewApiPushEventsRequest(\n\n  insights.NewEmptyInsightsEvents().SetEvents(\n    []insights.EventsItems{*insights.AddedToCartObjectIDsAfterSearchAsEventsItems(\n      insights.NewEmptyAddedToCartObjectIDsAfterSearch().SetEventType(insights.ConversionEvent(\"conversion\")).SetEventSubtype(insights.AddToCartEvent(\"addToCart\")).SetEventName(\"Product Added To Cart\").SetIndex(\"products\").SetQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\").SetUserToken(\"user-123456\").SetAuthenticatedUserToken(\"user-123456\").SetTimestamp(1641290601962).SetObjectIDs(\n        []string{\"9780545139700\", \"9780439784542\"}).SetObjectData(\n        []insights.ObjectDataAfterSearch{*insights.NewEmptyObjectDataAfterSearch().SetPrice(insights.Float64AsPrice(19.99)).SetQuantity(10).SetDiscount(insights.Float64AsDiscount(2.5)), *insights.NewEmptyObjectDataAfterSearch().SetPrice(insights.StringAsPrice(\"8$\")).SetQuantity(7).SetDiscount(insights.StringAsDiscount(\"30%\"))}).SetCurrency(\"USD\"))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\")\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := insights.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", insights.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.InsightsClient;\nimport com.algolia.config.*;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "client.customDelete(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "client.customDelete(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "client.customGet(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters with space\");\n    }\n  }\n);",
      "requestOptions should be escaped too": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"to be overriden\");\n    }\n  },\n  new RequestOptions()\n    .addExtraQueryParameters(\"query\", \"parameters with space\")\n    .addExtraQueryParameters(\"and an array\", Arrays.asList(\"array\", \"with spaces\"))\n    .addExtraHeader(\"x-header-1\", \"spaces are left alone\")\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "client.customPost(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "client.customPost(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);",
      "requestOptions can override default query parameters": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query\", \"myQueryParameter\")\n);",
      "requestOptions merges query parameters with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query2\", \"myQueryParameter\")\n);",
      "requestOptions can override default headers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions merges headers with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions queryParameters accepts booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"isItWorking\", true)\n);",
      "requestOptions queryParameters accepts integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", 2)\n);",
      "requestOptions queryParameters accepts list of string": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(\"b and c\", \"d\"))\n);",
      "requestOptions queryParameters accepts list of booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(true, true, false))\n);",
      "requestOptions queryParameters accepts list of integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(1, 2))\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "client.customPut(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "client.customPut(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);"
    },
    "deleteUserToken": {
      "default": "client.deleteUserToken(\"test-user-1\");"
    },
    "pushEvents": {
      "pushEvents": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new ClickedObjectIDsAfterSearch()\n          .setEventType(ClickEvent.CLICK)\n          .setEventName(\"Product Clicked\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1641290601962L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n          .setQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\")\n          .setPositions(Arrays.asList(7, 6))\n      )\n    )\n);",
      "Many events type": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new ConvertedObjectIDsAfterSearch()\n          .setEventType(ConversionEvent.CONVERSION)\n          .setEventName(\"Product Purchased\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1742083200000L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n          .setQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\"),\n        new ViewedObjectIDs()\n          .setEventType(ViewEvent.VIEW)\n          .setEventName(\"Product Detail Page Viewed\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1742083200000L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n      )\n    )\n);",
      "ConvertedObjectIDsAfterSearch": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new ConvertedObjectIDsAfterSearch()\n          .setEventType(ConversionEvent.CONVERSION)\n          .setEventName(\"Product Purchased\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1641290601962L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n          .setQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\")\n      )\n    )\n);",
      "ViewedObjectIDs": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new ViewedObjectIDs()\n          .setEventType(ViewEvent.VIEW)\n          .setEventName(\"Product Detail Page Viewed\")\n          .setIndex(\"products\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1641290601962L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n      )\n    )\n);",
      "AddedToCartObjectIDs": "client.pushEvents(\n  new InsightsEvents()\n    .setEvents(\n      Arrays.asList(\n        new AddedToCartObjectIDsAfterSearch()\n          .setEventType(ConversionEvent.CONVERSION)\n          .setEventSubtype(AddToCartEvent.ADD_TO_CART)\n          .setEventName(\"Product Added To Cart\")\n          .setIndex(\"products\")\n          .setQueryID(\"43b15df305339e827f0ac0bdc5ebcaa7\")\n          .setUserToken(\"user-123456\")\n          .setAuthenticatedUserToken(\"user-123456\")\n          .setTimestamp(1641290601962L)\n          .setObjectIDs(Arrays.asList(\"9780545139700\", \"9780439784542\"))\n          .setObjectData(\n            Arrays.asList(\n              new ObjectDataAfterSearch().setPrice(Price.of(19.99)).setQuantity(10).setDiscount(Discount.of(2.5)),\n              new ObjectDataAfterSearch().setPrice(Price.of(\"8$\")).setQuantity(7).setDiscount(Discount.of(\"30%\"))\n            )\n          )\n          .setCurrency(\"USD\")\n      )\n    )\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "InsightsClient client = new InsightsClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "const response = await client.customDelete({ path: 'test/minimal' });",
      "allow del method for a custom path with all parameters": "const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "const response = await client.customGet({ path: 'test/minimal' });",
      "allow get method for a custom path with all parameters": "const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });",
      "requestOptions should be escaped too": "const response = await client.customGet(\n  { path: 'test/all', parameters: { query: 'to be overriden' } },\n  {\n    queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },\n    headers: { 'x-header-1': 'spaces are left alone' },\n  },\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "const response = await client.customPost({ path: 'test/minimal' });",
      "allow post method for a custom path with all parameters": "const response = await client.customPost({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});",
      "requestOptions can override default query parameters": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query: 'myQueryParameter' },\n  },\n);",
      "requestOptions merges query parameters with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query2: 'myQueryParameter' },\n  },\n);",
      "requestOptions can override default headers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions merges headers with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions queryParameters accepts booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { isItWorking: true },\n  },\n);",
      "requestOptions queryParameters accepts integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: 2 },\n  },\n);",
      "requestOptions queryParameters accepts list of string": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: ['b and c', 'd'] },\n  },\n);",
      "requestOptions queryParameters accepts list of booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [true, true, false] },\n  },\n);",
      "requestOptions queryParameters accepts list of integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [1, 2] },\n  },\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "const response = await client.customPut({ path: 'test/minimal' });",
      "allow put method for a custom path with all parameters": "const response = await client.customPut({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});"
    },
    "deleteUserToken": {
      "default": "await client.deleteUserToken({ userToken: 'test-user-1' });"
    },
    "pushEvents": {
      "pushEvents": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'click',\n      eventName: 'Product Clicked',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1641290601962,\n      objectIDs: ['9780545139700', '9780439784542'],\n      queryID: '43b15df305339e827f0ac0bdc5ebcaa7',\n      positions: [7, 6],\n    },\n  ],\n});",
      "Many events type": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'conversion',\n      eventName: 'Product Purchased',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1742083200000,\n      objectIDs: ['9780545139700', '9780439784542'],\n      queryID: '43b15df305339e827f0ac0bdc5ebcaa7',\n    },\n    {\n      eventType: 'view',\n      eventName: 'Product Detail Page Viewed',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1742083200000,\n      objectIDs: ['9780545139700', '9780439784542'],\n    },\n  ],\n});",
      "ConvertedObjectIDsAfterSearch": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'conversion',\n      eventName: 'Product Purchased',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1641290601962,\n      objectIDs: ['9780545139700', '9780439784542'],\n      queryID: '43b15df305339e827f0ac0bdc5ebcaa7',\n    },\n  ],\n});",
      "ViewedObjectIDs": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'view',\n      eventName: 'Product Detail Page Viewed',\n      index: 'products',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1641290601962,\n      objectIDs: ['9780545139700', '9780439784542'],\n    },\n  ],\n});",
      "AddedToCartObjectIDs": "const response = await client.pushEvents({\n  events: [\n    {\n      eventType: 'conversion',\n      eventSubtype: 'addToCart',\n      eventName: 'Product Added To Cart',\n      index: 'products',\n      queryID: '43b15df305339e827f0ac0bdc5ebcaa7',\n      userToken: 'user-123456',\n      authenticatedUserToken: 'user-123456',\n      timestamp: 1641290601962,\n      objectIDs: ['9780545139700', '9780439784542'],\n      objectData: [\n        { price: 19.99, quantity: 10, discount: 2.5 },\n        { price: '8$', quantity: 7, discount: '30%' },\n      ],\n      currency: 'USD',\n    },\n  ],\n});"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "// Replace 'us' with your Algolia Application Region\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initInsights({ region: 'us' });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.InsightsClient\nimport com.algolia.client.configuration.*\nimport com.algolia.client.transport.*"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "var response = client.customDelete(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters with space\"),\n)",
      "requestOptions should be escaped too": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"to be overriden\"),\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"parameters with space\")\n      put(\"and an array\", listOf(\"array\", \"with spaces\"))\n    },\n    headers = buildMap {\n      put(\"x-header-1\", \"spaces are left alone\")\n    },\n  ),\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "var response = client.customPost(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)",
      "requestOptions can override default query parameters": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions merges query parameters with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query2\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions can override default headers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions merges headers with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions queryParameters accepts booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"isItWorking\", true)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", 2)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of string": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(\"b and c\", \"d\"))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(true, true, false))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(1, 2))\n    },\n  ),\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "var response = client.customPut(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)"
    },
    "deleteUserToken": {
      "default": "client.deleteUserToken(\n  userToken = \"test-user-1\",\n)"
    },
    "pushEvents": {
      "pushEvents": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      ClickedObjectIDsAfterSearch(\n        eventType = ClickEvent.entries.first { it.value == \"click\" },\n        eventName = \"Product Clicked\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1641290601962L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions = listOf(7, 6),\n      ),\n    ),\n  ),\n)",
      "Many events type": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      ConvertedObjectIDsAfterSearch(\n        eventType = ConversionEvent.entries.first { it.value == \"conversion\" },\n        eventName = \"Product Purchased\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1742083200000L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n      ),\n      ViewedObjectIDs(\n        eventType = ViewEvent.entries.first { it.value == \"view\" },\n        eventName = \"Product Detail Page Viewed\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1742083200000L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n      ),\n    ),\n  ),\n)",
      "ConvertedObjectIDsAfterSearch": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      ConvertedObjectIDsAfterSearch(\n        eventType = ConversionEvent.entries.first { it.value == \"conversion\" },\n        eventName = \"Product Purchased\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1641290601962L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n      ),\n    ),\n  ),\n)",
      "ViewedObjectIDs": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      ViewedObjectIDs(\n        eventType = ViewEvent.entries.first { it.value == \"view\" },\n        eventName = \"Product Detail Page Viewed\",\n        index = \"products\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1641290601962L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n      ),\n    ),\n  ),\n)",
      "AddedToCartObjectIDs": "var response = client.pushEvents(\n  insightsEvents = InsightsEvents(\n    events = listOf(\n      AddedToCartObjectIDsAfterSearch(\n        eventType = ConversionEvent.entries.first { it.value == \"conversion\" },\n        eventSubtype = AddToCartEvent.entries.first { it.value == \"addToCart\" },\n        eventName = \"Product Added To Cart\",\n        index = \"products\",\n        queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        userToken = \"user-123456\",\n        authenticatedUserToken = \"user-123456\",\n        timestamp = 1641290601962L,\n        objectIDs = listOf(\"9780545139700\", \"9780439784542\"),\n        objectData = listOf(\n          ObjectDataAfterSearch(\n            price = Price.of(19.99),\n            quantity = 10,\n            discount = Discount.of(2.5),\n          ),\n          ObjectDataAfterSearch(\n            price = Price.of(\"8$\"),\n            quantity = 7,\n            discount = Discount.of(\"30%\"),\n          ),\n        ),\n        currency = \"USD\",\n      ),\n    ),\n  ),\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = InsightsClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\", region = \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\InsightsClient;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "allow del method for a custom path with all parameters": "$response = $client->customDelete(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "$response = $client->customGet(\n    'test/minimal',\n);",
      "allow get method for a custom path with all parameters": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'parameters with space',\n    ],\n);",
      "requestOptions should be escaped too": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'to be overriden',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'parameters with space',\n            'and an array' => ['array', 'with spaces',\n            ],\n        ],\n        'headers' => [\n            'x-header-1' => 'spaces are left alone',\n        ],\n    ]\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "$response = $client->customPost(\n    'test/minimal',\n);",
      "allow post method for a custom path with all parameters": "$response = $client->customPost(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);",
      "requestOptions can override default query parameters": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions merges query parameters with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query2' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions can override default headers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions merges headers with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions queryParameters accepts booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'isItWorking' => true,\n        ], ]\n);",
      "requestOptions queryParameters accepts integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => 2,\n        ], ]\n);",
      "requestOptions queryParameters accepts list of string": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => ['b and c', 'd',\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [true, true, false,\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [1, 2,\n            ],\n        ], ]\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "$response = $client->customPut(\n    'test/minimal',\n);",
      "allow put method for a custom path with all parameters": "$response = $client->customPut(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);"
    },
    "deleteUserToken": {
      "default": "$client->deleteUserToken(\n    'test-user-1',\n);"
    },
    "pushEvents": {
      "pushEvents": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'click',\n            'eventName' => 'Product Clicked',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1641290601962,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n            'queryID' => '43b15df305339e827f0ac0bdc5ebcaa7',\n            'positions' => [\n                7,\n\n                6,\n            ],\n        ],\n    ],\n    ],\n);",
      "Many events type": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'conversion',\n            'eventName' => 'Product Purchased',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1742083200000,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n            'queryID' => '43b15df305339e827f0ac0bdc5ebcaa7',\n        ],\n\n        ['eventType' => 'view',\n            'eventName' => 'Product Detail Page Viewed',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1742083200000,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n        ],\n    ],\n    ],\n);",
      "ConvertedObjectIDsAfterSearch": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'conversion',\n            'eventName' => 'Product Purchased',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1641290601962,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n            'queryID' => '43b15df305339e827f0ac0bdc5ebcaa7',\n        ],\n    ],\n    ],\n);",
      "ViewedObjectIDs": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'view',\n            'eventName' => 'Product Detail Page Viewed',\n            'index' => 'products',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1641290601962,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n        ],\n    ],\n    ],\n);",
      "AddedToCartObjectIDs": "$response = $client->pushEvents(\n    ['events' => [\n        ['eventType' => 'conversion',\n            'eventSubtype' => 'addToCart',\n            'eventName' => 'Product Added To Cart',\n            'index' => 'products',\n            'queryID' => '43b15df305339e827f0ac0bdc5ebcaa7',\n            'userToken' => 'user-123456',\n            'authenticatedUserToken' => 'user-123456',\n            'timestamp' => 1641290601962,\n            'objectIDs' => [\n                '9780545139700',\n\n                '9780439784542',\n            ],\n            'objectData' => [\n                ['price' => 19.99,\n                    'quantity' => 10,\n                    'discount' => 2.5,\n                ],\n\n                ['price' => '8$',\n                    'quantity' => 7,\n                    'discount' => '30%',\n                ],\n            ],\n            'currency' => 'USD',\n        ],\n    ],\n    ],\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = InsightsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.insights.client import InsightsClientSync\nfrom json import loads"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters with space\",\n    },\n)",
      "requestOptions should be escaped too": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"to be overriden\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-header-1\":\"spaces are left alone\"}\"\"\"),\n        \"query_parameters\": loads(\n            \"\"\"{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}\"\"\"\n        ),\n    },\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)",
      "requestOptions can override default query parameters": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query2\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"isItWorking\":true}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":2}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[\"b and c\",\"d\"]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[true,true,false]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[1,2]}\"\"\"),\n    },\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)"
    },
    "deleteUserToken": {
      "default": "client.delete_user_token(\n    user_token=\"test-user-1\",\n)"
    },
    "pushEvents": {
      "pushEvents": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"click\",\n                \"eventName\": \"Product Clicked\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1641290601962,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n                \"queryID\": \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                \"positions\": [\n                    7,\n                    6,\n                ],\n            },\n        ],\n    },\n)",
      "Many events type": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"conversion\",\n                \"eventName\": \"Product Purchased\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1742083200000,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n                \"queryID\": \"43b15df305339e827f0ac0bdc5ebcaa7\",\n            },\n            {\n                \"eventType\": \"view\",\n                \"eventName\": \"Product Detail Page Viewed\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1742083200000,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n            },\n        ],\n    },\n)",
      "ConvertedObjectIDsAfterSearch": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"conversion\",\n                \"eventName\": \"Product Purchased\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1641290601962,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n                \"queryID\": \"43b15df305339e827f0ac0bdc5ebcaa7\",\n            },\n        ],\n    },\n)",
      "ViewedObjectIDs": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"view\",\n                \"eventName\": \"Product Detail Page Viewed\",\n                \"index\": \"products\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1641290601962,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n            },\n        ],\n    },\n)",
      "AddedToCartObjectIDs": "response = client.push_events(\n    insights_events={\n        \"events\": [\n            {\n                \"eventType\": \"conversion\",\n                \"eventSubtype\": \"addToCart\",\n                \"eventName\": \"Product Added To Cart\",\n                \"index\": \"products\",\n                \"queryID\": \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                \"userToken\": \"user-123456\",\n                \"authenticatedUserToken\": \"user-123456\",\n                \"timestamp\": 1641290601962,\n                \"objectIDs\": [\n                    \"9780545139700\",\n                    \"9780439784542\",\n                ],\n                \"objectData\": [\n                    {\n                        \"price\": 19.99,\n                        \"quantity\": 10,\n                        \"discount\": 2.5,\n                    },\n                    {\n                        \"price\": \"8$\",\n                        \"quantity\": 7,\n                        \"discount\": \"30%\",\n                    },\n                ],\n                \"currency\": \"USD\",\n            },\n        ],\n    },\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use InsightsClient instead, which exposes the exact same methods.\nclient = InsightsClientSync(\n    \"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\"test/minimal\")",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\"test/all\", {query: \"parameters\"})"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\"test/minimal\")",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\"test/all\", {query: \"parameters with space\"})",
      "requestOptions should be escaped too": "response = client.custom_get(\n  \"test/all\",\n  {query: \"to be overriden\"},\n  {\n    :header_params => {\"x-header-1\" => \"spaces are left alone\"},\n    :query_params => JSON.parse(\n      \"{\\\"query\\\":\\\"parameters with space\\\",\\\"and an array\\\":[\\\"array\\\",\\\"with spaces\\\"]}\",\n      :symbolize_names => true\n    )\n  }\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\"test/minimal\")",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})",
      "requestOptions can override default query parameters": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query2\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"isItWorking\\\":true}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":2}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[\\\"b and c\\\",\\\"d\\\"]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[true,true,false]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[1,2]}\", :symbolize_names => true)}\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\"test/minimal\")",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})"
    },
    "deleteUserToken": {
      "default": "client.delete_user_token(\"test-user-1\")"
    },
    "pushEvents": {
      "pushEvents": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::ClickedObjectIDsAfterSearch.new(\n        event_type: \"click\",\n        event_name: \"Product Clicked\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1641290601962,\n        object_ids: [\"9780545139700\", \"9780439784542\"],\n        query_id: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        positions: [7, 6]\n      )\n    ]\n  )\n)",
      "Many events type": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::ConvertedObjectIDsAfterSearch.new(\n        event_type: \"conversion\",\n        event_name: \"Product Purchased\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1742083200000,\n        object_ids: [\"9780545139700\", \"9780439784542\"],\n        query_id: \"43b15df305339e827f0ac0bdc5ebcaa7\"\n      ),\n      Algolia::Insights::ViewedObjectIDs.new(\n        event_type: \"view\",\n        event_name: \"Product Detail Page Viewed\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1742083200000,\n        object_ids: [\"9780545139700\", \"9780439784542\"]\n      )\n    ]\n  )\n)",
      "ConvertedObjectIDsAfterSearch": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::ConvertedObjectIDsAfterSearch.new(\n        event_type: \"conversion\",\n        event_name: \"Product Purchased\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1641290601962,\n        object_ids: [\"9780545139700\", \"9780439784542\"],\n        query_id: \"43b15df305339e827f0ac0bdc5ebcaa7\"\n      )\n    ]\n  )\n)",
      "ViewedObjectIDs": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::ViewedObjectIDs.new(\n        event_type: \"view\",\n        event_name: \"Product Detail Page Viewed\",\n        index: \"products\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1641290601962,\n        object_ids: [\"9780545139700\", \"9780439784542\"]\n      )\n    ]\n  )\n)",
      "AddedToCartObjectIDs": "response = client.push_events(\n  Algolia::Insights::InsightsEvents.new(\n    events: [\n      Algolia::Insights::AddedToCartObjectIDsAfterSearch.new(\n        event_type: \"conversion\",\n        event_subtype: \"addToCart\",\n        event_name: \"Product Added To Cart\",\n        index: \"products\",\n        query_id: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        user_token: \"user-123456\",\n        authenticated_user_token: \"user-123456\",\n        timestamp: 1641290601962,\n        object_ids: [\"9780545139700\", \"9780439784542\"],\n        object_data: [\n          Algolia::Insights::ObjectDataAfterSearch.new(price: 19.99, quantity: 10, discount: 2.5),\n          Algolia::Insights::ObjectDataAfterSearch.new(price: \"8$\", quantity: 7, discount: \"30%\")\n        ],\n        currency: \"USD\"\n      )\n    ]\n  )\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::InsightsClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.InsightsClient\nimport algoliasearch.config.*"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "val response = Await.result(\n  client.customDelete[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow del method for a custom path with all parameters": "val response = Await.result(\n  client.customDelete[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\"))\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow get method for a custom path with all parameters": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters with space\"))\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions should be escaped too": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"to be overriden\")),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query\", \"parameters with space\")\n        .withQueryParameter(\"and an array\", Seq(\"array\", \"with spaces\"))\n        .withHeader(\"x-header-1\", \"spaces are left alone\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow post method for a custom path with all parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions can override default query parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query\", \"myQueryParameter\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions merges query parameters with default ones": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query2\", \"myQueryParameter\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions can override default headers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions merges headers with default ones": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts booleans": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"isItWorking\", true)\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts integers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", 2)\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of string": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(\"b and c\", \"d\"))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of booleans": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(true, true, false))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of integers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(1, 2))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "val response = Await.result(\n  client.customPut[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow put method for a custom path with all parameters": "val response = Await.result(\n  client.customPut[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "deleteUserToken": {
      "default": "Await.result(\n  client.deleteUserToken(\n    userToken = \"test-user-1\"\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "pushEvents": {
      "pushEvents": "val response = Await.result(\n  client.pushEvents(\n    insightsEvents = InsightsEvents(\n      events = Seq(\n        ClickedObjectIDsAfterSearch(\n          eventType = ClickEvent.withName(\"click\"),\n          eventName = \"Product Clicked\",\n          index = \"products\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1641290601962L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\"),\n          queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n          positions = Seq(7, 6)\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "Many events type": "val response = Await.result(\n  client.pushEvents(\n    insightsEvents = InsightsEvents(\n      events = Seq(\n        ConvertedObjectIDsAfterSearch(\n          eventType = ConversionEvent.withName(\"conversion\"),\n          eventName = \"Product Purchased\",\n          index = \"products\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1742083200000L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\"),\n          queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\"\n        ),\n        ViewedObjectIDs(\n          eventType = ViewEvent.withName(\"view\"),\n          eventName = \"Product Detail Page Viewed\",\n          index = \"products\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1742083200000L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\")\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "ConvertedObjectIDsAfterSearch": "val response = Await.result(\n  client.pushEvents(\n    insightsEvents = InsightsEvents(\n      events = Seq(\n        ConvertedObjectIDsAfterSearch(\n          eventType = ConversionEvent.withName(\"conversion\"),\n          eventName = \"Product Purchased\",\n          index = \"products\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1641290601962L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\"),\n          queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\"\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "ViewedObjectIDs": "val response = Await.result(\n  client.pushEvents(\n    insightsEvents = InsightsEvents(\n      events = Seq(\n        ViewedObjectIDs(\n          eventType = ViewEvent.withName(\"view\"),\n          eventName = \"Product Detail Page Viewed\",\n          index = \"products\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1641290601962L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\")\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "AddedToCartObjectIDs": "val response = Await.result(\n  client.pushEvents(\n    insightsEvents = InsightsEvents(\n      events = Seq(\n        AddedToCartObjectIDsAfterSearch(\n          eventType = ConversionEvent.withName(\"conversion\"),\n          eventSubtype = AddToCartEvent.withName(\"addToCart\"),\n          eventName = \"Product Added To Cart\",\n          index = \"products\",\n          queryID = \"43b15df305339e827f0ac0bdc5ebcaa7\",\n          userToken = \"user-123456\",\n          authenticatedUserToken = Some(\"user-123456\"),\n          timestamp = Some(1641290601962L),\n          objectIDs = Seq(\"9780545139700\", \"9780439784542\"),\n          objectData = Some(\n            Seq(\n              ObjectDataAfterSearch(\n                price = Some(Price(19.99)),\n                quantity = Some(10),\n                discount = Some(Discount(2.5))\n              ),\n              ObjectDataAfterSearch(\n                price = Some(Price(\"8$\")),\n                quantity = Some(7),\n                discount = Some(Discount(\"30%\"))\n              )\n            )\n          ),\n          currency = Some(\"USD\")\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\"\n)"
    },
    "init": {
      "default": "val client = InsightsClient(\n  appId = \"ALGOLIA_APPLICATION_ID\",\n  apiKey = \"ALGOLIA_API_KEY\",\n  region = Option(\"ALGOLIA_APPLICATION_REGION\")\n)"
    }
  },
  "swift": {
    "import": {
      "default": "import Insights"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "let response = try await client.customDelete(path: \"test/minimal\")",
      "allow del method for a custom path with all parameters": "let response = try await client.customDelete(path: \"test/all\", parameters: [\"query\": AnyCodable(\"parameters\")])"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "let response = try await client.customGet(path: \"test/minimal\")",
      "allow get method for a custom path with all parameters": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters with space\")]\n)",
      "requestOptions should be escaped too": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"to be overriden\")],\n    requestOptions: RequestOptions(\n        headers: [\"x-header-1\": \"spaces are left alone\"],\n\n        queryParameters: [\"query\": \"parameters with space\", \"and an array\": [\"array\", \"with spaces\"]]\n    )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "let response = try await client.customPost(path: \"test/minimal\")",
      "allow post method for a custom path with all parameters": "let response = try await client.customPost(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)",
      "requestOptions can override default query parameters": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions merges query parameters with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query2\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions can override default headers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions merges headers with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions queryParameters accepts booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"isItWorking\": true]\n    )\n)",
      "requestOptions queryParameters accepts integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": 2]\n    )\n)",
      "requestOptions queryParameters accepts list of string": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [\"b and c\", \"d\"]]\n    )\n)",
      "requestOptions queryParameters accepts list of booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [true, true, false]]\n    )\n)",
      "requestOptions queryParameters accepts list of integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [1, 2]]\n    )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "let response = try await client.customPut(path: \"test/minimal\")",
      "allow put method for a custom path with all parameters": "let response = try await client.customPut(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)"
    },
    "deleteUserToken": {
      "default": "try await client.deleteUserToken(userToken: \"test-user-1\")"
    },
    "pushEvents": {
      "pushEvents": "let response = try await client\n    .pushEvents(insightsEvents: InsightsEvents(events: [\n        EventsItems\n            .clickedObjectIDsAfterSearch(ClickedObjectIDsAfterSearch(\n                eventName: \"Product Clicked\",\n                eventType: ClickEvent.click,\n                index: \"products\",\n                objectIDs: [\"9780545139700\", \"9780439784542\"],\n                positions: [7, 6],\n                queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                userToken: \"user-123456\",\n                authenticatedUserToken: \"user-123456\",\n                timestamp: Int64(1_641_290_601_962)\n            )),\n    ]))",
      "Many events type": "let response = try await client.pushEvents(insightsEvents: InsightsEvents(events: [\n    EventsItems.convertedObjectIDsAfterSearch(ConvertedObjectIDsAfterSearch(\n        eventName: \"Product Purchased\",\n        eventType: ConversionEvent.conversion,\n        index: \"products\",\n        objectIDs: [\"9780545139700\", \"9780439784542\"],\n        queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: Int64(1_742_083_200_000)\n    )),\n    EventsItems.viewedObjectIDs(ViewedObjectIDs(\n        eventName: \"Product Detail Page Viewed\",\n        eventType: ViewEvent.view,\n        index: \"products\",\n        objectIDs: [\"9780545139700\", \"9780439784542\"],\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: Int64(1_742_083_200_000)\n    )),\n]))",
      "ConvertedObjectIDsAfterSearch": "let response = try await client\n    .pushEvents(insightsEvents: InsightsEvents(events: [\n        EventsItems\n            .convertedObjectIDsAfterSearch(ConvertedObjectIDsAfterSearch(\n                eventName: \"Product Purchased\",\n                eventType: ConversionEvent.conversion,\n                index: \"products\",\n                objectIDs: [\"9780545139700\", \"9780439784542\"],\n                queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                userToken: \"user-123456\",\n                authenticatedUserToken: \"user-123456\",\n                timestamp: Int64(1_641_290_601_962)\n            )),\n    ]))",
      "ViewedObjectIDs": "let response = try await client\n    .pushEvents(insightsEvents: InsightsEvents(events: [EventsItems.viewedObjectIDs(ViewedObjectIDs(\n        eventName: \"Product Detail Page Viewed\",\n        eventType: ViewEvent.view,\n        index: \"products\",\n        objectIDs: [\"9780545139700\", \"9780439784542\"],\n        userToken: \"user-123456\",\n        authenticatedUserToken: \"user-123456\",\n        timestamp: Int64(1_641_290_601_962)\n    ))]))",
      "AddedToCartObjectIDs": "let response = try await client\n    .pushEvents(insightsEvents: InsightsEvents(events: [\n        EventsItems\n            .addedToCartObjectIDsAfterSearch(AddedToCartObjectIDsAfterSearch(\n                eventName: \"Product Added To Cart\",\n                eventType: ConversionEvent.conversion,\n                eventSubtype: AddToCartEvent.addToCart,\n                index: \"products\",\n                queryID: \"43b15df305339e827f0ac0bdc5ebcaa7\",\n                objectIDs: [\"9780545139700\", \"9780439784542\"],\n                userToken: \"user-123456\",\n                authenticatedUserToken: \"user-123456\",\n                currency: \"USD\",\n                objectData: [\n                    ObjectDataAfterSearch(\n                        price: Price.double(19.99),\n                        quantity: 10,\n                        discount: Discount.double(2.5)\n                    ),\n                    ObjectDataAfterSearch(\n                        price: Price.string(\"8$\"),\n                        quantity: 7,\n                        discount: Discount.string(\"30%\")\n                    ),\n                ],\n                timestamp: Int64(1_641_290_601_962)\n            )),\n    ]))"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try InsightsClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\", region: .us)"
    }
  }
}