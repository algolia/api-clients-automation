{
  "openapi": "3.0.2",
  "info": {
    "title": "Personalization API",
    "description": "The Personalization API lets you access user profiles built from the personalization strategy.\n\n## Base URLs\n\nThe base URLs for requests to the Personalization API are:\n\n- `https://personalization.us.algolia.com`\n- `https://personalization.eu.algolia.com`\n\nUse the URL that matches your [analytics region](https://dashboard.algolia.com/account/infrastructure/analytics).\n\n**All requests must use HTTPS.**\n\n## Authentication\n\nTo authenticate your API requests, add these headers:\n\n- `x-algolia-application-id`. Your Algolia application ID.\n- `x-algolia-api-key`. An API key with the necessary permissions to make the request.\n  The required access control list (ACL) to make a request is listed in each endpoint's reference.\n\nYou can find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account/api-keys).\n\n## Request format\n\nRequest bodies must be JSON objects.\n\n## Response status and errors\n\nThe Personalization API returns JSON responses.\nSince JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.\n\nSuccessful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a `5xx` status.\nError responses have a `message` property with more information.\n\n## Rate limiting\n\nWhen making requests to the Personalization API, you are limited to 40 API calls per second per application.\n\nThe following headers provide information about your current limit:\n\n- `x-ratelimit-limit`: The number of requests allowed every second.\n- `x-ratelimit-remaining`: The number of requests remaining in the current\nsecond period.\n- `x-ratelimit-reset`: [Unix timestamp](https://www.unixtimestamp.com) of\nthe next time period.\n\n## Version\n\nThe current version of the Personalization API is version 1, as indicated by the `/1/` in each endpoint's URL.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://personalization.{region}.algolia.com",
      "variables": {
        "region": {
          "description": "The region where your Algolia application is hosted.",
          "enum": [
            "us",
            "eu"
          ],
          "default": "us"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "profiles",
      "x-displayName": "Profiles",
      "description": "User profiles represent the affinities each user profile has for the different facets in your index.\nThe more a user viewed and clicked search results with a specific facet,\nthe higher the affinity for that facet.\n"
    },
    {
      "name": "strategies",
      "x-displayName": "Strategies",
      "description": "The personalization strategy defines how personalization should affect the search results,\nand how much each facet and event type impact the personalization.\n"
    }
  ],
  "externalDocs": {
    "url": "https://www.algolia.com/doc/guides/personalization/what-is-personalization",
    "description": "Algolia Personalization."
  },
  "paths": {
    "/{path}": {
      "get": {
        "operationId": "customGet",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "operationId": "customPost",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "operationId": "customPut",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "operationId": "customDelete",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/profiles/personalization/{userToken}": {
      "get": {
        "tags": [
          "profiles"
        ],
        "operationId": "getUserTokenProfile",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Retrieve a user profile",
        "description": "Retrieves a user profile and their affinities for different facets.",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-ratelimit-limit": {
                "$ref": "#/components/headers/x-ratelimit-limit"
              },
              "x-ratelimit-remaining": {
                "$ref": "#/components/headers/x-ratelimit-remaining"
              },
              "x-ratelimit-reset": {
                "$ref": "#/components/headers/x-ratelimit-reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "getUserTokenResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "userToken",
                    "scores",
                    "lastEventAt"
                  ],
                  "properties": {
                    "userToken": {
                      "$ref": "#/components/schemas/userToken"
                    },
                    "lastEventAt": {
                      "type": "string",
                      "description": "Date and time of the last event from this user, in RFC 3339 format."
                    },
                    "scores": {
                      "type": "object",
                      "description": "Scores for different facet values.\n\nScores represent the user affinity for a user profile towards specific facet values,\ngiven the personalization strategy and past events.\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/profiles/{userToken}": {
      "delete": {
        "tags": [
          "profiles"
        ],
        "operationId": "deleteUserProfile",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Delete a user profile",
        "description": "Deletes a user profile.\n\nThe response includes a date and time when the user profile can safely be considered deleted.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-ratelimit-limit": {
                "$ref": "#/components/headers/x-ratelimit-limit"
              },
              "x-ratelimit-remaining": {
                "$ref": "#/components/headers/x-ratelimit-remaining"
              },
              "x-ratelimit-reset": {
                "$ref": "#/components/headers/x-ratelimit-reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "deleteUserProfileResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "userToken",
                    "deletedUntil"
                  ],
                  "properties": {
                    "userToken": {
                      "$ref": "#/components/schemas/userToken"
                    },
                    "deletedUntil": {
                      "type": "string",
                      "description": "Date and time when the user profile can be safely considered to be deleted.\nAny events received after the `deletedUntil` date start a new user profile.\n"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/strategies/personalization": {
      "get": {
        "tags": [
          "strategies"
        ],
        "operationId": "getPersonalizationStrategy",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Retrieve the personalization strategy",
        "description": "Retrieves the current personalization strategy.",
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "x-ratelimit-limit": {
                "$ref": "#/components/headers/x-ratelimit-limit"
              },
              "x-ratelimit-remaining": {
                "$ref": "#/components/headers/x-ratelimit-remaining"
              },
              "x-ratelimit-reset": {
                "$ref": "#/components/headers/x-ratelimit-reset"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/personalizationStrategyParams"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "tags": [
          "strategies"
        ],
        "operationId": "setPersonalizationStrategy",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Define the personalization strategy",
        "description": "Creates a new personalization strategy.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/personalizationStrategyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "setPersonalizationStrategyResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message confirming the strategy update.",
                      "example": "Strategy was successfully updated."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/setClientApiKey": {
      "get": {
        "x-helper": true,
        "x-asynchronous-helper": false,
        "tags": [
          "Api Key"
        ],
        "operationId": "setClientApiKey",
        "summary": "Switch the API key used to authenticate requests",
        "description": "Switch the API key used to authenticate requests.\n",
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "API key to be used from now on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-application-id",
        "description": "Your Algolia application ID."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-api-key",
        "description": "Your Algolia API key with the necessary permissions to make the request.\nPermissions are controlled through access control lists (ACL) and access restrictions.\nThe required ACL to make a request is listed in each endpoint's reference.\n"
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, for example `1/newFeature`.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "UserToken": {
        "name": "userToken",
        "in": "path",
        "required": true,
        "description": "Unique identifier representing a user for which to fetch the personalization profile.",
        "schema": {
          "$ref": "#/components/schemas/userToken"
        }
      }
    },
    "schemas": {
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "x-keep-model": true,
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "userToken": {
        "type": "string",
        "description": "Unique pseudonymous or anonymous user identifier.\n\nThis helps with analytics and click and conversion events.\nFor more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken).\n",
        "example": "test-user-123",
        "x-categories": [
          "Personalization"
        ]
      },
      "score": {
        "type": "integer",
        "description": "Event score."
      },
      "EventType": {
        "title": "eventType",
        "type": "string",
        "description": "Event type.",
        "enum": [
          "click",
          "conversion",
          "view"
        ]
      },
      "eventsScoring": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "score",
          "eventName",
          "eventType"
        ],
        "properties": {
          "score": {
            "$ref": "#/components/schemas/score"
          },
          "eventName": {
            "type": "string",
            "description": "Event name."
          },
          "eventType": {
            "$ref": "#/components/schemas/EventType"
          }
        }
      },
      "facetsScoring": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "score",
          "facetName"
        ],
        "properties": {
          "score": {
            "$ref": "#/components/schemas/score"
          },
          "facetName": {
            "type": "string",
            "description": "Facet attribute name."
          }
        }
      },
      "personalizationStrategyParams": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "eventsScoring",
          "facetsScoring",
          "personalizationImpact"
        ],
        "properties": {
          "eventsScoring": {
            "type": "array",
            "description": "Scores associated with each event.\n\nThe higher the scores, the higher the impact of those events on the personalization of search results.\n",
            "items": {
              "$ref": "#/components/schemas/eventsScoring"
            }
          },
          "facetsScoring": {
            "type": "array",
            "description": "Scores associated with each facet.\n\nThe higher the scores, the higher the impact of those events on the personalization of search results.\n",
            "items": {
              "$ref": "#/components/schemas/facetsScoring"
            }
          },
          "personalizationImpact": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "Impact of personalization on the search results.\n\nIf set to 0, personalization has no impact on the search results.\n"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      }
    },
    "headers": {
      "x-ratelimit-limit": {
        "description": "Number of allowed requests per one minute.",
        "example": 100,
        "schema": {
          "type": "integer"
        }
      },
      "x-ratelimit-remaining": {
        "description": "Number of remaining requests in the current period.",
        "example": 99,
        "schema": {
          "type": "integer"
        }
      },
      "x-ratelimit-reset": {
        "description": "Timstamp when the rate limit will reset, measured in seconds since the Unix epoch.",
        "example": 1710682486,
        "schema": {
          "type": "integer"
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "profiles",
        "strategies"
      ]
    }
  ]
}