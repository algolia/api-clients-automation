{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;\nusing Algolia.Search.Models.Analytics;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "var response = await client.CustomDeleteAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters with space\" } }\n);",
      "requestOptions should be escaped too": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"to be overriden\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"query\", \"parameters with space\")\n    .AddExtraQueryParameters(\"and an array\", new List<object> { \"array\", \"with spaces\" })\n    .AddExtraHeader(\"x-header-1\", \"spaces are left alone\")\n    .Build()\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "var response = await client.CustomPostAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);",
      "requestOptions can override default query parameters": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query\", \"myQueryParameter\").Build()\n);",
      "requestOptions merges query parameters with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query2\", \"myQueryParameter\").Build()\n);",
      "requestOptions can override default headers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions merges headers with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions queryParameters accepts booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"isItWorking\", true).Build()\n);",
      "requestOptions queryParameters accepts integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"myParam\", 2).Build()\n);",
      "requestOptions queryParameters accepts list of string": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { \"b and c\", \"d\" })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { true, true, false })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { 1, 2 })\n    .Build()\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "var response = await client.CustomPutAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "var response = await client.GetAddToCartRateAsync(\"index\");",
      "get getAddToCartRate with all parameters": "var response = await client.GetAddToCartRateAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "var response = await client.GetAverageClickPositionAsync(\"index\");",
      "get getAverageClickPosition with all parameters": "var response = await client.GetAverageClickPositionAsync(\n  \"index\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  \"tag\"\n);"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "var response = await client.GetClickPositionsAsync(\"index\");",
      "get getClickPositions with all parameters": "var response = await client.GetClickPositionsAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "var response = await client.GetClickThroughRateAsync(\"index\");",
      "get getClickThroughRate with all parameters": "var response = await client.GetClickThroughRateAsync(\n  \"index\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  \"tag\"\n);"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "var response = await client.GetConversionRateAsync(\"index\");",
      "get getConversationRate with all parameters": "var response = await client.GetConversionRateAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "var response = await client.GetNoClickRateAsync(\"index\");",
      "get getNoClickRate with all parameters": "var response = await client.GetNoClickRateAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "var response = await client.GetNoResultsRateAsync(\"index\");",
      "get getNoResultsRate with all parameters": "var response = await client.GetNoResultsRateAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "var response = await client.GetPurchaseRateAsync(\"index\");",
      "get getPurchaseRate with all parameters": "var response = await client.GetPurchaseRateAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "var response = await client.GetRevenueAsync(\"index\");",
      "get getRevenue with all parameters": "var response = await client.GetRevenueAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "var response = await client.GetSearchesCountAsync(\"index\");",
      "get getSearchesCount with all parameters": "var response = await client.GetSearchesCountAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "var response = await client.GetSearchesNoClicksAsync(\"index\");",
      "get getSearchesNoClicks with all parameters": "var response = await client.GetSearchesNoClicksAsync(\n  \"index\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "var response = await client.GetSearchesNoResultsAsync(\"index\");",
      "get getSearchesNoResults with all parameters": "var response = await client.GetSearchesNoResultsAsync(\n  \"index\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getStatus": {
      "default": "var response = await client.GetStatusAsync(\"index\");"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "var response = await client.GetTopCountriesAsync(\"index\");",
      "get getTopCountries with all parameters": "var response = await client.GetTopCountriesAsync(\n  \"index\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "var response = await client.GetTopFilterAttributesAsync(\"index\");",
      "get getTopFilterAttributes with all parameters": "var response = await client.GetTopFilterAttributesAsync(\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "var response = await client.GetTopFilterForAttributeAsync(\"myAttribute\", \"index\");",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "var response = await client.GetTopFilterForAttributeAsync(\"myAttribute1,myAttribute2\", \"index\");",
      "get getTopFilterForAttribute with all parameters": "var response = await client.GetTopFilterForAttributeAsync(\n  \"myAttribute\",\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "var response = await client.GetTopFilterForAttributeAsync(\n  \"myAttribute1,myAttribute2\",\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "var response = await client.GetTopFiltersNoResultsAsync(\"index\");",
      "get getTopFiltersNoResults with all parameters": "var response = await client.GetTopFiltersNoResultsAsync(\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "var response = await client.GetTopHitsAsync(\"index\");",
      "get getTopHits with all parameters": "var response = await client.GetTopHitsAsync(\n  \"index\",\n  \"mySearch\",\n  true,\n  true,\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "var response = await client.GetTopSearchesAsync(\"index\");",
      "get getTopSearches with all parameters": "var response = await client.GetTopSearchesAsync(\n  \"index\",\n  true,\n  true,\n  \"1999-09-19\",\n  \"2001-01-01\",\n  Enum.Parse<OrderBy>(\"SearchCount\"),\n  Enum.Parse<Direction>(\"Asc\"),\n  21,\n  42,\n  \"tag\"\n);"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "var response = await client.GetUsersCountAsync(\"index\");",
      "get getUsersCount with all parameters": "var response = await client.GetUsersCountAsync(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new AnalyticsClient(\n  new AnalyticsConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")\n);"
    }
  },
  "dart": {},
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/analytics\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow del method for a custom path with all parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow get method for a custom path with all parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters with space\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions should be escaped too": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"to be overriden\"}), analytics.WithQueryParam(\"query\", \"parameters with space\"), analytics.WithQueryParam(\"and an array\",\n  []string{\"array\", \"with spaces\"}), analytics.WithHeaderParam(\"x-header-1\", \"spaces are left alone\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow post method for a custom path with all parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default query parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"query\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges query parameters with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"query2\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default headers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges headers with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"isItWorking\", true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"myParam\", 2))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of string": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"myParam\",\n  []string{\"b and c\", \"d\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"myParam\",\n  []bool{true, true, false}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), analytics.WithQueryParam(\"myParam\",\n  []int32{1, 2}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow put method for a custom path with all parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "response, err := client.GetAddToCartRate(client.NewApiGetAddToCartRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getAddToCartRate with all parameters": "response, err := client.GetAddToCartRate(client.NewApiGetAddToCartRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "response, err := client.GetAverageClickPosition(client.NewApiGetAverageClickPositionRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getAverageClickPosition with all parameters": "response, err := client.GetAverageClickPosition(client.NewApiGetAverageClickPositionRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "response, err := client.GetClickPositions(client.NewApiGetClickPositionsRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getClickPositions with all parameters": "response, err := client.GetClickPositions(client.NewApiGetClickPositionsRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "response, err := client.GetClickThroughRate(client.NewApiGetClickThroughRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getClickThroughRate with all parameters": "response, err := client.GetClickThroughRate(client.NewApiGetClickThroughRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "response, err := client.GetConversionRate(client.NewApiGetConversionRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getConversationRate with all parameters": "response, err := client.GetConversionRate(client.NewApiGetConversionRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "response, err := client.GetNoClickRate(client.NewApiGetNoClickRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getNoClickRate with all parameters": "response, err := client.GetNoClickRate(client.NewApiGetNoClickRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "response, err := client.GetNoResultsRate(client.NewApiGetNoResultsRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getNoResultsRate with all parameters": "response, err := client.GetNoResultsRate(client.NewApiGetNoResultsRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "response, err := client.GetPurchaseRate(client.NewApiGetPurchaseRateRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getPurchaseRate with all parameters": "response, err := client.GetPurchaseRate(client.NewApiGetPurchaseRateRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "response, err := client.GetRevenue(client.NewApiGetRevenueRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getRevenue with all parameters": "response, err := client.GetRevenue(client.NewApiGetRevenueRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "response, err := client.GetSearchesCount(client.NewApiGetSearchesCountRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getSearchesCount with all parameters": "response, err := client.GetSearchesCount(client.NewApiGetSearchesCountRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "response, err := client.GetSearchesNoClicks(client.NewApiGetSearchesNoClicksRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getSearchesNoClicks with all parameters": "response, err := client.GetSearchesNoClicks(client.NewApiGetSearchesNoClicksRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "response, err := client.GetSearchesNoResults(client.NewApiGetSearchesNoResultsRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getSearchesNoResults with all parameters": "response, err := client.GetSearchesNoResults(client.NewApiGetSearchesNoResultsRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getStatus": {
      "default": "response, err := client.GetStatus(client.NewApiGetStatusRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "response, err := client.GetTopCountries(client.NewApiGetTopCountriesRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopCountries with all parameters": "response, err := client.GetTopCountries(client.NewApiGetTopCountriesRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "response, err := client.GetTopFilterAttributes(client.NewApiGetTopFilterAttributesRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopFilterAttributes with all parameters": "response, err := client.GetTopFilterAttributes(client.NewApiGetTopFilterAttributesRequest(\n  \"index\").WithSearch(\"mySearch\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "response, err := client.GetTopFilterForAttribute(client.NewApiGetTopFilterForAttributeRequest(\n  \"myAttribute\", \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "response, err := client.GetTopFilterForAttribute(client.NewApiGetTopFilterForAttributeRequest(\n  \"myAttribute1,myAttribute2\", \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopFilterForAttribute with all parameters": "response, err := client.GetTopFilterForAttribute(client.NewApiGetTopFilterForAttributeRequest(\n  \"myAttribute\", \"index\").WithSearch(\"mySearch\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "response, err := client.GetTopFilterForAttribute(client.NewApiGetTopFilterForAttributeRequest(\n  \"myAttribute1,myAttribute2\", \"index\").WithSearch(\"mySearch\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "response, err := client.GetTopFiltersNoResults(client.NewApiGetTopFiltersNoResultsRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopFiltersNoResults with all parameters": "response, err := client.GetTopFiltersNoResults(client.NewApiGetTopFiltersNoResultsRequest(\n  \"index\").WithSearch(\"mySearch\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "response, err := client.GetTopHits(client.NewApiGetTopHitsRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopHits with all parameters": "response, err := client.GetTopHits(client.NewApiGetTopHitsRequest(\n  \"index\").WithSearch(\"mySearch\").WithClickAnalytics(true).WithRevenueAnalytics(true).WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "response, err := client.GetTopSearches(client.NewApiGetTopSearchesRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getTopSearches with all parameters": "response, err := client.GetTopSearches(client.NewApiGetTopSearchesRequest(\n  \"index\").WithClickAnalytics(true).WithRevenueAnalytics(true).WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithOrderBy(analytics.OrderBy(\"searchCount\")).WithDirection(analytics.Direction(\"asc\")).WithLimit(21).WithOffset(42).WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "response, err := client.GetUsersCount(client.NewApiGetUsersCountRequest(\n  \"index\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "get getUsersCount with all parameters": "response, err := client.GetUsersCount(client.NewApiGetUsersCountRequest(\n  \"index\").WithStartDate(\"1999-09-19\").WithEndDate(\"2001-01-01\").WithTags(\"tag\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\")\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := analytics.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", analytics.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.AnalyticsClient;\nimport com.algolia.config.*;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "client.customDelete(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "client.customDelete(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "client.customGet(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters with space\");\n    }\n  }\n);",
      "requestOptions should be escaped too": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"to be overriden\");\n    }\n  },\n  new RequestOptions()\n    .addExtraQueryParameters(\"query\", \"parameters with space\")\n    .addExtraQueryParameters(\"and an array\", Arrays.asList(\"array\", \"with spaces\"))\n    .addExtraHeader(\"x-header-1\", \"spaces are left alone\")\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "client.customPost(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "client.customPost(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);",
      "requestOptions can override default query parameters": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query\", \"myQueryParameter\")\n);",
      "requestOptions merges query parameters with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query2\", \"myQueryParameter\")\n);",
      "requestOptions can override default headers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions merges headers with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions queryParameters accepts booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"isItWorking\", true)\n);",
      "requestOptions queryParameters accepts integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", 2)\n);",
      "requestOptions queryParameters accepts list of string": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(\"b and c\", \"d\"))\n);",
      "requestOptions queryParameters accepts list of booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(true, true, false))\n);",
      "requestOptions queryParameters accepts list of integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(1, 2))\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "client.customPut(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "client.customPut(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "client.getAddToCartRate(\"index\");",
      "get getAddToCartRate with all parameters": "client.getAddToCartRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "client.getAverageClickPosition(\"index\");",
      "get getAverageClickPosition with all parameters": "client.getAverageClickPosition(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "client.getClickPositions(\"index\");",
      "get getClickPositions with all parameters": "client.getClickPositions(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "client.getClickThroughRate(\"index\");",
      "get getClickThroughRate with all parameters": "client.getClickThroughRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "client.getConversionRate(\"index\");",
      "get getConversationRate with all parameters": "client.getConversionRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "client.getNoClickRate(\"index\");",
      "get getNoClickRate with all parameters": "client.getNoClickRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "client.getNoResultsRate(\"index\");",
      "get getNoResultsRate with all parameters": "client.getNoResultsRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "client.getPurchaseRate(\"index\");",
      "get getPurchaseRate with all parameters": "client.getPurchaseRate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "client.getRevenue(\"index\");",
      "get getRevenue with all parameters": "client.getRevenue(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "client.getSearchesCount(\"index\");",
      "get getSearchesCount with all parameters": "client.getSearchesCount(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "client.getSearchesNoClicks(\"index\");",
      "get getSearchesNoClicks with all parameters": "client.getSearchesNoClicks(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "client.getSearchesNoResults(\"index\");",
      "get getSearchesNoResults with all parameters": "client.getSearchesNoResults(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getStatus": {
      "default": "client.getStatus(\"index\");"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "client.getTopCountries(\"index\");",
      "get getTopCountries with all parameters": "client.getTopCountries(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "client.getTopFilterAttributes(\"index\");",
      "get getTopFilterAttributes with all parameters": "client.getTopFilterAttributes(\"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "client.getTopFilterForAttribute(\"myAttribute\", \"index\");",
      "get getTopFilterForAttribute with minimal parameters and": "client.getTopFilterForAttribute(\"myAttribute1,myAttribute2\", \"index\");",
      "get getTopFilterForAttribute with all parameters": "client.getTopFilterForAttribute(\"myAttribute\", \"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");",
      "get getTopFilterForAttribute with all parameters and": "client.getTopFilterForAttribute(\"myAttribute1,myAttribute2\", \"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "client.getTopFiltersNoResults(\"index\");",
      "get getTopFiltersNoResults with all parameters": "client.getTopFiltersNoResults(\"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "client.getTopHits(\"index\");",
      "get getTopHits with all parameters": "client.getTopHits(\"index\", \"mySearch\", true, true, \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\");"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "client.getTopSearches(\"index\");",
      "get getTopSearches with all parameters": "client.getTopSearches(\"index\", true, true, \"1999-09-19\", \"2001-01-01\", OrderBy.SEARCH_COUNT, Direction.ASC, 21, 42, \"tag\");"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "client.getUsersCount(\"index\");",
      "get getUsersCount with all parameters": "client.getUsersCount(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\");"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "AnalyticsClient client = new AnalyticsClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { algoliasearch } from 'algoliasearch';"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "const response = await client.customDelete({ path: 'test/minimal' });",
      "allow del method for a custom path with all parameters": "const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "const response = await client.customGet({ path: 'test/minimal' });",
      "allow get method for a custom path with all parameters": "const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });",
      "requestOptions should be escaped too": "const response = await client.customGet(\n  { path: 'test/all', parameters: { query: 'to be overriden' } },\n  {\n    queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },\n    headers: { 'x-header-1': 'spaces are left alone' },\n  },\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "const response = await client.customPost({ path: 'test/minimal' });",
      "allow post method for a custom path with all parameters": "const response = await client.customPost({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});",
      "requestOptions can override default query parameters": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query: 'myQueryParameter' },\n  },\n);",
      "requestOptions merges query parameters with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query2: 'myQueryParameter' },\n  },\n);",
      "requestOptions can override default headers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions merges headers with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions queryParameters accepts booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { isItWorking: true },\n  },\n);",
      "requestOptions queryParameters accepts integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: 2 },\n  },\n);",
      "requestOptions queryParameters accepts list of string": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: ['b and c', 'd'] },\n  },\n);",
      "requestOptions queryParameters accepts list of booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [true, true, false] },\n  },\n);",
      "requestOptions queryParameters accepts list of integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [1, 2] },\n  },\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "const response = await client.customPut({ path: 'test/minimal' });",
      "allow put method for a custom path with all parameters": "const response = await client.customPut({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "const response = await client.getAddToCartRate({ index: 'index' });",
      "get getAddToCartRate with all parameters": "const response = await client.getAddToCartRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "const response = await client.getAverageClickPosition({ index: 'index' });",
      "get getAverageClickPosition with all parameters": "const response = await client.getAverageClickPosition({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "const response = await client.getClickPositions({ index: 'index' });",
      "get getClickPositions with all parameters": "const response = await client.getClickPositions({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "const response = await client.getClickThroughRate({ index: 'index' });",
      "get getClickThroughRate with all parameters": "const response = await client.getClickThroughRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "const response = await client.getConversionRate({ index: 'index' });",
      "get getConversationRate with all parameters": "const response = await client.getConversionRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "const response = await client.getNoClickRate({ index: 'index' });",
      "get getNoClickRate with all parameters": "const response = await client.getNoClickRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "const response = await client.getNoResultsRate({ index: 'index' });",
      "get getNoResultsRate with all parameters": "const response = await client.getNoResultsRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "const response = await client.getPurchaseRate({ index: 'index' });",
      "get getPurchaseRate with all parameters": "const response = await client.getPurchaseRate({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "const response = await client.getRevenue({ index: 'index' });",
      "get getRevenue with all parameters": "const response = await client.getRevenue({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "const response = await client.getSearchesCount({ index: 'index' });",
      "get getSearchesCount with all parameters": "const response = await client.getSearchesCount({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "const response = await client.getSearchesNoClicks({ index: 'index' });",
      "get getSearchesNoClicks with all parameters": "const response = await client.getSearchesNoClicks({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "const response = await client.getSearchesNoResults({ index: 'index' });",
      "get getSearchesNoResults with all parameters": "const response = await client.getSearchesNoResults({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getStatus": {
      "default": "const response = await client.getStatus({ index: 'index' });"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "const response = await client.getTopCountries({ index: 'index' });",
      "get getTopCountries with all parameters": "const response = await client.getTopCountries({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "const response = await client.getTopFilterAttributes({ index: 'index' });",
      "get getTopFilterAttributes with all parameters": "const response = await client.getTopFilterAttributes({\n  index: 'index',\n  search: 'mySearch',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "const response = await client.getTopFilterForAttribute({ attribute: 'myAttribute', index: 'index' });",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "const response = await client.getTopFilterForAttribute({ attribute: 'myAttribute1,myAttribute2', index: 'index' });",
      "get getTopFilterForAttribute with all parameters": "const response = await client.getTopFilterForAttribute({\n  attribute: 'myAttribute',\n  index: 'index',\n  search: 'mySearch',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "const response = await client.getTopFilterForAttribute({\n  attribute: 'myAttribute1,myAttribute2',\n  index: 'index',\n  search: 'mySearch',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "const response = await client.getTopFiltersNoResults({ index: 'index' });",
      "get getTopFiltersNoResults with all parameters": "const response = await client.getTopFiltersNoResults({\n  index: 'index',\n  search: 'mySearch',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "const response = await client.getTopHits({ index: 'index' });",
      "get getTopHits with all parameters": "const response = await client.getTopHits({\n  index: 'index',\n  search: 'mySearch',\n  clickAnalytics: true,\n  revenueAnalytics: true,\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "const response = await client.getTopSearches({ index: 'index' });",
      "get getTopSearches with all parameters": "const response = await client.getTopSearches({\n  index: 'index',\n  clickAnalytics: true,\n  revenueAnalytics: true,\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  orderBy: 'searchCount',\n  direction: 'asc',\n  limit: 21,\n  offset: 42,\n  tags: 'tag',\n});"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "const response = await client.getUsersCount({ index: 'index' });",
      "get getUsersCount with all parameters": "const response = await client.getUsersCount({\n  index: 'index',\n  startDate: '1999-09-19',\n  endDate: '2001-01-01',\n  tags: 'tag',\n});"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "// Replace 'us' with your Algolia Application Region\nconst client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initAnalytics({ region: 'us' });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.AnalyticsClient\nimport com.algolia.client.configuration.*\nimport com.algolia.client.transport.*"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "var response = client.customDelete(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters with space\"),\n)",
      "requestOptions should be escaped too": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"to be overriden\"),\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"parameters with space\")\n      put(\"and an array\", listOf(\"array\", \"with spaces\"))\n    },\n    headers = buildMap {\n      put(\"x-header-1\", \"spaces are left alone\")\n    },\n  ),\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "var response = client.customPost(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)",
      "requestOptions can override default query parameters": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions merges query parameters with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query2\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions can override default headers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions merges headers with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions queryParameters accepts booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"isItWorking\", true)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", 2)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of string": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(\"b and c\", \"d\"))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(true, true, false))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(1, 2))\n    },\n  ),\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "var response = client.customPut(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "var response = client.getAddToCartRate(\n  index = \"index\",\n)",
      "get getAddToCartRate with all parameters": "var response = client.getAddToCartRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "var response = client.getAverageClickPosition(\n  index = \"index\",\n)",
      "get getAverageClickPosition with all parameters": "var response = client.getAverageClickPosition(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "var response = client.getClickPositions(\n  index = \"index\",\n)",
      "get getClickPositions with all parameters": "var response = client.getClickPositions(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "var response = client.getClickThroughRate(\n  index = \"index\",\n)",
      "get getClickThroughRate with all parameters": "var response = client.getClickThroughRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "var response = client.getConversionRate(\n  index = \"index\",\n)",
      "get getConversationRate with all parameters": "var response = client.getConversionRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "var response = client.getNoClickRate(\n  index = \"index\",\n)",
      "get getNoClickRate with all parameters": "var response = client.getNoClickRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "var response = client.getNoResultsRate(\n  index = \"index\",\n)",
      "get getNoResultsRate with all parameters": "var response = client.getNoResultsRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "var response = client.getPurchaseRate(\n  index = \"index\",\n)",
      "get getPurchaseRate with all parameters": "var response = client.getPurchaseRate(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "var response = client.getRevenue(\n  index = \"index\",\n)",
      "get getRevenue with all parameters": "var response = client.getRevenue(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "var response = client.getSearchesCount(\n  index = \"index\",\n)",
      "get getSearchesCount with all parameters": "var response = client.getSearchesCount(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "var response = client.getSearchesNoClicks(\n  index = \"index\",\n)",
      "get getSearchesNoClicks with all parameters": "var response = client.getSearchesNoClicks(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "var response = client.getSearchesNoResults(\n  index = \"index\",\n)",
      "get getSearchesNoResults with all parameters": "var response = client.getSearchesNoResults(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getStatus": {
      "default": "var response = client.getStatus(\n  index = \"index\",\n)"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "var response = client.getTopCountries(\n  index = \"index\",\n)",
      "get getTopCountries with all parameters": "var response = client.getTopCountries(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "var response = client.getTopFilterAttributes(\n  index = \"index\",\n)",
      "get getTopFilterAttributes with all parameters": "var response = client.getTopFilterAttributes(\n  index = \"index\",\n  search = \"mySearch\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "var response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute\",\n  index = \"index\",\n)",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "var response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute1,myAttribute2\",\n  index = \"index\",\n)",
      "get getTopFilterForAttribute with all parameters": "var response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute\",\n  index = \"index\",\n  search = \"mySearch\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "var response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute1,myAttribute2\",\n  index = \"index\",\n  search = \"mySearch\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "var response = client.getTopFiltersNoResults(\n  index = \"index\",\n)",
      "get getTopFiltersNoResults with all parameters": "var response = client.getTopFiltersNoResults(\n  index = \"index\",\n  search = \"mySearch\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "var response = client.getTopHits(\n  index = \"index\",\n)",
      "get getTopHits with all parameters": "var response = client.getTopHits(\n  index = \"index\",\n  search = \"mySearch\",\n  clickAnalytics = true,\n  revenueAnalytics = true,\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "var response = client.getTopSearches(\n  index = \"index\",\n)",
      "get getTopSearches with all parameters": "var response = client.getTopSearches(\n  index = \"index\",\n  clickAnalytics = true,\n  revenueAnalytics = true,\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  orderBy = OrderBy.entries.first { it.value == \"searchCount\" },\n  direction = Direction.entries.first { it.value == \"asc\" },\n  limit = 21,\n  offset = 42,\n  tags = \"tag\",\n)"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "var response = client.getUsersCount(\n  index = \"index\",\n)",
      "get getUsersCount with all parameters": "var response = client.getUsersCount(\n  index = \"index\",\n  startDate = \"1999-09-19\",\n  endDate = \"2001-01-01\",\n  tags = \"tag\",\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = AnalyticsClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\", region = \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\AnalyticsClient;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "allow del method for a custom path with all parameters": "$response = $client->customDelete(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "$response = $client->customGet(\n    'test/minimal',\n);",
      "allow get method for a custom path with all parameters": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'parameters with space',\n    ],\n);",
      "requestOptions should be escaped too": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'to be overriden',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'parameters with space',\n            'and an array' => ['array', 'with spaces',\n            ],\n        ],\n        'headers' => [\n            'x-header-1' => 'spaces are left alone',\n        ],\n    ]\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "$response = $client->customPost(\n    'test/minimal',\n);",
      "allow post method for a custom path with all parameters": "$response = $client->customPost(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);",
      "requestOptions can override default query parameters": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions merges query parameters with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query2' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions can override default headers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions merges headers with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions queryParameters accepts booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'isItWorking' => true,\n        ], ]\n);",
      "requestOptions queryParameters accepts integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => 2,\n        ], ]\n);",
      "requestOptions queryParameters accepts list of string": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => ['b and c', 'd',\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [true, true, false,\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [1, 2,\n            ],\n        ], ]\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "$response = $client->customPut(\n    'test/minimal',\n);",
      "allow put method for a custom path with all parameters": "$response = $client->customPut(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "$response = $client->getAddToCartRate(\n    'index',\n);",
      "get getAddToCartRate with all parameters": "$response = $client->getAddToCartRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "$response = $client->getAverageClickPosition(\n    'index',\n);",
      "get getAverageClickPosition with all parameters": "$response = $client->getAverageClickPosition(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "$response = $client->getClickPositions(\n    'index',\n);",
      "get getClickPositions with all parameters": "$response = $client->getClickPositions(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "$response = $client->getClickThroughRate(\n    'index',\n);",
      "get getClickThroughRate with all parameters": "$response = $client->getClickThroughRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "$response = $client->getConversionRate(\n    'index',\n);",
      "get getConversationRate with all parameters": "$response = $client->getConversionRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "$response = $client->getNoClickRate(\n    'index',\n);",
      "get getNoClickRate with all parameters": "$response = $client->getNoClickRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "$response = $client->getNoResultsRate(\n    'index',\n);",
      "get getNoResultsRate with all parameters": "$response = $client->getNoResultsRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "$response = $client->getPurchaseRate(\n    'index',\n);",
      "get getPurchaseRate with all parameters": "$response = $client->getPurchaseRate(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "$response = $client->getRevenue(\n    'index',\n);",
      "get getRevenue with all parameters": "$response = $client->getRevenue(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "$response = $client->getSearchesCount(\n    'index',\n);",
      "get getSearchesCount with all parameters": "$response = $client->getSearchesCount(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "$response = $client->getSearchesNoClicks(\n    'index',\n);",
      "get getSearchesNoClicks with all parameters": "$response = $client->getSearchesNoClicks(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "$response = $client->getSearchesNoResults(\n    'index',\n);",
      "get getSearchesNoResults with all parameters": "$response = $client->getSearchesNoResults(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getStatus": {
      "default": "$response = $client->getStatus(\n    'index',\n);"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "$response = $client->getTopCountries(\n    'index',\n);",
      "get getTopCountries with all parameters": "$response = $client->getTopCountries(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "$response = $client->getTopFilterAttributes(\n    'index',\n);",
      "get getTopFilterAttributes with all parameters": "$response = $client->getTopFilterAttributes(\n    'index',\n    'mySearch',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "$response = $client->getTopFilterForAttribute(\n    'myAttribute',\n    'index',\n);",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "$response = $client->getTopFilterForAttribute(\n    'myAttribute1,myAttribute2',\n    'index',\n);",
      "get getTopFilterForAttribute with all parameters": "$response = $client->getTopFilterForAttribute(\n    'myAttribute',\n    'index',\n    'mySearch',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "$response = $client->getTopFilterForAttribute(\n    'myAttribute1,myAttribute2',\n    'index',\n    'mySearch',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "$response = $client->getTopFiltersNoResults(\n    'index',\n);",
      "get getTopFiltersNoResults with all parameters": "$response = $client->getTopFiltersNoResults(\n    'index',\n    'mySearch',\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "$response = $client->getTopHits(\n    'index',\n);",
      "get getTopHits with all parameters": "$response = $client->getTopHits(\n    'index',\n    'mySearch',\n    true,\n    true,\n    '1999-09-19',\n    '2001-01-01',\n    21,\n    42,\n    'tag',\n);"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "$response = $client->getTopSearches(\n    'index',\n);",
      "get getTopSearches with all parameters": "$response = $client->getTopSearches(\n    'index',\n    true,\n    true,\n    '1999-09-19',\n    '2001-01-01',\n    'searchCount',\n    'asc',\n    21,\n    42,\n    'tag',\n);"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "$response = $client->getUsersCount(\n    'index',\n);",
      "get getUsersCount with all parameters": "$response = $client->getUsersCount(\n    'index',\n    '1999-09-19',\n    '2001-01-01',\n    'tag',\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = AnalyticsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.analytics.client import AnalyticsClientSync\nfrom json import loads"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters with space\",\n    },\n)",
      "requestOptions should be escaped too": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"to be overriden\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-header-1\":\"spaces are left alone\"}\"\"\"),\n        \"query_parameters\": loads(\n            \"\"\"{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}\"\"\"\n        ),\n    },\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)",
      "requestOptions can override default query parameters": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query2\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"isItWorking\":true}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":2}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[\"b and c\",\"d\"]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[true,true,false]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[1,2]}\"\"\"),\n    },\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "response = client.get_add_to_cart_rate(\n    index=\"index\",\n)",
      "get getAddToCartRate with all parameters": "response = client.get_add_to_cart_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "response = client.get_average_click_position(\n    index=\"index\",\n)",
      "get getAverageClickPosition with all parameters": "response = client.get_average_click_position(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "response = client.get_click_positions(\n    index=\"index\",\n)",
      "get getClickPositions with all parameters": "response = client.get_click_positions(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "response = client.get_click_through_rate(\n    index=\"index\",\n)",
      "get getClickThroughRate with all parameters": "response = client.get_click_through_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "response = client.get_conversion_rate(\n    index=\"index\",\n)",
      "get getConversationRate with all parameters": "response = client.get_conversion_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "response = client.get_no_click_rate(\n    index=\"index\",\n)",
      "get getNoClickRate with all parameters": "response = client.get_no_click_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "response = client.get_no_results_rate(\n    index=\"index\",\n)",
      "get getNoResultsRate with all parameters": "response = client.get_no_results_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "response = client.get_purchase_rate(\n    index=\"index\",\n)",
      "get getPurchaseRate with all parameters": "response = client.get_purchase_rate(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "response = client.get_revenue(\n    index=\"index\",\n)",
      "get getRevenue with all parameters": "response = client.get_revenue(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "response = client.get_searches_count(\n    index=\"index\",\n)",
      "get getSearchesCount with all parameters": "response = client.get_searches_count(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "response = client.get_searches_no_clicks(\n    index=\"index\",\n)",
      "get getSearchesNoClicks with all parameters": "response = client.get_searches_no_clicks(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "response = client.get_searches_no_results(\n    index=\"index\",\n)",
      "get getSearchesNoResults with all parameters": "response = client.get_searches_no_results(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getStatus": {
      "default": "response = client.get_status(\n    index=\"index\",\n)"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "response = client.get_top_countries(\n    index=\"index\",\n)",
      "get getTopCountries with all parameters": "response = client.get_top_countries(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "response = client.get_top_filter_attributes(\n    index=\"index\",\n)",
      "get getTopFilterAttributes with all parameters": "response = client.get_top_filter_attributes(\n    index=\"index\",\n    search=\"mySearch\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "response = client.get_top_filter_for_attribute(\n    attribute=\"myAttribute\",\n    index=\"index\",\n)",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "response = client.get_top_filter_for_attribute(\n    attribute=\"myAttribute1,myAttribute2\",\n    index=\"index\",\n)",
      "get getTopFilterForAttribute with all parameters": "response = client.get_top_filter_for_attribute(\n    attribute=\"myAttribute\",\n    index=\"index\",\n    search=\"mySearch\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "response = client.get_top_filter_for_attribute(\n    attribute=\"myAttribute1,myAttribute2\",\n    index=\"index\",\n    search=\"mySearch\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "response = client.get_top_filters_no_results(\n    index=\"index\",\n)",
      "get getTopFiltersNoResults with all parameters": "response = client.get_top_filters_no_results(\n    index=\"index\",\n    search=\"mySearch\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "response = client.get_top_hits(\n    index=\"index\",\n)",
      "get getTopHits with all parameters": "response = client.get_top_hits(\n    index=\"index\",\n    search=\"mySearch\",\n    click_analytics=True,\n    revenue_analytics=True,\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "response = client.get_top_searches(\n    index=\"index\",\n)",
      "get getTopSearches with all parameters": "response = client.get_top_searches(\n    index=\"index\",\n    click_analytics=True,\n    revenue_analytics=True,\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    order_by=\"searchCount\",\n    direction=\"asc\",\n    limit=21,\n    offset=42,\n    tags=\"tag\",\n)"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "response = client.get_users_count(\n    index=\"index\",\n)",
      "get getUsersCount with all parameters": "response = client.get_users_count(\n    index=\"index\",\n    start_date=\"1999-09-19\",\n    end_date=\"2001-01-01\",\n    tags=\"tag\",\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.\nclient = AnalyticsClientSync(\n    \"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\"test/minimal\")",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\"test/all\", {query: \"parameters\"})"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\"test/minimal\")",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\"test/all\", {query: \"parameters with space\"})",
      "requestOptions should be escaped too": "response = client.custom_get(\n  \"test/all\",\n  {query: \"to be overriden\"},\n  {\n    :header_params => {\"x-header-1\" => \"spaces are left alone\"},\n    :query_params => JSON.parse(\n      \"{\\\"query\\\":\\\"parameters with space\\\",\\\"and an array\\\":[\\\"array\\\",\\\"with spaces\\\"]}\",\n      :symbolize_names => true\n    )\n  }\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\"test/minimal\")",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})",
      "requestOptions can override default query parameters": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query2\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"isItWorking\\\":true}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":2}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[\\\"b and c\\\",\\\"d\\\"]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[true,true,false]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[1,2]}\", :symbolize_names => true)}\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\"test/minimal\")",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "response = client.get_add_to_cart_rate(\"index\")",
      "get getAddToCartRate with all parameters": "response = client.get_add_to_cart_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "response = client.get_average_click_position(\"index\")",
      "get getAverageClickPosition with all parameters": "response = client.get_average_click_position(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "response = client.get_click_positions(\"index\")",
      "get getClickPositions with all parameters": "response = client.get_click_positions(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "response = client.get_click_through_rate(\"index\")",
      "get getClickThroughRate with all parameters": "response = client.get_click_through_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "response = client.get_conversion_rate(\"index\")",
      "get getConversationRate with all parameters": "response = client.get_conversion_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "response = client.get_no_click_rate(\"index\")",
      "get getNoClickRate with all parameters": "response = client.get_no_click_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "response = client.get_no_results_rate(\"index\")",
      "get getNoResultsRate with all parameters": "response = client.get_no_results_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "response = client.get_purchase_rate(\"index\")",
      "get getPurchaseRate with all parameters": "response = client.get_purchase_rate(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "response = client.get_revenue(\"index\")",
      "get getRevenue with all parameters": "response = client.get_revenue(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "response = client.get_searches_count(\"index\")",
      "get getSearchesCount with all parameters": "response = client.get_searches_count(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "response = client.get_searches_no_clicks(\"index\")",
      "get getSearchesNoClicks with all parameters": "response = client.get_searches_no_clicks(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "response = client.get_searches_no_results(\"index\")",
      "get getSearchesNoResults with all parameters": "response = client.get_searches_no_results(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getStatus": {
      "default": "response = client.get_status(\"index\")"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "response = client.get_top_countries(\"index\")",
      "get getTopCountries with all parameters": "response = client.get_top_countries(\"index\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "response = client.get_top_filter_attributes(\"index\")",
      "get getTopFilterAttributes with all parameters": "response = client.get_top_filter_attributes(\"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "response = client.get_top_filter_for_attribute(\"myAttribute\", \"index\")",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "response = client.get_top_filter_for_attribute(\"myAttribute1,myAttribute2\", \"index\")",
      "get getTopFilterForAttribute with all parameters": "response = client.get_top_filter_for_attribute(\n  \"myAttribute\",\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n)",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "response = client.get_top_filter_for_attribute(\n  \"myAttribute1,myAttribute2\",\n  \"index\",\n  \"mySearch\",\n  \"1999-09-19\",\n  \"2001-01-01\",\n  21,\n  42,\n  \"tag\"\n)"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "response = client.get_top_filters_no_results(\"index\")",
      "get getTopFiltersNoResults with all parameters": "response = client.get_top_filters_no_results(\"index\", \"mySearch\", \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "response = client.get_top_hits(\"index\")",
      "get getTopHits with all parameters": "response = client.get_top_hits(\"index\", \"mySearch\", true, true, \"1999-09-19\", \"2001-01-01\", 21, 42, \"tag\")"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "response = client.get_top_searches(\"index\")",
      "get getTopSearches with all parameters": "response = client.get_top_searches(\n  \"index\",\n  true,\n  true,\n  \"1999-09-19\",\n  \"2001-01-01\",\n  \"searchCount\",\n  \"asc\",\n  21,\n  42,\n  \"tag\"\n)"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "response = client.get_users_count(\"index\")",
      "get getUsersCount with all parameters": "response = client.get_users_count(\"index\", \"1999-09-19\", \"2001-01-01\", \"tag\")"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::AnalyticsClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.AnalyticsClient\nimport algoliasearch.config.*"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)",
      "allow del method for a custom path with all parameters": "val response = client.customDelete[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\"))\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)",
      "allow get method for a custom path with all parameters": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters with space\"))\n)",
      "requestOptions should be escaped too": "val response = client.customGet[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"to be overriden\")),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"parameters with space\")\n      .withQueryParameter(\"and an array\", Seq(\"array\", \"with spaces\"))\n      .withHeader(\"x-header-1\", \"spaces are left alone\")\n      .build()\n  )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)",
      "allow post method for a custom path with all parameters": "val response = client.customPost[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)",
      "requestOptions can override default query parameters": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions merges query parameters with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"query2\", \"myQueryParameter\")\n      .build()\n  )\n)",
      "requestOptions can override default headers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions merges headers with default ones": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"isItWorking\", true)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", 2)\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of string": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(\"b and c\", \"d\"))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of booleans": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(true, true, false))\n      .build()\n  )\n)",
      "requestOptions queryParameters accepts list of integers": "val response = client.customPost[JObject](\n  path = \"test/requestOptions\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n  requestOptions = Some(\n    RequestOptions\n      .builder()\n      .withQueryParameter(\"myParam\", Seq(1, 2))\n      .build()\n  )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)",
      "allow put method for a custom path with all parameters": "val response = client.customPut[JObject](\n  path = \"test/all\",\n  parameters = Some(Map(\"query\" -> \"parameters\")),\n  body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n)"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "val response = client.getAddToCartRate(\n  index = \"index\"\n)",
      "get getAddToCartRate with all parameters": "val response = client.getAddToCartRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "val response = client.getAverageClickPosition(\n  index = \"index\"\n)",
      "get getAverageClickPosition with all parameters": "val response = client.getAverageClickPosition(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "val response = client.getClickPositions(\n  index = \"index\"\n)",
      "get getClickPositions with all parameters": "val response = client.getClickPositions(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "val response = client.getClickThroughRate(\n  index = \"index\"\n)",
      "get getClickThroughRate with all parameters": "val response = client.getClickThroughRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "val response = client.getConversionRate(\n  index = \"index\"\n)",
      "get getConversationRate with all parameters": "val response = client.getConversionRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "val response = client.getNoClickRate(\n  index = \"index\"\n)",
      "get getNoClickRate with all parameters": "val response = client.getNoClickRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "val response = client.getNoResultsRate(\n  index = \"index\"\n)",
      "get getNoResultsRate with all parameters": "val response = client.getNoResultsRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "val response = client.getPurchaseRate(\n  index = \"index\"\n)",
      "get getPurchaseRate with all parameters": "val response = client.getPurchaseRate(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "val response = client.getRevenue(\n  index = \"index\"\n)",
      "get getRevenue with all parameters": "val response = client.getRevenue(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "val response = client.getSearchesCount(\n  index = \"index\"\n)",
      "get getSearchesCount with all parameters": "val response = client.getSearchesCount(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "val response = client.getSearchesNoClicks(\n  index = \"index\"\n)",
      "get getSearchesNoClicks with all parameters": "val response = client.getSearchesNoClicks(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "val response = client.getSearchesNoResults(\n  index = \"index\"\n)",
      "get getSearchesNoResults with all parameters": "val response = client.getSearchesNoResults(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getStatus": {
      "default": "val response = client.getStatus(\n  index = \"index\"\n)"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "val response = client.getTopCountries(\n  index = \"index\"\n)",
      "get getTopCountries with all parameters": "val response = client.getTopCountries(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "val response = client.getTopFilterAttributes(\n  index = \"index\"\n)",
      "get getTopFilterAttributes with all parameters": "val response = client.getTopFilterAttributes(\n  index = \"index\",\n  search = Some(\"mySearch\"),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "val response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute\",\n  index = \"index\"\n)",
      "get getTopFilterForAttribute with minimal parameters and multiple attributes": "val response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute1,myAttribute2\",\n  index = \"index\"\n)",
      "get getTopFilterForAttribute with all parameters": "val response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute\",\n  index = \"index\",\n  search = Some(\"mySearch\"),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "val response = client.getTopFilterForAttribute(\n  attribute = \"myAttribute1,myAttribute2\",\n  index = \"index\",\n  search = Some(\"mySearch\"),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "val response = client.getTopFiltersNoResults(\n  index = \"index\"\n)",
      "get getTopFiltersNoResults with all parameters": "val response = client.getTopFiltersNoResults(\n  index = \"index\",\n  search = Some(\"mySearch\"),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "val response = client.getTopHits(\n  index = \"index\"\n)",
      "get getTopHits with all parameters": "val response = client.getTopHits(\n  index = \"index\",\n  search = Some(\"mySearch\"),\n  clickAnalytics = Some(true),\n  revenueAnalytics = Some(true),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "val response = client.getTopSearches(\n  index = \"index\"\n)",
      "get getTopSearches with all parameters": "val response = client.getTopSearches(\n  index = \"index\",\n  clickAnalytics = Some(true),\n  revenueAnalytics = Some(true),\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  orderBy = Some(OrderBy.withName(\"searchCount\")),\n  direction = Some(Direction.withName(\"asc\")),\n  limit = Some(21),\n  offset = Some(42),\n  tags = Some(\"tag\")\n)"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "val response = client.getUsersCount(\n  index = \"index\"\n)",
      "get getUsersCount with all parameters": "val response = client.getUsersCount(\n  index = \"index\",\n  startDate = Some(\"1999-09-19\"),\n  endDate = Some(\"2001-01-01\"),\n  tags = Some(\"tag\")\n)"
    },
    "init": {
      "default": "val client = AnalyticsClient(\n  appId = \"ALGOLIA_APPLICATION_ID\",\n  apiKey = \"ALGOLIA_API_KEY\",\n  region = Option(\"ALGOLIA_APPLICATION_REGION\")\n)"
    }
  },
  "swift": {
    "import": {
      "default": "import Analytics"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "let response = try await client.customDelete(path: \"test/minimal\")",
      "allow del method for a custom path with all parameters": "let response = try await client.customDelete(path: \"test/all\", parameters: [\"query\": AnyCodable(\"parameters\")])"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "let response = try await client.customGet(path: \"test/minimal\")",
      "allow get method for a custom path with all parameters": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters with space\")]\n)",
      "requestOptions should be escaped too": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"to be overriden\")],\n    requestOptions: RequestOptions(\n        headers: [\"x-header-1\": \"spaces are left alone\"],\n\n        queryParameters: [\"query\": \"parameters with space\", \"and an array\": [\"array\", \"with spaces\"]]\n    )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "let response = try await client.customPost(path: \"test/minimal\")",
      "allow post method for a custom path with all parameters": "let response = try await client.customPost(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)",
      "requestOptions can override default query parameters": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions merges query parameters with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query2\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions can override default headers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions merges headers with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions queryParameters accepts booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"isItWorking\": true]\n    )\n)",
      "requestOptions queryParameters accepts integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": 2]\n    )\n)",
      "requestOptions queryParameters accepts list of string": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [\"b and c\", \"d\"]]\n    )\n)",
      "requestOptions queryParameters accepts list of booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [true, true, false]]\n    )\n)",
      "requestOptions queryParameters accepts list of integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [1, 2]]\n    )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "let response = try await client.customPut(path: \"test/minimal\")",
      "allow put method for a custom path with all parameters": "let response = try await client.customPut(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)"
    },
    "getAddToCartRate": {
      "get getAddToCartRate with minimal parameters": "let response = try await client.getAddToCartRate(index: \"index\")",
      "get getAddToCartRate with all parameters": "let response = try await client.getAddToCartRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getAverageClickPosition": {
      "get getAverageClickPosition with minimal parameters": "let response = try await client.getAverageClickPosition(index: \"index\")",
      "get getAverageClickPosition with all parameters": "let response = try await client.getAverageClickPosition(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getClickPositions": {
      "get getClickPositions with minimal parameters": "let response = try await client.getClickPositions(index: \"index\")",
      "get getClickPositions with all parameters": "let response = try await client.getClickPositions(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getClickThroughRate": {
      "get getClickThroughRate with minimal parameters": "let response = try await client.getClickThroughRate(index: \"index\")",
      "get getClickThroughRate with all parameters": "let response = try await client.getClickThroughRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getConversionRate": {
      "get getConversationRate with minimal parameters": "let response = try await client.getConversionRate(index: \"index\")",
      "get getConversationRate with all parameters": "let response = try await client.getConversionRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getNoClickRate": {
      "get getNoClickRate with minimal parameters": "let response = try await client.getNoClickRate(index: \"index\")",
      "get getNoClickRate with all parameters": "let response = try await client.getNoClickRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getNoResultsRate": {
      "get getNoResultsRate with minimal parameters": "let response = try await client.getNoResultsRate(index: \"index\")",
      "get getNoResultsRate with all parameters": "let response = try await client.getNoResultsRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getPurchaseRate": {
      "get getPurchaseRate with minimal parameters": "let response = try await client.getPurchaseRate(index: \"index\")",
      "get getPurchaseRate with all parameters": "let response = try await client.getPurchaseRate(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getRevenue": {
      "get getRevenue with minimal parameters": "let response = try await client.getRevenue(index: \"index\")",
      "get getRevenue with all parameters": "let response = try await client.getRevenue(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getSearchesCount": {
      "get getSearchesCount with minimal parameters": "let response = try await client.getSearchesCount(index: \"index\")",
      "get getSearchesCount with all parameters": "let response = try await client.getSearchesCount(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "getSearchesNoClicks": {
      "get getSearchesNoClicks with minimal parameters": "let response = try await client.getSearchesNoClicks(index: \"index\")",
      "get getSearchesNoClicks with all parameters": "let response = try await client.getSearchesNoClicks(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getSearchesNoResults": {
      "get getSearchesNoResults with minimal parameters": "let response = try await client.getSearchesNoResults(index: \"index\")",
      "get getSearchesNoResults with all parameters": "let response = try await client.getSearchesNoResults(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getStatus": {
      "default": "let response = try await client.getStatus(index: \"index\")"
    },
    "getTopCountries": {
      "get getTopCountries with minimal parameters": "let response = try await client.getTopCountries(index: \"index\")",
      "get getTopCountries with all parameters": "let response = try await client.getTopCountries(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getTopFilterAttributes": {
      "get getTopFilterAttributes with minimal parameters": "let response = try await client.getTopFilterAttributes(index: \"index\")",
      "get getTopFilterAttributes with all parameters": "let response = try await client.getTopFilterAttributes(\n    index: \"index\",\n    search: \"mySearch\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getTopFilterForAttribute": {
      "get getTopFilterForAttribute with minimal parameters": "let response = try await client.getTopFilterForAttribute(attribute: \"myAttribute\", index: \"index\")",
      "get getTopFilterForAttribute with minimal parameters and multiple": "let response = try await client.getTopFilterForAttribute(attribute: \"myAttribute1,myAttribute2\", index: \"index\")",
      "get getTopFilterForAttribute with all parameters": "let response = try await client.getTopFilterForAttribute(\n    attribute: \"myAttribute\",\n    index: \"index\",\n    search: \"mySearch\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)",
      "get getTopFilterForAttribute with all parameters and multiple attributes": "let response = try await client.getTopFilterForAttribute(\n    attribute: \"myAttribute1,myAttribute2\",\n    index: \"index\",\n    search: \"mySearch\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getTopFiltersNoResults": {
      "get getTopFiltersNoResults with minimal parameters": "let response = try await client.getTopFiltersNoResults(index: \"index\")",
      "get getTopFiltersNoResults with all parameters": "let response = try await client.getTopFiltersNoResults(\n    index: \"index\",\n    search: \"mySearch\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getTopHits": {
      "get getTopHits with minimal parameters": "let response = try await client.getTopHits(index: \"index\")",
      "get getTopHits with all parameters": "let response = try await client.getTopHits(\n    index: \"index\",\n    search: \"mySearch\",\n    clickAnalytics: true,\n    revenueAnalytics: true,\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getTopSearches": {
      "get getTopSearches with minimal parameters": "let response = try await client.getTopSearches(index: \"index\")",
      "get getTopSearches with all parameters": "let response = try await client.getTopSearches(\n    index: \"index\",\n    clickAnalytics: true,\n    revenueAnalytics: true,\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    orderBy: OrderBy.searchCount,\n    direction: Direction.asc,\n    limit: 21,\n    offset: 42,\n    tags: \"tag\"\n)"
    },
    "getUsersCount": {
      "get getUsersCount with minimal parameters": "let response = try await client.getUsersCount(index: \"index\")",
      "get getUsersCount with all parameters": "let response = try await client.getUsersCount(\n    index: \"index\",\n    startDate: \"1999-09-19\",\n    endDate: \"2001-01-01\",\n    tags: \"tag\"\n)"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try AnalyticsClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\", region: .us)"
    }
  }
}