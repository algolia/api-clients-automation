{
  "openapi": "3.0.2",
  "info": {
    "title": "Composition API",
    "description": "The Algolia Composition API lets you run composed search requests on your Compositions.\n\n## Client libraries\n\nUse Algolia's API clients and libraries to reliably integrate Algolia's APIs with your apps.\n\nSee: [Algolia's ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/)\n\n## Base URLs\n\nThe base URLs for requests to the Composition API are:\n\n- `https://{APPLICATION_ID}.algolia.net`\n- `https://{APPLICATION_ID}-dsn.algolia.net`.\n  If your subscription includes a [Distributed Search Network](https://dashboard.algolia.com/infra),\n  this ensures that requests are sent to servers closest to users.\n\nBoth URLs provide high availability by distributing requests with load balancing.\n\n**All requests must use HTTPS.**\n\n## Retry strategy\n\nTo guarantee high availability, implement a retry strategy for all API requests using the URLs of your servers as fallbacks:\n\n- `https://{APPLICATION_ID}-1.algolianet.com`\n- `https://{APPLICATION_ID}-2.algolianet.com`\n- `https://{APPLICATION_ID}-3.algolianet.com`\n\nThese URLs use a different DNS provider than the primary URLs.\nYou should randomize this list to ensure an even load across the three servers.\n\nAll Algolia API clients implement this retry strategy.\n\n## Authentication\n\nTo authenticate your API requests, add these headers:\n\n- `x-algolia-application-id`. Your Algolia application ID.\n- `x-algolia-api-key`. An API key with the necessary permissions to make the request.\n  The required access control list (ACL) to make a request is listed in each endpoint's reference.\n\nYou can find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account).\n\n## Request format\n\nDepending on the endpoint, request bodies are either JSON objects or arrays of JSON objects,\n\n## Parameters\n\nParameters are passed as query parameters for GET and DELETE requests,\nand in the request body for POST and PUT requests.\n\nQuery parameters must be [URL-encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding).\nNon-ASCII characters must be UTF-8 encoded.\nPlus characters (`+`) are interpreted as spaces.\nArrays as query parameters must be one of:\n\n- A comma-separated string: `attributesToRetrieve=title,description`\n- A URL-encoded JSON array: `attributesToRetrieve=%5B%22title%22,%22description%22%D`\n\n## Response status and errors\n\nThe Composition API returns JSON responses.\nSince JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.\n\nSuccessful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a `5xx` status.\nError responses have a `message` property with more information.\n\n## Version\n\nThe current version of the Composition API is version 1, as indicated by the `/1/` in each endpoint's URL.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://{appId}.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-1.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-2.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-3.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-dsn.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Compositions",
      "description": "Manage your compositions and composition settings.\n"
    },
    {
      "name": "Rules",
      "description": "Manage your compositions rules.\n"
    },
    {
      "name": "Search",
      "description": "Search one composition for matching records or facet values."
    }
  ],
  "paths": {
    "/1/compositions/{compositionID}/run": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "search",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Run a Composition",
        "description": "Runs a query on a single composition and returns matching results.",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "requestBody",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/params"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/facets/{facetName}/query": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "searchForFacetValues",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Search for facet values",
        "description": "Searches for values of a specified facet attribute on the composition's main source's index.\n\n- By default, facet values are sorted by decreasing count.\n  You can adjust this with the `sortFacetValueBy` parameter.\n- Searching for facet values doesn't work if you have **more than 65 searchable facets and searchable attributes combined**.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          },
          {
            "name": "facetName",
            "description": "Facet attribute in which to search for values.\n\nThis attribute must be included in the `attributesForFaceting` index setting with the `searchable()` modifier.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "searchForFacetValuesRequest",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "params": {
                    "title": "searchForFacetValuesParams",
                    "type": "object",
                    "properties": {
                      "query": {
                        "$ref": "#/components/schemas/query"
                      },
                      "maxFacetHits": {
                        "$ref": "#/components/schemas/maxFacetHits"
                      },
                      "searchQuery": {
                        "$ref": "#/components/schemas/params"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchForFacetValuesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-application-id",
        "description": "Your Algolia application ID."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-api-key",
        "description": "Your Algolia API key with the necessary permissions to make the request.\nPermissions are controlled through access control lists (ACL) and access restrictions.\nThe required ACL to make a request is listed in each endpoint's reference.\n"
      }
    },
    "schemas": {
      "compositionObjectID": {
        "type": "string",
        "description": "Unique Composition ObjectID."
      },
      "query": {
        "type": "string",
        "description": "Search query.",
        "default": "",
        "x-categories": [
          "Search"
        ]
      },
      "filters": {
        "type": "string",
        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
        "example": "(category:Book OR category:Ebook) AND _tags:published",
        "x-categories": [
          "Filtering"
        ]
      },
      "page": {
        "type": "integer",
        "description": "Page of search results to retrieve.",
        "default": 0,
        "minimum": 0,
        "x-categories": [
          "Pagination"
        ]
      },
      "facetFilters": {
        "description": "Filter the search by facet values, so that only records with the same facet values are retrieved.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\n- `[filter1, filter2]` is interpreted as `filter1 AND filter2`.\n- `[[filter1, filter2], filter3]` is interpreted as `filter1 OR filter2 AND filter3`.\n- `facet:-value` is interpreted as `NOT facet:value`.\n\nWhile it's best to avoid attributes that start with a `-`, you can still filter them by escaping with a backslash:\n`facet:\\-value`.\n",
        "example": [
          [
            "category:Book",
            "category:-Movie"
          ],
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/facetFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "optionalFilters": {
        "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n\n- Optional filters don't work on virtual replicas.\n- Optional filters are applied _after_ sort-by attributes.\n- Optional filters are applied _before_ custom ranking attributes (in the default [ranking](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/)).\n- Optional filters don't work with numeric attributes.\n",
        "example": [
          "category:Book",
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/optionalFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "numericFilters": {
        "description": "Filter by numeric facets.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\nYou can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`.\nComparisons are precise up to 3 decimals.\nYou can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and upper boundaries.\nThe same combination rules apply as for `facetFilters`.\n",
        "example": [
          [
            "inStock = 1",
            "deliveryDate < 1441755506"
          ],
          "price < 1000"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/numericFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "hitsPerPage": {
        "type": "integer",
        "description": "Number of hits per page.",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "x-categories": [
          "Pagination"
        ]
      },
      "aroundLatLng": {
        "type": "string",
        "description": "Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.\n\nOnly records included within a circle around this central location are included in the results.\nThe radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings.\nThis parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.\n",
        "example": "40.71,-74.01",
        "default": "",
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundLatLngViaIP": {
        "type": "boolean",
        "description": "Whether to obtain the coordinates from the request's IP address.",
        "default": false,
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundRadiusAll": {
        "title": "all",
        "type": "string",
        "description": "Return all records with a valid `_geoloc` attribute. Don't filter by distance.",
        "enum": [
          "all"
        ]
      },
      "aroundRadius": {
        "description": "Maximum radius for a search around a central location.\n\nThis parameter works in combination with the `aroundLatLng` and `aroundLatLngViaIP` parameters.\nBy default, the search radius is determined automatically from the density of hits around the central location.\nThe search radius is small if there are many hits close to the central coordinates.\n",
        "oneOf": [
          {
            "type": "integer",
            "minimum": 1,
            "description": "Maximum search radius around a central location in meters."
          },
          {
            "$ref": "#/components/schemas/aroundRadiusAll"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundPrecisionFromValue": {
        "title": "range objects",
        "type": "array",
        "items": {
          "title": "range",
          "type": "object",
          "description": "Range object with lower and upper values in meters to define custom ranges.",
          "properties": {
            "from": {
              "type": "integer",
              "description": "Lower boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.",
              "example": 20
            },
            "value": {
              "type": "integer",
              "description": "Upper boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal."
            }
          }
        }
      },
      "aroundPrecision": {
        "description": "Precision of a coordinate-based search in meters to group results with similar distances.\n\nThe Geo ranking criterion considers all matches within the same range of distances to be equal.\n",
        "oneOf": [
          {
            "type": "integer",
            "default": 10,
            "description": "Distance in meters to group results by similar distances.\n\nFor example, if you set `aroundPrecision` to 100, records wihin 100 meters to the central coordinate are considered to have the same distance,\nas are records between 100 and 199 meters.\n"
          },
          {
            "$ref": "#/components/schemas/aroundPrecisionFromValue"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBoxArray": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates for a rectangular area in which to search.\n\nEach bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair:\n`[p1 lat, p1 long, p2 lat, p2 long]`.\nProvide multiple bounding boxes as nested arrays.\nFor more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBox": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/components/schemas/insideBoundingBoxArray"
          }
        ]
      },
      "insidePolygon": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 6,
          "maxItems": 20000,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates of a polygon in which to search.\n\nPolygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude.\nProvide multiple polygons as nested arrays.\nFor more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\nThis parameter is ignored if you also specify `insideBoundingBox`.\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201,
            47.32,
            4.9
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916,
            39.2587,
            2.0104
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "supportedLanguage": {
        "type": "string",
        "description": "ISO code for a supported language.",
        "enum": [
          "af",
          "ar",
          "az",
          "bg",
          "bn",
          "ca",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en",
          "eo",
          "es",
          "et",
          "eu",
          "fa",
          "fi",
          "fo",
          "fr",
          "ga",
          "gl",
          "he",
          "hi",
          "hu",
          "hy",
          "id",
          "is",
          "it",
          "ja",
          "ka",
          "kk",
          "ko",
          "ku",
          "ky",
          "lt",
          "lv",
          "mi",
          "mn",
          "mr",
          "ms",
          "mt",
          "nb",
          "nl",
          "no",
          "ns",
          "pl",
          "ps",
          "pt",
          "pt-br",
          "qu",
          "ro",
          "ru",
          "sk",
          "sq",
          "sv",
          "sw",
          "ta",
          "te",
          "th",
          "tl",
          "tn",
          "tr",
          "tt",
          "uk",
          "ur",
          "uz",
          "zh"
        ]
      },
      "userToken": {
        "type": "string",
        "description": "Unique pseudonymous or anonymous user identifier.\n\nThis helps with analytics and click and conversion events.\nFor more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
        "example": "test-user-123",
        "x-categories": [
          "Personalization"
        ]
      },
      "params": {
        "title": "Composition Search parameters as object",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "getRankingInfo": {
            "type": "boolean",
            "description": "Whether the search response should include detailed ranking information."
          },
          "relevancyStrictness": {
            "type": "integer"
          },
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "optionalFilters": {
            "$ref": "#/components/schemas/optionalFilters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          },
          "aroundLatLng": {
            "$ref": "#/components/schemas/aroundLatLng"
          },
          "aroundLatLngViaIP": {
            "$ref": "#/components/schemas/aroundLatLngViaIP"
          },
          "aroundRadius": {
            "$ref": "#/components/schemas/aroundRadius"
          },
          "aroundPrecision": {
            "$ref": "#/components/schemas/aroundPrecision"
          },
          "minimumAroundRadius": {
            "type": "integer",
            "description": "Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.",
            "minimum": 1,
            "x-categories": [
              "Geo-Search"
            ]
          },
          "insideBoundingBox": {
            "$ref": "#/components/schemas/insideBoundingBox"
          },
          "insidePolygon": {
            "$ref": "#/components/schemas/insidePolygon"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "es"
            ],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "naturalLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "description": "ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):\n\n- Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.\n- Sets `removeWordsIfNoResults` to `allOptional`.\n- Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": [
              "Rules"
            ]
          },
          "ruleContexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigns a rule context to the search query.\n\n[Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.\n",
            "default": [],
            "example": [
              "mobile"
            ],
            "x-categories": [
              "Rules"
            ]
          },
          "userToken": {
            "$ref": "#/components/schemas/userToken"
          },
          "clickAnalytics": {
            "type": "boolean",
            "description": "Whether to include a `queryID` attribute in the response.\n\nThe query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).\n",
            "default": false,
            "x-categories": [
              "Analytics"
            ]
          },
          "analytics": {
            "type": "boolean",
            "description": "Whether this search will be included in Analytics.",
            "default": true,
            "x-categories": [
              "Analytics"
            ]
          },
          "analyticsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).",
            "default": [],
            "x-categories": [
              "Analytics"
            ]
          },
          "enableABTest": {
            "type": "boolean",
            "description": "Whether to enable A/B testing for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": [
              "Filtering"
            ]
          }
        }
      },
      "objectID": {
        "type": "string",
        "description": "Unique record identifier.",
        "example": "test-record-123"
      },
      "compositionRunSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "appliedRules": {
            "type": "array",
            "items": {
              "title": "compositionRunAppliedRules",
              "type": "object",
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": [
                "objectID"
              ]
            }
          }
        },
        "required": [
          "objectID"
        ]
      },
      "compositionsSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "run": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/compositionRunSearchResponse"
            }
          }
        },
        "required": [
          "run"
        ]
      },
      "compositionBaseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "processingTimeMS"
        ],
        "properties": {
          "compositions": {
            "$ref": "#/components/schemas/compositionsSearchResponse"
          }
        }
      },
      "processingTimeMS": {
        "type": "integer",
        "description": "Time the server took to process the request, in milliseconds.",
        "example": 20
      },
      "RedirectRuleIndexMetadata": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Source index for the redirect rule."
          },
          "dest": {
            "type": "string",
            "description": "Destination index for the redirect rule."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the redirect rule."
          },
          "succeed": {
            "type": "boolean",
            "description": "Redirect rule status."
          },
          "data": {
            "title": "redirectRuleIndexData",
            "type": "object",
            "description": "Redirect rule data.",
            "required": [
              "ruleObjectID"
            ],
            "properties": {
              "ruleObjectID": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data",
          "succeed",
          "reason",
          "dest",
          "source"
        ]
      },
      "order": {
        "description": "Explicit order of facets or facet values.\n\nThis setting lets you always show specific facets or facet values at the top of the list.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "facets": {
        "description": "Order of facet names.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          }
        }
      },
      "sortRemainingBy": {
        "description": "Order of facet values that aren't explicitly positioned with the `order` setting.\n\n- `count`.\n  Order remaining facet values by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Sort facet values alphabetically.\n\n- `hidden`.\n  Don't show facet values that aren't explicitly positioned.\n",
        "type": "string",
        "enum": [
          "count",
          "alpha",
          "hidden"
        ]
      },
      "hide": {
        "description": "Hide facet values.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "value": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          },
          "sortRemainingBy": {
            "$ref": "#/components/schemas/sortRemainingBy"
          },
          "hide": {
            "$ref": "#/components/schemas/hide"
          }
        }
      },
      "values": {
        "description": "Order of facet values. One object for each facet.",
        "type": "object",
        "additionalProperties": {
          "x-additionalPropertiesName": "facet",
          "$ref": "#/components/schemas/value"
        }
      },
      "facetOrdering": {
        "description": "Order of facet names and facet values in your UI.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facets": {
            "$ref": "#/components/schemas/facets"
          },
          "values": {
            "$ref": "#/components/schemas/values"
          }
        }
      },
      "redirectURL": {
        "description": "The redirect rule container.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImageUrl": {
        "description": "URL for an image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImage": {
        "description": "Image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bannerImageUrl"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "bannerLink": {
        "description": "Link for a banner defined in the Merchandising Studio.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "banner": {
        "description": "Banner with image and link to redirect users.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "image": {
            "$ref": "#/components/schemas/bannerImage"
          },
          "link": {
            "$ref": "#/components/schemas/bannerLink"
          }
        }
      },
      "banners": {
        "description": "Banners defined in the Merchandising Studio for a given search.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/banner"
        }
      },
      "widgets": {
        "description": "Widgets returned from any rules that are applied to the current search.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "banners": {
            "$ref": "#/components/schemas/banners"
          }
        }
      },
      "renderingContent": {
        "description": "Extra data that can be used in the search UI.\n\nYou can use this to control aspects of your search UI, such as the order of facet names and values\nwithout changing your frontend code.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetOrdering": {
            "$ref": "#/components/schemas/facetOrdering"
          },
          "redirect": {
            "$ref": "#/components/schemas/redirectURL"
          },
          "widgets": {
            "$ref": "#/components/schemas/widgets"
          }
        },
        "x-categories": [
          "Advanced"
        ]
      },
      "userData": {
        "example": {
          "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
          "pluginVersion": "1.6.0"
        },
        "description": "An object with custom data.\n\nYou can store up to 32kB as custom data.\n",
        "default": {},
        "x-categories": [
          "Advanced"
        ]
      },
      "baseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "processingTimeMS"
        ],
        "properties": {
          "abTestID": {
            "type": "integer",
            "description": "A/B test ID. This is only included in the response for indices that are part of an A/B test."
          },
          "abTestVariantID": {
            "type": "integer",
            "minimum": 1,
            "description": "Variant ID. This is only included in the response for indices that are part of an A/B test."
          },
          "aroundLatLng": {
            "type": "string",
            "description": "Computed geographical location.",
            "example": "40.71,-74.01",
            "pattern": "^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$"
          },
          "automaticRadius": {
            "type": "string",
            "description": "Distance from a central coordinate provided by `aroundLatLng`."
          },
          "exhaustive": {
            "title": "exhaustive",
            "type": "object",
            "description": "Whether certain properties of the search response are calculated exhaustive (exact) or approximated.",
            "properties": {
              "facetsCount": {
                "type": "boolean",
                "title": "facetsCount",
                "description": "Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
              },
              "facetValues": {
                "type": "boolean",
                "title": "facetValues",
                "description": "The value is `false` if not all facet values are retrieved."
              },
              "nbHits": {
                "type": "boolean",
                "title": "nbHits",
                "description": "Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didn’t, in the end, impact the exhaustivity of the query."
              },
              "rulesMatch": {
                "type": "boolean",
                "title": "rulesMatch",
                "description": "Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large."
              },
              "typo": {
                "type": "boolean",
                "title": "typo",
                "description": "Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled."
              }
            }
          },
          "appliedRules": {
            "description": "Rules applied to the query.",
            "title": "appliedRules",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "See the `facetsCount` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveNbHits": {
            "type": "boolean",
            "description": "See the `nbHits` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveTypo": {
            "type": "boolean",
            "description": "See the `typo` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "facets": {
            "title": "facets",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "facet",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "facet count",
                "type": "integer"
              }
            },
            "description": "Facet counts.",
            "example": {
              "category": {
                "food": 1,
                "tech": 42
              }
            }
          },
          "facets_stats": {
            "type": "object",
            "description": "Statistics for numerical facets.",
            "additionalProperties": {
              "title": "facetStats",
              "type": "object",
              "properties": {
                "min": {
                  "type": "number",
                  "format": "double",
                  "description": "Minimum value in the results."
                },
                "max": {
                  "type": "number",
                  "format": "double",
                  "description": "Maximum value in the results."
                },
                "avg": {
                  "type": "number",
                  "format": "double",
                  "description": "Average facet value in the results."
                },
                "sum": {
                  "type": "number",
                  "format": "double",
                  "description": "Sum of all values in the results."
                }
              }
            }
          },
          "index": {
            "type": "string",
            "example": "indexName",
            "description": "Index name used for the query."
          },
          "indexUsed": {
            "type": "string",
            "description": "Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query.",
            "example": "indexNameAlt"
          },
          "message": {
            "type": "string",
            "description": "Warnings about the query."
          },
          "nbSortedHits": {
            "type": "integer",
            "description": "Number of hits selected and sorted by the relevant sort algorithm.",
            "example": 20
          },
          "parsedQuery": {
            "type": "string",
            "description": "Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched.",
            "example": "george clo"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          },
          "processingTimingsMS": {
            "type": "object",
            "description": "Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues."
          },
          "queryAfterRemoval": {
            "type": "string",
            "description": "Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set."
          },
          "redirect": {
            "title": "redirect",
            "type": "object",
            "description": "[Redirect results to a URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/), this this parameter is for internal use only.\n",
            "properties": {
              "index": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RedirectRuleIndexMetadata"
                }
              }
            }
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "serverTimeMS": {
            "type": "integer",
            "description": "Time the server took to process the request, in milliseconds.",
            "example": 20
          },
          "serverUsed": {
            "type": "string",
            "description": "Host name of the server that processed the request.",
            "example": "c2-uk-3.algolia.net"
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "queryID": {
            "type": "string",
            "description": "Unique identifier for the query. This is used for [click analytics](https://www.algolia.com/doc/guides/analytics/click-analytics/).",
            "example": "a00dbc80a8d13c4565a442e7e2dca80a"
          },
          "_automaticInsights": {
            "type": "boolean",
            "description": "Whether automatic events collection is enabled for the application."
          }
        }
      },
      "nbHits": {
        "type": "integer",
        "description": "Number of results (hits).",
        "example": 20
      },
      "nbPages": {
        "type": "integer",
        "description": "Number of pages of results.",
        "example": 1
      },
      "SearchPagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        },
        "required": [
          "page",
          "nbHits",
          "nbPages",
          "hitsPerPage"
        ]
      },
      "highlightedValue": {
        "type": "string",
        "description": "Highlighted attribute value, including HTML tags.",
        "example": "<em>George</em> <em>Clo</em>oney"
      },
      "matchLevel": {
        "type": "string",
        "description": "Whether the whole query string matches or only a part.",
        "enum": [
          "none",
          "partial",
          "full"
        ]
      },
      "highlightResultOption": {
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          },
          "matchedWords": {
            "type": "array",
            "description": "List of matched words from the search query.",
            "example": [
              "action"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullyHighlighted": {
            "type": "boolean",
            "description": "Whether the entire attribute value is highlighted."
          }
        },
        "required": [
          "value",
          "matchLevel",
          "matchedWords"
        ],
        "x-discriminator-fields": [
          "matchLevel",
          "matchedWords"
        ]
      },
      "highlightResultMap": {
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "highlightResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/highlightResultOption"
          },
          {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          {
            "$ref": "#/components/schemas/highlightResultArray"
          }
        ]
      },
      "highlightResultArray": {
        "type": "array",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "items": {
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "snippetResultOption": {
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          }
        },
        "required": [
          "value",
          "matchLevel"
        ],
        "x-discriminator-fields": [
          "matchLevel"
        ]
      },
      "snippetResultMap": {
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "snippetResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/snippetResultOption"
          },
          {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          {
            "$ref": "#/components/schemas/snippetResultArray"
          }
        ]
      },
      "snippetResultArray": {
        "type": "array",
        "description": "Snippets that show the context around a matching search query.",
        "items": {
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "matchedGeoLocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the matched location."
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the matched location."
          },
          "distance": {
            "type": "integer",
            "description": "Distance between the matched location and the search location (in meters)."
          }
        }
      },
      "personalization": {
        "type": "object",
        "properties": {
          "filtersScore": {
            "type": "integer",
            "description": "The score of the filters."
          },
          "rankingScore": {
            "type": "integer",
            "description": "The score of the ranking."
          },
          "score": {
            "type": "integer",
            "description": "The score of the event."
          }
        }
      },
      "rankingInfo": {
        "type": "object",
        "description": "Object with detailed information about the record's ranking.",
        "additionalProperties": false,
        "properties": {
          "filters": {
            "type": "integer",
            "minimum": 0,
            "description": "Whether a filter matched the query."
          },
          "firstMatchedWord": {
            "type": "integer",
            "minimum": 0,
            "description": "Position of the first matched word in the best matching attribute of the record."
          },
          "geoDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters)."
          },
          "geoPrecision": {
            "type": "integer",
            "minimum": 1,
            "description": "Precision used when computing the geo distance, in meters."
          },
          "matchedGeoLocation": {
            "$ref": "#/components/schemas/matchedGeoLocation"
          },
          "personalization": {
            "$ref": "#/components/schemas/personalization"
          },
          "nbExactWords": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of exactly matched words."
          },
          "nbTypos": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of typos encountered when matching the record."
          },
          "promoted": {
            "type": "boolean",
            "description": "Whether the record was promoted by a rule."
          },
          "proximityDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of words between multiple matches in the query plus 1. For single word queries, `proximityDistance` is 0."
          },
          "userScore": {
            "type": "integer",
            "description": "Overall ranking of the record, expressed as a single integer. This attribute is internal."
          },
          "words": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of matched words."
          },
          "promotedByReRanking": {
            "type": "boolean",
            "description": "Whether the record is re-ranked."
          }
        },
        "required": [
          "nbTypos",
          "firstMatchedWord",
          "geoDistance",
          "nbExactWords",
          "userScore"
        ]
      },
      "compositionRankingInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "composed": {
            "title": "composedRankingInfo",
            "type": "object",
            "additionalProperties": {
              "title": "compositionIdRankingInfo",
              "x-additionalPropertiesName": "composition-id",
              "type": "object",
              "properties": {
                "index": {
                  "type": "string"
                },
                "injectedItemKey": {
                  "type": "string"
                }
              },
              "required": [
                "index",
                "injectedItemKey"
              ]
            }
          }
        }
      },
      "Hit_rankingInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rankingInfo"
          },
          {
            "$ref": "#/components/schemas/compositionRankingInfo"
          }
        ]
      },
      "distinctSeqID": {
        "type": "integer"
      },
      "hit": {
        "type": "object",
        "description": "Search result.\n\nA hit is a record from your index, augmented with special attributes for highlighting, snippeting, and ranking.\n",
        "x-is-generic": true,
        "additionalProperties": true,
        "required": [
          "objectID"
        ],
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "_highlightResult": {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          "_snippetResult": {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          "_rankingInfo": {
            "$ref": "#/components/schemas/Hit_rankingInfo"
          },
          "_distinctSeqID": {
            "$ref": "#/components/schemas/distinctSeqID"
          }
        }
      },
      "searchHits": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Search results (hits).\n\nHits are records from your index that match the search criteria, augmented with additional attributes, such as, for highlighting.\n",
            "items": {
              "$ref": "#/components/schemas/hit"
            }
          },
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "params": {
            "type": "string",
            "description": "URL-encoded string of all search parameters.",
            "example": "query=a&hitsPerPage=20"
          }
        },
        "required": [
          "hits",
          "query",
          "params"
        ]
      },
      "resultsInjectedItemInfoResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "key": {
            "type": "string"
          },
          "appliedRules": {
            "type": "array",
            "items": {
              "title": "resultsInjectedItemAppliedRulesInfoResponse",
              "type": "object",
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": [
                "objectID"
              ]
            }
          }
        },
        "required": [
          "key"
        ]
      },
      "resultsCompositionsResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "compositions": {
            "title": "resultsCompositionsInfoResponse",
            "type": "object",
            "additionalProperties": {
              "title": "resultsCompositionInfoResponse",
              "x-additionalPropertiesName": "composition-id",
              "type": "object",
              "properties": {
                "injectedItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/resultsInjectedItemInfoResponse"
                  }
                }
              },
              "required": [
                "injectedItems"
              ]
            }
          }
        },
        "required": [
          "compositions"
        ]
      },
      "searchResultsItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/SearchPagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          },
          {
            "$ref": "#/components/schemas/resultsCompositionsResponse"
          }
        ]
      },
      "searchResults": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "Search results.",
            "items": {
              "$ref": "#/components/schemas/searchResultsItem"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "searchResponse": {
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/compositionBaseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/searchResults"
          }
        ]
      },
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "x-keep-model": true,
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "maxFacetHits": {
        "type": "integer",
        "description": "Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).",
        "maximum": 100,
        "default": 10,
        "x-categories": [
          "Advanced"
        ]
      },
      "searchForFacetValuesResults": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "facetHits",
          "exhaustiveFacetsCount",
          "indexName"
        ],
        "x-discriminator-fields": [
          "facetHits"
        ],
        "properties": {
          "indexName": {
            "type": "string"
          },
          "facetHits": {
            "type": "array",
            "description": "Matching facet values.",
            "items": {
              "title": "facetHits",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "value",
                "highlighted",
                "count"
              ],
              "properties": {
                "value": {
                  "description": "Facet value.",
                  "example": "Mobile phone",
                  "type": "string"
                },
                "highlighted": {
                  "$ref": "#/components/schemas/highlightedValue"
                },
                "count": {
                  "description": "Number of records with this facet value. [The count may be approximated](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).",
                  "type": "integer"
                }
              }
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "Whether the facet count is exhaustive (true) or approximate (false).\nFor more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).\n"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          }
        }
      },
      "searchForFacetValuesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "Search for facet values results.",
            "items": {
              "$ref": "#/components/schemas/searchForFacetValuesResults"
            }
          }
        }
      }
    },
    "parameters": {
      "compositionID": {
        "in": "path",
        "name": "compositionID",
        "description": "Unique Composition ObjectID.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/compositionObjectID"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Compositions",
      "tags": [
        "Search"
      ]
    }
  ]
}