{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;\nusing Algolia.Search.Models.Composition;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = await client.CustomDeleteAsync(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "var response = await client.CustomDeleteAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = await client.CustomGetAsync(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters with space\" } }\n);",
      "requestOptions should be escaped too": "var response = await client.CustomGetAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"to be overriden\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"query\", \"parameters with space\")\n    .AddExtraQueryParameters(\"and an array\", new List<object> { \"array\", \"with spaces\" })\n    .AddExtraHeader(\"x-header-1\", \"spaces are left alone\")\n    .Build()\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = await client.CustomPostAsync(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "var response = await client.CustomPostAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);",
      "requestOptions can override default query parameters": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query\", \"myQueryParameter\").Build()\n);",
      "requestOptions merges query parameters with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"query2\", \"myQueryParameter\").Build()\n);",
      "requestOptions can override default headers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions merges headers with default ones": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\").Build()\n);",
      "requestOptions queryParameters accepts booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"isItWorking\", true).Build()\n);",
      "requestOptions queryParameters accepts integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder().AddExtraQueryParameters(\"myParam\", 2).Build()\n);",
      "requestOptions queryParameters accepts list of string": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { \"b and c\", \"d\" })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of booleans": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { true, true, false })\n    .Build()\n);",
      "requestOptions queryParameters accepts list of integers": "var response = await client.CustomPostAsync(\n  \"test/requestOptions\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"facet\", \"filters\" } },\n  new RequestOptionBuilder()\n    .AddExtraQueryParameters(\"myParam\", new List<object> { 1, 2 })\n    .Build()\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = await client.CustomPutAsync(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "var response = await client.CustomPutAsync(\n  \"test/all\",\n  new Dictionary<string, object> { { \"query\", \"parameters\" } },\n  new Dictionary<string, string> { { \"body\", \"parameters\" } }\n);"
    },
    "deleteComposition": {
      "default": "var response = await client.DeleteCompositionAsync(\"1234\");"
    },
    "deleteCompositionRule": {
      "default": "var response = await client.DeleteCompositionRuleAsync(\"1234\", \"5678\");"
    },
    "getComposition": {
      "default": "var response = await client.GetCompositionAsync(\"foo\");"
    },
    "getRule": {
      "default": "var response = await client.GetRuleAsync(\"foo\", \"123\");"
    },
    "getTask": {
      "default": "var response = await client.GetTaskAsync(\"foo\", 42L);"
    },
    "listCompositions": {
      "listCompositions": "var response = await client.ListCompositionsAsync();"
    },
    "multipleBatch": {
      "multipleBatch": "var response = await client.MultipleBatchAsync(\n  new BatchParams\n  {\n    Requests = new List<MultipleBatchRequest>\n    {\n      new MultipleBatchRequest\n      {\n        Action = Enum.Parse<Action>(\"Upsert\"),\n        Body = new BatchCompositionAction(\n          new Composition\n          {\n            ObjectID = \"my-metadata-compo\",\n            Name = \"my composition\",\n            Behavior = new CompositionBehavior\n            {\n              Injection = new Injection\n              {\n                Main = new Main\n                {\n                  Source = new CompositionSource\n                  {\n                    Search = new CompositionSourceSearch\n                    {\n                      Index = \"foo\",\n                      Params = new MainInjectionQueryParameters { Filters = \"brand:adidas\" },\n                    },\n                  },\n                },\n                InjectedItems = new List<InjectedItem>\n                {\n                  new InjectedItem\n                  {\n                    Key = \"injectedItem1\",\n                    Source = new InjectedItemSource(\n                      new SearchSource\n                      {\n                        Search = new Algolia.Search.Models.Composition.Search\n                        {\n                          Index = \"foo\",\n                          Params = new BaseInjectionQueryParameters\n                          {\n                            Filters = \"brand:adidas\",\n                          },\n                        },\n                      }\n                    ),\n                    Position = 2,\n                    Length = 1,\n                    Metadata = new InjectedItemMetadata\n                    {\n                      Hits = new InjectedItemHitsMetadata\n                      {\n                        AddItemKey = true,\n                        Extra = new Dictionary<string, object>\n                        {\n                          { \"my-string\", \"string\" },\n                          { \"my-bool\", true },\n                          { \"my-number\", 42 },\n                          {\n                            \"my-object\",\n                            new Dictionary<string, object> { { \"sub-key\", \"sub-value\" } }\n                          },\n                        },\n                      },\n                    },\n                  },\n                  new InjectedItem\n                  {\n                    Key = \"externalItem\",\n                    Source = new InjectedItemSource(\n                      new SearchSource\n                      {\n                        Search = new Algolia.Search.Models.Composition.Search\n                        {\n                          Index = \"foo\",\n                          Params = new BaseInjectionQueryParameters { Filters = \"brand:puma\" },\n                        },\n                      }\n                    ),\n                    Position = 5,\n                    Length = 5,\n                    Metadata = new InjectedItemMetadata\n                    {\n                      Hits = new InjectedItemHitsMetadata\n                      {\n                        AddItemKey = true,\n                        Extra = new Dictionary<string, object>\n                        {\n                          { \"my-string\", \"string\" },\n                          { \"my-bool\", true },\n                          { \"my-number\", 42 },\n                          {\n                            \"my-object\",\n                            new Dictionary<string, object> { { \"sub-key\", \"sub-value\" } }\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          }\n        ),\n      },\n    },\n  }\n);"
    },
    "putComposition": {
      "putComposition": "var response = await client.PutCompositionAsync(\n  \"my-metadata-compo\",\n  new Composition\n  {\n    ObjectID = \"my-metadata-compo\",\n    Name = \"my composition\",\n    Behavior = new CompositionBehavior\n    {\n      Injection = new Injection\n      {\n        Main = new Main\n        {\n          Source = new CompositionSource\n          {\n            Search = new CompositionSourceSearch\n            {\n              Index = \"foo\",\n              Params = new MainInjectionQueryParameters { Filters = \"brand:adidas\" },\n            },\n          },\n        },\n        InjectedItems = new List<InjectedItem>\n        {\n          new InjectedItem\n          {\n            Key = \"injectedItem1\",\n            Source = new InjectedItemSource(\n              new SearchSource\n              {\n                Search = new Algolia.Search.Models.Composition.Search\n                {\n                  Index = \"foo\",\n                  Params = new BaseInjectionQueryParameters { Filters = \"brand:adidas\" },\n                },\n              }\n            ),\n            Position = 2,\n            Length = 1,\n            Metadata = new InjectedItemMetadata\n            {\n              Hits = new InjectedItemHitsMetadata\n              {\n                AddItemKey = true,\n                Extra = new Dictionary<string, object>\n                {\n                  { \"my-string\", \"string\" },\n                  { \"my-bool\", true },\n                  { \"my-number\", 42 },\n                  {\n                    \"my-object\",\n                    new Dictionary<string, object> { { \"sub-key\", \"sub-value\" } }\n                  },\n                },\n              },\n            },\n          },\n          new InjectedItem\n          {\n            Key = \"externalItem\",\n            Source = new InjectedItemSource(\n              new SearchSource\n              {\n                Search = new Algolia.Search.Models.Composition.Search\n                {\n                  Index = \"foo\",\n                  Params = new BaseInjectionQueryParameters { Filters = \"brand:puma\" },\n                },\n              }\n            ),\n            Position = 5,\n            Length = 5,\n            Metadata = new InjectedItemMetadata\n            {\n              Hits = new InjectedItemHitsMetadata\n              {\n                AddItemKey = true,\n                Extra = new Dictionary<string, object>\n                {\n                  { \"my-string\", \"string\" },\n                  { \"my-bool\", true },\n                  { \"my-number\", 42 },\n                  {\n                    \"my-object\",\n                    new Dictionary<string, object> { { \"sub-key\", \"sub-value\" } }\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  }\n);"
    },
    "putCompositionRule": {
      "putCompositionRule": "var response = await client.PutCompositionRuleAsync(\n  \"compositionID\",\n  \"rule-with-exernal-source\",\n  new CompositionRule\n  {\n    ObjectID = \"rule-with-exernal-source\",\n    Description = \"my description\",\n    Tags = new List<string> { \"tag1\", \"tag2\" },\n    Enabled = true,\n    Validity = new List<TimeRange>\n    {\n      new TimeRange { From = 1704063600L, Until = 1704083600L },\n    },\n    Conditions = new List<Condition>\n    {\n      new Condition { Anchoring = Enum.Parse<Anchoring>(\"Contains\"), Pattern = \"harry\" },\n      new Condition { Anchoring = Enum.Parse<Anchoring>(\"Contains\"), Pattern = \"potter\" },\n    },\n    Consequence = new CompositionRuleConsequence\n    {\n      Behavior = new CompositionBehavior\n      {\n        Injection = new Injection\n        {\n          Main = new Main\n          {\n            Source = new CompositionSource\n            {\n              Search = new CompositionSourceSearch\n              {\n                Index = \"my-index\",\n                Params = new MainInjectionQueryParameters { Filters = \"brand:adidas\" },\n              },\n            },\n          },\n          InjectedItems = new List<InjectedItem>\n          {\n            new InjectedItem\n            {\n              Key = \"injectedItem\",\n              Source = new InjectedItemSource(\n                new ExternalSource\n                {\n                  External = new External\n                  {\n                    Index = \"my-index\",\n                    Params = new BaseInjectionQueryParameters { Filters = \"brand:adidas\" },\n                    Ordering = Enum.Parse<ExternalOrdering>(\"UserDefined\"),\n                  },\n                }\n              ),\n              Position = 0,\n              Length = 3,\n            },\n          },\n        },\n      },\n    },\n  }\n);"
    },
    "saveRules": {
      "saveRules": "var response = await client.SaveRulesAsync(\n  \"rule-with-exernal-source\",\n  new CompositionRulesBatchParams\n  {\n    Requests = new List<RulesMultipleBatchRequest>\n    {\n      new RulesMultipleBatchRequest\n      {\n        Action = Enum.Parse<Action>(\"Upsert\"),\n        Body = new RulesBatchCompositionAction(\n          new CompositionRule\n          {\n            ObjectID = \"rule-with-exernal-source\",\n            Description = \"my description\",\n            Tags = new List<string> { \"tag1\", \"tag2\" },\n            Enabled = true,\n            Validity = new List<TimeRange>\n            {\n              new TimeRange { From = 1704063600L, Until = 1704083600L },\n            },\n            Conditions = new List<Condition>\n            {\n              new Condition\n              {\n                Anchoring = Enum.Parse<Anchoring>(\"Contains\"),\n                Pattern = \"harry\",\n              },\n              new Condition\n              {\n                Anchoring = Enum.Parse<Anchoring>(\"Contains\"),\n                Pattern = \"potter\",\n              },\n            },\n            Consequence = new CompositionRuleConsequence\n            {\n              Behavior = new CompositionBehavior\n              {\n                Injection = new Injection\n                {\n                  Main = new Main\n                  {\n                    Source = new CompositionSource\n                    {\n                      Search = new CompositionSourceSearch\n                      {\n                        Index = \"my-index\",\n                        Params = new MainInjectionQueryParameters { Filters = \"brand:adidas\" },\n                      },\n                    },\n                  },\n                  InjectedItems = new List<InjectedItem>\n                  {\n                    new InjectedItem\n                    {\n                      Key = \"injectedItem\",\n                      Source = new InjectedItemSource(\n                        new ExternalSource\n                        {\n                          External = new External\n                          {\n                            Index = \"my-index\",\n                            Params = new BaseInjectionQueryParameters\n                            {\n                              Filters = \"brand:adidas\",\n                            },\n                            Ordering = Enum.Parse<ExternalOrdering>(\"UserDefined\"),\n                          },\n                        }\n                      ),\n                      Position = 0,\n                      Length = 3,\n                    },\n                  },\n                },\n              },\n            },\n          }\n        ),\n      },\n    },\n  }\n);"
    },
    "search": {
      "search": "var response = await client.SearchAsync<Hit>(\n  \"foo\",\n  new RequestBody\n  {\n    Params = new Params\n    {\n      Query = \"batman\",\n      InjectedItems = new Dictionary<string, ExternalInjectedItem>\n      {\n        {\n          \"injectedItem1\",\n          new ExternalInjectedItem\n          {\n            Items = new List<ExternalInjection>\n            {\n              new ExternalInjection { ObjectID = \"my-object-1\" },\n              new ExternalInjection\n              {\n                ObjectID = \"my-object-2\",\n                Metadata = new Dictionary<string, object>\n                {\n                  { \"my-string\", \"string\" },\n                  { \"my-bool\", true },\n                  { \"my-number\", 42 },\n                  {\n                    \"my-object\",\n                    new Dictionary<string, object> { { \"sub-key\", \"sub-value\" } }\n                  },\n                },\n              },\n            },\n          }\n        },\n      },\n    },\n  }\n);"
    },
    "searchCompositionRules": {
      "default": "var response = await client.SearchCompositionRulesAsync(\n  \"foo\",\n  new SearchCompositionRulesParams { Query = \"batman\" }\n);"
    },
    "searchForFacetValues": {
      "default": "var response = await client.SearchForFacetValuesAsync(\n  \"foo\",\n  \"brand\",\n  new SearchForFacetValuesRequest\n  {\n    Params = new SearchForFacetValuesParams { MaxFacetHits = 10 },\n  }\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new CompositionClient(\n  new CompositionConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\n);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_composition/algolia_client_composition.dart';"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);",
      "allow del method for a custom path with all parameters": "final response = await client.customDelete(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "final response = await client.customGet(\n  path: \"test/minimal\",\n);",
      "allow get method for a custom path with all parameters": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters with space\",\n  },\n);",
      "requestOptions should be escaped too": "final response = await client.customGet(\n  path: \"test/all\",\n  parameters: {\n    'query': \"to be overriden\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-header-1': 'spaces are left alone',\n    },\n    urlParameters: {\n      'query': \"parameters with space\",\n      'and an array': [\n        \"array\",\n        \"with spaces\",\n      ],\n    },\n  ),\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "final response = await client.customPost(\n  path: \"test/minimal\",\n);",
      "allow post method for a custom path with all parameters": "final response = await client.customPost(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);",
      "requestOptions can override default query parameters": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions merges query parameters with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'query2': \"myQueryParameter\",\n    },\n  ),\n);",
      "requestOptions can override default headers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions merges headers with default ones": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    headers: {\n      'x-algolia-api-key': 'ALGOLIA_API_KEY',\n    },\n  ),\n);",
      "requestOptions queryParameters accepts booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'isItWorking': true,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': 2,\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of string": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        \"b and c\",\n        \"d\",\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of booleans": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        true,\n        true,\n        false,\n      ],\n    },\n  ),\n);",
      "requestOptions queryParameters accepts list of integers": "final response = await client.customPost(\n  path: \"test/requestOptions\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'facet': \"filters\",\n  },\n  requestOptions: RequestOptions(\n    urlParameters: {\n      'myParam': [\n        1,\n        2,\n      ],\n    },\n  ),\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "final response = await client.customPut(\n  path: \"test/minimal\",\n);",
      "allow put method for a custom path with all parameters": "final response = await client.customPut(\n  path: \"test/all\",\n  parameters: {\n    'query': \"parameters\",\n  },\n  body: {\n    'body': \"parameters\",\n  },\n);"
    },
    "deleteComposition": {
      "default": "final response = await client.deleteComposition(\n  compositionID: \"1234\",\n);"
    },
    "deleteCompositionRule": {
      "default": "final response = await client.deleteCompositionRule(\n  compositionID: \"1234\",\n  objectID: \"5678\",\n);"
    },
    "getComposition": {
      "default": "final response = await client.getComposition(\n  compositionID: \"foo\",\n);"
    },
    "getRule": {
      "default": "final response = await client.getRule(\n  compositionID: \"foo\",\n  objectID: \"123\",\n);"
    },
    "getTask": {
      "default": "final response = await client.getTask(\n  compositionID: \"foo\",\n  taskID: 42,\n);"
    },
    "listCompositions": {
      "listCompositions": "final response = await client.listCompositions();"
    },
    "multipleBatch": {
      "multipleBatch": "final response = await client.multipleBatch(\n  batchParams: BatchParams(\n    requests: [\n      MultipleBatchRequest(\n        action: Action.fromJson(\"upsert\"),\n        body: Composition(\n          objectID: \"my-metadata-compo\",\n          name: \"my composition\",\n          behavior: CompositionBehavior(\n            injection: Injection(\n              main: Main(\n                source: CompositionSource(\n                  search: CompositionSourceSearch(\n                    index: \"foo\",\n                    params: MainInjectionQueryParameters(\n                      filters: \"brand:adidas\",\n                    ),\n                  ),\n                ),\n              ),\n              injectedItems: [\n                InjectedItem(\n                  key: \"injectedItem1\",\n                  source: SearchSource(\n                    search: Search(\n                      index: \"foo\",\n                      params: BaseInjectionQueryParameters(\n                        filters: \"brand:adidas\",\n                      ),\n                    ),\n                  ),\n                  position: 2,\n                  length: 1,\n                  metadata: InjectedItemMetadata(\n                    hits: InjectedItemHitsMetadata(\n                      addItemKey: true,\n                      extra: {\n                        'my-string': \"string\",\n                        'my-bool': true,\n                        'my-number': 42,\n                        'my-object': {\n                          'sub-key': 'sub-value',\n                        },\n                      },\n                    ),\n                  ),\n                ),\n                InjectedItem(\n                  key: \"externalItem\",\n                  source: SearchSource(\n                    search: Search(\n                      index: \"foo\",\n                      params: BaseInjectionQueryParameters(\n                        filters: \"brand:puma\",\n                      ),\n                    ),\n                  ),\n                  position: 5,\n                  length: 5,\n                  metadata: InjectedItemMetadata(\n                    hits: InjectedItemHitsMetadata(\n                      addItemKey: true,\n                      extra: {\n                        'my-string': \"string\",\n                        'my-bool': true,\n                        'my-number': 42,\n                        'my-object': {\n                          'sub-key': 'sub-value',\n                        },\n                      },\n                    ),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    ],\n  ),\n);"
    },
    "putComposition": {
      "putComposition": "final response = await client.putComposition(\n  compositionID: \"my-metadata-compo\",\n  composition: Composition(\n    objectID: \"my-metadata-compo\",\n    name: \"my composition\",\n    behavior: CompositionBehavior(\n      injection: Injection(\n        main: Main(\n          source: CompositionSource(\n            search: CompositionSourceSearch(\n              index: \"foo\",\n              params: MainInjectionQueryParameters(\n                filters: \"brand:adidas\",\n              ),\n            ),\n          ),\n        ),\n        injectedItems: [\n          InjectedItem(\n            key: \"injectedItem1\",\n            source: SearchSource(\n              search: Search(\n                index: \"foo\",\n                params: BaseInjectionQueryParameters(\n                  filters: \"brand:adidas\",\n                ),\n              ),\n            ),\n            position: 2,\n            length: 1,\n            metadata: InjectedItemMetadata(\n              hits: InjectedItemHitsMetadata(\n                addItemKey: true,\n                extra: {\n                  'my-string': \"string\",\n                  'my-bool': true,\n                  'my-number': 42,\n                  'my-object': {\n                    'sub-key': 'sub-value',\n                  },\n                },\n              ),\n            ),\n          ),\n          InjectedItem(\n            key: \"externalItem\",\n            source: SearchSource(\n              search: Search(\n                index: \"foo\",\n                params: BaseInjectionQueryParameters(\n                  filters: \"brand:puma\",\n                ),\n              ),\n            ),\n            position: 5,\n            length: 5,\n            metadata: InjectedItemMetadata(\n              hits: InjectedItemHitsMetadata(\n                addItemKey: true,\n                extra: {\n                  'my-string': \"string\",\n                  'my-bool': true,\n                  'my-number': 42,\n                  'my-object': {\n                    'sub-key': 'sub-value',\n                  },\n                },\n              ),\n            ),\n          ),\n        ],\n      ),\n    ),\n  ),\n);"
    },
    "putCompositionRule": {
      "putCompositionRule": "final response = await client.putCompositionRule(\n  compositionID: \"compositionID\",\n  objectID: \"rule-with-exernal-source\",\n  compositionRule: CompositionRule(\n    objectID: \"rule-with-exernal-source\",\n    description: \"my description\",\n    tags: [\n      \"tag1\",\n      \"tag2\",\n    ],\n    enabled: true,\n    validity: [\n      TimeRange(\n        from: 1704063600,\n        until: 1704083600,\n      ),\n    ],\n    conditions: [\n      Condition(\n        anchoring: Anchoring.fromJson(\"contains\"),\n        pattern: \"harry\",\n      ),\n      Condition(\n        anchoring: Anchoring.fromJson(\"contains\"),\n        pattern: \"potter\",\n      ),\n    ],\n    consequence: CompositionRuleConsequence(\n      behavior: CompositionBehavior(\n        injection: Injection(\n          main: Main(\n            source: CompositionSource(\n              search: CompositionSourceSearch(\n                index: \"my-index\",\n                params: MainInjectionQueryParameters(\n                  filters: \"brand:adidas\",\n                ),\n              ),\n            ),\n          ),\n          injectedItems: [\n            InjectedItem(\n              key: \"injectedItem\",\n              source: ExternalSource(\n                external_: External(\n                  index: \"my-index\",\n                  params: BaseInjectionQueryParameters(\n                    filters: \"brand:adidas\",\n                  ),\n                  ordering: ExternalOrdering.fromJson(\"userDefined\"),\n                ),\n              ),\n              position: 0,\n              length: 3,\n            ),\n          ],\n        ),\n      ),\n    ),\n  ),\n);"
    },
    "saveRules": {
      "saveRules": "final response = await client.saveRules(\n  compositionID: \"rule-with-exernal-source\",\n  rules: CompositionRulesBatchParams(\n    requests: [\n      RulesMultipleBatchRequest(\n        action: Action.fromJson(\"upsert\"),\n        body: CompositionRule(\n          objectID: \"rule-with-exernal-source\",\n          description: \"my description\",\n          tags: [\n            \"tag1\",\n            \"tag2\",\n          ],\n          enabled: true,\n          validity: [\n            TimeRange(\n              from: 1704063600,\n              until: 1704083600,\n            ),\n          ],\n          conditions: [\n            Condition(\n              anchoring: Anchoring.fromJson(\"contains\"),\n              pattern: \"harry\",\n            ),\n            Condition(\n              anchoring: Anchoring.fromJson(\"contains\"),\n              pattern: \"potter\",\n            ),\n          ],\n          consequence: CompositionRuleConsequence(\n            behavior: CompositionBehavior(\n              injection: Injection(\n                main: Main(\n                  source: CompositionSource(\n                    search: CompositionSourceSearch(\n                      index: \"my-index\",\n                      params: MainInjectionQueryParameters(\n                        filters: \"brand:adidas\",\n                      ),\n                    ),\n                  ),\n                ),\n                injectedItems: [\n                  InjectedItem(\n                    key: \"injectedItem\",\n                    source: ExternalSource(\n                      external_: External(\n                        index: \"my-index\",\n                        params: BaseInjectionQueryParameters(\n                          filters: \"brand:adidas\",\n                        ),\n                        ordering: ExternalOrdering.fromJson(\"userDefined\"),\n                      ),\n                    ),\n                    position: 0,\n                    length: 3,\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    ],\n  ),\n);"
    },
    "search": {
      "search": "final response = await client.search(\n  compositionID: \"foo\",\n  requestBody: RequestBody(\n    params: Params(\n      query: \"batman\",\n      injectedItems: {\n        'injectedItem1': ExternalInjectedItem(\n          items: [\n            ExternalInjection(\n              objectID: \"my-object-1\",\n            ),\n            ExternalInjection(\n              objectID: \"my-object-2\",\n              metadata: {\n                'my-string': \"string\",\n                'my-bool': true,\n                'my-number': 42,\n                'my-object': {\n                  'sub-key': 'sub-value',\n                },\n              },\n            ),\n          ],\n        ),\n      },\n    ),\n  ),\n);"
    },
    "searchCompositionRules": {
      "default": "final response = await client.searchCompositionRules(\n  compositionID: \"foo\",\n  searchCompositionRulesParams: SearchCompositionRulesParams(\n    query: \"batman\",\n  ),\n);"
    },
    "searchForFacetValues": {
      "default": "final response = await client.searchForFacetValues(\n  compositionID: \"foo\",\n  facetName: \"brand\",\n  searchForFacetValuesRequest: SearchForFacetValuesRequest(\n    params: SearchForFacetValuesParams(\n      maxFacetHits: 10,\n    ),\n  ),\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey: \"updated-api-key\",\n);"
    },
    "init": {
      "default": "final client = CompositionClient(\n    appId: 'ALGOLIA_APPLICATION_ID', apiKey: 'ALGOLIA_API_KEY');"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/composition\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow del method for a custom path with all parameters": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow get method for a custom path with all parameters": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters with space\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions should be escaped too": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"to be overriden\"}), composition.WithQueryParam(\"query\", \"parameters with space\"), composition.WithQueryParam(\"and an array\",\n  []string{\"array\", \"with spaces\"}), composition.WithHeaderParam(\"x-header-1\", \"spaces are left alone\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow post method for a custom path with all parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default query parameters": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"query\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges query parameters with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"query2\", \"myQueryParameter\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions can override default headers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions merges headers with default ones": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithHeaderParam(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"isItWorking\", true))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"myParam\", 2))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of string": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"myParam\",\n  []string{\"b and c\", \"d\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of booleans": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"myParam\",\n  []bool{true, true, false}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "requestOptions queryParameters accepts list of integers": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/requestOptions\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"facet\": \"filters\"}), composition.WithQueryParam(\"myParam\",\n  []int32{1, 2}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}",
      "allow put method for a custom path with all parameters": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/all\").WithParameters(map[string]any{\"query\": \"parameters\"}).WithBody(map[string]any{\"body\": \"parameters\"}))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteComposition": {
      "default": "response, err := client.DeleteComposition(client.NewApiDeleteCompositionRequest(\n  \"1234\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteCompositionRule": {
      "default": "response, err := client.DeleteCompositionRule(client.NewApiDeleteCompositionRuleRequest(\n  \"1234\", \"5678\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getComposition": {
      "default": "response, err := client.GetComposition(client.NewApiGetCompositionRequest(\n  \"foo\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getRule": {
      "default": "response, err := client.GetRule(client.NewApiGetRuleRequest(\n  \"foo\", \"123\"))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getTask": {
      "default": "response, err := client.GetTask(client.NewApiGetTaskRequest(\n  \"foo\", 42))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listCompositions": {
      "listCompositions": "response, err := client.ListCompositions(client.NewApiListCompositionsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "multipleBatch": {
      "multipleBatch": "response, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(\n\n  composition.NewEmptyBatchParams().SetRequests(\n    []composition.MultipleBatchRequest{*composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action(\"upsert\")).SetBody(composition.CompositionAsBatchCompositionAction(\n      composition.NewEmptyComposition().SetObjectID(\"my-metadata-compo\").SetName(\"my composition\").SetBehavior(\n        composition.NewEmptyCompositionBehavior().SetInjection(\n          composition.NewEmptyInjection().SetMain(\n            composition.NewEmptyMain().SetSource(\n              composition.NewEmptyCompositionSource().SetSearch(\n                composition.NewEmptyCompositionSourceSearch().SetIndex(\"foo\").SetParams(\n                  composition.NewEmptyMainInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetInjectedItems(\n            []composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey(\"injectedItem1\").SetSource(composition.SearchSourceAsInjectedItemSource(\n              composition.NewEmptySearchSource().SetSearch(\n                composition.NewEmptySearch().SetIndex(\"foo\").SetParams(\n                  composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetPosition(2).SetLength(1).SetMetadata(\n              composition.NewEmptyInjectedItemMetadata().SetHits(\n                composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{\"my-string\": \"string\", \"my-bool\": true, \"my-number\": 42, \"my-object\": map[string]any{\"sub-key\": \"sub-value\"}}))), *composition.NewEmptyInjectedItem().SetKey(\"externalItem\").SetSource(composition.SearchSourceAsInjectedItemSource(\n              composition.NewEmptySearchSource().SetSearch(\n                composition.NewEmptySearch().SetIndex(\"foo\").SetParams(\n                  composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:puma\"))))).SetPosition(5).SetLength(5).SetMetadata(\n              composition.NewEmptyInjectedItemMetadata().SetHits(\n                composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{\"my-string\": \"string\", \"my-bool\": true, \"my-number\": 42, \"my-object\": map[string]any{\"sub-key\": \"sub-value\"}})))})))))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "putComposition": {
      "putComposition": "response, err := client.PutComposition(client.NewApiPutCompositionRequest(\n  \"my-metadata-compo\",\n  composition.NewEmptyComposition().SetObjectID(\"my-metadata-compo\").SetName(\"my composition\").SetBehavior(\n    composition.NewEmptyCompositionBehavior().SetInjection(\n      composition.NewEmptyInjection().SetMain(\n        composition.NewEmptyMain().SetSource(\n          composition.NewEmptyCompositionSource().SetSearch(\n            composition.NewEmptyCompositionSourceSearch().SetIndex(\"foo\").SetParams(\n              composition.NewEmptyMainInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetInjectedItems(\n        []composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey(\"injectedItem1\").SetSource(composition.SearchSourceAsInjectedItemSource(\n          composition.NewEmptySearchSource().SetSearch(\n            composition.NewEmptySearch().SetIndex(\"foo\").SetParams(\n              composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetPosition(2).SetLength(1).SetMetadata(\n          composition.NewEmptyInjectedItemMetadata().SetHits(\n            composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{\"my-string\": \"string\", \"my-bool\": true, \"my-number\": 42, \"my-object\": map[string]any{\"sub-key\": \"sub-value\"}}))), *composition.NewEmptyInjectedItem().SetKey(\"externalItem\").SetSource(composition.SearchSourceAsInjectedItemSource(\n          composition.NewEmptySearchSource().SetSearch(\n            composition.NewEmptySearch().SetIndex(\"foo\").SetParams(\n              composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:puma\"))))).SetPosition(5).SetLength(5).SetMetadata(\n          composition.NewEmptyInjectedItemMetadata().SetHits(\n            composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{\"my-string\": \"string\", \"my-bool\": true, \"my-number\": 42, \"my-object\": map[string]any{\"sub-key\": \"sub-value\"}})))})))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "putCompositionRule": {
      "putCompositionRule": "response, err := client.PutCompositionRule(client.NewApiPutCompositionRuleRequest(\n  \"compositionID\", \"rule-with-exernal-source\",\n  composition.NewEmptyCompositionRule().SetObjectID(\"rule-with-exernal-source\").SetDescription(\"my description\").SetTags(\n    []string{\"tag1\", \"tag2\"}).SetEnabled(true).SetValidity(\n    []composition.TimeRange{*composition.NewEmptyTimeRange().SetFrom(1704063600).SetUntil(1704083600)}).SetConditions(\n    []composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring(\"contains\")).SetPattern(\"harry\"), *composition.NewEmptyCondition().SetAnchoring(composition.Anchoring(\"contains\")).SetPattern(\"potter\")}).SetConsequence(\n    composition.NewEmptyCompositionRuleConsequence().SetBehavior(\n      composition.NewEmptyCompositionBehavior().SetInjection(\n        composition.NewEmptyInjection().SetMain(\n          composition.NewEmptyMain().SetSource(\n            composition.NewEmptyCompositionSource().SetSearch(\n              composition.NewEmptyCompositionSourceSearch().SetIndex(\"my-index\").SetParams(\n                composition.NewEmptyMainInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetInjectedItems(\n          []composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey(\"injectedItem\").SetSource(composition.ExternalSourceAsInjectedItemSource(\n            composition.NewEmptyExternalSource().SetExternal(\n              composition.NewEmptyExternal().SetIndex(\"my-index\").SetParams(\n                composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:adidas\")).SetOrdering(composition.ExternalOrdering(\"userDefined\"))))).SetPosition(0).SetLength(3)}))))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "saveRules": {
      "saveRules": "response, err := client.SaveRules(client.NewApiSaveRulesRequest(\n  \"rule-with-exernal-source\",\n  composition.NewEmptyCompositionRulesBatchParams().SetRequests(\n    []composition.RulesMultipleBatchRequest{*composition.NewEmptyRulesMultipleBatchRequest().SetAction(composition.Action(\"upsert\")).SetBody(composition.CompositionRuleAsRulesBatchCompositionAction(\n      composition.NewEmptyCompositionRule().SetObjectID(\"rule-with-exernal-source\").SetDescription(\"my description\").SetTags(\n        []string{\"tag1\", \"tag2\"}).SetEnabled(true).SetValidity(\n        []composition.TimeRange{*composition.NewEmptyTimeRange().SetFrom(1704063600).SetUntil(1704083600)}).SetConditions(\n        []composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring(\"contains\")).SetPattern(\"harry\"), *composition.NewEmptyCondition().SetAnchoring(composition.Anchoring(\"contains\")).SetPattern(\"potter\")}).SetConsequence(\n        composition.NewEmptyCompositionRuleConsequence().SetBehavior(\n          composition.NewEmptyCompositionBehavior().SetInjection(\n            composition.NewEmptyInjection().SetMain(\n              composition.NewEmptyMain().SetSource(\n                composition.NewEmptyCompositionSource().SetSearch(\n                  composition.NewEmptyCompositionSourceSearch().SetIndex(\"my-index\").SetParams(\n                    composition.NewEmptyMainInjectionQueryParameters().SetFilters(\"brand:adidas\"))))).SetInjectedItems(\n              []composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey(\"injectedItem\").SetSource(composition.ExternalSourceAsInjectedItemSource(\n                composition.NewEmptyExternalSource().SetExternal(\n                  composition.NewEmptyExternal().SetIndex(\"my-index\").SetParams(\n                    composition.NewEmptyBaseInjectionQueryParameters().SetFilters(\"brand:adidas\")).SetOrdering(composition.ExternalOrdering(\"userDefined\"))))).SetPosition(0).SetLength(3)}))))))})))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "search": {
      "search": "response, err := client.Search(client.NewApiSearchRequest(\n  \"foo\",\n  composition.NewEmptyRequestBody().SetParams(\n    composition.NewEmptyParams().SetQuery(\"batman\").SetInjectedItems(map[string]composition.ExternalInjectedItem{\"injectedItem1\": *composition.NewEmptyExternalInjectedItem().SetItems(\n      []composition.ExternalInjection{*composition.NewEmptyExternalInjection().SetObjectID(\"my-object-1\"), *composition.NewEmptyExternalInjection().SetObjectID(\"my-object-2\").SetMetadata(map[string]any{\"my-string\": \"string\", \"my-bool\": true, \"my-number\": 42, \"my-object\": map[string]any{\"sub-key\": \"sub-value\"}})})}))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchCompositionRules": {
      "default": "response, err := client.SearchCompositionRules(client.NewApiSearchCompositionRulesRequest(\n  \"foo\").WithSearchCompositionRulesParams(\n  composition.NewEmptySearchCompositionRulesParams().SetQuery(\"batman\")))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "searchForFacetValues": {
      "default": "response, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(\n  \"foo\", \"brand\").WithSearchForFacetValuesRequest(\n  composition.NewEmptySearchForFacetValuesRequest().SetParams(\n    composition.NewEmptySearchForFacetValuesParams().SetMaxFacetHits(10))))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\")\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := composition.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.CompositionClient;\nimport com.algolia.config.*;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "client.customDelete(\"test/minimal\");",
      "allow del method for a custom path with all parameters": "client.customDelete(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  }\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "client.customGet(\"test/minimal\");",
      "allow get method for a custom path with all parameters": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters with space\");\n    }\n  }\n);",
      "requestOptions should be escaped too": "client.customGet(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"to be overriden\");\n    }\n  },\n  new RequestOptions()\n    .addExtraQueryParameters(\"query\", \"parameters with space\")\n    .addExtraQueryParameters(\"and an array\", Arrays.asList(\"array\", \"with spaces\"))\n    .addExtraHeader(\"x-header-1\", \"spaces are left alone\")\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "client.customPost(\"test/minimal\");",
      "allow post method for a custom path with all parameters": "client.customPost(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);",
      "requestOptions can override default query parameters": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query\", \"myQueryParameter\")\n);",
      "requestOptions merges query parameters with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"query2\", \"myQueryParameter\")\n);",
      "requestOptions can override default headers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions merges headers with default ones": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n);",
      "requestOptions queryParameters accepts booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"isItWorking\", true)\n);",
      "requestOptions queryParameters accepts integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", 2)\n);",
      "requestOptions queryParameters accepts list of string": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(\"b and c\", \"d\"))\n);",
      "requestOptions queryParameters accepts list of booleans": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(true, true, false))\n);",
      "requestOptions queryParameters accepts list of integers": "client.customPost(\n  \"test/requestOptions\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"facet\", \"filters\");\n    }\n  },\n  new RequestOptions().addExtraQueryParameters(\"myParam\", Arrays.asList(1, 2))\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "client.customPut(\"test/minimal\");",
      "allow put method for a custom path with all parameters": "client.customPut(\n  \"test/all\",\n  new HashMap() {\n    {\n      put(\"query\", \"parameters\");\n    }\n  },\n  new HashMap() {\n    {\n      put(\"body\", \"parameters\");\n    }\n  }\n);"
    },
    "deleteComposition": {
      "default": "client.deleteComposition(\"1234\");"
    },
    "deleteCompositionRule": {
      "default": "client.deleteCompositionRule(\"1234\", \"5678\");"
    },
    "getComposition": {
      "default": "client.getComposition(\"foo\");"
    },
    "getRule": {
      "default": "client.getRule(\"foo\", \"123\");"
    },
    "getTask": {
      "default": "client.getTask(\"foo\", 42L);"
    },
    "listCompositions": {
      "listCompositions": "client.listCompositions();"
    },
    "multipleBatch": {
      "multipleBatch": "client.multipleBatch(\n  new BatchParams().setRequests(\n      Arrays.asList(\n        new MultipleBatchRequest()\n          .setAction(Action.UPSERT)\n          .setBody(\n            new Composition()\n              .setObjectID(\"my-metadata-compo\")\n              .setName(\"my composition\")\n              .setBehavior(\n                new CompositionBehavior().setInjection(\n                    new Injection()\n                      .setMain(\n                        new Main().setSource(\n                          new CompositionSource().setSearch(\n                            new CompositionSourceSearch()\n                              .setIndex(\"foo\")\n                              .setParams(new MainInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                          )\n                        )\n                      )\n                      .setInjectedItems(\n                        Arrays.asList(\n                          new InjectedItem()\n                            .setKey(\"injectedItem1\")\n                            .setSource(\n                              new SearchSource().setSearch(\n                                new Search().setIndex(\"foo\").setParams(new BaseInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                              )\n                            )\n                            .setPosition(2)\n                            .setLength(1)\n                            .setMetadata(\n                              new InjectedItemMetadata().setHits(\n                                  new InjectedItemHitsMetadata()\n                                    .setAddItemKey(true)\n                                    .setExtra(\n                                      new HashMap() {\n                                        {\n                                          put(\"my-string\", \"string\");\n                                          put(\"my-bool\", true);\n                                          put(\"my-number\", 42);\n                                          put(\n                                            \"my-object\",\n                                            new HashMap() {\n                                              {\n                                                put(\"sub-key\", \"sub-value\");\n                                              }\n                                            }\n                                          );\n                                        }\n                                      }\n                                    )\n                                )\n                            ),\n                          new InjectedItem()\n                            .setKey(\"externalItem\")\n                            .setSource(\n                              new SearchSource().setSearch(\n                                new Search().setIndex(\"foo\").setParams(new BaseInjectionQueryParameters().setFilters(\"brand:puma\"))\n                              )\n                            )\n                            .setPosition(5)\n                            .setLength(5)\n                            .setMetadata(\n                              new InjectedItemMetadata().setHits(\n                                  new InjectedItemHitsMetadata()\n                                    .setAddItemKey(true)\n                                    .setExtra(\n                                      new HashMap() {\n                                        {\n                                          put(\"my-string\", \"string\");\n                                          put(\"my-bool\", true);\n                                          put(\"my-number\", 42);\n                                          put(\n                                            \"my-object\",\n                                            new HashMap() {\n                                              {\n                                                put(\"sub-key\", \"sub-value\");\n                                              }\n                                            }\n                                          );\n                                        }\n                                      }\n                                    )\n                                )\n                            )\n                        )\n                      )\n                  )\n              )\n          )\n      )\n    )\n);"
    },
    "putComposition": {
      "putComposition": "client.putComposition(\n  \"my-metadata-compo\",\n  new Composition()\n    .setObjectID(\"my-metadata-compo\")\n    .setName(\"my composition\")\n    .setBehavior(\n      new CompositionBehavior().setInjection(\n          new Injection()\n            .setMain(\n              new Main().setSource(\n                new CompositionSource().setSearch(\n                  new CompositionSourceSearch().setIndex(\"foo\").setParams(new MainInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                )\n              )\n            )\n            .setInjectedItems(\n              Arrays.asList(\n                new InjectedItem()\n                  .setKey(\"injectedItem1\")\n                  .setSource(\n                    new SearchSource().setSearch(\n                      new Search().setIndex(\"foo\").setParams(new BaseInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                    )\n                  )\n                  .setPosition(2)\n                  .setLength(1)\n                  .setMetadata(\n                    new InjectedItemMetadata().setHits(\n                        new InjectedItemHitsMetadata()\n                          .setAddItemKey(true)\n                          .setExtra(\n                            new HashMap() {\n                              {\n                                put(\"my-string\", \"string\");\n                                put(\"my-bool\", true);\n                                put(\"my-number\", 42);\n                                put(\n                                  \"my-object\",\n                                  new HashMap() {\n                                    {\n                                      put(\"sub-key\", \"sub-value\");\n                                    }\n                                  }\n                                );\n                              }\n                            }\n                          )\n                      )\n                  ),\n                new InjectedItem()\n                  .setKey(\"externalItem\")\n                  .setSource(\n                    new SearchSource().setSearch(\n                      new Search().setIndex(\"foo\").setParams(new BaseInjectionQueryParameters().setFilters(\"brand:puma\"))\n                    )\n                  )\n                  .setPosition(5)\n                  .setLength(5)\n                  .setMetadata(\n                    new InjectedItemMetadata().setHits(\n                        new InjectedItemHitsMetadata()\n                          .setAddItemKey(true)\n                          .setExtra(\n                            new HashMap() {\n                              {\n                                put(\"my-string\", \"string\");\n                                put(\"my-bool\", true);\n                                put(\"my-number\", 42);\n                                put(\n                                  \"my-object\",\n                                  new HashMap() {\n                                    {\n                                      put(\"sub-key\", \"sub-value\");\n                                    }\n                                  }\n                                );\n                              }\n                            }\n                          )\n                      )\n                  )\n              )\n            )\n        )\n    )\n);"
    },
    "putCompositionRule": {
      "putCompositionRule": "client.putCompositionRule(\n  \"compositionID\",\n  \"rule-with-exernal-source\",\n  new CompositionRule()\n    .setObjectID(\"rule-with-exernal-source\")\n    .setDescription(\"my description\")\n    .setTags(Arrays.asList(\"tag1\", \"tag2\"))\n    .setEnabled(true)\n    .setValidity(Arrays.asList(new TimeRange().setFrom(1704063600L).setUntil(1704083600L)))\n    .setConditions(\n      Arrays.asList(\n        new Condition().setAnchoring(Anchoring.CONTAINS).setPattern(\"harry\"),\n        new Condition().setAnchoring(Anchoring.CONTAINS).setPattern(\"potter\")\n      )\n    )\n    .setConsequence(\n      new CompositionRuleConsequence().setBehavior(\n        new CompositionBehavior().setInjection(\n          new Injection()\n            .setMain(\n              new Main().setSource(\n                new CompositionSource().setSearch(\n                  new CompositionSourceSearch()\n                    .setIndex(\"my-index\")\n                    .setParams(new MainInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                )\n              )\n            )\n            .setInjectedItems(\n              Arrays.asList(\n                new InjectedItem()\n                  .setKey(\"injectedItem\")\n                  .setSource(\n                    new ExternalSource().setExternal(\n                      new External()\n                        .setIndex(\"my-index\")\n                        .setParams(new BaseInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                        .setOrdering(ExternalOrdering.USER_DEFINED)\n                    )\n                  )\n                  .setPosition(0)\n                  .setLength(3)\n              )\n            )\n        )\n      )\n    )\n);"
    },
    "saveRules": {
      "saveRules": "client.saveRules(\n  \"rule-with-exernal-source\",\n  new CompositionRulesBatchParams().setRequests(\n    Arrays.asList(\n      new RulesMultipleBatchRequest()\n        .setAction(Action.UPSERT)\n        .setBody(\n          new CompositionRule()\n            .setObjectID(\"rule-with-exernal-source\")\n            .setDescription(\"my description\")\n            .setTags(Arrays.asList(\"tag1\", \"tag2\"))\n            .setEnabled(true)\n            .setValidity(Arrays.asList(new TimeRange().setFrom(1704063600L).setUntil(1704083600L)))\n            .setConditions(\n              Arrays.asList(\n                new Condition().setAnchoring(Anchoring.CONTAINS).setPattern(\"harry\"),\n                new Condition().setAnchoring(Anchoring.CONTAINS).setPattern(\"potter\")\n              )\n            )\n            .setConsequence(\n              new CompositionRuleConsequence().setBehavior(\n                new CompositionBehavior().setInjection(\n                  new Injection()\n                    .setMain(\n                      new Main().setSource(\n                        new CompositionSource().setSearch(\n                          new CompositionSourceSearch()\n                            .setIndex(\"my-index\")\n                            .setParams(new MainInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                        )\n                      )\n                    )\n                    .setInjectedItems(\n                      Arrays.asList(\n                        new InjectedItem()\n                          .setKey(\"injectedItem\")\n                          .setSource(\n                            new ExternalSource().setExternal(\n                              new External()\n                                .setIndex(\"my-index\")\n                                .setParams(new BaseInjectionQueryParameters().setFilters(\"brand:adidas\"))\n                                .setOrdering(ExternalOrdering.USER_DEFINED)\n                            )\n                          )\n                          .setPosition(0)\n                          .setLength(3)\n                      )\n                    )\n                )\n              )\n            )\n        )\n    )\n  )\n);"
    },
    "search": {
      "search": "client.search(\n  \"foo\",\n  new RequestBody().setParams(\n      new Params()\n        .setQuery(\"batman\")\n        .setInjectedItems(\n          new HashMap() {\n            {\n              put(\n                \"injectedItem1\",\n                new ExternalInjectedItem().setItems(\n                    Arrays.asList(\n                      new ExternalInjection().setObjectID(\"my-object-1\"),\n                      new ExternalInjection()\n                        .setObjectID(\"my-object-2\")\n                        .setMetadata(\n                          new HashMap() {\n                            {\n                              put(\"my-string\", \"string\");\n                              put(\"my-bool\", true);\n                              put(\"my-number\", 42);\n                              put(\n                                \"my-object\",\n                                new HashMap() {\n                                  {\n                                    put(\"sub-key\", \"sub-value\");\n                                  }\n                                }\n                              );\n                            }\n                          }\n                        )\n                    )\n                  )\n              );\n            }\n          }\n        )\n    ),\n  Hit.class\n);"
    },
    "searchCompositionRules": {
      "default": "client.searchCompositionRules(\"foo\", new SearchCompositionRulesParams().setQuery(\"batman\"));"
    },
    "searchForFacetValues": {
      "default": "client.searchForFacetValues(\n  \"foo\",\n  \"brand\",\n  new SearchForFacetValuesRequest().setParams(new SearchForFacetValuesParams().setMaxFacetHits(10))\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "CompositionClient client = new CompositionClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { compositionClient } from '@algolia/composition';"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "const response = await client.customDelete({ path: 'test/minimal' });",
      "allow del method for a custom path with all parameters": "const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "const response = await client.customGet({ path: 'test/minimal' });",
      "allow get method for a custom path with all parameters": "const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });",
      "requestOptions should be escaped too": "const response = await client.customGet(\n  { path: 'test/all', parameters: { query: 'to be overriden' } },\n  {\n    queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },\n    headers: { 'x-header-1': 'spaces are left alone' },\n  },\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "const response = await client.customPost({ path: 'test/minimal' });",
      "allow post method for a custom path with all parameters": "const response = await client.customPost({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});",
      "requestOptions can override default query parameters": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query: 'myQueryParameter' },\n  },\n);",
      "requestOptions merges query parameters with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { query2: 'myQueryParameter' },\n  },\n);",
      "requestOptions can override default headers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions merges headers with default ones": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },\n  },\n);",
      "requestOptions queryParameters accepts booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { isItWorking: true },\n  },\n);",
      "requestOptions queryParameters accepts integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: 2 },\n  },\n);",
      "requestOptions queryParameters accepts list of string": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: ['b and c', 'd'] },\n  },\n);",
      "requestOptions queryParameters accepts list of booleans": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [true, true, false] },\n  },\n);",
      "requestOptions queryParameters accepts list of integers": "const response = await client.customPost(\n  { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },\n  {\n    queryParameters: { myParam: [1, 2] },\n  },\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "const response = await client.customPut({ path: 'test/minimal' });",
      "allow put method for a custom path with all parameters": "const response = await client.customPut({\n  path: 'test/all',\n  parameters: { query: 'parameters' },\n  body: { body: 'parameters' },\n});"
    },
    "deleteComposition": {
      "default": "const response = await client.deleteComposition({ compositionID: '1234' });"
    },
    "deleteCompositionRule": {
      "default": "const response = await client.deleteCompositionRule({ compositionID: '1234', objectID: '5678' });"
    },
    "getComposition": {
      "default": "const response = await client.getComposition({ compositionID: 'foo' });"
    },
    "getRule": {
      "default": "const response = await client.getRule({ compositionID: 'foo', objectID: '123' });"
    },
    "getTask": {
      "default": "const response = await client.getTask({ compositionID: 'foo', taskID: 42 });"
    },
    "listCompositions": {
      "listCompositions": "const response = await client.listCompositions();"
    },
    "multipleBatch": {
      "multipleBatch": "const response = await client.multipleBatch({\n  requests: [\n    {\n      action: 'upsert',\n      body: {\n        objectID: 'my-metadata-compo',\n        name: 'my composition',\n        behavior: {\n          injection: {\n            main: { source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } } },\n            injectedItems: [\n              {\n                key: 'injectedItem1',\n                source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },\n                position: 2,\n                length: 1,\n                metadata: {\n                  hits: {\n                    addItemKey: true,\n                    extra: {\n                      'my-string': 'string',\n                      'my-bool': true,\n                      'my-number': 42,\n                      'my-object': { 'sub-key': 'sub-value' },\n                    },\n                  },\n                },\n              },\n              {\n                key: 'externalItem',\n                source: { search: { index: 'foo', params: { filters: 'brand:puma' } } },\n                position: 5,\n                length: 5,\n                metadata: {\n                  hits: {\n                    addItemKey: true,\n                    extra: {\n                      'my-string': 'string',\n                      'my-bool': true,\n                      'my-number': 42,\n                      'my-object': { 'sub-key': 'sub-value' },\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  ],\n});"
    },
    "putComposition": {
      "putComposition": "const response = await client.putComposition({\n  compositionID: 'my-metadata-compo',\n  composition: {\n    objectID: 'my-metadata-compo',\n    name: 'my composition',\n    behavior: {\n      injection: {\n        main: { source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } } },\n        injectedItems: [\n          {\n            key: 'injectedItem1',\n            source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },\n            position: 2,\n            length: 1,\n            metadata: {\n              hits: {\n                addItemKey: true,\n                extra: {\n                  'my-string': 'string',\n                  'my-bool': true,\n                  'my-number': 42,\n                  'my-object': { 'sub-key': 'sub-value' },\n                },\n              },\n            },\n          },\n          {\n            key: 'externalItem',\n            source: { search: { index: 'foo', params: { filters: 'brand:puma' } } },\n            position: 5,\n            length: 5,\n            metadata: {\n              hits: {\n                addItemKey: true,\n                extra: {\n                  'my-string': 'string',\n                  'my-bool': true,\n                  'my-number': 42,\n                  'my-object': { 'sub-key': 'sub-value' },\n                },\n              },\n            },\n          },\n        ],\n      },\n    },\n  },\n});"
    },
    "putCompositionRule": {
      "putCompositionRule": "const response = await client.putCompositionRule({\n  compositionID: 'compositionID',\n  objectID: 'rule-with-exernal-source',\n  compositionRule: {\n    objectID: 'rule-with-exernal-source',\n    description: 'my description',\n    tags: ['tag1', 'tag2'],\n    enabled: true,\n    validity: [{ from: 1704063600, until: 1704083600 }],\n    conditions: [\n      { anchoring: 'contains', pattern: 'harry' },\n      { anchoring: 'contains', pattern: 'potter' },\n    ],\n    consequence: {\n      behavior: {\n        injection: {\n          main: { source: { search: { index: 'my-index', params: { filters: 'brand:adidas' } } } },\n          injectedItems: [\n            {\n              key: 'injectedItem',\n              source: {\n                external: { index: 'my-index', params: { filters: 'brand:adidas' }, ordering: 'userDefined' },\n              },\n              position: 0,\n              length: 3,\n            },\n          ],\n        },\n      },\n    },\n  },\n});"
    },
    "saveRules": {
      "saveRules": "const response = await client.saveRules({\n  compositionID: 'rule-with-exernal-source',\n  rules: {\n    requests: [\n      {\n        action: 'upsert',\n        body: {\n          objectID: 'rule-with-exernal-source',\n          description: 'my description',\n          tags: ['tag1', 'tag2'],\n          enabled: true,\n          validity: [{ from: 1704063600, until: 1704083600 }],\n          conditions: [\n            { anchoring: 'contains', pattern: 'harry' },\n            { anchoring: 'contains', pattern: 'potter' },\n          ],\n          consequence: {\n            behavior: {\n              injection: {\n                main: { source: { search: { index: 'my-index', params: { filters: 'brand:adidas' } } } },\n                injectedItems: [\n                  {\n                    key: 'injectedItem',\n                    source: {\n                      external: { index: 'my-index', params: { filters: 'brand:adidas' }, ordering: 'userDefined' },\n                    },\n                    position: 0,\n                    length: 3,\n                  },\n                ],\n              },\n            },\n          },\n        },\n      },\n    ],\n  },\n});"
    },
    "search": {
      "search": "const response = await client.search({\n  compositionID: 'foo',\n  requestBody: {\n    params: {\n      query: 'batman',\n      injectedItems: {\n        injectedItem1: {\n          items: [\n            { objectID: 'my-object-1' },\n            {\n              objectID: 'my-object-2',\n              metadata: {\n                'my-string': 'string',\n                'my-bool': true,\n                'my-number': 42,\n                'my-object': { 'sub-key': 'sub-value' },\n              },\n            },\n          ],\n        },\n      },\n    },\n  },\n});"
    },
    "searchCompositionRules": {
      "default": "const response = await client.searchCompositionRules({\n  compositionID: 'foo',\n  searchCompositionRulesParams: { query: 'batman' },\n});"
    },
    "searchForFacetValues": {
      "default": "const response = await client.searchForFacetValues({\n  compositionID: 'foo',\n  facetName: 'brand',\n  searchForFacetValuesRequest: { params: { maxFacetHits: 10 } },\n});"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.CompositionClient\nimport com.algolia.client.configuration.*\nimport com.algolia.client.transport.*\nimport com.algolia.client.model.composition.RequestBody"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "var response = client.customDelete(\n  path = \"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "var response = client.customDelete(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "var response = client.customGet(\n  path = \"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters with space\"),\n)",
      "requestOptions should be escaped too": "var response = client.customGet(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"to be overriden\"),\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"parameters with space\")\n      put(\"and an array\", listOf(\"array\", \"with spaces\"))\n    },\n    headers = buildMap {\n      put(\"x-header-1\", \"spaces are left alone\")\n    },\n  ),\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "var response = client.customPost(\n  path = \"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "var response = client.customPost(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)",
      "requestOptions can override default query parameters": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions merges query parameters with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"query2\", \"myQueryParameter\")\n    },\n  ),\n)",
      "requestOptions can override default headers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions merges headers with default ones": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    headers = buildMap {\n      put(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n    },\n  ),\n)",
      "requestOptions queryParameters accepts booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"isItWorking\", true)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", 2)\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of string": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(\"b and c\", \"d\"))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of booleans": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(true, true, false))\n    },\n  ),\n)",
      "requestOptions queryParameters accepts list of integers": "var response = client.customPost(\n  path = \"test/requestOptions\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"facet\",\n      JsonPrimitive(\"filters\"),\n    )\n  },\n  requestOptions = RequestOptions(\n    urlParameters = buildMap {\n      put(\"myParam\", listOf(1, 2))\n    },\n  ),\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "var response = client.customPut(\n  path = \"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "var response = client.customPut(\n  path = \"test/all\",\n  parameters = mapOf(\"query\" to \"parameters\"),\n  body = buildJsonObject {\n    put(\n      \"body\",\n      JsonPrimitive(\"parameters\"),\n    )\n  },\n)"
    },
    "deleteComposition": {
      "default": "var response = client.deleteComposition(\n  compositionID = \"1234\",\n)"
    },
    "deleteCompositionRule": {
      "default": "var response = client.deleteCompositionRule(\n  compositionID = \"1234\",\n  objectID = \"5678\",\n)"
    },
    "getComposition": {
      "default": "var response = client.getComposition(\n  compositionID = \"foo\",\n)"
    },
    "getRule": {
      "default": "var response = client.getRule(\n  compositionID = \"foo\",\n  objectID = \"123\",\n)"
    },
    "getTask": {
      "default": "var response = client.getTask(\n  compositionID = \"foo\",\n  taskID = 42L,\n)"
    },
    "listCompositions": {
      "listCompositions": "var response = client.listCompositions()"
    },
    "multipleBatch": {
      "multipleBatch": "var response = client.multipleBatch(\n  batchParams = BatchParams(\n    requests = listOf(\n      MultipleBatchRequest(\n        action = Action.entries.first { it.value == \"upsert\" },\n        body = Composition(\n          objectID = \"foo\",\n          name = \"my first composition\",\n          behavior = CompositionBehavior(\n            injection = Injection(\n              main = Main(\n                source = CompositionSource(\n                  search = CompositionSourceSearch(\n                    index = \"bar\",\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      MultipleBatchRequest(\n        action = Action.entries.first { it.value == \"delete\" },\n        body = DeleteCompositionAction(\n          objectID = \"baz\",\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "putComposition": {
      "putComposition": "var response = client.putComposition(\n  compositionID = \"my-external-injection-compo\",\n  composition = Composition(\n    objectID = \"my-external-injection-compo\",\n    name = \"my first composition\",\n    behavior = CompositionBehavior(\n      injection = Injection(\n        main = Main(\n          source = CompositionSource(\n            search = CompositionSourceSearch(\n              index = \"foo\",\n            ),\n          ),\n        ),\n        injectedItems = listOf(\n          InjectedItem(\n            key = \"injectedItem1\",\n            source = ExternalSource(\n              external = External(\n                index = \"foo\",\n                ordering = ExternalOrdering.entries.first { it.value == \"userDefined\" },\n                params = BaseInjectionQueryParameters(\n                  filters = \"brand:adidas\",\n                ),\n              ),\n            ),\n            position = 2,\n            length = 1,\n          ),\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "putCompositionRule": {
      "putCompositionRule": "var response = client.putCompositionRule(\n  compositionID = \"compositionID\",\n  objectID = \"rule-with-exernal-source\",\n  compositionRule = CompositionRule(\n    objectID = \"rule-with-exernal-source\",\n    description = \"my description\",\n    tags = listOf(\"tag1\", \"tag2\"),\n    enabled = true,\n    validity = listOf(\n      TimeRange(\n        from = 1704063600L,\n        until = 1704083600L,\n      ),\n    ),\n    conditions = listOf(\n      Condition(\n        anchoring = Anchoring.entries.first { it.value == \"contains\" },\n        pattern = \"harry\",\n      ),\n      Condition(\n        anchoring = Anchoring.entries.first { it.value == \"contains\" },\n        pattern = \"potter\",\n      ),\n    ),\n    consequence = CompositionRuleConsequence(\n      behavior = CompositionBehavior(\n        injection = Injection(\n          main = Main(\n            source = CompositionSource(\n              search = CompositionSourceSearch(\n                index = \"my-index\",\n                params = MainInjectionQueryParameters(\n                  filters = \"brand:adidas\",\n                ),\n              ),\n            ),\n          ),\n          injectedItems = listOf(\n            InjectedItem(\n              key = \"injectedItem\",\n              source = ExternalSource(\n                external = External(\n                  index = \"my-index\",\n                  params = BaseInjectionQueryParameters(\n                    filters = \"brand:adidas\",\n                  ),\n                  ordering = ExternalOrdering.entries.first { it.value == \"userDefined\" },\n                ),\n              ),\n              position = 0,\n              length = 3,\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "saveRules": {
      "saveRules": "var response = client.saveRules(\n  compositionID = \"rule-with-exernal-source\",\n  rules = CompositionRulesBatchParams(\n    requests = listOf(\n      RulesMultipleBatchRequest(\n        action = Action.entries.first { it.value == \"upsert\" },\n        body = CompositionRule(\n          objectID = \"rule-with-exernal-source\",\n          description = \"my description\",\n          tags = listOf(\"tag1\", \"tag2\"),\n          enabled = true,\n          validity = listOf(\n            TimeRange(\n              from = 1704063600L,\n              until = 1704083600L,\n            ),\n          ),\n          conditions = listOf(\n            Condition(\n              anchoring = Anchoring.entries.first { it.value == \"contains\" },\n              pattern = \"harry\",\n            ),\n            Condition(\n              anchoring = Anchoring.entries.first { it.value == \"contains\" },\n              pattern = \"potter\",\n            ),\n          ),\n          consequence = CompositionRuleConsequence(\n            behavior = CompositionBehavior(\n              injection = Injection(\n                main = Main(\n                  source = CompositionSource(\n                    search = CompositionSourceSearch(\n                      index = \"my-index\",\n                      params = MainInjectionQueryParameters(\n                        filters = \"brand:adidas\",\n                      ),\n                    ),\n                  ),\n                ),\n                injectedItems = listOf(\n                  InjectedItem(\n                    key = \"injectedItem\",\n                    source = ExternalSource(\n                      external = External(\n                        index = \"my-index\",\n                        params = BaseInjectionQueryParameters(\n                          filters = \"brand:adidas\",\n                        ),\n                        ordering = ExternalOrdering.entries.first { it.value == \"userDefined\" },\n                      ),\n                    ),\n                    position = 0,\n                    length = 3,\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ),\n)"
    },
    "search": {
      "search": "var response = client.search(\n  compositionID = \"foo\",\n  requestBody = RequestBody(\n    params = Params(\n      query = \"batman\",\n    ),\n  ),\n)"
    },
    "searchCompositionRules": {
      "default": "var response = client.searchCompositionRules(\n  compositionID = \"foo\",\n  searchCompositionRulesParams = SearchCompositionRulesParams(\n    query = \"batman\",\n  ),\n)"
    },
    "searchForFacetValues": {
      "default": "var response = client.searchForFacetValues(\n  compositionID = \"foo\",\n  facetName = \"brand\",\n  searchForFacetValuesRequest = SearchForFacetValuesRequest(\n    params = SearchForFacetValuesParams(\n      maxFacetHits = 10,\n    ),\n  ),\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = CompositionClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\CompositionClient;"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "$response = $client->customDelete(\n    'test/minimal',\n);",
      "allow del method for a custom path with all parameters": "$response = $client->customDelete(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n);"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "$response = $client->customGet(\n    'test/minimal',\n);",
      "allow get method for a custom path with all parameters": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'parameters with space',\n    ],\n);",
      "requestOptions should be escaped too": "$response = $client->customGet(\n    'test/all',\n    ['query' => 'to be overriden',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'parameters with space',\n            'and an array' => ['array', 'with spaces',\n            ],\n        ],\n        'headers' => [\n            'x-header-1' => 'spaces are left alone',\n        ],\n    ]\n);"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "$response = $client->customPost(\n    'test/minimal',\n);",
      "allow post method for a custom path with all parameters": "$response = $client->customPost(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);",
      "requestOptions can override default query parameters": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions merges query parameters with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'query2' => 'myQueryParameter',\n        ], ]\n);",
      "requestOptions can override default headers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions merges headers with default ones": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'headers' => [\n            'x-algolia-api-key' => 'ALGOLIA_API_KEY',\n        ],\n    ]\n);",
      "requestOptions queryParameters accepts booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'isItWorking' => true,\n        ], ]\n);",
      "requestOptions queryParameters accepts integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => 2,\n        ], ]\n);",
      "requestOptions queryParameters accepts list of string": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => ['b and c', 'd',\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of booleans": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [true, true, false,\n            ],\n        ], ]\n);",
      "requestOptions queryParameters accepts list of integers": "$response = $client->customPost(\n    'test/requestOptions',\n    ['query' => 'parameters',\n    ],\n    ['facet' => 'filters',\n    ],\n    [\n        'queryParameters' => [\n            'myParam' => [1, 2,\n            ],\n        ], ]\n);"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "$response = $client->customPut(\n    'test/minimal',\n);",
      "allow put method for a custom path with all parameters": "$response = $client->customPut(\n    'test/all',\n    ['query' => 'parameters',\n    ],\n    ['body' => 'parameters',\n    ],\n);"
    },
    "deleteComposition": {
      "default": "$response = $client->deleteComposition(\n    '1234',\n);"
    },
    "deleteCompositionRule": {
      "default": "$response = $client->deleteCompositionRule(\n    '1234',\n    '5678',\n);"
    },
    "getComposition": {
      "default": "$response = $client->getComposition(\n    'foo',\n);"
    },
    "getRule": {
      "default": "$response = $client->getRule(\n    'foo',\n    '123',\n);"
    },
    "getTask": {
      "default": "$response = $client->getTask(\n    'foo',\n    42,\n);"
    },
    "listCompositions": {
      "listCompositions": "$response = $client->listCompositions();"
    },
    "multipleBatch": {
      "multipleBatch": "$response = $client->multipleBatch(\n    ['requests' => [\n        ['action' => 'upsert',\n            'body' => ['objectID' => 'my-metadata-compo',\n                'name' => 'my composition',\n                'behavior' => ['injection' => ['main' => ['source' => ['search' => ['index' => 'foo',\n                    'params' => ['filters' => 'brand:adidas',\n                    ],\n                ],\n                ],\n                ],\n                    'injectedItems' => [\n                        ['key' => 'injectedItem1',\n                            'source' => ['search' => ['index' => 'foo',\n                                'params' => ['filters' => 'brand:adidas',\n                                ],\n                            ],\n                            ],\n                            'position' => 2,\n                            'length' => 1,\n                            'metadata' => ['hits' => ['addItemKey' => true,\n                                'extra' => ['my-string' => 'string',\n                                    'my-bool' => true,\n                                    'my-number' => 42,\n                                    'my-object' => ['sub-key' => 'sub-value'],\n                                ],\n                            ],\n                            ],\n                        ],\n\n                        ['key' => 'externalItem',\n                            'source' => ['search' => ['index' => 'foo',\n                                'params' => ['filters' => 'brand:puma',\n                                ],\n                            ],\n                            ],\n                            'position' => 5,\n                            'length' => 5,\n                            'metadata' => ['hits' => ['addItemKey' => true,\n                                'extra' => ['my-string' => 'string',\n                                    'my-bool' => true,\n                                    'my-number' => 42,\n                                    'my-object' => ['sub-key' => 'sub-value'],\n                                ],\n                            ],\n                            ],\n                        ],\n                    ],\n                ],\n                ],\n            ],\n        ],\n    ],\n    ],\n);"
    },
    "putComposition": {
      "putComposition": "$response = $client->putComposition(\n    'my-metadata-compo',\n    ['objectID' => 'my-metadata-compo',\n        'name' => 'my composition',\n        'behavior' => ['injection' => ['main' => ['source' => ['search' => ['index' => 'foo',\n            'params' => ['filters' => 'brand:adidas',\n            ],\n        ],\n        ],\n        ],\n            'injectedItems' => [\n                ['key' => 'injectedItem1',\n                    'source' => ['search' => ['index' => 'foo',\n                        'params' => ['filters' => 'brand:adidas',\n                        ],\n                    ],\n                    ],\n                    'position' => 2,\n                    'length' => 1,\n                    'metadata' => ['hits' => ['addItemKey' => true,\n                        'extra' => ['my-string' => 'string',\n                            'my-bool' => true,\n                            'my-number' => 42,\n                            'my-object' => ['sub-key' => 'sub-value'],\n                        ],\n                    ],\n                    ],\n                ],\n\n                ['key' => 'externalItem',\n                    'source' => ['search' => ['index' => 'foo',\n                        'params' => ['filters' => 'brand:puma',\n                        ],\n                    ],\n                    ],\n                    'position' => 5,\n                    'length' => 5,\n                    'metadata' => ['hits' => ['addItemKey' => true,\n                        'extra' => ['my-string' => 'string',\n                            'my-bool' => true,\n                            'my-number' => 42,\n                            'my-object' => ['sub-key' => 'sub-value'],\n                        ],\n                    ],\n                    ],\n                ],\n            ],\n        ],\n        ],\n    ],\n);"
    },
    "putCompositionRule": {
      "putCompositionRule": "$response = $client->putCompositionRule(\n    'compositionID',\n    'rule-with-exernal-source',\n    ['objectID' => 'rule-with-exernal-source',\n        'description' => 'my description',\n        'tags' => [\n            'tag1',\n\n            'tag2',\n        ],\n        'enabled' => true,\n        'validity' => [\n            ['from' => 1704063600,\n                'until' => 1704083600,\n            ],\n        ],\n        'conditions' => [\n            ['anchoring' => 'contains',\n                'pattern' => 'harry',\n            ],\n\n            ['anchoring' => 'contains',\n                'pattern' => 'potter',\n            ],\n        ],\n        'consequence' => ['behavior' => ['injection' => ['main' => ['source' => ['search' => ['index' => 'my-index',\n            'params' => ['filters' => 'brand:adidas',\n            ],\n        ],\n        ],\n        ],\n            'injectedItems' => [\n                ['key' => 'injectedItem',\n                    'source' => ['external' => ['index' => 'my-index',\n                        'params' => ['filters' => 'brand:adidas',\n                        ],\n                        'ordering' => 'userDefined',\n                    ],\n                    ],\n                    'position' => 0,\n                    'length' => 3,\n                ],\n            ],\n        ],\n        ],\n        ],\n    ],\n);"
    },
    "saveRules": {
      "saveRules": "$response = $client->saveRules(\n    'rule-with-exernal-source',\n    ['requests' => [\n        ['action' => 'upsert',\n            'body' => ['objectID' => 'rule-with-exernal-source',\n                'description' => 'my description',\n                'tags' => [\n                    'tag1',\n\n                    'tag2',\n                ],\n                'enabled' => true,\n                'validity' => [\n                    ['from' => 1704063600,\n                        'until' => 1704083600,\n                    ],\n                ],\n                'conditions' => [\n                    ['anchoring' => 'contains',\n                        'pattern' => 'harry',\n                    ],\n\n                    ['anchoring' => 'contains',\n                        'pattern' => 'potter',\n                    ],\n                ],\n                'consequence' => ['behavior' => ['injection' => ['main' => ['source' => ['search' => ['index' => 'my-index',\n                    'params' => ['filters' => 'brand:adidas',\n                    ],\n                ],\n                ],\n                ],\n                    'injectedItems' => [\n                        ['key' => 'injectedItem',\n                            'source' => ['external' => ['index' => 'my-index',\n                                'params' => ['filters' => 'brand:adidas',\n                                ],\n                                'ordering' => 'userDefined',\n                            ],\n                            ],\n                            'position' => 0,\n                            'length' => 3,\n                        ],\n                    ],\n                ],\n                ],\n                ],\n            ],\n        ],\n    ],\n    ],\n);"
    },
    "search": {
      "search": "$response = $client->search(\n    'foo',\n    ['params' => ['query' => 'batman',\n        'injectedItems' => ['injectedItem1' => ['items' => [\n            ['objectID' => 'my-object-1',\n            ],\n\n            ['objectID' => 'my-object-2',\n                'metadata' => ['my-string' => 'string',\n                    'my-bool' => true,\n                    'my-number' => 42,\n                    'my-object' => ['sub-key' => 'sub-value'],\n                ],\n            ],\n        ],\n        ],\n        ],\n    ],\n    ],\n);"
    },
    "searchCompositionRules": {
      "default": "$response = $client->searchCompositionRules(\n    'foo',\n    ['query' => 'batman',\n    ],\n);"
    },
    "searchForFacetValues": {
      "default": "$response = $client->searchForFacetValues(\n    'foo',\n    'brand',\n    ['params' => ['maxFacetHits' => 10,\n    ],\n    ],\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = CompositionClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.composition.client import CompositionClientSync\nfrom json import loads"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\n    path=\"test/minimal\",\n)",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\n    path=\"test/minimal\",\n)",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters with space\",\n    },\n)",
      "requestOptions should be escaped too": "response = client.custom_get(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"to be overriden\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-header-1\":\"spaces are left alone\"}\"\"\"),\n        \"query_parameters\": loads(\n            \"\"\"{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}\"\"\"\n        ),\n    },\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\n    path=\"test/minimal\",\n)",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)",
      "requestOptions can override default query parameters": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"query2\":\"myQueryParameter\"}\"\"\"),\n    },\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"headers\": loads(\"\"\"{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"isItWorking\":true}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":2}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[\"b and c\",\"d\"]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[true,true,false]}\"\"\"),\n    },\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n    path=\"test/requestOptions\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"facet\": \"filters\",\n    },\n    request_options={\n        \"query_parameters\": loads(\"\"\"{\"myParam\":[1,2]}\"\"\"),\n    },\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\n    path=\"test/minimal\",\n)",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\n    path=\"test/all\",\n    parameters={\n        \"query\": \"parameters\",\n    },\n    body={\n        \"body\": \"parameters\",\n    },\n)"
    },
    "deleteComposition": {
      "default": "response = client.delete_composition(\n    composition_id=\"1234\",\n)"
    },
    "deleteCompositionRule": {
      "default": "response = client.delete_composition_rule(\n    composition_id=\"1234\",\n    object_id=\"5678\",\n)"
    },
    "getComposition": {
      "default": "response = client.get_composition(\n    composition_id=\"foo\",\n)"
    },
    "getRule": {
      "default": "response = client.get_rule(\n    composition_id=\"foo\",\n    object_id=\"123\",\n)"
    },
    "getTask": {
      "default": "response = client.get_task(\n    composition_id=\"foo\",\n    task_id=42,\n)"
    },
    "listCompositions": {
      "listCompositions": "response = client.list_compositions()"
    },
    "multipleBatch": {
      "multipleBatch": "response = client.multiple_batch(\n    batch_params={\n        \"requests\": [\n            {\n                \"action\": \"upsert\",\n                \"body\": {\n                    \"objectID\": \"my-metadata-compo\",\n                    \"name\": \"my composition\",\n                    \"behavior\": {\n                        \"injection\": {\n                            \"main\": {\n                                \"source\": {\n                                    \"search\": {\n                                        \"index\": \"foo\",\n                                        \"params\": {\n                                            \"filters\": \"brand:adidas\",\n                                        },\n                                    },\n                                },\n                            },\n                            \"injectedItems\": [\n                                {\n                                    \"key\": \"injectedItem1\",\n                                    \"source\": {\n                                        \"search\": {\n                                            \"index\": \"foo\",\n                                            \"params\": {\n                                                \"filters\": \"brand:adidas\",\n                                            },\n                                        },\n                                    },\n                                    \"position\": 2,\n                                    \"length\": 1,\n                                    \"metadata\": {\n                                        \"hits\": {\n                                            \"addItemKey\": True,\n                                            \"extra\": {\n                                                \"my-string\": \"string\",\n                                                \"my-bool\": True,\n                                                \"my-number\": 42,\n                                                \"my-object\": {\n                                                    \"sub-key\": \"sub-value\"\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                                {\n                                    \"key\": \"externalItem\",\n                                    \"source\": {\n                                        \"search\": {\n                                            \"index\": \"foo\",\n                                            \"params\": {\n                                                \"filters\": \"brand:puma\",\n                                            },\n                                        },\n                                    },\n                                    \"position\": 5,\n                                    \"length\": 5,\n                                    \"metadata\": {\n                                        \"hits\": {\n                                            \"addItemKey\": True,\n                                            \"extra\": {\n                                                \"my-string\": \"string\",\n                                                \"my-bool\": True,\n                                                \"my-number\": 42,\n                                                \"my-object\": {\n                                                    \"sub-key\": \"sub-value\"\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                            ],\n                        },\n                    },\n                },\n            },\n        ],\n    },\n)"
    },
    "putComposition": {
      "putComposition": "response = client.put_composition(\n    composition_id=\"my-metadata-compo\",\n    composition={\n        \"objectID\": \"my-metadata-compo\",\n        \"name\": \"my composition\",\n        \"behavior\": {\n            \"injection\": {\n                \"main\": {\n                    \"source\": {\n                        \"search\": {\n                            \"index\": \"foo\",\n                            \"params\": {\n                                \"filters\": \"brand:adidas\",\n                            },\n                        },\n                    },\n                },\n                \"injectedItems\": [\n                    {\n                        \"key\": \"injectedItem1\",\n                        \"source\": {\n                            \"search\": {\n                                \"index\": \"foo\",\n                                \"params\": {\n                                    \"filters\": \"brand:adidas\",\n                                },\n                            },\n                        },\n                        \"position\": 2,\n                        \"length\": 1,\n                        \"metadata\": {\n                            \"hits\": {\n                                \"addItemKey\": True,\n                                \"extra\": {\n                                    \"my-string\": \"string\",\n                                    \"my-bool\": True,\n                                    \"my-number\": 42,\n                                    \"my-object\": {\"sub-key\": \"sub-value\"},\n                                },\n                            },\n                        },\n                    },\n                    {\n                        \"key\": \"externalItem\",\n                        \"source\": {\n                            \"search\": {\n                                \"index\": \"foo\",\n                                \"params\": {\n                                    \"filters\": \"brand:puma\",\n                                },\n                            },\n                        },\n                        \"position\": 5,\n                        \"length\": 5,\n                        \"metadata\": {\n                            \"hits\": {\n                                \"addItemKey\": True,\n                                \"extra\": {\n                                    \"my-string\": \"string\",\n                                    \"my-bool\": True,\n                                    \"my-number\": 42,\n                                    \"my-object\": {\"sub-key\": \"sub-value\"},\n                                },\n                            },\n                        },\n                    },\n                ],\n            },\n        },\n    },\n)"
    },
    "putCompositionRule": {
      "putCompositionRule": "response = client.put_composition_rule(\n    composition_id=\"compositionID\",\n    object_id=\"rule-with-exernal-source\",\n    composition_rule={\n        \"objectID\": \"rule-with-exernal-source\",\n        \"description\": \"my description\",\n        \"tags\": [\n            \"tag1\",\n            \"tag2\",\n        ],\n        \"enabled\": True,\n        \"validity\": [\n            {\n                \"from\": 1704063600,\n                \"until\": 1704083600,\n            },\n        ],\n        \"conditions\": [\n            {\n                \"anchoring\": \"contains\",\n                \"pattern\": \"harry\",\n            },\n            {\n                \"anchoring\": \"contains\",\n                \"pattern\": \"potter\",\n            },\n        ],\n        \"consequence\": {\n            \"behavior\": {\n                \"injection\": {\n                    \"main\": {\n                        \"source\": {\n                            \"search\": {\n                                \"index\": \"my-index\",\n                                \"params\": {\n                                    \"filters\": \"brand:adidas\",\n                                },\n                            },\n                        },\n                    },\n                    \"injectedItems\": [\n                        {\n                            \"key\": \"injectedItem\",\n                            \"source\": {\n                                \"external\": {\n                                    \"index\": \"my-index\",\n                                    \"params\": {\n                                        \"filters\": \"brand:adidas\",\n                                    },\n                                    \"ordering\": \"userDefined\",\n                                },\n                            },\n                            \"position\": 0,\n                            \"length\": 3,\n                        },\n                    ],\n                },\n            },\n        },\n    },\n)"
    },
    "saveRules": {
      "saveRules": "response = client.save_rules(\n    composition_id=\"rule-with-exernal-source\",\n    rules={\n        \"requests\": [\n            {\n                \"action\": \"upsert\",\n                \"body\": {\n                    \"objectID\": \"rule-with-exernal-source\",\n                    \"description\": \"my description\",\n                    \"tags\": [\n                        \"tag1\",\n                        \"tag2\",\n                    ],\n                    \"enabled\": True,\n                    \"validity\": [\n                        {\n                            \"from\": 1704063600,\n                            \"until\": 1704083600,\n                        },\n                    ],\n                    \"conditions\": [\n                        {\n                            \"anchoring\": \"contains\",\n                            \"pattern\": \"harry\",\n                        },\n                        {\n                            \"anchoring\": \"contains\",\n                            \"pattern\": \"potter\",\n                        },\n                    ],\n                    \"consequence\": {\n                        \"behavior\": {\n                            \"injection\": {\n                                \"main\": {\n                                    \"source\": {\n                                        \"search\": {\n                                            \"index\": \"my-index\",\n                                            \"params\": {\n                                                \"filters\": \"brand:adidas\",\n                                            },\n                                        },\n                                    },\n                                },\n                                \"injectedItems\": [\n                                    {\n                                        \"key\": \"injectedItem\",\n                                        \"source\": {\n                                            \"external\": {\n                                                \"index\": \"my-index\",\n                                                \"params\": {\n                                                    \"filters\": \"brand:adidas\",\n                                                },\n                                                \"ordering\": \"userDefined\",\n                                            },\n                                        },\n                                        \"position\": 0,\n                                        \"length\": 3,\n                                    },\n                                ],\n                            },\n                        },\n                    },\n                },\n            },\n        ],\n    },\n)"
    },
    "search": {
      "search": "response = client.search(\n    composition_id=\"foo\",\n    request_body={\n        \"params\": {\n            \"query\": \"batman\",\n            \"injectedItems\": {\n                \"injectedItem1\": {\n                    \"items\": [\n                        {\n                            \"objectID\": \"my-object-1\",\n                        },\n                        {\n                            \"objectID\": \"my-object-2\",\n                            \"metadata\": {\n                                \"my-string\": \"string\",\n                                \"my-bool\": True,\n                                \"my-number\": 42,\n                                \"my-object\": {\"sub-key\": \"sub-value\"},\n                            },\n                        },\n                    ],\n                },\n            },\n        },\n    },\n)"
    },
    "searchCompositionRules": {
      "default": "response = client.search_composition_rules(\n    composition_id=\"foo\",\n    search_composition_rules_params={\n        \"query\": \"batman\",\n    },\n)"
    },
    "searchForFacetValues": {
      "default": "response = client.search_for_facet_values(\n    composition_id=\"foo\",\n    facet_name=\"brand\",\n    search_for_facet_values_request={\n        \"params\": {\n            \"maxFacetHits\": 10,\n        },\n    },\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.\nclient = CompositionClientSync(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "response = client.custom_delete(\"test/minimal\")",
      "allow del method for a custom path with all parameters": "response = client.custom_delete(\"test/all\", {query: \"parameters\"})"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "response = client.custom_get(\"test/minimal\")",
      "allow get method for a custom path with all parameters": "response = client.custom_get(\"test/all\", {query: \"parameters with space\"})",
      "requestOptions should be escaped too": "response = client.custom_get(\n  \"test/all\",\n  {query: \"to be overriden\"},\n  {\n    :header_params => {\"x-header-1\" => \"spaces are left alone\"},\n    :query_params => JSON.parse(\n      \"{\\\"query\\\":\\\"parameters with space\\\",\\\"and an array\\\":[\\\"array\\\",\\\"with spaces\\\"]}\",\n      :symbolize_names => true\n    )\n  }\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "response = client.custom_post(\"test/minimal\")",
      "allow post method for a custom path with all parameters": "response = client.custom_post(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})",
      "requestOptions can override default query parameters": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions merges query parameters with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"query2\\\":\\\"myQueryParameter\\\"}\", :symbolize_names => true)}\n)",
      "requestOptions can override default headers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions merges headers with default ones": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:header_params => {\"x-algolia-api-key\" => \"ALGOLIA_API_KEY\"}}\n)",
      "requestOptions queryParameters accepts booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"isItWorking\\\":true}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":2}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of string": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[\\\"b and c\\\",\\\"d\\\"]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of booleans": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[true,true,false]}\", :symbolize_names => true)}\n)",
      "requestOptions queryParameters accepts list of integers": "response = client.custom_post(\n  \"test/requestOptions\",\n  {query: \"parameters\"},\n  {facet: \"filters\"},\n  {:query_params => JSON.parse(\"{\\\"myParam\\\":[1,2]}\", :symbolize_names => true)}\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "response = client.custom_put(\"test/minimal\")",
      "allow put method for a custom path with all parameters": "response = client.custom_put(\"test/all\", {query: \"parameters\"}, {body: \"parameters\"})"
    },
    "deleteComposition": {
      "default": "response = client.delete_composition(\"1234\")"
    },
    "deleteCompositionRule": {
      "default": "response = client.delete_composition_rule(\"1234\", \"5678\")"
    },
    "getComposition": {
      "default": "response = client.get_composition(\"foo\")"
    },
    "getRule": {
      "default": "response = client.get_rule(\"foo\", \"123\")"
    },
    "getTask": {
      "default": "response = client.get_task(\"foo\", 42)"
    },
    "listCompositions": {
      "listCompositions": "response = client.list_compositions"
    },
    "multipleBatch": {
      "multipleBatch": "response = client.multiple_batch(\n  Algolia::Composition::BatchParams.new(\n    requests: [\n      Algolia::Composition::MultipleBatchRequest.new(\n        action: \"upsert\",\n        body: Algolia::Composition::Composition.new(\n          algolia_object_id: \"my-metadata-compo\",\n          name: \"my composition\",\n          behavior: Algolia::Composition::CompositionBehavior.new(\n            injection: Algolia::Composition::Injection.new(\n              main: Algolia::Composition::Main.new(\n                source: Algolia::Composition::CompositionSource.new(\n                  search: Algolia::Composition::CompositionSourceSearch.new(\n                    index: \"foo\",\n                    params: Algolia::Composition::MainInjectionQueryParameters.new(filters: \"brand:adidas\")\n                  )\n                )\n              ),\n              injected_items: [\n                Algolia::Composition::InjectedItem.new(\n                  key: \"injectedItem1\",\n                  source: Algolia::Composition::SearchSource.new(\n                    search: Algolia::Composition::Search.new(\n                      index: \"foo\",\n                      params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:adidas\")\n                    )\n                  ),\n                  position: 2,\n                  length: 1,\n                  metadata: Algolia::Composition::InjectedItemMetadata.new(\n                    hits: Algolia::Composition::InjectedItemHitsMetadata.new(\n                      add_item_key: true,\n                      extra: {\n                        :\"my-string\" => \"string\",\n                        :\"my-bool\" => true,\n                        :\"my-number\" => 42,\n                        :\"my-object\" => {:\"sub-key\" => \"sub-value\"}\n                      }\n                    )\n                  )\n                ),\n                Algolia::Composition::InjectedItem.new(\n                  key: \"externalItem\",\n                  source: Algolia::Composition::SearchSource.new(\n                    search: Algolia::Composition::Search.new(\n                      index: \"foo\",\n                      params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:puma\")\n                    )\n                  ),\n                  position: 5,\n                  length: 5,\n                  metadata: Algolia::Composition::InjectedItemMetadata.new(\n                    hits: Algolia::Composition::InjectedItemHitsMetadata.new(\n                      add_item_key: true,\n                      extra: {\n                        :\"my-string\" => \"string\",\n                        :\"my-bool\" => true,\n                        :\"my-number\" => 42,\n                        :\"my-object\" => {:\"sub-key\" => \"sub-value\"}\n                      }\n                    )\n                  )\n                )\n              ]\n            )\n          )\n        )\n      )\n    ]\n  )\n)"
    },
    "putComposition": {
      "putComposition": "response = client.put_composition(\n  \"my-metadata-compo\",\n  Algolia::Composition::Composition.new(\n    algolia_object_id: \"my-metadata-compo\",\n    name: \"my composition\",\n    behavior: Algolia::Composition::CompositionBehavior.new(\n      injection: Algolia::Composition::Injection.new(\n        main: Algolia::Composition::Main.new(\n          source: Algolia::Composition::CompositionSource.new(\n            search: Algolia::Composition::CompositionSourceSearch.new(\n              index: \"foo\",\n              params: Algolia::Composition::MainInjectionQueryParameters.new(filters: \"brand:adidas\")\n            )\n          )\n        ),\n        injected_items: [\n          Algolia::Composition::InjectedItem.new(\n            key: \"injectedItem1\",\n            source: Algolia::Composition::SearchSource.new(\n              search: Algolia::Composition::Search.new(\n                index: \"foo\",\n                params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:adidas\")\n              )\n            ),\n            position: 2,\n            length: 1,\n            metadata: Algolia::Composition::InjectedItemMetadata.new(\n              hits: Algolia::Composition::InjectedItemHitsMetadata.new(\n                add_item_key: true,\n                extra: {\n                  :\"my-string\" => \"string\",\n                  :\"my-bool\" => true,\n                  :\"my-number\" => 42,\n                  :\"my-object\" => {:\"sub-key\" => \"sub-value\"}\n                }\n              )\n            )\n          ),\n          Algolia::Composition::InjectedItem.new(\n            key: \"externalItem\",\n            source: Algolia::Composition::SearchSource.new(\n              search: Algolia::Composition::Search.new(\n                index: \"foo\",\n                params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:puma\")\n              )\n            ),\n            position: 5,\n            length: 5,\n            metadata: Algolia::Composition::InjectedItemMetadata.new(\n              hits: Algolia::Composition::InjectedItemHitsMetadata.new(\n                add_item_key: true,\n                extra: {\n                  :\"my-string\" => \"string\",\n                  :\"my-bool\" => true,\n                  :\"my-number\" => 42,\n                  :\"my-object\" => {:\"sub-key\" => \"sub-value\"}\n                }\n              )\n            )\n          )\n        ]\n      )\n    )\n  )\n)"
    },
    "putCompositionRule": {
      "putCompositionRule": "response = client.put_composition_rule(\n  \"compositionID\",\n  \"rule-with-exernal-source\",\n  Algolia::Composition::CompositionRule.new(\n    algolia_object_id: \"rule-with-exernal-source\",\n    description: \"my description\",\n    tags: [\"tag1\", \"tag2\"],\n    enabled: true,\n    validity: [Algolia::Composition::TimeRange.new(from: 1704063600, _until: 1704083600)],\n    conditions: [\n      Algolia::Composition::Condition.new(anchoring: \"contains\", pattern: \"harry\"),\n      Algolia::Composition::Condition.new(anchoring: \"contains\", pattern: \"potter\")\n    ],\n    consequence: Algolia::Composition::CompositionRuleConsequence.new(\n      behavior: Algolia::Composition::CompositionBehavior.new(\n        injection: Algolia::Composition::Injection.new(\n          main: Algolia::Composition::Main.new(\n            source: Algolia::Composition::CompositionSource.new(\n              search: Algolia::Composition::CompositionSourceSearch.new(\n                index: \"my-index\",\n                params: Algolia::Composition::MainInjectionQueryParameters.new(filters: \"brand:adidas\")\n              )\n            )\n          ),\n          injected_items: [\n            Algolia::Composition::InjectedItem.new(\n              key: \"injectedItem\",\n              source: Algolia::Composition::ExternalSource.new(\n                external: Algolia::Composition::External.new(\n                  index: \"my-index\",\n                  params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:adidas\"),\n                  ordering: \"userDefined\"\n                )\n              ),\n              position: 0,\n              length: 3\n            )\n          ]\n        )\n      )\n    )\n  )\n)"
    },
    "saveRules": {
      "saveRules": "response = client.save_rules(\n  \"rule-with-exernal-source\",\n  Algolia::Composition::CompositionRulesBatchParams.new(\n    requests: [\n      Algolia::Composition::RulesMultipleBatchRequest.new(\n        action: \"upsert\",\n        body: Algolia::Composition::CompositionRule.new(\n          algolia_object_id: \"rule-with-exernal-source\",\n          description: \"my description\",\n          tags: [\"tag1\", \"tag2\"],\n          enabled: true,\n          validity: [Algolia::Composition::TimeRange.new(from: 1704063600, _until: 1704083600)],\n          conditions: [\n            Algolia::Composition::Condition.new(anchoring: \"contains\", pattern: \"harry\"),\n            Algolia::Composition::Condition.new(anchoring: \"contains\", pattern: \"potter\")\n          ],\n          consequence: Algolia::Composition::CompositionRuleConsequence.new(\n            behavior: Algolia::Composition::CompositionBehavior.new(\n              injection: Algolia::Composition::Injection.new(\n                main: Algolia::Composition::Main.new(\n                  source: Algolia::Composition::CompositionSource.new(\n                    search: Algolia::Composition::CompositionSourceSearch.new(\n                      index: \"my-index\",\n                      params: Algolia::Composition::MainInjectionQueryParameters.new(filters: \"brand:adidas\")\n                    )\n                  )\n                ),\n                injected_items: [\n                  Algolia::Composition::InjectedItem.new(\n                    key: \"injectedItem\",\n                    source: Algolia::Composition::ExternalSource.new(\n                      external: Algolia::Composition::External.new(\n                        index: \"my-index\",\n                        params: Algolia::Composition::BaseInjectionQueryParameters.new(filters: \"brand:adidas\"),\n                        ordering: \"userDefined\"\n                      )\n                    ),\n                    position: 0,\n                    length: 3\n                  )\n                ]\n              )\n            )\n          )\n        )\n      )\n    ]\n  )\n)"
    },
    "search": {
      "search": "response = client.search(\n  \"foo\",\n  Algolia::Composition::RequestBody.new(\n    params: Algolia::Composition::Params.new(\n      query: \"batman\",\n      injected_items: {\n        injectedItem1: Algolia::Composition::ExternalInjectedItem.new(\n          items: [\n            Algolia::Composition::ExternalInjection.new(algolia_object_id: \"my-object-1\"),\n            Algolia::Composition::ExternalInjection.new(\n              algolia_object_id: \"my-object-2\",\n              metadata: {\n                :\"my-string\" => \"string\",\n                :\"my-bool\" => true,\n                :\"my-number\" => 42,\n                :\"my-object\" => {:\"sub-key\" => \"sub-value\"}\n              }\n            )\n          ]\n        )\n      }\n    )\n  )\n)"
    },
    "searchCompositionRules": {
      "default": "response = client.search_composition_rules(\n  \"foo\",\n  Algolia::Composition::SearchCompositionRulesParams.new(query: \"batman\")\n)"
    },
    "searchForFacetValues": {
      "default": "response = client.search_for_facet_values(\n  \"foo\",\n  \"brand\",\n  Algolia::Composition::SearchForFacetValuesRequest.new(\n    params: Algolia::Composition::SearchForFacetValuesParams.new(max_facet_hits: 10)\n  )\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::CompositionClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.CompositionClient\nimport algoliasearch.config.*"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "val response = Await.result(\n  client.customDelete[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow del method for a custom path with all parameters": "val response = Await.result(\n  client.customDelete[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\"))\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow get method for a custom path with all parameters": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters with space\"))\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions should be escaped too": "val response = Await.result(\n  client.customGet[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"to be overriden\")),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query\", \"parameters with space\")\n        .withQueryParameter(\"and an array\", Seq(\"array\", \"with spaces\"))\n        .withHeader(\"x-header-1\", \"spaces are left alone\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow post method for a custom path with all parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions can override default query parameters": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query\", \"myQueryParameter\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions merges query parameters with default ones": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"query2\", \"myQueryParameter\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions can override default headers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions merges headers with default ones": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withHeader(\"x-algolia-api-key\", \"ALGOLIA_API_KEY\")\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts booleans": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"isItWorking\", true)\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts integers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", 2)\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of string": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(\"b and c\", \"d\"))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of booleans": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(true, true, false))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)",
      "requestOptions queryParameters accepts list of integers": "val response = Await.result(\n  client.customPost[JObject](\n    path = \"test/requestOptions\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"facet\", JString(\"filters\"))))),\n    requestOptions = Some(\n      RequestOptions\n        .builder()\n        .withQueryParameter(\"myParam\", Seq(1, 2))\n        .build()\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "val response = Await.result(\n  client.customPut[JObject](\n    path = \"test/minimal\"\n  ),\n  Duration(100, \"sec\")\n)",
      "allow put method for a custom path with all parameters": "val response = Await.result(\n  client.customPut[JObject](\n    path = \"test/all\",\n    parameters = Some(Map(\"query\" -> \"parameters\")),\n    body = Some(JObject(List(JField(\"body\", JString(\"parameters\")))))\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "deleteComposition": {
      "default": "val response = Await.result(\n  client.deleteComposition(\n    compositionID = \"1234\"\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "deleteCompositionRule": {
      "default": "val response = Await.result(\n  client.deleteCompositionRule(\n    compositionID = \"1234\",\n    objectID = \"5678\"\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "getComposition": {
      "default": "val response = Await.result(\n  client.getComposition(\n    compositionID = \"foo\"\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "getRule": {
      "default": "val response = Await.result(\n  client.getRule(\n    compositionID = \"foo\",\n    objectID = \"123\"\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "getTask": {
      "default": "val response = Await.result(\n  client.getTask(\n    compositionID = \"foo\",\n    taskID = 42L\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "listCompositions": {
      "listCompositions": "val response = Await.result(\n  client.listCompositions(\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "multipleBatch": {
      "multipleBatch": "val response = Await.result(\n  client.multipleBatch(\n    batchParams = BatchParams(\n      requests = Seq(\n        MultipleBatchRequest(\n          action = Action.withName(\"upsert\"),\n          body = Composition(\n            objectID = \"my-metadata-compo\",\n            name = \"my composition\",\n            behavior = CompositionBehavior(\n              injection = Injection(\n                main = Main(\n                  source = CompositionSource(\n                    search = CompositionSourceSearch(\n                      index = \"foo\",\n                      params = Some(\n                        MainInjectionQueryParameters(\n                          filters = Some(\"brand:adidas\")\n                        )\n                      )\n                    )\n                  )\n                ),\n                injectedItems = Some(\n                  Seq(\n                    InjectedItem(\n                      key = \"injectedItem1\",\n                      source = SearchSource(\n                        search = Search(\n                          index = \"foo\",\n                          params = Some(\n                            BaseInjectionQueryParameters(\n                              filters = Some(\"brand:adidas\")\n                            )\n                          )\n                        )\n                      ),\n                      position = 2,\n                      length = 1,\n                      metadata = Some(\n                        InjectedItemMetadata(\n                          hits = Some(\n                            InjectedItemHitsMetadata(\n                              addItemKey = Some(true),\n                              extra = Some(\n                                Map(\n                                  \"my-string\" -> \"string\",\n                                  \"my-bool\" -> true,\n                                  \"my-number\" -> 42,\n                                  \"my-object\" -> JObject(\n                                    List(\n                                      JField(\"sub-key\", JString(\"sub-value\"))\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    ),\n                    InjectedItem(\n                      key = \"externalItem\",\n                      source = SearchSource(\n                        search = Search(\n                          index = \"foo\",\n                          params = Some(\n                            BaseInjectionQueryParameters(\n                              filters = Some(\"brand:puma\")\n                            )\n                          )\n                        )\n                      ),\n                      position = 5,\n                      length = 5,\n                      metadata = Some(\n                        InjectedItemMetadata(\n                          hits = Some(\n                            InjectedItemHitsMetadata(\n                              addItemKey = Some(true),\n                              extra = Some(\n                                Map(\n                                  \"my-string\" -> \"string\",\n                                  \"my-bool\" -> true,\n                                  \"my-number\" -> 42,\n                                  \"my-object\" -> JObject(\n                                    List(\n                                      JField(\"sub-key\", JString(\"sub-value\"))\n                                    )\n                                  )\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "putComposition": {
      "putComposition": "val response = Await.result(\n  client.putComposition(\n    compositionID = \"my-metadata-compo\",\n    composition = Composition(\n      objectID = \"my-metadata-compo\",\n      name = \"my composition\",\n      behavior = CompositionBehavior(\n        injection = Injection(\n          main = Main(\n            source = CompositionSource(\n              search = CompositionSourceSearch(\n                index = \"foo\",\n                params = Some(\n                  MainInjectionQueryParameters(\n                    filters = Some(\"brand:adidas\")\n                  )\n                )\n              )\n            )\n          ),\n          injectedItems = Some(\n            Seq(\n              InjectedItem(\n                key = \"injectedItem1\",\n                source = SearchSource(\n                  search = Search(\n                    index = \"foo\",\n                    params = Some(\n                      BaseInjectionQueryParameters(\n                        filters = Some(\"brand:adidas\")\n                      )\n                    )\n                  )\n                ),\n                position = 2,\n                length = 1,\n                metadata = Some(\n                  InjectedItemMetadata(\n                    hits = Some(\n                      InjectedItemHitsMetadata(\n                        addItemKey = Some(true),\n                        extra = Some(\n                          Map(\n                            \"my-string\" -> \"string\",\n                            \"my-bool\" -> true,\n                            \"my-number\" -> 42,\n                            \"my-object\" -> JObject(\n                              List(\n                                JField(\"sub-key\", JString(\"sub-value\"))\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              ),\n              InjectedItem(\n                key = \"externalItem\",\n                source = SearchSource(\n                  search = Search(\n                    index = \"foo\",\n                    params = Some(\n                      BaseInjectionQueryParameters(\n                        filters = Some(\"brand:puma\")\n                      )\n                    )\n                  )\n                ),\n                position = 5,\n                length = 5,\n                metadata = Some(\n                  InjectedItemMetadata(\n                    hits = Some(\n                      InjectedItemHitsMetadata(\n                        addItemKey = Some(true),\n                        extra = Some(\n                          Map(\n                            \"my-string\" -> \"string\",\n                            \"my-bool\" -> true,\n                            \"my-number\" -> 42,\n                            \"my-object\" -> JObject(\n                              List(\n                                JField(\"sub-key\", JString(\"sub-value\"))\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "putCompositionRule": {
      "putCompositionRule": "val response = Await.result(\n  client.putCompositionRule(\n    compositionID = \"compositionID\",\n    objectID = \"rule-with-exernal-source\",\n    compositionRule = CompositionRule(\n      objectID = \"rule-with-exernal-source\",\n      description = Some(\"my description\"),\n      tags = Some(Seq(\"tag1\", \"tag2\")),\n      enabled = Some(true),\n      validity = Some(\n        Seq(\n          TimeRange(\n            from = Some(1704063600L),\n            until = Some(1704083600L)\n          )\n        )\n      ),\n      conditions = Seq(\n        Condition(\n          anchoring = Some(Anchoring.withName(\"contains\")),\n          pattern = Some(\"harry\")\n        ),\n        Condition(\n          anchoring = Some(Anchoring.withName(\"contains\")),\n          pattern = Some(\"potter\")\n        )\n      ),\n      consequence = CompositionRuleConsequence(\n        behavior = CompositionBehavior(\n          injection = Injection(\n            main = Main(\n              source = CompositionSource(\n                search = CompositionSourceSearch(\n                  index = \"my-index\",\n                  params = Some(\n                    MainInjectionQueryParameters(\n                      filters = Some(\"brand:adidas\")\n                    )\n                  )\n                )\n              )\n            ),\n            injectedItems = Some(\n              Seq(\n                InjectedItem(\n                  key = \"injectedItem\",\n                  source = ExternalSource(\n                    external = External(\n                      index = \"my-index\",\n                      params = Some(\n                        BaseInjectionQueryParameters(\n                          filters = Some(\"brand:adidas\")\n                        )\n                      ),\n                      ordering = Some(ExternalOrdering.withName(\"userDefined\"))\n                    )\n                  ),\n                  position = 0,\n                  length = 3\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "saveRules": {
      "saveRules": "val response = Await.result(\n  client.saveRules(\n    compositionID = \"rule-with-exernal-source\",\n    rules = CompositionRulesBatchParams(\n      requests = Some(\n        Seq(\n          RulesMultipleBatchRequest(\n            action = Action.withName(\"upsert\"),\n            body = CompositionRule(\n              objectID = \"rule-with-exernal-source\",\n              description = Some(\"my description\"),\n              tags = Some(Seq(\"tag1\", \"tag2\")),\n              enabled = Some(true),\n              validity = Some(\n                Seq(\n                  TimeRange(\n                    from = Some(1704063600L),\n                    until = Some(1704083600L)\n                  )\n                )\n              ),\n              conditions = Seq(\n                Condition(\n                  anchoring = Some(Anchoring.withName(\"contains\")),\n                  pattern = Some(\"harry\")\n                ),\n                Condition(\n                  anchoring = Some(Anchoring.withName(\"contains\")),\n                  pattern = Some(\"potter\")\n                )\n              ),\n              consequence = CompositionRuleConsequence(\n                behavior = CompositionBehavior(\n                  injection = Injection(\n                    main = Main(\n                      source = CompositionSource(\n                        search = CompositionSourceSearch(\n                          index = \"my-index\",\n                          params = Some(\n                            MainInjectionQueryParameters(\n                              filters = Some(\"brand:adidas\")\n                            )\n                          )\n                        )\n                      )\n                    ),\n                    injectedItems = Some(\n                      Seq(\n                        InjectedItem(\n                          key = \"injectedItem\",\n                          source = ExternalSource(\n                            external = External(\n                              index = \"my-index\",\n                              params = Some(\n                                BaseInjectionQueryParameters(\n                                  filters = Some(\"brand:adidas\")\n                                )\n                              ),\n                              ordering = Some(ExternalOrdering.withName(\"userDefined\"))\n                            )\n                          ),\n                          position = 0,\n                          length = 3\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "search": {
      "search": "val response = Await.result(\n  client.search(\n    compositionID = \"foo\",\n    requestBody = RequestBody(\n      params = Some(\n        Params(\n          query = Some(\"batman\"),\n          injectedItems = Some(\n            Map(\n              \"injectedItem1\" -> ExternalInjectedItem(\n                items = Seq(\n                  ExternalInjection(\n                    objectID = \"my-object-1\"\n                  ),\n                  ExternalInjection(\n                    objectID = \"my-object-2\",\n                    metadata = Some(\n                      Map(\n                        \"my-string\" -> \"string\",\n                        \"my-bool\" -> true,\n                        \"my-number\" -> 42,\n                        \"my-object\" -> JObject(\n                          List(\n                            JField(\"sub-key\", JString(\"sub-value\"))\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "searchCompositionRules": {
      "default": "val response = Await.result(\n  client.searchCompositionRules(\n    compositionID = \"foo\",\n    searchCompositionRulesParams = Some(\n      SearchCompositionRulesParams(\n        query = Some(\"batman\")\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "searchForFacetValues": {
      "default": "val response = Await.result(\n  client.searchForFacetValues(\n    compositionID = \"foo\",\n    facetName = \"brand\",\n    searchForFacetValuesRequest = Some(\n      SearchForFacetValuesRequest(\n        params = Some(\n          SearchForFacetValuesParams(\n            maxFacetHits = Some(10)\n          )\n        )\n      )\n    )\n  ),\n  Duration(100, \"sec\")\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\"\n)"
    },
    "init": {
      "default": "val client = CompositionClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "swift": {
    "import": {
      "default": "import Composition"
    },
    "customDelete": {
      "allow del method for a custom path with minimal parameters": "let response = try await client.customDelete(path: \"test/minimal\")",
      "allow del method for a custom path with all parameters": "let response = try await client.customDelete(path: \"test/all\", parameters: [\"query\": AnyCodable(\"parameters\")])"
    },
    "customGet": {
      "allow get method for a custom path with minimal parameters": "let response = try await client.customGet(path: \"test/minimal\")",
      "allow get method for a custom path with all parameters": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters with space\")]\n)",
      "requestOptions should be escaped too": "let response = try await client.customGet(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"to be overriden\")],\n    requestOptions: RequestOptions(\n        headers: [\"x-header-1\": \"spaces are left alone\"],\n\n        queryParameters: [\"query\": \"parameters with space\", \"and an array\": [\"array\", \"with spaces\"]]\n    )\n)"
    },
    "customPost": {
      "allow post method for a custom path with minimal parameters": "let response = try await client.customPost(path: \"test/minimal\")",
      "allow post method for a custom path with all parameters": "let response = try await client.customPost(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)",
      "requestOptions can override default query parameters": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions merges query parameters with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"query2\": \"myQueryParameter\"]\n    )\n)",
      "requestOptions can override default headers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions merges headers with default ones": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        headers: [\"x-algolia-api-key\": \"ALGOLIA_API_KEY\"]\n    )\n)",
      "requestOptions queryParameters accepts booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"isItWorking\": true]\n    )\n)",
      "requestOptions queryParameters accepts integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": 2]\n    )\n)",
      "requestOptions queryParameters accepts list of string": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [\"b and c\", \"d\"]]\n    )\n)",
      "requestOptions queryParameters accepts list of booleans": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [true, true, false]]\n    )\n)",
      "requestOptions queryParameters accepts list of integers": "let response = try await client.customPost(\n    path: \"test/requestOptions\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"facet\": \"filters\"],\n    requestOptions: RequestOptions(\n        queryParameters: [\"myParam\": [1, 2]]\n    )\n)"
    },
    "customPut": {
      "allow put method for a custom path with minimal parameters": "let response = try await client.customPut(path: \"test/minimal\")",
      "allow put method for a custom path with all parameters": "let response = try await client.customPut(\n    path: \"test/all\",\n    parameters: [\"query\": AnyCodable(\"parameters\")],\n    body: [\"body\": \"parameters\"]\n)"
    },
    "deleteComposition": {
      "default": "let response = try await client.deleteComposition(compositionID: \"1234\")"
    },
    "deleteCompositionRule": {
      "default": "let response = try await client.deleteCompositionRule(compositionID: \"1234\", objectID: \"5678\")"
    },
    "getComposition": {
      "default": "let response = try await client.getComposition(compositionID: \"foo\")"
    },
    "getRule": {
      "default": "let response = try await client.getRule(compositionID: \"foo\", objectID: \"123\")"
    },
    "getTask": {
      "default": "let response = try await client.getTask(compositionID: \"foo\", taskID: Int64(42))"
    },
    "listCompositions": {
      "listCompositions": "let response = try await client.listCompositions()"
    },
    "multipleBatch": {
      "multipleBatch": "let response = try await client\n    .multipleBatch(batchParams: CompositionBatchParams(requests: [CompositionMultipleBatchRequest(\n        action: CompositionAction.upsert,\n        body: BatchCompositionAction.composition(Composition(\n            objectID: \"my-metadata-compo\",\n            name: \"my composition\",\n            behavior: CompositionBehavior(injection: Injection(\n                main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(\n                    index: \"foo\",\n                    params: MainInjectionQueryParameters(filters: \"brand:adidas\")\n                ))),\n                injectedItems: [\n                    InjectedItem(\n                        key: \"injectedItem1\",\n                        source: InjectedItemSource.compositionSearchSource(\n                            CompositionSearchSource(search: Search(\n                                index: \"foo\",\n                                params: BaseInjectionQueryParameters(filters: \"brand:adidas\")\n                            ))\n                        ),\n                        position: 2,\n                        length: 1,\n                        metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(\n                            addItemKey: true,\n                            extra: [\n                                \"my-string\": AnyCodable(\"string\"),\n                                \"my-bool\": true,\n                                \"my-number\": 42,\n                                \"my-object\": [\"sub-key\": \"sub-value\"],\n                            ]\n                        ))\n                    ),\n                    InjectedItem(\n                        key: \"externalItem\",\n                        source: InjectedItemSource.compositionSearchSource(\n                            CompositionSearchSource(search: Search(\n                                index: \"foo\",\n                                params: BaseInjectionQueryParameters(filters: \"brand:puma\")\n                            ))\n                        ),\n                        position: 5,\n                        length: 5,\n                        metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(\n                            addItemKey: true,\n                            extra: [\n                                \"my-string\": AnyCodable(\"string\"),\n                                \"my-bool\": true,\n                                \"my-number\": 42,\n                                \"my-object\": [\"sub-key\": \"sub-value\"],\n                            ]\n                        ))\n                    ),\n                ]\n            ))\n        ))\n    )]))"
    },
    "putComposition": {
      "putComposition": "let response = try await client.putComposition(\n    compositionID: \"my-metadata-compo\",\n    composition: Composition(\n        objectID: \"my-metadata-compo\",\n        name: \"my composition\",\n        behavior: CompositionBehavior(injection: Injection(\n            main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(\n                index: \"foo\",\n                params: MainInjectionQueryParameters(filters: \"brand:adidas\")\n            ))),\n            injectedItems: [\n                InjectedItem(\n                    key: \"injectedItem1\",\n                    source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(\n                        index: \"foo\",\n                        params: BaseInjectionQueryParameters(filters: \"brand:adidas\")\n                    ))),\n                    position: 2,\n                    length: 1,\n                    metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(\n                        addItemKey: true,\n                        extra: [\n                            \"my-string\": AnyCodable(\"string\"),\n                            \"my-bool\": true,\n                            \"my-number\": 42,\n                            \"my-object\": [\"sub-key\": \"sub-value\"],\n                        ]\n                    ))\n                ),\n                InjectedItem(\n                    key: \"externalItem\",\n                    source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(\n                        index: \"foo\",\n                        params: BaseInjectionQueryParameters(filters: \"brand:puma\")\n                    ))),\n                    position: 5,\n                    length: 5,\n                    metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(\n                        addItemKey: true,\n                        extra: [\n                            \"my-string\": AnyCodable(\"string\"),\n                            \"my-bool\": true,\n                            \"my-number\": 42,\n                            \"my-object\": [\"sub-key\": \"sub-value\"],\n                        ]\n                    ))\n                ),\n            ]\n        ))\n    )\n)"
    },
    "putCompositionRule": {
      "putCompositionRule": "let response = try await client.putCompositionRule(\n    compositionID: \"compositionID\",\n    objectID: \"rule-with-exernal-source\",\n    compositionRule: CompositionRule(\n        objectID: \"rule-with-exernal-source\",\n        conditions: [\n            CompositionCondition(pattern: \"harry\", anchoring: CompositionAnchoring.contains),\n            CompositionCondition(pattern: \"potter\", anchoring: CompositionAnchoring.contains),\n        ],\n        consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(\n            main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(\n                index: \"my-index\",\n                params: MainInjectionQueryParameters(filters: \"brand:adidas\")\n            ))),\n            injectedItems: [InjectedItem(\n                key: \"injectedItem\",\n                source: InjectedItemSource.externalSource(ExternalSource(external: External(\n                    index: \"my-index\",\n                    params: BaseInjectionQueryParameters(filters: \"brand:adidas\"),\n                    ordering: ExternalOrdering.userDefined\n                ))),\n                position: 0,\n                length: 3\n            )]\n        ))),\n        description: \"my description\",\n        enabled: true,\n        validity: [CompositionTimeRange(from: Int64(1_704_063_600), until: Int64(1_704_083_600))],\n        tags: [\"tag1\", \"tag2\"]\n    )\n)"
    },
    "saveRules": {
      "saveRules": "let response = try await client.saveRules(\n    compositionID: \"rule-with-exernal-source\",\n    rules: CompositionRulesBatchParams(requests: [RulesMultipleBatchRequest(\n        action: CompositionAction.upsert,\n        body: RulesBatchCompositionAction.compositionRule(CompositionRule(\n            objectID: \"rule-with-exernal-source\",\n            conditions: [\n                CompositionCondition(pattern: \"harry\", anchoring: CompositionAnchoring.contains),\n                CompositionCondition(pattern: \"potter\", anchoring: CompositionAnchoring.contains),\n            ],\n            consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(\n                main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(\n                    index: \"my-index\",\n                    params: MainInjectionQueryParameters(filters: \"brand:adidas\")\n                ))),\n                injectedItems: [InjectedItem(\n                    key: \"injectedItem\",\n                    source: InjectedItemSource.externalSource(ExternalSource(external: External(\n                        index: \"my-index\",\n                        params: BaseInjectionQueryParameters(filters: \"brand:adidas\"),\n                        ordering: ExternalOrdering.userDefined\n                    ))),\n                    position: 0,\n                    length: 3\n                )]\n            ))),\n            description: \"my description\",\n            enabled: true,\n            validity: [CompositionTimeRange(from: Int64(1_704_063_600), until: Int64(1_704_083_600))],\n            tags: [\"tag1\", \"tag2\"]\n        ))\n    )])\n)"
    },
    "search": {
      "search": "let response: CompositionSearchResponse<CompositionHit> = try await client.search(\n    compositionID: \"foo\",\n    requestBody: RequestBody(params: CompositionParams(\n        query: \"batman\",\n        injectedItems: [\"injectedItem1\": ExternalInjectedItem(items: [\n            ExternalInjection(objectID: \"my-object-1\"),\n            ExternalInjection(\n                objectID: \"my-object-2\",\n                metadata: [\n                    \"my-string\": AnyCodable(\"string\"),\n                    \"my-bool\": true,\n                    \"my-number\": 42,\n                    \"my-object\": [\"sub-key\": \"sub-value\"],\n                ]\n            ),\n        ])]\n    ))\n)"
    },
    "searchCompositionRules": {
      "default": "let response = try await client.searchCompositionRules(\n    compositionID: \"foo\",\n    searchCompositionRulesParams: SearchCompositionRulesParams(query: \"batman\")\n)"
    },
    "searchForFacetValues": {
      "default": "let response = try await client.searchForFacetValues(\n    compositionID: \"foo\",\n    facetName: \"brand\",\n    searchForFacetValuesRequest: CompositionSearchForFacetValuesRequest(\n        params: SearchForFacetValuesParams(maxFacetHits: 10)\n    )\n)"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try CompositionClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\")"
    }
  }
}