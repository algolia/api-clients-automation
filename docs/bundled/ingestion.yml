openapi: 3.0.2
info:
  title: Ingestion API
  description: >
    The Ingestion API lets you connect third-party services and platforms with
    Algolia and schedule tasks to ingest your data.

    The Ingestion API powers the no-code [data
    connectors](https://dashboard.algolia.com/connectors).


    ## Base URLs


    The base URLs for requests to the Ingestion API are:


    - `https://data.us.algolia.com`

    - `https://data.eu.algolia.com`


    Use the URL that matches your [analytics
    region](https://dashboard.algolia.com/account/infrastructure/analytics).


    **All requests must use HTTPS.**


    ## Authentication


    To authenticate your API requests, add these headers:


    - `x-algolia-application-id`. Your Algolia application ID.

    - `x-algolia-api-key`. An API key with the necessary permissions to make the
    request.
      The required access control list (ACL) to make a request is listed in each endpoint's reference.

    You can find your application ID and API key in the [Algolia
    dashboard](https://dashboard.algolia.com/account/api-keys).


    ## Request format


    Request bodies must be JSON objects.


    ## Response status and errors


    Response bodies are JSON objects.


    Successful responses return a `2xx` status. Client errors return a `4xx`
    status. Server errors are indicated by a `5xx` status.

    Error responses have a `message` property with more information.


    ## Version


    The current version of the Ingestion API is version 1, as indicated by the
    `/1/` in each endpoint's URL.
  version: 1.0.0
servers:
  - url: https://data.{region}.algolia.com
    variables:
      region:
        description: The region where your Algolia application is hosted.
        enum:
          - eu
          - us
        default: us
security:
  - appId: []
    apiKey: []
tags:
  - name: authentications
    x-displayName: Authentications
    description: >-
      Authentication resources describe how to connect to a source or
      destination.
  - name: destinations
    x-displayName: Destinations
    description: >
      Destinations are Algolia products or features where your data should be
      used, such as a search index or events.

      Algolia destinations require authentication with the `algolia` type.

      You can reference authentications by their ID when creating destinations.
  - name: observability
    x-displayName: Observability
    description: >-
      Check the status and details of your task runs. A run is one instance of a
      configured task.
  - name: sources
    x-displayName: Sources
    description: >
      Sources are third-party platforms or services from where you want to
      ingest your data.

      Sources may require authentication. To interact with such sources, you can
      reference an authentication resource by its ID.
  - name: tasks
    x-displayName: Tasks
    description: >
      Tasks contain information how your data should be read from a source and
      stored in a destination.

      Tasks have _triggers_ which determine when the task should run.
  - name: transformations
    x-displayName: Transformations
    description: >
      Transformations allows you to transform a record before it gets indexed in
      Algolia.
paths:
  /{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CustomGetAsync("test/minimal");

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomGet(client.NewApiCustomGetRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Object response = client.customGet("test/minimal");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.customGet({ path: 'test/minimal' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.customGet(path = "test/minimal")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customGet(
                'test/minimal',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_get(
                path="test/minimal",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_get("test/minimal")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.customGet[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customGet(path: "test/minimal")


            // print the response

            print(response)
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CustomPostAsync("test/minimal");

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPost(client.NewApiCustomPostRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Object response = client.customPost("test/minimal");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.customPost({ path: 'test/minimal' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.customPost(path = "test/minimal")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customPost(
                'test/minimal',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_post(
                path="test/minimal",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_post("test/minimal")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.customPost[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customPost(path: "test/minimal")


            // print the response

            print(response)
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CustomPutAsync("test/minimal");

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPut(client.NewApiCustomPutRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Object response = client.customPut("test/minimal");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.customPut({ path: 'test/minimal' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.customPut(path = "test/minimal")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customPut(
                'test/minimal',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_put(
                path="test/minimal",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_put("test/minimal")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.customPut[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customPut(path: "test/minimal")


            // print the response

            print(response)
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API
      description: This method lets you send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("test/minimal");

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CustomDelete(client.NewApiCustomDeleteRequest(
              "test/minimal"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Object response = client.customDelete("test/minimal");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.customDelete({ path: 'test/minimal'
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.customDelete(path = "test/minimal")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->customDelete(
                'test/minimal',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.custom_delete(
                path="test/minimal",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.custom_delete("test/minimal")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.customDelete[JObject](
                path = "test/minimal"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.customDelete(path: "test/minimal")


            // print the response

            print(response)
  /1/push/{indexName}:
    post:
      tags:
        - tasks
      summary: Push records by indexName
      description: >
        Pushes records through the Pipeline, directly to an index. You can make
        the call synchronous by providing the `watch` parameter, for
        asynchronous calls, you can use the observability endpoints and/or
        debugger dashboard to see the status of your task.

        If you want to leverage the [pre-indexing data
        transformation](https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/how-to/transform-your-data),
        this is the recommended way of ingesting your records.

        This method is similar to `pushTask`, but requires an `indexName`
        instead of a `taskID`. If zero or many tasks are found, an error will be
        returned.
      operationId: push
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      x-timeouts:
        connect: 180000
        read: 180000
        write: 180000
      parameters:
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/watch'
        - name: referenceIndexName
          in: query
          description: >-
            This is required when targeting an index that does not have a push
            connector setup (e.g. a tmp index), but you wish to attach another
            index's transformation to it (e.g. the source index name).
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushTaskPayload'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.PushAsync(
              "<YOUR_INDEX_NAME>",
              new PushTaskPayload
              {
                Action = Enum.Parse<Action>("AddObject"),
                Records = new List<PushTaskRecords>
                {
                  new PushTaskRecords
                  {
                    ObjectID = "o",
                    AdditionalProperties = new Dictionary<string, object>
                    {
                      { "key", "bar" },
                      { "foo", "1" },
                    },
                  },
                  new PushTaskRecords
                  {
                    ObjectID = "k",
                    AdditionalProperties = new Dictionary<string, object>
                    {
                      { "key", "baz" },
                      { "foo", "2" },
                    },
                  },
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.Push(client.NewApiPushRequest(
              "<YOUR_INDEX_NAME>",
              ingestion.NewEmptyPushTaskPayload().SetAction(ingestion.Action("addObject")).SetRecords(
                []ingestion.PushTaskRecords{
                  *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
                  *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
                }),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            WatchResponse response = client.push(
              "<YOUR_INDEX_NAME>",
              new PushTaskPayload()
                .setAction(Action.ADD_OBJECT)
                .setRecords(
                  Arrays.asList(
                    new PushTaskRecords().setAdditionalProperty("key", "bar").setAdditionalProperty("foo", "1").setObjectID("o"),
                    new PushTaskRecords().setAdditionalProperty("key", "baz").setAdditionalProperty("foo", "2").setObjectID("k")
                  )
                )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.push({
              indexName: 'foo',
              pushTaskPayload: {
                action: 'addObject',
                records: [
                  { key: 'bar', foo: '1', objectID: 'o' },
                  { key: 'baz', foo: '2', objectID: 'k' },
                ],
              },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.push(
                indexName = "<YOUR_INDEX_NAME>",
                pushTaskPayload =
                  PushTaskPayload(
                    action = Action.entries.first { it.value == "addObject" },
                    records =
                      listOf(
                        PushTaskRecords(
                          objectID = "o",
                          additionalProperties =
                            mapOf("key" to JsonPrimitive("bar"), "foo" to JsonPrimitive("1")),
                        ),
                        PushTaskRecords(
                          objectID = "k",
                          additionalProperties =
                            mapOf("key" to JsonPrimitive("baz"), "foo" to JsonPrimitive("2")),
                        ),
                      ),
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->push(
                '<YOUR_INDEX_NAME>',
                ['action' => 'addObject',
                    'records' => [
                        ['key' => 'bar',
                            'foo' => '1',
                            'objectID' => 'o',
                        ],

                        ['key' => 'baz',
                            'foo' => '2',
                            'objectID' => 'k',
                        ],
                    ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.push(
                index_name="<YOUR_INDEX_NAME>",
                push_task_payload={
                    "action": "addObject",
                    "records": [
                        {
                            "key": "bar",
                            "foo": "1",
                            "objectID": "o",
                        },
                        {
                            "key": "baz",
                            "foo": "2",
                            "objectID": "k",
                        },
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.push(
              "<YOUR_INDEX_NAME>",
              Algolia::Ingestion::PushTaskPayload.new(
                action: "addObject",
                records: [
                  Algolia::Ingestion::PushTaskRecords.new(key: "bar", foo: "1", algolia_object_id: "o"),
                  Algolia::Ingestion::PushTaskRecords.new(key: "baz", foo: "2", algolia_object_id: "k")
                ]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.push(
                indexName = "<YOUR_INDEX_NAME>",
                pushTaskPayload = PushTaskPayload(
                  action = Action.withName("addObject"),
                  records = Seq(
                    PushTaskRecords(
                      objectID = "o",
                      additionalProperties = Some(List(JField("key", JString("bar")), JField("foo", JString("1"))))
                    ),
                    PushTaskRecords(
                      objectID = "k",
                      additionalProperties = Some(List(JField("key", JString("baz")), JField("foo", JString("2"))))
                    )
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.push(
                indexName: "<YOUR_INDEX_NAME>",
                pushTaskPayload: PushTaskPayload(
                    action: IngestionAction.addObject,
                    records: [
                        PushTaskRecords(from: [
                            "objectID": AnyCodable("o"),
                            "key": AnyCodable("bar"),
                            "foo": AnyCodable("1"),
                        ]),
                        PushTaskRecords(from: [
                            "objectID": AnyCodable("k"),
                            "key": AnyCodable("baz"),
                            "foo": AnyCodable("2"),
                        ]),
                    ]
                )
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url 'https://data.us.algolia.com/1/push/ALGOLIA_INDEX_NAME?watch=true&referenceIndexName=lorem' \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"action":"addObject","records":[{"objectID":"test-record-123"}]}'
  /1/authentications:
    get:
      tags:
        - authentications
      summary: List authentication resources
      description: Retrieves a list of all authentication resources.
      operationId: listAuthentications
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listAuthenticationsResponse
                type: object
                additionalProperties: false
                properties:
                  authentications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Authentication'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - authentications
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListAuthenticationsAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListAuthentications(client.NewApiListAuthenticationsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListAuthenticationsResponse response = client.listAuthentications();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listAuthentications();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listAuthentications()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listAuthentications();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_authentications()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_authentications



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listAuthentications(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listAuthentications()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/authentications?itemsPerPage=10&page=1&type=basic%2Coauth&platform=commercetools%2Cnone&sort=createdAt&order=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - authentications
      summary: Create an authentication resource
      description: Creates a new authentication resource.
      operationId: createAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateAuthenticationAsync(
              new AuthenticationCreate
              {
                Type = Enum.Parse<AuthenticationType>("Oauth"),
                Name = "authName",
                Input = new AuthInput(
                  new AuthOAuth
                  {
                    Url = "http://test.oauth",
                    ClientId = "myID",
                    ClientSecret = "mySecret",
                  }
                ),
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CreateAuthentication(client.NewApiCreateAuthenticationRequest(
              ingestion.NewEmptyAuthenticationCreate().
                SetType(ingestion.AuthenticationType("oauth")).
                SetName("authName").
                SetInput(ingestion.AuthOAuthAsAuthInput(
                  ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret"))),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            AuthenticationCreateResponse response = client.createAuthentication(
              new AuthenticationCreate()
                .setType(AuthenticationType.OAUTH)
                .setName("authName")
                .setInput(new AuthOAuth().setUrl("http://test.oauth").setClientId("myID").setClientSecret("mySecret"))
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createAuthentication({
              type: 'oauth',
              name: 'authName',
              input: { url: 'http://test.oauth', client_id: 'myID', client_secret: 'mySecret' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createAuthentication(
                authenticationCreate =
                  AuthenticationCreate(
                    type = AuthenticationType.entries.first { it.value == "oauth" },
                    name = "authName",
                    input =
                      AuthOAuth(url = "http://test.oauth", clientId = "myID", clientSecret = "mySecret"),
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createAuthentication(
                ['type' => 'oauth',
                    'name' => 'authName',
                    'input' => ['url' => 'http://test.oauth',
                        'client_id' => 'myID',
                        'client_secret' => 'mySecret',
                    ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_authentication(
                authentication_create={
                    "type": "oauth",
                    "name": "authName",
                    "input": {
                        "url": "http://test.oauth",
                        "client_id": "myID",
                        "client_secret": "mySecret",
                    },
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_authentication(
              Algolia::Ingestion::AuthenticationCreate.new(
                type: "oauth",
                name: "authName",
                input: Algolia::Ingestion::AuthOAuth.new(url: "http://test.oauth", client_id: "myID", client_secret: "mySecret")
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createAuthentication(
                authenticationCreate = AuthenticationCreate(
                  `type` = AuthenticationType.withName("oauth"),
                  name = "authName",
                  input = AuthOAuth(
                    url = "http://test.oauth",
                    clientId = "myID",
                    clientSecret = "mySecret"
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.createAuthentication(authenticationCreate:
            AuthenticationCreate(
                type: AuthenticationType.oauth,
                name: "authName",
                input: AuthInput.authOAuth(AuthOAuth(url: "http://test.oauth", clientId: "myID", clientSecret: "mySecret"))
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/authentications \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"googleServiceAccount","name":"lorem","platform":"bigcommerce","input":{"clientEmail":"service-account-name@project-id.iam.gserviceaccount.com","privateKey":"lorem"}}'
  /1/authentications/search:
    post:
      tags:
        - authentications
      summary: Search for authentication resources
      description: Searches for authentication resources.
      operationId: searchAuthentications
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchAuthenticationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchAuthenticationsAsync(
              new AuthenticationSearch
              {
                AuthenticationIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.SearchAuthentications(client.NewApiSearchAuthenticationsRequest(

              ingestion.NewEmptyAuthenticationSearch().SetAuthenticationIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchAuthentications(
              new AuthenticationSearch().setAuthenticationIDs(
                Arrays.asList("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
              )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchAuthentications({
              authenticationIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchAuthentications(
                authenticationSearch =
                  AuthenticationSearch(
                    authenticationIDs =
                      listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchAuthentications(
                ['authenticationIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_authentications(
                authentication_search={
                    "authenticationIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_authentications(
              Algolia::Ingestion::AuthenticationSearch.new(
                authentication_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchAuthentications(
                authenticationSearch = AuthenticationSearch(
                  authenticationIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client
                .searchAuthentications(authenticationSearch: AuthenticationSearch(authenticationIDs: [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ]))

            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/authentications/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/authentications/{authenticationID}:
    get:
      tags:
        - authentications
      summary: Retrieve an authentication resource
      description: Retrieves an authentication resource by its ID.
      operationId: getAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetAuthenticationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetAuthentication(client.NewApiGetAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Authentication response =
            client.getAuthentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getAuthentication({ authenticationID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.getAuthentication(authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.get_authentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getAuthentication(
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getAuthentication(authenticationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    patch:
      tags:
        - authentications
      summary: Update an authentication resource
      description: Updates an authentication resource.
      operationId: updateAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateAuthenticationAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new AuthenticationUpdate { Name = "newName" }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.UpdateAuthentication(client.NewApiUpdateAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyAuthenticationUpdate().SetName("newName")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            AuthenticationUpdateResponse response = client.updateAuthentication(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new AuthenticationUpdate().setName("newName")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateAuthentication({
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              authenticationUpdate: { name: 'newName' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateAuthentication(
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authenticationUpdate = AuthenticationUpdate(name = "newName"),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authentication_update={
                    "name": "newName",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_authentication(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::AuthenticationUpdate.new(name: "newName")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateAuthentication(
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authenticationUpdate = AuthenticationUpdate(
                  name = Some("newName")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateAuthentication(
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authenticationUpdate: AuthenticationUpdate(name: "newName")
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PATCH \
              --url https://data.us.algolia.com/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"googleServiceAccount","name":"lorem","input":{"clientEmail":"service-account-name@project-id.iam.gserviceaccount.com","privateKey":"lorem"}}'
    delete:
      tags:
        - authentications
      summary: Delete an authentication resource
      description: >-
        Deletes an authentication resource. You can't delete authentication
        resources that are used by a source or a destination.
      operationId: deleteAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteAuthenticationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteAuthentication(client.NewApiDeleteAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteAuthentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteAuthentication({
            authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.deleteAuthentication(authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_authentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteAuthentication(
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.deleteAuthentication(authenticationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/destinations:
    get:
      tags:
        - destinations
      summary: List destinations
      description: Retrieves a list of destinations.
      operationId: listDestinations
      x-mcp-tool: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/destinationParameters_type'
        - $ref: '#/components/parameters/authenticationID'
        - $ref: '#/components/parameters/transformationID'
        - $ref: '#/components/parameters/destinationParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listDestinationsResponse
                type: object
                additionalProperties: false
                properties:
                  destinations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Destination'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - destinations
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListDestinationsAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListDestinations(client.NewApiListDestinationsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListDestinationsResponse response = client.listDestinations();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listDestinations();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listDestinations()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listDestinations();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_destinations()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_destinations



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listDestinations(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listDestinations()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/destinations?itemsPerPage=10&page=1&type=search&authenticationID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&transformationID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&sort=type&order=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - destinations
      summary: Create a destination
      description: Creates a new destination.
      operationId: createDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateDestinationAsync(
              new DestinationCreate
              {
                Type = Enum.Parse<DestinationType>("Search"),
                Name = "destinationName",
                Input = new DestinationInput { IndexName = "<YOUR_INDEX_NAME>" },
                AuthenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CreateDestination(client.NewApiCreateDestinationRequest(

              ingestion.NewEmptyDestinationCreate().SetType(ingestion.DestinationType("search")).SetName("destinationName").SetInput(
                ingestion.NewEmptyDestinationInput().SetIndexName("<YOUR_INDEX_NAME>")).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DestinationCreateResponse response = client.createDestination(
              new DestinationCreate()
                .setType(DestinationType.SEARCH)
                .setName("destinationName")
                .setInput(new DestinationInput().setIndexName("<YOUR_INDEX_NAME>"))
                .setAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createDestination({
              type: 'search',
              name: 'destinationName',
              input: { indexName: 'full_name______' },
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createDestination(
                destinationCreate =
                  DestinationCreate(
                    type = DestinationType.entries.first { it.value == "search" },
                    name = "destinationName",
                    input = DestinationInput(indexName = "<YOUR_INDEX_NAME>"),
                    authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createDestination(
                ['type' => 'search',
                    'name' => 'destinationName',
                    'input' => ['indexName' => '<YOUR_INDEX_NAME>',
                    ],
                    'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_destination(
                destination_create={
                    "type": "search",
                    "name": "destinationName",
                    "input": {
                        "indexName": "<YOUR_INDEX_NAME>",
                    },
                    "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_destination(
              Algolia::Ingestion::DestinationCreate.new(
                type: "search",
                name: "destinationName",
                input: Algolia::Ingestion::DestinationInput.new(index_name: "<YOUR_INDEX_NAME>"),
                authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createDestination(
                destinationCreate = DestinationCreate(
                  `type` = DestinationType.withName("search"),
                  name = "destinationName",
                  input = DestinationInput(
                    indexName = "<YOUR_INDEX_NAME>"
                  ),
                  authenticationID = Some("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.createDestination(destinationCreate:
            DestinationCreate(
                type: DestinationType.search,
                name: "destinationName",
                input: DestinationInput(indexName: "<YOUR_INDEX_NAME>"),
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/destinations \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"search","name":"lorem","input":{"indexName":"lorem","recordType":"product","attributesToExclude":["lorem"]},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/destinations/search:
    post:
      tags:
        - destinations
      summary: Search for destinations
      description: Searches for destinations.
      operationId: searchDestinations
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchDestinationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchDestinationsAsync(
              new DestinationSearch
              {
                DestinationIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.SearchDestinations(client.NewApiSearchDestinationsRequest(

              ingestion.NewEmptyDestinationSearch().SetDestinationIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchDestinations(
              new DestinationSearch().setDestinationIDs(
                Arrays.asList("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
              )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchDestinations({
              destinationIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchDestinations(
                destinationSearch =
                  DestinationSearch(
                    destinationIDs =
                      listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchDestinations(
                ['destinationIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_destinations(
                destination_search={
                    "destinationIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_destinations(
              Algolia::Ingestion::DestinationSearch.new(
                destination_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchDestinations(
                destinationSearch = DestinationSearch(
                  destinationIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.searchDestinations(destinationSearch:
            DestinationSearch(destinationIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
            ]))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/destinations/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"destinationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/destinations/{destinationID}:
    get:
      tags:
        - destinations
      summary: Retrieve a destination
      description: Retrieves a destination by its ID.
      operationId: getDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetDestinationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetDestination(client.NewApiGetDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Destination response =
            client.getDestination("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getDestination({ destinationID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.getDestination(destinationID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.get_destination("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getDestination(
                destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getDestination(destinationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    patch:
      tags:
        - destinations
      summary: Update a destination
      description: Updates the destination by its ID.
      operationId: updateDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateDestinationAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new DestinationUpdate { Name = "newName" }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.UpdateDestination(client.NewApiUpdateDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyDestinationUpdate().SetName("newName")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DestinationUpdateResponse response = client.updateDestination(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new DestinationUpdate().setName("newName")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateDestination({
              destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              destinationUpdate: { name: 'newName' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateDestination(
                destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destinationUpdate = DestinationUpdate(name = "newName"),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destination_update={
                    "name": "newName",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_destination(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::DestinationUpdate.new(name: "newName")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateDestination(
                destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destinationUpdate = DestinationUpdate(
                  name = Some("newName")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateDestination(
                destinationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destinationUpdate: DestinationUpdate(name: "newName")
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PATCH \
              --url https://data.us.algolia.com/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"search","name":"lorem","input":{"indexName":"lorem","recordType":"product","attributesToExclude":["lorem"]},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
    delete:
      tags:
        - destinations
      summary: Delete a destination
      description: >-
        Deletes a destination by its ID. You can't delete destinations that are
        referenced in tasks.
      operationId: deleteDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteDestinationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteDestination(client.NewApiDeleteDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteDestination("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteDestination({ destinationID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.deleteDestination(destinationID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_destination("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteDestination(
                destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.deleteDestination(destinationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/sources:
    get:
      tags:
        - sources
      summary: List sources
      description: Retrieves a list of sources.
      operationId: listSources
      x-mcp-tool: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sourceParameters_type'
        - $ref: '#/components/parameters/sourceParameters_authenticationID'
        - $ref: '#/components/parameters/sourceParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listSourcesResponse
                type: object
                additionalProperties: false
                properties:
                  sources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - sources
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListSourcesAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListSources(client.NewApiListSourcesRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListSourcesResponse response = client.listSources();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listSources();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listSources()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listSources();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_sources()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_sources



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listSources(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listSources()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/sources?itemsPerPage=10&page=1&type=commercetools%2Cbigcommerce&authenticationID=10000000-0a75-4000-a000-000000000001%2Cnone&sort=createdAt&order=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - sources
      summary: Create a source
      description: Creates a new source.
      operationId: createSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateSourceAsync(
              new SourceCreate
              {
                Type = Enum.Parse<SourceType>("Commercetools"),
                Name = "sourceName",
                Input = new SourceInput(
                  new SourceCommercetools
                  {
                    StoreKeys = new List<string> { "myStore" },
                    Locales = new List<string> { "de" },
                    Url = "http://commercetools.com",
                    ProjectKey = "keyID",
                    ProductQueryPredicate =
                      "masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))",
                  }
                ),
                AuthenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CreateSource(client.NewApiCreateSourceRequest(
              ingestion.NewEmptySourceCreate().
                SetType(ingestion.SourceType("commercetools")).
                SetName("sourceName").
                SetInput(ingestion.SourceCommercetoolsAsSourceInput(
                  ingestion.NewEmptySourceCommercetools().SetStoreKeys(
                    []string{"myStore"}).SetLocales(
                    []string{
                      "de",
                    }).
                    SetUrl("http://commercetools.com").
                    SetProjectKey("keyID").SetProductQueryPredicate("masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))"))).
                SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            SourceCreateResponse response = client.createSource(
              new SourceCreate()
                .setType(SourceType.COMMERCETOOLS)
                .setName("sourceName")
                .setInput(
                  new SourceCommercetools()
                    .setStoreKeys(Arrays.asList("myStore"))
                    .setLocales(Arrays.asList("de"))
                    .setUrl("http://commercetools.com")
                    .setProjectKey("keyID")
                    .setProductQueryPredicate("masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))")
                )
                .setAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createSource({
              type: 'commercetools',
              name: 'sourceName',
              input: {
                storeKeys: ['myStore'],
                locales: ['de'],
                url: 'http://commercetools.com',
                projectKey: 'keyID',
                productQueryPredicate: 'masterVariant(attributes(name="Brand" and value="Algolia"))',
              },
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createSource(
                sourceCreate =
                  SourceCreate(
                    type = SourceType.entries.first { it.value == "commercetools" },
                    name = "sourceName",
                    input =
                      SourceCommercetools(
                        storeKeys = listOf("myStore"),
                        locales = listOf("de"),
                        url = "http://commercetools.com",
                        projectKey = "keyID",
                        productQueryPredicate =
                          "masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))",
                      ),
                    authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createSource(
                ['type' => 'commercetools',
                    'name' => 'sourceName',
                    'input' => ['storeKeys' => [
                        'myStore',
                    ],
                        'locales' => [
                            'de',
                        ],
                        'url' => 'http://commercetools.com',
                        'projectKey' => 'keyID',
                        'productQueryPredicate' => 'masterVariant(attributes(name="Brand" and value="Algolia"))',
                    ],
                    'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_source(
                source_create={
                    "type": "commercetools",
                    "name": "sourceName",
                    "input": {
                        "storeKeys": [
                            "myStore",
                        ],
                        "locales": [
                            "de",
                        ],
                        "url": "http://commercetools.com",
                        "projectKey": "keyID",
                        "productQueryPredicate": 'masterVariant(attributes(name="Brand" and value="Algolia"))',
                    },
                    "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_source(
              Algolia::Ingestion::SourceCreate.new(
                type: "commercetools",
                name: "sourceName",
                input: Algolia::Ingestion::SourceCommercetools.new(
                  store_keys: ["myStore"],
                  locales: ["de"],
                  url: "http://commercetools.com",
                  project_key: "keyID",
                  product_query_predicate: "masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))"
                ),
                authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createSource(
                sourceCreate = SourceCreate(
                  `type` = SourceType.withName("commercetools"),
                  name = "sourceName",
                  input = Some(
                    SourceCommercetools(
                      storeKeys = Some(Seq("myStore")),
                      locales = Some(Seq("de")),
                      url = "http://commercetools.com",
                      projectKey = "keyID",
                      productQueryPredicate = Some("masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))")
                    )
                  ),
                  authenticationID = Some("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.createSource(sourceCreate:
            SourceCreate(
                type: SourceType.commercetools,
                name: "sourceName",
                input: SourceInput.sourceCommercetools(SourceCommercetools(
                    storeKeys: ["myStore"],
                    locales: ["de"],
                    url: "http://commercetools.com",
                    projectKey: "keyID",
                    productQueryPredicate: "masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))"
                )),
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"bigcommerce","name":"lorem","input":{"storeKeys":["lorem"],"locales":["fr-FR"],"url":"lorem","projectKey":"lorem","fallbackIsInStockValue":true,"productQueryPredicate":"lorem","customFields":{"inventory":["lorem"],"price":["lorem"],"category":["lorem"]}},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'
  /1/sources/validate:
    post:
      tags:
        - sources
      summary: Validate a source payload
      description: >
        Validates a source payload to ensure it can be created and that the data
        source can be reached by Algolia.
      operationId: validateSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      x-timeouts:
        connect: 180000
        read: 180000
        write: 180000
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ValidateSourceAsync(
              new SourceCreate
              {
                Type = Enum.Parse<SourceType>("Commercetools"),
                Name = "sourceName",
                Input = new SourceInput(
                  new SourceCommercetools
                  {
                    StoreKeys = new List<string> { "myStore" },
                    Locales = new List<string> { "de" },
                    Url = "http://commercetools.com",
                    ProjectKey = "keyID",
                  }
                ),
                AuthenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ValidateSource(client.NewApiValidateSourceRequest().WithSourceCreate(
              ingestion.NewEmptySourceCreate().
                SetType(ingestion.SourceType("commercetools")).
                SetName("sourceName").
                SetInput(ingestion.SourceCommercetoolsAsSourceInput(
                  ingestion.NewEmptySourceCommercetools().SetStoreKeys(
                    []string{"myStore"}).SetLocales(
                    []string{
                      "de",
                    }).
                    SetUrl("http://commercetools.com").SetProjectKey("keyID"))).
                SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
            ),

            )

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            WatchResponse response = client.validateSource(
              new SourceCreate()
                .setType(SourceType.COMMERCETOOLS)
                .setName("sourceName")
                .setInput(
                  new SourceCommercetools()
                    .setStoreKeys(Arrays.asList("myStore"))
                    .setLocales(Arrays.asList("de"))
                    .setUrl("http://commercetools.com")
                    .setProjectKey("keyID")
                )
                .setAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.validateSource({
              type: 'commercetools',
              name: 'sourceName',
              input: { storeKeys: ['myStore'], locales: ['de'], url: 'http://commercetools.com', projectKey: 'keyID' },
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.validateSource(
                sourceCreate =
                  SourceCreate(
                    type = SourceType.entries.first { it.value == "commercetools" },
                    name = "sourceName",
                    input =
                      SourceCommercetools(
                        storeKeys = listOf("myStore"),
                        locales = listOf("de"),
                        url = "http://commercetools.com",
                        projectKey = "keyID",
                      ),
                    authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->validateSource(
                ['type' => 'commercetools',
                    'name' => 'sourceName',
                    'input' => ['storeKeys' => [
                        'myStore',
                    ],
                        'locales' => [
                            'de',
                        ],
                        'url' => 'http://commercetools.com',
                        'projectKey' => 'keyID',
                    ],
                    'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.validate_source(
                source_create={
                    "type": "commercetools",
                    "name": "sourceName",
                    "input": {
                        "storeKeys": [
                            "myStore",
                        ],
                        "locales": [
                            "de",
                        ],
                        "url": "http://commercetools.com",
                        "projectKey": "keyID",
                    },
                    "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.validate_source(
              Algolia::Ingestion::SourceCreate.new(
                type: "commercetools",
                name: "sourceName",
                input: Algolia::Ingestion::SourceCommercetools.new(
                  store_keys: ["myStore"],
                  locales: ["de"],
                  url: "http://commercetools.com",
                  project_key: "keyID"
                ),
                authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.validateSource(
                sourceCreate = Some(
                  SourceCreate(
                    `type` = SourceType.withName("commercetools"),
                    name = "sourceName",
                    input = Some(
                      SourceCommercetools(
                        storeKeys = Some(Seq("myStore")),
                        locales = Some(Seq("de")),
                        url = "http://commercetools.com",
                        projectKey = "keyID"
                      )
                    ),
                    authenticationID = Some("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.validateSource(sourceCreate:
            SourceCreate(
                type: SourceType.commercetools,
                name: "sourceName",
                input: SourceInput.sourceCommercetools(SourceCommercetools(
                    storeKeys: ["myStore"],
                    locales: ["de"],
                    url: "http://commercetools.com",
                    projectKey: "keyID"
                )),
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources/validate \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"type":"bigcommerce","name":"lorem","input":{"storeKeys":["lorem"],"locales":["fr-FR"],"url":"lorem","projectKey":"lorem","fallbackIsInStockValue":true,"productQueryPredicate":"lorem","customFields":{"inventory":["lorem"],"price":["lorem"],"category":["lorem"]}},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'
  /1/sources/search:
    post:
      tags:
        - sources
      summary: Search for sources
      description: Searches for sources.
      operationId: searchSources
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchSourcesResponse
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchSourcesAsync(
              new SourceSearch
              {
                SourceIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.SearchSources(client.NewApiSearchSourcesRequest(

              ingestion.NewEmptySourceSearch().SetSourceIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchSources(
              new SourceSearch().setSourceIDs(Arrays.asList("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"))
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchSources({
              sourceIDs: ['6c02aeb1-775e-418e-870b-1faccd4b2c0f', '947ac9c4-7e58-4c87-b1e7-14a68e99699a'],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchSources(
                sourceSearch =
                  SourceSearch(
                    sourceIDs =
                      listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchSources(
                ['sourceIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_sources(
                source_search={
                    "sourceIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_sources(
              Algolia::Ingestion::SourceSearch.new(
                source_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchSources(
                sourceSearch = SourceSearch(
                  sourceIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.searchSources(sourceSearch:
            SourceSearch(sourceIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
            ]))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"sourceIDs":["lorem"]}'
  /1/sources/{sourceID}:
    get:
      tags:
        - sources
      summary: Retrieve a source
      description: Retrieve a source by its ID.
      operationId: getSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetSourceAsync("75eeb306-51d3-4e5e-a279-3c92bd8893ac");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetSource(client.NewApiGetSourceRequest(
              "75eeb306-51d3-4e5e-a279-3c92bd8893ac"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Source response =
            client.getSource("75eeb306-51d3-4e5e-a279-3c92bd8893ac");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getSource({ sourceID:
            '75eeb306-51d3-4e5e-a279-3c92bd8893ac' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.getSource(sourceID =
            "75eeb306-51d3-4e5e-a279-3c92bd8893ac")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getSource(
                '75eeb306-51d3-4e5e-a279-3c92bd8893ac',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_source(
                source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_source("75eeb306-51d3-4e5e-a279-3c92bd8893ac")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getSource(
                sourceID = "75eeb306-51d3-4e5e-a279-3c92bd8893ac"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getSource(sourceID:
            "75eeb306-51d3-4e5e-a279-3c92bd8893ac")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    patch:
      tags:
        - sources
      summary: Update a source
      description: Updates a source by its ID.
      operationId: updateSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateSourceAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new SourceUpdate { Name = "newName" }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.UpdateSource(client.NewApiUpdateSourceRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptySourceUpdate().SetName("newName")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            SourceUpdateResponse response =
            client.updateSource("6c02aeb1-775e-418e-870b-1faccd4b2c0f", new
            SourceUpdate().setName("newName"));


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateSource({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              sourceUpdate: { name: 'newName' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateSource(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate = SourceUpdate(name = "newName"),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateSource(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_source(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                source_update={
                    "name": "newName",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_source(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::SourceUpdate.new(name: "newName")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateSource(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate = SourceUpdate(
                  name = Some("newName")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateSource(
                sourceID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate: SourceUpdate(name: "newName")
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PATCH \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"name":"lorem","input":{"storeKeys":["lorem"],"locales":["fr-FR"],"url":"lorem","fallbackIsInStockValue":true,"productQueryPredicate":"lorem","customFields":{"inventory":["lorem"],"price":["lorem"],"category":["lorem"]}},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'
    delete:
      tags:
        - sources
      summary: Delete a source
      description: >-
        Deletes a source by its ID. You can't delete sources that are referenced
        in tasks.
      operationId: deleteSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteSourceAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteSource(client.NewApiDeleteSourceRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteSource("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteSource({ sourceID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.deleteSource(sourceID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteSource(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_source(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_source("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteSource(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.deleteSource(sourceID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/sources/{sourceID}/validate:
    post:
      tags:
        - sources
      summary: Validate an update of a source payload
      description: >
        Validates an update of a source payload to ensure it can be created and
        that the data source can be reached by Algolia.
      operationId: validateSourceBeforeUpdate
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      x-timeouts:
        connect: 180000
        read: 180000
        write: 180000
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ValidateSourceBeforeUpdateAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new SourceUpdate { Name = "newName" }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ValidateSourceBeforeUpdate(client.NewApiValidateSourceBeforeUpdateRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptySourceUpdate().SetName("newName")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            WatchResponse response = client.validateSourceBeforeUpdate(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new SourceUpdate().setName("newName")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.validateSourceBeforeUpdate({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              sourceUpdate: { name: 'newName' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.validateSourceBeforeUpdate(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate = SourceUpdate(name = "newName"),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->validateSourceBeforeUpdate(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.validate_source_before_update(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                source_update={
                    "name": "newName",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.validate_source_before_update(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::SourceUpdate.new(name: "newName")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.validateSourceBeforeUpdate(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate = SourceUpdate(
                  name = Some("newName")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.validateSourceBeforeUpdate(
                sourceID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate: SourceUpdate(name: "newName")
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"name":"lorem","input":{"storeKeys":["lorem"],"locales":["fr-FR"],"url":"lorem","fallbackIsInStockValue":true,"productQueryPredicate":"lorem","customFields":{"inventory":["lorem"],"price":["lorem"],"category":["lorem"]}},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'
  /1/sources/{sourceID}/discover:
    post:
      tags:
        - sources
      summary: Trigger a stream-listing request
      description: >
        Triggers a stream-listing request for a source.

        Triggering stream-listing requests only works with sources with `type:
        docker` and `imageType: airbyte`.
      operationId: triggerDockerSourceDiscover
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      x-timeouts:
        connect: 180000
        read: 180000
        write: 180000
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.TriggerDockerSourceDiscoverAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.TriggerDockerSourceDiscover(client.NewApiTriggerDockerSourceDiscoverRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            WatchResponse response =
            client.triggerDockerSourceDiscover("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.triggerDockerSourceDiscover({
            sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.triggerDockerSourceDiscover(sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->triggerDockerSourceDiscover(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.trigger_docker_source_discover(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.trigger_docker_source_discover("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.triggerDockerSourceDiscover(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.triggerDockerSourceDiscover(sourceID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/sources/{sourceID}/run:
    post:
      tags:
        - sources
      summary: Run all tasks linked to a source
      description: >-
        Runs all tasks linked to a source, only available for Shopify,
        BigCommerce and commercetools sources. Creates one run per task.
      operationId: runSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunSourcePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: runSourceResponse
                type: object
                properties:
                  taskWithRunID:
                    type: object
                    description: >-
                      Map of taskID sent for reindex with the corresponding
                      runID.
                    additionalProperties:
                      type: string
                  createdAt:
                    $ref: '#/components/schemas/CreatedAt'
                required:
                  - taskWithRunID
                  - createdAt
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.RunSourceAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new RunSourcePayload
              {
                IndexToInclude = new List<string> { "products_us", "products eu" },
                EntityIDs = new List<string> { "1234", "5678" },
                EntityType = Enum.Parse<EntityType>("Product"),
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.RunSource(client.NewApiRunSourceRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f").WithRunSourcePayload(
              ingestion.NewEmptyRunSourcePayload().SetIndexToInclude(
                []string{"products_us", "products eu"}).SetEntityIDs(
                []string{"1234", "5678"}).SetEntityType(ingestion.EntityType("product"))))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            RunSourceResponse response = client.runSource(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new RunSourcePayload()
                .setIndexToInclude(Arrays.asList("products_us", "products eu"))
                .setEntityIDs(Arrays.asList("1234", "5678"))
                .setEntityType(EntityType.PRODUCT)
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.runSource({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              runSourcePayload: {
                indexToInclude: ['products_us', 'products eu'],
                entityIDs: ['1234', '5678'],
                entityType: 'product',
              },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.runSource(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                runSourcePayload =
                  RunSourcePayload(
                    indexToInclude = listOf("products_us", "products eu"),
                    entityIDs = listOf("1234", "5678"),
                    entityType = EntityType.entries.first { it.value == "product" },
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->runSource(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['indexToInclude' => [
                    'products_us',

                    'products eu',
                ],
                    'entityIDs' => [
                        '1234',

                        '5678',
                    ],
                    'entityType' => 'product',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.run_source(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                run_source_payload={
                    "indexToInclude": [
                        "products_us",
                        "products eu",
                    ],
                    "entityIDs": [
                        "1234",
                        "5678",
                    ],
                    "entityType": "product",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.run_source(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::RunSourcePayload.new(
                index_to_include: ["products_us", "products eu"],
                entity_ids: ["1234", "5678"],
                entity_type: "product"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.runSource(
                sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                runSourcePayload = Some(
                  RunSourcePayload(
                    indexToInclude = Some(Seq("products_us", "products eu")),
                    entityIDs = Some(Seq("1234", "5678")),
                    entityType = Some(EntityType.withName("product"))
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.runSource(
                sourceID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                runSourcePayload: RunSourcePayload(
                    indexToInclude: ["products_us", "products eu"],
                    entityIDs: ["1234", "5678"],
                    entityType: EntityType.product
                )
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"indexToInclude":["lorem"],"indexToExclude":["lorem"],"entityIDs":["lorem"],"entityType":"product","runMetadata":{}}'
  /2/tasks:
    get:
      tags:
        - tasks
      summary: List tasks
      description: Retrieves a list of tasks.
      operationId: listTasks
      x-mcp-tool: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/action'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/sourceID'
        - $ref: '#/components/parameters/sourceType'
        - $ref: '#/components/parameters/destinationID'
        - $ref: '#/components/parameters/triggerType'
        - $ref: '#/components/parameters/withEmailNotifications'
        - $ref: '#/components/parameters/taskParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listTasksResponse
                type: object
                description: Configured tasks and pagination information.
                additionalProperties: false
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - tasks
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListTasksAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.ListTasks(client.NewApiListTasksRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListTasksResponse response = client.listTasks();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listTasks();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listTasks()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listTasks();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_tasks()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_tasks



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listTasks(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listTasks()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/2/tasks?itemsPerPage=10&page=1&action=save%2Creplace%2Cpartial%2Cappend&enabled=true&sourceID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&sourceType=json%2Ccommercetools&destinationID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&triggerType=onDemand%2Cschedule%2Csubscription%2Cstreaming&withEmailNotifications=true&sort=createdAt&order=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - tasks
      summary: Create a task
      description: Creates a new task.
      operationId: createTask
      requestBody:
        description: Request body for creating a task.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateTaskAsync(
              new TaskCreate
              {
                SourceID = "search",
                DestinationID = "destinationID",
                Action = Enum.Parse<ActionType>("Replace"),
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CreateTask(client.NewApiCreateTaskRequest(

              ingestion.NewEmptyTaskCreate().SetSourceID("search").SetDestinationID("destinationID").SetAction(ingestion.ActionType("replace"))))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskCreateResponse response = client.createTask(
              new TaskCreate().setSourceID("search").setDestinationID("destinationID").setAction(ActionType.REPLACE)
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createTask({ sourceID: 'search',
            destinationID: 'destinationID', action: 'replace' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createTask(
                taskCreate =
                  TaskCreate(
                    sourceID = "search",
                    destinationID = "destinationID",
                    action = ActionType.entries.first { it.value == "replace" },
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createTask(
                ['sourceID' => 'search',
                    'destinationID' => 'destinationID',
                    'action' => 'replace',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_task(
                task_create={
                    "sourceID": "search",
                    "destinationID": "destinationID",
                    "action": "replace",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_task(
              Algolia::Ingestion::TaskCreate.new(source_id: "search", destination_id: "destinationID", action: "replace")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createTask(
                taskCreate = TaskCreate(
                  sourceID = "search",
                  destinationID = "destinationID",
                  action = ActionType.withName("replace")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.createTask(taskCreate: TaskCreate(
                sourceID: "search",
                destinationID: "destinationID",
                action: ActionType.replace
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/2/tasks \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"sourceID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","destinationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","action":"replace","subscriptionAction":"replace","cron":"* * 1 * *","enabled":true,"failureThreshold":0,"input":{"mapping":{"format":"mappingkit/v1","actions":[{"id":"lorem","enabled":true,"trigger":"lorem","fieldDirectives":[{"fieldKey":"lorem","value":{}}]}]}},"cursor":"lorem","notifications":{"email":{"enabled":true}},"policies":{"criticalThreshold":1}}'
  /2/tasks/search:
    post:
      tags:
        - tasks
      summary: Search for tasks
      description: Searches for tasks.
      operationId: searchTasks
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchTasksResponse
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchTasksAsync(
              new TaskSearch
              {
                TaskIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.SearchTasks(client.NewApiSearchTasksRequest(

              ingestion.NewEmptyTaskSearch().SetTaskIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchTasks(
              new TaskSearch().setTaskIDs(
                Arrays.asList(
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                )
              )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchTasks({
              taskIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
              ],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchTasks(
                taskSearch =
                  TaskSearch(
                    taskIDs =
                      listOf(
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                      )
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchTasks(
                ['taskIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_tasks(
                task_search={
                    "taskIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_tasks(
              Algolia::Ingestion::TaskSearch.new(
                task_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                ]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchTasks(
                taskSearch = TaskSearch(
                  taskIDs = Seq(
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.searchTasks(taskSearch:
            TaskSearch(taskIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            ]))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/2/tasks/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /2/tasks/{taskID}:
    get:
      tags:
        - tasks
      summary: Retrieve a task
      description: Retrieves a task by its ID.
      operationId: getTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetTask(client.NewApiGetTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Task response =
            client.getTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getTask({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.getTask(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    put:
      tags:
        - tasks
      summary: Fully update a task
      description: >-
        Fully updates a task by its ID, use partialUpdateTask if you only want
        to update a subset of fields.
      operationId: replaceTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskReplace'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ReplaceTaskAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskReplace
              {
                DestinationID = "destinationID",
                Action = Enum.Parse<ActionType>("Replace"),
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.ReplaceTask(client.NewApiReplaceTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTaskReplace().SetDestinationID("destinationID").SetAction(ingestion.ActionType("replace"))))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response = client.replaceTask(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskReplace().setDestinationID("destinationID").setAction(ActionType.REPLACE)
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.replaceTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              taskReplace: { destinationID: 'destinationID', action: 'replace' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.replaceTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskReplace =
                  TaskReplace(
                    destinationID = "destinationID",
                    action = ActionType.entries.first { it.value == "replace" },
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->replaceTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['destinationID' => 'destinationID',
                    'action' => 'replace',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.replace_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                task_replace={
                    "destinationID": "destinationID",
                    "action": "replace",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.replace_task(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::TaskReplace.new(destination_id: "destinationID", action: "replace")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.replaceTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskReplace = TaskReplace(
                  destinationID = "destinationID",
                  action = ActionType.withName("replace")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.replaceTask(
                taskID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskReplace: TaskReplace(destinationID: "destinationID", action: ActionType.replace)
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"destinationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","action":"replace","subscriptionAction":"replace","cron":"* * 1 * *","enabled":true,"failureThreshold":0,"input":{"mapping":{"format":"mappingkit/v1","actions":[{"id":"lorem","enabled":true,"trigger":"lorem","fieldDirectives":[{"fieldKey":"lorem","value":{}}]}]}},"cursor":"lorem","notifications":{"email":{"enabled":true}},"policies":{"criticalThreshold":1}}'
    patch:
      tags:
        - tasks
      summary: Partially update a task
      description: Partially updates a task by its ID.
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateTaskAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskUpdate { Enabled = false, Cron = "* * * * *" }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.UpdateTask(client.NewApiUpdateTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTaskUpdate().SetEnabled(false).SetCron("* * * * *")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response = client.updateTask(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskUpdate().setEnabled(false).setCron("* * * * *")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              taskUpdate: { enabled: false, cron: '* * * * *' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate = TaskUpdate(enabled = false, cron = "* * * * *"),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['enabled' => false,
                    'cron' => '* * * * *',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                task_update={
                    "enabled": False,
                    "cron": "* * * * *",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_task(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::TaskUpdate.new(enabled: false, cron: "* * * * *")
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate = TaskUpdate(
                  enabled = Some(false),
                  cron = Some("* * * * *")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateTask(
                taskID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate: TaskUpdate(cron: "* * * * *", enabled: false)
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PATCH \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"destinationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","cron":"* * 1 * *","input":{"mapping":{"format":"mappingkit/v1","actions":[{"id":"lorem","enabled":true,"trigger":"lorem","fieldDirectives":[{"fieldKey":"lorem","value":{}}]}]}},"enabled":true,"subscriptionAction":"replace","failureThreshold":0,"notifications":{"email":{"enabled":true}},"policies":{"criticalThreshold":1}}'
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: Deletes a task by its ID.
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.DeleteTask(client.NewApiDeleteTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteTask({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.deleteTask(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.deleteTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /2/tasks/{taskID}/run:
    post:
      tags:
        - tasks
      summary: Run a task
      description: >-
        Runs a task. You can check the status of task runs with the
        observability endpoints.
      operationId: runTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunTaskPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.RunTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.RunTask(client.NewApiRunTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            RunResponse response =
            client.runTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.runTask({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.runTask(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->runTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.run_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.run_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.runTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.runTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"runMetadata":{}}'
  /2/tasks/{taskID}/push:
    post:
      tags:
        - tasks
      summary: Push records by task ID
      description: >
        Pushes records through the pipeline, directly to an index. You can make
        the call synchronous by providing the `watch` parameter, for
        asynchronous calls, you can use the observability endpoints or the
        debugger dashboard to see the status of your task.

        If you want to transform your data before indexing, this is the
        recommended way of ingesting your records.

        This method is similar to `push`, but requires a `taskID` instead of a
        `indexName`, which is useful when many `destinations` target the same
        `indexName`.
      operationId: pushTask
      externalDocs:
        url: >-
          https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/how-to/transform-your-data
        description: Pre-indexing data transformation.
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      x-timeouts:
        connect: 180000
        read: 180000
        write: 180000
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
        - $ref: '#/components/parameters/watch'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushTaskPayload'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatchResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.PushTaskAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new PushTaskPayload
              {
                Action = Enum.Parse<Action>("AddObject"),
                Records = new List<PushTaskRecords>
                {
                  new PushTaskRecords
                  {
                    ObjectID = "o",
                    AdditionalProperties = new Dictionary<string, object>
                    {
                      { "key", "bar" },
                      { "foo", "1" },
                    },
                  },
                  new PushTaskRecords
                  {
                    ObjectID = "k",
                    AdditionalProperties = new Dictionary<string, object>
                    {
                      { "key", "baz" },
                      { "foo", "2" },
                    },
                  },
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.PushTask(client.NewApiPushTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyPushTaskPayload().SetAction(ingestion.Action("addObject")).SetRecords(
                []ingestion.PushTaskRecords{
                  *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
                  *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
                }),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            WatchResponse response = client.pushTask(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new PushTaskPayload()
                .setAction(Action.ADD_OBJECT)
                .setRecords(
                  Arrays.asList(
                    new PushTaskRecords().setAdditionalProperty("key", "bar").setAdditionalProperty("foo", "1").setObjectID("o"),
                    new PushTaskRecords().setAdditionalProperty("key", "baz").setAdditionalProperty("foo", "2").setObjectID("k")
                  )
                )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.pushTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              pushTaskPayload: {
                action: 'addObject',
                records: [
                  { key: 'bar', foo: '1', objectID: 'o' },
                  { key: 'baz', foo: '2', objectID: 'k' },
                ],
              },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.pushTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                pushTaskPayload =
                  PushTaskPayload(
                    action = Action.entries.first { it.value == "addObject" },
                    records =
                      listOf(
                        PushTaskRecords(
                          objectID = "o",
                          additionalProperties =
                            mapOf("key" to JsonPrimitive("bar"), "foo" to JsonPrimitive("1")),
                        ),
                        PushTaskRecords(
                          objectID = "k",
                          additionalProperties =
                            mapOf("key" to JsonPrimitive("baz"), "foo" to JsonPrimitive("2")),
                        ),
                      ),
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->pushTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['action' => 'addObject',
                    'records' => [
                        ['key' => 'bar',
                            'foo' => '1',
                            'objectID' => 'o',
                        ],

                        ['key' => 'baz',
                            'foo' => '2',
                            'objectID' => 'k',
                        ],
                    ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.push_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                push_task_payload={
                    "action": "addObject",
                    "records": [
                        {
                            "key": "bar",
                            "foo": "1",
                            "objectID": "o",
                        },
                        {
                            "key": "baz",
                            "foo": "2",
                            "objectID": "k",
                        },
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.push_task(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::PushTaskPayload.new(
                action: "addObject",
                records: [
                  Algolia::Ingestion::PushTaskRecords.new(key: "bar", foo: "1", algolia_object_id: "o"),
                  Algolia::Ingestion::PushTaskRecords.new(key: "baz", foo: "2", algolia_object_id: "k")
                ]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.pushTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                pushTaskPayload = PushTaskPayload(
                  action = Action.withName("addObject"),
                  records = Seq(
                    PushTaskRecords(
                      objectID = "o",
                      additionalProperties = Some(List(JField("key", JString("bar")), JField("foo", JString("1"))))
                    ),
                    PushTaskRecords(
                      objectID = "k",
                      additionalProperties = Some(List(JField("key", JString("baz")), JField("foo", JString("2"))))
                    )
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.pushTask(
                taskID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                pushTaskPayload: PushTaskPayload(
                    action: IngestionAction.addObject,
                    records: [
                        PushTaskRecords(from: [
                            "objectID": AnyCodable("o"),
                            "key": AnyCodable("bar"),
                            "foo": AnyCodable("1"),
                        ]),
                        PushTaskRecords(from: [
                            "objectID": AnyCodable("k"),
                            "key": AnyCodable("baz"),
                            "foo": AnyCodable("2"),
                        ]),
                    ]
                )
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url 'https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push?watch=true' \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"action":"addObject","records":[{"objectID":"test-record-123"}]}'
  /2/tasks/{taskID}/enable:
    put:
      tags:
        - tasks
      summary: Enable a task
      description: Enables a task.
      operationId: enableTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.EnableTaskAsync("76ab4c2a-ce17-496f-b7a6-506dc59ee498");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.EnableTask(client.NewApiEnableTaskRequest(
              "76ab4c2a-ce17-496f-b7a6-506dc59ee498"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response =
            client.enableTask("76ab4c2a-ce17-496f-b7a6-506dc59ee498");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.enableTask({ taskID:
            '76ab4c2a-ce17-496f-b7a6-506dc59ee498' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.enableTask(taskID =
            "76ab4c2a-ce17-496f-b7a6-506dc59ee498")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->enableTask(
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.enable_task(
                task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.enable_task("76ab4c2a-ce17-496f-b7a6-506dc59ee498")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.enableTask(
                taskID = "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.enableTask(taskID:
            "76ab4c2a-ce17-496f-b7a6-506dc59ee498")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/enable \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /2/tasks/{taskID}/disable:
    put:
      tags:
        - tasks
      summary: Disable a task
      description: Disables a task.
      operationId: disableTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DisableTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.DisableTask(client.NewApiDisableTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response =
            client.disableTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.disableTask({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.disableTask(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->disableTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.disable_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.disable_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.disableTask(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.disableTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/tasks:
    get:
      tags:
        - tasks
      summary: List tasks V1
      description: >-
        Retrieves a list of tasks using the v1 endpoint, please use `getTasks`
        instead.
      operationId: listTasksV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/action'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/sourceID'
        - $ref: '#/components/parameters/destinationID'
        - $ref: '#/components/parameters/triggerType'
        - $ref: '#/components/parameters/taskParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listTasksResponseV1
                type: object
                description: Configured tasks and pagination information.
                additionalProperties: false
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskV1'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - tasks
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListTasksV1Async();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListTasksV1(client.NewApiListTasksV1Request())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListTasksResponseV1 response = client.listTasksV1();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listTasksV1();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listTasksV1()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listTasksV1();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_tasks_v1()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_tasks_v1



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listTasksV1(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listTasksV1()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/tasks?itemsPerPage=10&page=1&action=save%2Creplace%2Cpartial%2Cappend&enabled=true&sourceID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&destinationID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&triggerType=onDemand%2Cschedule%2Csubscription%2Cstreaming&sort=createdAt&order=desc' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - tasks
      summary: Create a task V1
      description: >-
        Creates a new task using the v1 endpoint, please use `createTask`
        instead.
      operationId: createTaskV1
      deprecated: true
      x-codegen-request-body-name: taskCreate
      requestBody:
        description: Request body for creating a task.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateV1'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateTaskV1Async(
              new TaskCreateV1
              {
                SourceID = "search",
                DestinationID = "destinationName",
                Trigger = new TaskCreateTrigger(
                  new OnDemandTriggerInput { Type = Enum.Parse<OnDemandTriggerType>("OnDemand") }
                ),
                Action = Enum.Parse<ActionType>("Replace"),
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CreateTaskV1(client.NewApiCreateTaskV1Request(
              ingestion.NewEmptyTaskCreateV1().
                SetSourceID("search").
                SetDestinationID("destinationName").
                SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
                  ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType("onDemand")))).
                SetAction(ingestion.ActionType("replace")),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskCreateResponse response = client.createTaskV1(
              new TaskCreateV1()
                .setSourceID("search")
                .setDestinationID("destinationName")
                .setTrigger(new OnDemandTriggerInput().setType(OnDemandTriggerType.ON_DEMAND))
                .setAction(ActionType.REPLACE)
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createTaskV1({
              sourceID: 'search',
              destinationID: 'destinationName',
              trigger: { type: 'onDemand' },
              action: 'replace',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createTaskV1(
                taskCreate =
                  TaskCreateV1(
                    sourceID = "search",
                    destinationID = "destinationName",
                    trigger =
                      OnDemandTriggerInput(
                        type = OnDemandTriggerType.entries.first { it.value == "onDemand" }
                      ),
                    action = ActionType.entries.first { it.value == "replace" },
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createTaskV1(
                ['sourceID' => 'search',
                    'destinationID' => 'destinationName',
                    'trigger' => ['type' => 'onDemand',
                    ],
                    'action' => 'replace',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_task_v1(
                task_create={
                    "sourceID": "search",
                    "destinationID": "destinationName",
                    "trigger": {
                        "type": "onDemand",
                    },
                    "action": "replace",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_task_v1(
              Algolia::Ingestion::TaskCreateV1.new(
                source_id: "search",
                destination_id: "destinationName",
                trigger: Algolia::Ingestion::OnDemandTriggerInput.new(type: "onDemand"),
                action: "replace"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createTaskV1(
                taskCreate = TaskCreateV1(
                  sourceID = "search",
                  destinationID = "destinationName",
                  trigger = OnDemandTriggerInput(
                    `type` = OnDemandTriggerType.withName("onDemand")
                  ),
                  action = ActionType.withName("replace")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.createTaskV1(taskCreate:
            TaskCreateV1(
                sourceID: "search",
                destinationID: "destinationName",
                trigger: TaskCreateTrigger.onDemandTriggerInput(OnDemandTriggerInput(type: OnDemandTriggerType.onDemand)),
                action: ActionType.replace
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/tasks \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"sourceID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","destinationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","trigger":{"type":"onDemand"},"action":"replace","enabled":true,"failureThreshold":0,"input":{"mapping":{"format":"mappingkit/v1","actions":[{"id":"lorem","enabled":true,"trigger":"lorem","fieldDirectives":[{"fieldKey":"lorem","value":{}}]}]}},"cursor":"lorem"}'
  /1/tasks/search:
    post:
      tags:
        - tasks
      summary: Search for tasks V1
      description: >-
        Searches for tasks using the v1 endpoint, please use `searchTasks`
        instead.
      operationId: searchTasksV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchTasksResponseV1
                type: array
                items:
                  $ref: '#/components/schemas/TaskV1'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchTasksV1Async(
              new TaskSearch
              {
                TaskIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.SearchTasksV1(client.NewApiSearchTasksV1Request(

              ingestion.NewEmptyTaskSearch().SetTaskIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchTasksV1(
              new TaskSearch().setTaskIDs(
                Arrays.asList(
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                )
              )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchTasksV1({
              taskIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
              ],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchTasksV1(
                taskSearch =
                  TaskSearch(
                    taskIDs =
                      listOf(
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                      )
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchTasksV1(
                ['taskIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_tasks_v1(
                task_search={
                    "taskIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_tasks_v1(
              Algolia::Ingestion::TaskSearch.new(
                task_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                ]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchTasksV1(
                taskSearch = TaskSearch(
                  taskIDs = Seq(
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.searchTasksV1(taskSearch:
            TaskSearch(taskIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            ]))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/tasks/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/tasks/{taskID}:
    get:
      tags:
        - tasks
      summary: Retrieve a task V1
      description: >-
        Retrieves a task by its ID using the v1 endpoint, please use `getTask`
        instead.
      operationId: getTaskV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskV1'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetTaskV1Async("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetTaskV1(client.NewApiGetTaskV1Request(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskV1 response =
            client.getTaskV1("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getTaskV1({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.getTaskV1(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getTaskV1(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_task_v1(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.get_task_v1("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getTaskV1(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    patch:
      tags:
        - tasks
      summary: Update a task V1
      description: >-
        Updates a task by its ID using the v1 endpoint, please use `updateTask`
        instead.
      operationId: updateTaskV1
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      x-codegen-request-body-name: taskUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateV1'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateTaskV1Async(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskUpdateV1 { Enabled = false }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.UpdateTaskV1(client.NewApiUpdateTaskV1Request(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTaskUpdateV1().SetEnabled(false)))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response =
            client.updateTaskV1("6c02aeb1-775e-418e-870b-1faccd4b2c0f", new
            TaskUpdateV1().setEnabled(false));


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateTaskV1({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              taskUpdate: { enabled: false },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate = TaskUpdateV1(enabled = false),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateTaskV1(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['enabled' => false,
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_task_v1(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                task_update={
                    "enabled": False,
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_task_v1(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::TaskUpdateV1.new(enabled: false)
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate = TaskUpdateV1(
                  enabled = Some(false)
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateTaskV1(
                taskID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate: TaskUpdateV1(enabled: false)
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PATCH \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"destinationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f","trigger":{"cron":"* * 1 * *"},"input":{"mapping":{"format":"mappingkit/v1","actions":[{"id":"lorem","enabled":true,"trigger":"lorem","fieldDirectives":[{"fieldKey":"lorem","value":{}}]}]}},"enabled":true,"failureThreshold":0}'
    delete:
      tags:
        - tasks
      summary: Delete a task
      description: >-
        Deletes a task by its ID using the v1 endpoint, please use `deleteTask`
        instead.
      operationId: deleteTaskV1
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteTaskV1Async("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteTaskV1(client.NewApiDeleteTaskV1Request(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteTaskV1("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteTaskV1({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.deleteTaskV1(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteTaskV1(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_task_v1(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_task_v1("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.deleteTaskV1(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/tasks/{taskID}/run:
    post:
      tags:
        - tasks
      summary: Run a task V1
      description: >-
        Runs a task using the v1 endpoint, please use `runTask` instead. You can
        check the status of task runs with the observability endpoints.
      operationId: runTaskV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunTaskPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.RunTaskV1Async("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.RunTaskV1(client.NewApiRunTaskV1Request(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            RunResponse response =
            client.runTaskV1("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.runTaskV1({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.runTaskV1(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->runTaskV1(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.run_task_v1(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.run_task_v1("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.runTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.runTaskV1(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"runMetadata":{}}'
  /1/tasks/{taskID}/enable:
    put:
      tags:
        - tasks
      summary: Enable a task V1
      description: Enables a task using the v1 endpoint, please use `enableTask` instead.
      operationId: enableTaskV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.EnableTaskV1Async("76ab4c2a-ce17-496f-b7a6-506dc59ee498");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.EnableTaskV1(client.NewApiEnableTaskV1Request(
              "76ab4c2a-ce17-496f-b7a6-506dc59ee498"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response =
            client.enableTaskV1("76ab4c2a-ce17-496f-b7a6-506dc59ee498");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.enableTaskV1({ taskID:
            '76ab4c2a-ce17-496f-b7a6-506dc59ee498' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.enableTaskV1(taskID =
            "76ab4c2a-ce17-496f-b7a6-506dc59ee498")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->enableTaskV1(
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.enable_task_v1(
                task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.enable_task_v1("76ab4c2a-ce17-496f-b7a6-506dc59ee498")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.enableTaskV1(
                taskID = "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.enableTaskV1(taskID:
            "76ab4c2a-ce17-496f-b7a6-506dc59ee498")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/enable \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/tasks/{taskID}/disable:
    put:
      tags:
        - tasks
      summary: Disable a task V1
      description: Disables a task using the v1 endpoint, please use `disableTask` instead.
      operationId: disableTaskV1
      deprecated: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DisableTaskV1Async("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DisableTaskV1(client.NewApiDisableTaskV1Request(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TaskUpdateResponse response =
            client.disableTaskV1("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.disableTaskV1({ taskID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.disableTaskV1(taskID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->disableTaskV1(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.disable_task_v1(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.disable_task_v1("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.disableTaskV1(
                taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.disableTaskV1(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/transformations:
    get:
      tags:
        - transformations
      summary: List transformations
      description: Retrieves a list of transformations.
      operationId: listTransformations
      x-mcp-tool: true
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/transformationParameters_sort'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/transformationParameters_type'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listTransformationsResponse
                type: object
                description: Configured transformations and pagination information.
                additionalProperties: false
                properties:
                  transformations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transformation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - transformations
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListTransformationsAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.ListTransformations(client.NewApiListTransformationsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListTransformationsResponse response = client.listTransformations();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listTransformations();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listTransformations()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listTransformations();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_transformations()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_transformations



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listTransformations(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listTransformations()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/transformations?itemsPerPage=10&page=1&sort=createdAt&order=desc&type=code' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    post:
      tags:
        - transformations
      summary: Create a transformation
      description: Creates a new transformation.
      operationId: createTransformation
      requestBody:
        description: Request body for creating a transformation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.CreateTransformationAsync(
              new TransformationCreate
              {
                Input = new TransformationInput(new TransformationCode { Code = "foo" }),
                Type = Enum.Parse<TransformationType>("Code"),
                Name = "bar",
                Description = "baz",
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CreateTransformation(client.NewApiCreateTransformationRequest(

              ingestion.NewEmptyTransformationCreate().SetInput(ingestion.TransformationCodeAsTransformationInput(
                ingestion.NewEmptyTransformationCode().
                  SetCode("foo"),
              )).SetType(ingestion.TransformationType("code")).SetName("bar").SetDescription("baz")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TransformationCreateResponse response = client.createTransformation(
              new TransformationCreate()
                .setInput(new TransformationCode().setCode("foo"))
                .setType(TransformationType.CODE)
                .setName("bar")
                .setDescription("baz")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.createTransformation({
              input: { code: 'foo' },
              type: 'code',
              name: 'bar',
              description: 'baz',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.createTransformation(
                transformationCreate =
                  TransformationCreate(
                    input = TransformationCode(code = "foo"),
                    type = TransformationType.entries.first { it.value == "code" },
                    name = "bar",
                    description = "baz",
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->createTransformation(
                ['input' => ['code' => 'foo',
                ],
                    'type' => 'code',
                    'name' => 'bar',
                    'description' => 'baz',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.create_transformation(
                transformation_create={
                    "input": {
                        "code": "foo",
                    },
                    "type": "code",
                    "name": "bar",
                    "description": "baz",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.create_transformation(
              Algolia::Ingestion::TransformationCreate.new(
                input: Algolia::Ingestion::TransformationCode.new(code: "foo"),
                type: "code",
                name: "bar",
                description: "baz"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.createTransformation(
                transformationCreate = TransformationCreate(
                  input = Some(
                    TransformationCode(
                      code = "foo"
                    )
                  ),
                  `type` = Some(TransformationType.withName("code")),
                  name = "bar",
                  description = Some("baz")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.createTransformation(transformationCreate:
            TransformationCreate(
                name: "bar",
                type: TransformationType.code,
                input: TransformationInput.transformationCode(TransformationCode(code: "foo")),
                description: "baz"
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/transformations \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"code":"lorem","name":"lorem","type":"code","input":{"code":"lorem"},"description":"lorem","authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/transformations/try:
    post:
      tags:
        - transformations
      summary: Try a transformation before creating it
      description: Try a transformation before creating it.
      operationId: tryTransformation
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationTry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationTryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.TryTransformationAsync(
              new TransformationTry
              {
                Type = Enum.Parse<TransformationType>("Code"),
                Input = new TransformationInput(new TransformationCode { Code = "foo" }),
                SampleRecord = new Dictionary<string, string> { { "bar", "baz" } },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.TryTransformation(client.NewApiTryTransformationRequest(
              ingestion.NewEmptyTransformationTry().
                SetType(ingestion.TransformationType("code")).
                SetInput(ingestion.TransformationCodeAsTransformationInput(
                  ingestion.NewEmptyTransformationCode().SetCode("foo"))).
                SetSampleRecord(map[string]any{"bar": "baz"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TransformationTryResponse response = client.tryTransformation(
              new TransformationTry()
                .setType(TransformationType.CODE)
                .setInput(new TransformationCode().setCode("foo"))
                .setSampleRecord(
                  new HashMap() {
                    {
                      put("bar", "baz");
                    }
                  }
                )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.tryTransformation({
              type: 'code',
              input: { code: 'foo' },
              sampleRecord: { bar: 'baz' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.tryTransformation(
                transformationTry =
                  TransformationTry(
                    type = TransformationType.entries.first { it.value == "code" },
                    input = TransformationCode(code = "foo"),
                    sampleRecord = buildJsonObject { put("bar", JsonPrimitive("baz")) },
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->tryTransformation(
                ['type' => 'code',
                    'input' => ['code' => 'foo',
                    ],
                    'sampleRecord' => ['bar' => 'baz',
                    ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.try_transformation(
                transformation_try={
                    "type": "code",
                    "input": {
                        "code": "foo",
                    },
                    "sampleRecord": {
                        "bar": "baz",
                    },
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.try_transformation(
              Algolia::Ingestion::TransformationTry.new(
                type: "code",
                input: Algolia::Ingestion::TransformationCode.new(code: "foo"),
                sample_record: {bar: "baz"}
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.tryTransformation(
                transformationTry = TransformationTry(
                  `type` = Some(TransformationType.withName("code")),
                  input = Some(
                    TransformationCode(
                      code = "foo"
                    )
                  ),
                  sampleRecord = JObject(List(JField("bar", JString("baz"))))
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.tryTransformation(transformationTry:
            TransformationTry(
                type: TransformationType.code,
                input: TransformationInput.transformationCode(TransformationCode(code: "foo")),
                sampleRecord: ["bar": "baz"]
            ))


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/transformations/try \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"code":"lorem","type":"code","input":{"code":"lorem"},"sampleRecord":{},"authentications":[{"type":"googleServiceAccount","name":"lorem","platform":"bigcommerce","input":{"clientEmail":"service-account-name@project-id.iam.gserviceaccount.com","privateKey":"lorem"}}]}'
  /1/transformations/search:
    post:
      tags:
        - transformations
      summary: Search for transformations
      description: Searches for transformations.
      operationId: searchTransformations
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchTransformationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Transformation'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.SearchTransformationsAsync(
              new TransformationSearch
              {
                TransformationIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.SearchTransformations(client.NewApiSearchTransformationsRequest(

              ingestion.NewEmptyTransformationSearch().SetTransformationIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            List response = client.searchTransformations(
              new TransformationSearch().setTransformationIDs(
                Arrays.asList(
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                )
              )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.searchTransformations({
              transformationIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
              ],
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.searchTransformations(
                transformationSearch =
                  TransformationSearch(
                    transformationIDs =
                      listOf(
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                      )
                  )
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->searchTransformations(
                ['transformationIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
                ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.search_transformations(
                transformation_search={
                    "transformationIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                    ],
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.search_transformations(
              Algolia::Ingestion::TransformationSearch.new(
                transformation_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                ]
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.searchTransformations(
                transformationSearch = TransformationSearch(
                  transformationIDs = Seq(
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                  )
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client
                .searchTransformations(transformationSearch: TransformationSearch(transformationIDs: [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ]))

            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/transformations/search \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
  /1/transformations/{transformationID}:
    get:
      tags:
        - transformations
      summary: Retrieve a transformation
      description: Retrieves a transformation by its ID.
      operationId: getTransformation
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTransformationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transformation'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetTransformationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetTransformation(client.NewApiGetTransformationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Transformation response =
            client.getTransformation("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getTransformation({ transformationID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.getTransformation(transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getTransformation(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_transformation(
                transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.get_transformation("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getTransformation(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getTransformation(transformationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
    put:
      tags:
        - transformations
      summary: Update a transformation
      description: Updates a transformation by its ID.
      operationId: updateTransformation
      parameters:
        - $ref: '#/components/parameters/pathTransformationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.UpdateTransformationAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TransformationCreate
              {
                Input = new TransformationInput(new TransformationCode { Code = "foo" }),
                Type = Enum.Parse<TransformationType>("Code"),
                Name = "bar",
                Description = "baz",
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.UpdateTransformation(client.NewApiUpdateTransformationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTransformationCreate().SetInput(ingestion.TransformationCodeAsTransformationInput(
                ingestion.NewEmptyTransformationCode().
                  SetCode("foo"),
              )).SetType(ingestion.TransformationType("code")).SetName("bar").SetDescription("baz")))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TransformationUpdateResponse response = client.updateTransformation(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TransformationCreate()
                .setInput(new TransformationCode().setCode("foo"))
                .setType(TransformationType.CODE)
                .setName("bar")
                .setDescription("baz")
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.updateTransformation({
              transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              transformationCreate: { input: { code: 'foo' }, type: 'code', name: 'bar', description: 'baz' },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.updateTransformation(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationCreate =
                  TransformationCreate(
                    input = TransformationCode(code = "foo"),
                    type = TransformationType.entries.first { it.value == "code" },
                    name = "bar",
                    description = "baz",
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->updateTransformation(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['input' => ['code' => 'foo',
                ],
                    'type' => 'code',
                    'name' => 'bar',
                    'description' => 'baz',
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.update_transformation(
                transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformation_create={
                    "input": {
                        "code": "foo",
                    },
                    "type": "code",
                    "name": "bar",
                    "description": "baz",
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.update_transformation(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::TransformationCreate.new(
                input: Algolia::Ingestion::TransformationCode.new(code: "foo"),
                type: "code",
                name: "bar",
                description: "baz"
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.updateTransformation(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationCreate = TransformationCreate(
                  input = Some(
                    TransformationCode(
                      code = "foo"
                    )
                  ),
                  `type` = Some(TransformationType.withName("code")),
                  name = "bar",
                  description = Some("baz")
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.updateTransformation(
                transformationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationCreate: TransformationCreate(
                    name: "bar",
                    type: TransformationType.code,
                    input: TransformationInput.transformationCode(TransformationCode(code: "foo")),
                    description: "baz"
                )
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request PUT \
              --url https://data.us.algolia.com/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"code":"lorem","name":"lorem","type":"code","input":{"code":"lorem"},"description":"lorem","authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}'
    delete:
      tags:
        - transformations
      summary: Delete a transformation
      description: Deletes a transformation by its ID.
      operationId: deleteTransformation
      parameters:
        - $ref: '#/components/parameters/pathTransformationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.DeleteTransformationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.DeleteTransformation(client.NewApiDeleteTransformationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            DeleteResponse response =
            client.deleteTransformation("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.deleteTransformation({
            transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.deleteTransformation(transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->deleteTransformation(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.delete_transformation(
                transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.delete_transformation("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.deleteTransformation(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await
            client.deleteTransformation(transformationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request DELETE \
              --url https://data.us.algolia.com/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/transformations/{transformationID}/try:
    post:
      tags:
        - transformations
      summary: Try a transformation before updating it
      description: Try a transformation before updating it.
      operationId: tryTransformationBeforeUpdate
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTransformationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationTry'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationTryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.TryTransformationBeforeUpdateAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TransformationTry
              {
                Type = Enum.Parse<TransformationType>("Code"),
                Input = new TransformationInput(new TransformationCode { Code = "foo" }),
                SampleRecord = new Dictionary<string, string> { { "bar", "baz" } },
              }
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.TryTransformationBeforeUpdate(client.NewApiTryTransformationBeforeUpdateRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTransformationTry().
                SetType(ingestion.TransformationType("code")).
                SetInput(ingestion.TransformationCodeAsTransformationInput(
                  ingestion.NewEmptyTransformationCode().SetCode("foo"))).
                SetSampleRecord(map[string]any{"bar": "baz"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            TransformationTryResponse response =
            client.tryTransformationBeforeUpdate(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TransformationTry()
                .setType(TransformationType.CODE)
                .setInput(new TransformationCode().setCode("foo"))
                .setSampleRecord(
                  new HashMap() {
                    {
                      put("bar", "baz");
                    }
                  }
                )
            );


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.tryTransformationBeforeUpdate({
              transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              transformationTry: { type: 'code', input: { code: 'foo' }, sampleRecord: { bar: 'baz' } },
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.tryTransformationBeforeUpdate(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationTry =
                  TransformationTry(
                    type = TransformationType.entries.first { it.value == "code" },
                    input = TransformationCode(code = "foo"),
                    sampleRecord = buildJsonObject { put("bar", JsonPrimitive("baz")) },
                  ),
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->tryTransformationBeforeUpdate(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['type' => 'code',
                    'input' => ['code' => 'foo',
                    ],
                    'sampleRecord' => ['bar' => 'baz',
                    ],
                ],
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.try_transformation_before_update(
                transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformation_try={
                    "type": "code",
                    "input": {
                        "code": "foo",
                    },
                    "sampleRecord": {
                        "bar": "baz",
                    },
                },
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.try_transformation_before_update(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              Algolia::Ingestion::TransformationTry.new(
                type: "code",
                input: Algolia::Ingestion::TransformationCode.new(code: "foo"),
                sample_record: {bar: "baz"}
              )
            )



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.tryTransformationBeforeUpdate(
                transformationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationTry = TransformationTry(
                  `type` = Some(TransformationType.withName("code")),
                  input = Some(
                    TransformationCode(
                      code = "foo"
                    )
                  ),
                  sampleRecord = JObject(List(JField("bar", JString("baz"))))
                )
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.tryTransformationBeforeUpdate(
                transformationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                transformationTry: TransformationTry(
                    type: TransformationType.code,
                    input: TransformationInput.transformationCode(TransformationCode(code: "foo")),
                    sampleRecord: ["bar": "baz"]
                )
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request POST \
              --url https://data.us.algolia.com/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f/try \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID' \
              --data '{"code":"lorem","type":"code","input":{"code":"lorem"},"sampleRecord":{},"authentications":[{"type":"googleServiceAccount","name":"lorem","platform":"bigcommerce","input":{"clientEmail":"service-account-name@project-id.iam.gserviceaccount.com","privateKey":"lorem"}}]}'
  /1/runs:
    get:
      tags:
        - observability
      summary: List task runs
      description: Retrieve a list of task runs.
      operationId: listRuns
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/runStatus'
        - $ref: '#/components/parameters/runType'
        - $ref: '#/components/parameters/taskID'
        - $ref: '#/components/parameters/runSort'
        - $ref: '#/components/parameters/order'
        - name: startDate
          in: query
          description: >-
            Date in RFC 3339 format for the earliest run to retrieve. By
            default, the current day minus seven days is used.
          schema:
            type: string
        - name: endDate
          in: query
          description: >-
            Date in RFC 3339 format for the latest run to retrieve. By default,
            the current day is used.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.ListRunsAsync();

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.ListRuns(client.NewApiListRunsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            RunListResponse response = client.listRuns();


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listRuns();



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response = client.listRuns()


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listRuns();



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_runs()



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.list_runs



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listRuns(
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listRuns()


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/runs?itemsPerPage=10&page=1&status=created&type=reindex&taskID=6c02aeb1-775e-418e-870b-1faccd4b2c0f&sort=createdAt&order=desc&startDate=lorem&endDate=lorem' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/runs/{runID}:
    get:
      tags:
        - observability
      summary: Retrieve a task run
      description: Retrieve a single task run by its ID.
      operationId: getRun
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.GetRunAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetRun(client.NewApiGetRunRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Run response =
            client.getRun("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getRun({ runID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.getRun(runID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getRun(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_run(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_run("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getRun(
                runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getRun(runID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/runs/{runID}/events:
    get:
      tags:
        - observability
      summary: List task run events
      description: Retrieves a list of events for a task run, identified by its ID.
      operationId: listEvents
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/eventStatus'
        - $ref: '#/components/parameters/eventType'
        - $ref: '#/components/parameters/eventSort'
        - $ref: '#/components/parameters/order'
        - name: startDate
          in: query
          description: >-
            Date and time in RFC 3339 format for the earliest events to
            retrieve. By default, the current time minus three hours is used.
          schema:
            type: string
        - name: endDate
          in: query
          description: >-
            Date and time in RFC 3339 format for the latest events to retrieve.
            By default, the current time is used.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listEventsResponse
                type: object
                additionalProperties: false
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  window:
                    $ref: '#/components/schemas/Window'
                required:
                  - events
                  - pagination
                  - window
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >-
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );


            // Call the API

            var response = await
            client.ListEventsAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.ListEvents(client.NewApiListEventsRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            ListEventsResponse response =
            client.listEvents("6c02aeb1-775e-418e-870b-1faccd4b2c0f");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.listEvents({ runID:
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f' });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >-
            // Initialize the client

            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API

            var response = client.listEvents(runID =
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            // print the response

            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->listEvents(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.list_events(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response =
            client.list_events("6c02aeb1-775e-418e-870b-1faccd4b2c0f")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.listEvents(
                runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.listEvents(runID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url 'https://data.us.algolia.com/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events?itemsPerPage=10&page=1&status=created&type=fetch&sort=status&order=desc&startDate=lorem&endDate=lorem' \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
  /1/runs/{runID}/events/{eventID}:
    get:
      tags:
        - observability
      summary: Retrieve a task run event
      description: Retrieves a single task run event by its ID.
      operationId: getEvent
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/pathEventID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |-
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
            );

            // Call the API
            var response = await client.GetEventAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            );

            // print the response
            Console.WriteLine(response);
        - lang: go
          label: Go
          source: >-
            // Initialize the client with your application region, eg.
            ingestion.ALGOLIA_APPLICATION_REGION

            client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetEvent(client.NewApiGetEventRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "6c02aeb1-775e-418e-870b-1faccd4b2c0c"))
            if err != nil {
              // handle the eventual error
              panic(err)
            }



            // print the response

            print(response)
        - lang: java
          label: Java
          source: >-
            // Initialize the client

            IngestionClient client = new
            IngestionClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY",
            "ALGOLIA_APPLICATION_REGION");


            // Call the API

            Event response =
            client.getEvent("6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            "6c02aeb1-775e-418e-870b-1faccd4b2c0c");


            // print the response

            System.out.println(response);
        - lang: javascript
          label: JavaScript
          source: >-
            // Initialize the client

            // Replace 'us' with your Algolia Application Region

            const client = algoliasearch('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY').initIngestion({ region: 'us' });


            // Call the API

            const response = await client.getEvent({
              runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              eventID: '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
            });



            // print the response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: |-
            // Initialize the client
            val client =
              IngestionClient(
                appId = "ALGOLIA_APPLICATION_ID",
                apiKey = "ALGOLIA_API_KEY",
                region = "ALGOLIA_APPLICATION_REGION",
              )

            // Call the API
            var response =
              client.getEvent(
                runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                eventID = "6c02aeb1-775e-418e-870b-1faccd4b2c0c",
              )


            // print the response
            println(response)
        - lang: php
          label: PHP
          source: >-
            // Initialize the client

            $client = IngestionClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');


            // Call the API

            $response = $client->getEvent(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
            );



            // print the response

            var_dump($response);
        - lang: python
          label: Python
          source: >-
            # Initialize the client

            # In an asynchronous context, you can use IngestionClient instead,
            which exposes the exact same methods.

            client = IngestionClientSync(
                "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
            )


            # Call the API

            response = client.get_event(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                event_id="6c02aeb1-775e-418e-870b-1faccd4b2c0c",
            )



            # print the response

            print(response)
        - lang: ruby
          label: Ruby
          source: >-
            # Initialize the client

            client = Algolia::IngestionClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")


            # Call the API

            response = client.get_event("6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            "6c02aeb1-775e-418e-870b-1faccd4b2c0c")



            # print the response

            puts(response)
        - lang: scala
          label: Scala
          source: |-
            // Initialize the client
            val client = IngestionClient(
              appId = "ALGOLIA_APPLICATION_ID",
              apiKey = "ALGOLIA_API_KEY",
              region = "ALGOLIA_APPLICATION_REGION"
            )

            // Call the API
            val response = Await.result(
              client.getEvent(
                runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                eventID = "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
              ),
              Duration(100, "sec")
            )

            // print the response
            println(response)
        - lang: swift
          label: Swift
          source: >-
            // Initialize the client

            let client = try IngestionClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY", region: .us)


            // Call the API

            let response = try await client.getEvent(
                runID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                eventID: "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            )


            // print the response

            print(response)
        - lang: cURL
          label: curl
          source: |-
            curl --request GET \
              --url https://data.us.algolia.com/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0f \
              --header 'accept: application/json' \
              --header 'x-algolia-api-key: ALGOLIA_API_KEY' \
              --header 'x-algolia-application-id: ALGOLIA_APPLICATION_ID'
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: x-algolia-application-id
      description: Your Algolia application ID.
    apiKey:
      type: apiKey
      in: header
      name: x-algolia-api-key
      description: >
        Your Algolia API key with the necessary permissions to make the request.

        Permissions are controlled through access control lists (ACL) and access
        restrictions.

        The required ACL to make a request is listed in each endpoint's
        reference.
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, for example `1/newFeature`.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    IndexName:
      name: indexName
      in: path
      description: Name of the index on which to perform the operation.
      required: true
      schema:
        type: string
        example: ALGOLIA_INDEX_NAME
    watch:
      name: watch
      in: query
      description: >-
        When provided, the push operation will be synchronous and the API will
        wait for the ingestion to be finished before responding.
      required: false
      schema:
        type: boolean
    itemsPerPage:
      name: itemsPerPage
      in: query
      description: Number of items per page.
      required: false
      schema:
        $ref: '#/components/schemas/itemsPerPage'
    page:
      name: page
      in: query
      description: Page number of the paginated API response.
      required: false
      schema:
        $ref: '#/components/schemas/page'
    type:
      name: type
      in: query
      description: Type of authentication resource to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AuthenticationType'
        example: basic,oauth
    platform:
      name: platform
      in: query
      description: Ecommerce platform for which to retrieve authentications.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/platformWithNone'
        example: commercetools,none
    sort:
      name: sort
      in: query
      description: Property by which to sort the list of authentications.
      required: false
      schema:
        $ref: '#/components/schemas/authenticationSortKeys'
    order:
      name: order
      in: query
      description: Sort order of the response, ascending or descending.
      required: false
      schema:
        $ref: '#/components/schemas/orderKeys'
    pathAuthenticationID:
      name: authenticationID
      in: path
      required: true
      description: Unique identifier of an authentication resource.
      schema:
        $ref: '#/components/schemas/authenticationID'
    destinationParameters_type:
      name: type
      in: query
      description: Destination type.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/DestinationType'
        example: search
    authenticationID:
      name: authenticationID
      in: query
      description: Authentication ID used by destinations.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
    transformationID:
      name: transformationID
      in: query
      description: Get the list of destinations used by a transformation.
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/transformationID'
    destinationParameters_sort:
      name: sort
      in: query
      description: Property by which to sort the destinations.
      required: false
      example: type
      schema:
        $ref: '#/components/schemas/destinationSortKeys'
    pathDestinationID:
      name: destinationID
      in: path
      required: true
      description: Unique identifier of a destination.
      schema:
        $ref: '#/components/schemas/destinationID'
    sourceParameters_type:
      name: type
      in: query
      description: Source type. Some sources require authentication.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/SourceType'
        example: commercetools,bigcommerce
    sourceParameters_authenticationID:
      name: authenticationID
      in: query
      description: |
        Authentication IDs of the sources to retrieve.
        'none' returns sources that doesn't have an authentication.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
        example:
          - 10000000-0a75-4000-a000-000000000001
          - none
    sourceParameters_sort:
      name: sort
      in: query
      description: Property by which to sort the list of sources.
      required: false
      schema:
        $ref: '#/components/schemas/sourceSortKeys'
    pathSourceID:
      name: sourceID
      in: path
      required: true
      description: Unique identifier of a source.
      schema:
        $ref: '#/components/schemas/sourceID'
    action:
      name: action
      in: query
      required: false
      description: Actions for filtering the list of tasks.
      style: form
      explode: false
      schema:
        type: array
        description: Actions to perform on the Algolia index.
        items:
          $ref: '#/components/schemas/ActionType'
        example: save,replace,partial,append
    enabled:
      name: enabled
      in: query
      description: Whether to filter the list of tasks by the `enabled` status.
      required: false
      schema:
        type: boolean
    sourceID:
      name: sourceID
      in: query
      description: Source IDs for filtering the list of tasks.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/sourceID'
    sourceType:
      name: sourceType
      in: query
      description: Filters the tasks with the specified source type.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/SourceType'
        example: json,commercetools
    destinationID:
      name: destinationID
      in: query
      description: Destination IDs for filtering the list of tasks.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/destinationID'
    triggerType:
      name: triggerType
      in: query
      description: Type of task trigger for filtering the list of tasks.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TriggerType'
        example: onDemand,schedule,subscription,streaming
    withEmailNotifications:
      name: withEmailNotifications
      in: query
      description: >-
        If specified, the response only includes tasks with
        notifications.email.enabled set to this value.
      required: false
      schema:
        type: boolean
    taskParameters_sort:
      name: sort
      in: query
      description: Property by which to sort the list of tasks.
      required: false
      schema:
        $ref: '#/components/schemas/taskSortKeys'
    pathTaskID:
      name: taskID
      in: path
      required: true
      description: Unique identifier of a task.
      schema:
        $ref: '#/components/schemas/taskID'
    transformationParameters_sort:
      name: sort
      in: query
      description: Property by which to sort the list of transformations.
      required: false
      schema:
        $ref: '#/components/schemas/transformationSortKeys'
    transformationParameters_type:
      name: type
      in: query
      description: >-
        Whether to filter the list of transformations by the type of
        transformation.
      required: false
      schema:
        $ref: '#/components/schemas/TransformationType'
    pathTransformationID:
      name: transformationID
      in: path
      required: true
      description: Unique identifier of a transformation.
      schema:
        $ref: '#/components/schemas/transformationID'
    runStatus:
      name: status
      in: query
      description: Run status for filtering the list of task runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RunStatus'
    runType:
      name: type
      in: query
      description: Run type for filtering the list of task runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RunType'
    taskID:
      name: taskID
      in: query
      description: Task ID for filtering the list of task runs.
      schema:
        $ref: '#/components/schemas/taskID'
    runSort:
      name: sort
      in: query
      description: Property by which to sort the list of task runs.
      required: false
      schema:
        $ref: '#/components/schemas/runSortKeys'
    pathRunID:
      name: runID
      in: path
      required: true
      description: Unique identifier of a task run.
      schema:
        $ref: '#/components/schemas/RunID'
    eventStatus:
      name: status
      in: query
      description: Event status for filtering the list of task runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventStatus'
    eventType:
      name: type
      in: query
      description: Event type for filtering the list of task runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventType'
    eventSort:
      name: sort
      in: query
      description: Property by which to sort the list of task run events.
      required: false
      schema:
        $ref: '#/components/schemas/eventSortKeys'
    pathEventID:
      name: eventID
      in: path
      required: true
      description: Unique identifier of an event.
      schema:
        $ref: '#/components/schemas/EventID'
  schemas:
    ErrorBase:
      description: Error.
      type: object
      x-keep-model: true
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    action:
      type: string
      enum:
        - addObject
        - updateObject
        - partialUpdateObject
        - partialUpdateObjectNoCreate
        - deleteObject
        - delete
        - clear
      description: >
        Which indexing operation to perform:


        - `addObject`: adds records to an index.
           Equivalent to the "Add a new record (with auto-generated object ID)" operation.
        - `updateObject`: adds or replaces records in an index.
           Equivalent to the "Add or replace a record" operation.
        - `partialUpdateObject`: adds or updates attributes within records.
           Equivalent to the "Add or update attributes" operation with the `createIfNoExists` parameter set to true.
           (If a record with the specified `objectID` doesn't exist in the specified index, this action creates adds the record to the index)
        - `partialUpdateObjectNoCreate`: same as `partialUpdateObject`, but with
        `createIfNoExists` set to false.
           (A record isn't added to the index if its `objectID` doesn't exist)
        - `deleteObject`: delete records from an index.
          Equivalent to the "Delete a record" operation.
        - `delete`. Delete an index. Equivalent to the "Delete an index"
        operation.

        - `clear`: delete all records from an index. Equivalent to the "Delete
        all records from an index operation".
    objectID:
      type: string
      description: Unique record identifier.
      example: test-record-123
    PushTaskPayload:
      title: pushTaskPayload
      type: object
      properties:
        action:
          $ref: '#/components/schemas/action'
        records:
          type: array
          items:
            title: pushTaskRecords
            type: object
            additionalProperties: true
            required:
              - objectID
            properties:
              objectID:
                $ref: '#/components/schemas/objectID'
      required:
        - action
        - records
    RunID:
      type: string
      description: Universally unique identifier (UUID) of a task run.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    EventID:
      type: string
      description: Universally unique identifier (UUID) of an event.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    EventStatus:
      oneOf:
        - type: string
          enum:
            - created
            - started
            - retried
            - failed
            - succeeded
            - critical
        - type: 'null'
    EventType:
      type: string
      enum:
        - fetch
        - record
        - log
        - transform
    PublishedAt:
      type: string
      description: Date of publish RFC 3339 format.
    Event:
      type: object
      description: An event describe a step of the task execution flow.
      additionalProperties: false
      properties:
        eventID:
          $ref: '#/components/schemas/EventID'
        runID:
          $ref: '#/components/schemas/RunID'
        status:
          $ref: '#/components/schemas/EventStatus'
        type:
          $ref: '#/components/schemas/EventType'
        batchSize:
          type: integer
          description: The extracted record batch size.
          example: 10
          minimum: 0
          multipleOf: 1
        data:
          oneOf:
            - type: object
              additionalProperties: true
            - type: 'null'
        publishedAt:
          $ref: '#/components/schemas/PublishedAt'
      required:
        - eventID
        - runID
        - status
        - type
        - batchSize
        - publishedAt
    CreatedAt:
      type: string
      description: Date of creation in RFC 3339 format.
    WatchResponse:
      type: object
      additionalProperties: false
      properties:
        runID:
          $ref: '#/components/schemas/RunID'
        eventID:
          $ref: '#/components/schemas/EventID'
        data:
          type: array
          description: >
            This field is always null when used with the Push endpoint.

            When used for a source discover or source validate run, it will
            include the sampled data of the source.
          items:
            type: object
        events:
          description: >-
            in case of error, observability events will be added to the
            response.
          type: array
          items:
            $ref: '#/components/schemas/Event'
        message:
          description: >-
            a message describing the outcome of the operation that has been ran
            (push, discover or validate) run.
          type: string
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - runID
    itemsPerPage:
      type: integer
      description: Number of items per page.
      minimum: 1
      maximum: 100
      default: 10
    page:
      type: integer
      minimum: 1
      description: Page of the API response to retrieve.
    AuthenticationType:
      type: string
      description: >-
        Type of authentication. This determines the type of credentials required
        in the `input` object.
      enum:
        - googleServiceAccount
        - basic
        - apiKey
        - oauth
        - algolia
        - algoliaInsights
        - secrets
    Platform:
      default: null
      oneOf:
        - type: string
          description: |
            Name of an ecommerce platform with which to authenticate.
            This determines which authentication type you can select.
          enum:
            - bigcommerce
            - commercetools
            - shopify
        - type: 'null'
    platformNone:
      type: string
      description: >-
        Authentication resource not tied to any ecommerce platform, used for
        filtering.
      enum:
        - none
    platformWithNone:
      oneOf:
        - $ref: '#/components/schemas/Platform'
        - $ref: '#/components/schemas/platformNone'
    authenticationSortKeys:
      type: string
      description: Property by which to sort the list of authentications.
      default: createdAt
      enum:
        - name
        - type
        - platform
        - updatedAt
        - createdAt
    orderKeys:
      type: string
      description: Ascending or descending sort order.
      default: desc
      enum:
        - asc
        - desc
    authenticationID:
      type: string
      description: Universally unique identifier (UUID) of an authentication resource.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    name:
      type: string
      description: Descriptive name for the resource.
    owner:
      oneOf:
        - type: string
          description: Owner of the resource.
        - type: 'null'
    AuthGoogleServiceAccountPartial:
      type: object
      description: >-
        Credentials for authenticating with a Google service account, such as
        BigQuery.
      additionalProperties: false
      properties:
        clientEmail:
          type: string
          description: Email address of the Google service account.
          example: service-account-name@project-id.iam.gserviceaccount.com
        privateKey:
          type: string
          description: >-
            Private key of the Google service account. This field is `null` in
            the API response.
      x-discriminator-fields:
        - clientEmail
    AuthBasicPartial:
      type: object
      description: Credentials for authenticating with user name and password.
      additionalProperties: false
      properties:
        username:
          type: string
          description: Username.
        password:
          type: string
          description: Password. This field is `null` in the API response.
      x-discriminator-fields:
        - username
    AuthAPIKeyPartial:
      type: object
      description: Credentials for authenticating with an API key.
      additionalProperties: false
      properties:
        key:
          type: string
          description: API key. This field is `null` in the API response.
      x-discriminator-fields:
        - key
    AuthOAuthPartial:
      type: object
      description: Credentials for authenticating with OAuth 2.0.
      additionalProperties: false
      properties:
        url:
          type: string
          description: URL for the OAuth endpoint.
        client_id:
          type: string
          description: Client ID.
        client_secret:
          type: string
          description: Client secret. This field is `null` in the API response.
        scope:
          type: string
          default: ''
          description: OAuth scope.
      x-discriminator-fields:
        - url
    AuthAlgoliaPartial:
      type: object
      description: Credentials for authenticating with Algolia.
      additionalProperties: false
      properties:
        appID:
          type: string
          description: Algolia application ID.
        apiKey:
          type: string
          description: >
            Algolia API key with the ACL: `addObject`, `deleteObject`,
            `settings`, `editSettings`, `listIndexes`, `deleteIndex`.

            This field is `null` in the API response.
    AuthAlgoliaInsightsPartial:
      type: object
      additionalProperties: false
      description: Credentials for authenticating with the Algolia Insights API.
      properties:
        appID:
          type: string
          description: Algolia application ID.
        apiKey:
          type: string
          description: |
            Algolia API key with the ACL: `search`.
            This field is `null` in the API response.
    AuthSecrets:
      type: object
      description: A key:value authentication for your transformations.
      additionalProperties:
        type: string
    AuthInputPartial:
      oneOf:
        - $ref: '#/components/schemas/AuthGoogleServiceAccountPartial'
        - $ref: '#/components/schemas/AuthBasicPartial'
        - $ref: '#/components/schemas/AuthAPIKeyPartial'
        - $ref: '#/components/schemas/AuthOAuthPartial'
        - $ref: '#/components/schemas/AuthAlgoliaPartial'
        - $ref: '#/components/schemas/AuthAlgoliaInsightsPartial'
        - $ref: '#/components/schemas/AuthSecrets'
    updatedAt:
      type: string
      description: Date of last update in RFC 3339 format.
    Authentication:
      type: object
      description: >-
        Resource representing the information required to authenticate with a
        source or a destination.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        owner:
          $ref: '#/components/schemas/owner'
        input:
          $ref: '#/components/schemas/AuthInputPartial'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - type
        - name
        - input
        - createdAt
        - updatedAt
    Pagination:
      type: object
      description: Paginated API response.
      additionalProperties: false
      properties:
        nbPages:
          type: integer
          minimum: 1
          description: Number of pages in the API response.
        page:
          $ref: '#/components/schemas/page'
        nbItems:
          type: integer
          minimum: 0
          description: Number of items in the API response.
        itemsPerPage:
          $ref: '#/components/schemas/itemsPerPage'
      required:
        - nbPages
        - page
        - nbItems
        - itemsPerPage
    AuthGoogleServiceAccount:
      type: object
      description: >-
        Credentials for authenticating with a Google service account, such as
        BigQuery.
      additionalProperties: false
      properties:
        clientEmail:
          type: string
          description: Email address of the Google service account.
          example: service-account-name@project-id.iam.gserviceaccount.com
        privateKey:
          type: string
          description: >-
            Private key of the Google service account. This field is `null` in
            the API response.
      required:
        - clientEmail
        - privateKey
      x-discriminator-fields:
        - clientEmail
        - privateKey
    AuthBasic:
      type: object
      description: Credentials for authenticating with user name and password.
      additionalProperties: false
      properties:
        username:
          type: string
          description: Username.
        password:
          type: string
          description: Password. This field is `null` in the API response.
      required:
        - username
        - password
      x-discriminator-fields:
        - username
        - password
    AuthAPIKey:
      type: object
      description: Credentials for authenticating with an API key.
      additionalProperties: false
      properties:
        key:
          type: string
          description: API key. This field is `null` in the API response.
      required:
        - key
      x-discriminator-fields:
        - key
    AuthOAuth:
      type: object
      description: Credentials for authenticating with OAuth 2.0.
      additionalProperties: false
      properties:
        url:
          type: string
          description: URL for the OAuth endpoint.
        client_id:
          type: string
          description: Client ID.
        client_secret:
          type: string
          description: Client secret. This field is `null` in the API response.
        scope:
          type: string
          default: ''
          description: OAuth scope.
      required:
        - url
        - client_id
        - client_secret
      x-discriminator-fields:
        - url
        - client_id
        - client_secret
    AuthAlgolia:
      type: object
      additionalProperties: false
      description: Credentials for authenticating with Algolia.
      properties:
        appID:
          type: string
          description: Algolia application ID.
        apiKey:
          type: string
          description: >
            Algolia API key with the ACL: `addObject`, `deleteObject`,
            `settings`, `editSettings`, `listIndexes`, `deleteIndex`.

            This field is `null` in the API response.
      required:
        - appID
        - apiKey
    AuthAlgoliaInsights:
      type: object
      additionalProperties: false
      description: Credentials for authenticating with the Algolia Insights API.
      properties:
        appID:
          type: string
          description: Algolia application ID.
        apiKey:
          type: string
          description: |
            Algolia API key with the ACL: `search`.
            This field is `null` in the API response.
      required:
        - appID
        - apiKey
    AuthInput:
      oneOf:
        - $ref: '#/components/schemas/AuthGoogleServiceAccount'
        - $ref: '#/components/schemas/AuthBasic'
        - $ref: '#/components/schemas/AuthAPIKey'
        - $ref: '#/components/schemas/AuthOAuth'
        - $ref: '#/components/schemas/AuthAlgolia'
        - $ref: '#/components/schemas/AuthAlgoliaInsights'
        - $ref: '#/components/schemas/AuthSecrets'
    AuthenticationCreate:
      type: object
      description: Request body for creating a new authentication resource.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInput'
      required:
        - type
        - name
        - input
    AuthenticationCreateResponse:
      type: object
      description: API response for the successful creation of an authentication resource.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - authenticationID
        - name
        - createdAt
    AuthenticationSearch:
      type: object
      additionalProperties: false
      description: Request body for searching for authentication resources.
      properties:
        authenticationIDs:
          type: array
          items:
            $ref: '#/components/schemas/authenticationID'
      required:
        - authenticationIDs
    DeleteResponse:
      type: object
      properties:
        deletedAt:
          type: string
          description: Date of deletion in RFC 3339 format.
      required:
        - deletedAt
    AuthenticationUpdate:
      type: object
      description: Request body for updating an authentication resource.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/AuthInputPartial'
    AuthenticationUpdateResponse:
      type: object
      additionalProperties: false
      description: API response for a successful update of an authentication resource.
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - name
        - updatedAt
    DestinationType:
      type: string
      description: |
        Destination type.

        - `search`.
          Data is stored in an Algolia index.

        - `insights`.
          Data is recorded as user events in the Insights API.
      enum:
        - search
        - insights
    transformationID:
      type: string
      description: Universally unique identifier (UUID) of a transformation.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    destinationSortKeys:
      type: string
      description: Property by which to sort the destinations.
      default: createdAt
      enum:
        - name
        - type
        - updatedAt
        - createdAt
    destinationID:
      type: string
      description: Universally unique identifier (UUID) of a destination resource.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    RecordType:
      type: string
      description: Record type for ecommerce sources.
      enum:
        - product
        - variant
        - collection
    AttributesToExclude:
      type: array
      description: >
        Attributes from your source to exclude from Algolia records.


        Not all your data attributes will be useful for searching.

        Keeping your Algolia records small increases indexing and search
        performance.


        - Exclude nested attributes with `.` notation. For example, `foo.bar`
        indexes the `foo` attribute and all its children **except** the `bar`
        attribute.

        - Exclude attributes from arrays with `[i]`, where `i` is the index of
        the array element.
          For example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo` array, but indexes the complete `foo` attribute for all other elements.
          Use `*` as wildcard: `foo.[*].bar` excludes `bar` from all elements of the `foo` array.
      items:
        type: string
    DestinationInput:
      type: object
      additionalProperties: false
      properties:
        indexName:
          type: string
          description: Algolia index name (case-sensitive).
        recordType:
          $ref: '#/components/schemas/RecordType'
        attributesToExclude:
          $ref: '#/components/schemas/AttributesToExclude'
      required:
        - indexName
    transformationIDs:
      type: array
      items:
        $ref: '#/components/schemas/transformationID'
    Destination:
      type: object
      description: Destinations are Algolia resources like indices or event streams.
      additionalProperties: false
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        owner:
          $ref: '#/components/schemas/owner'
        input:
          $ref: '#/components/schemas/DestinationInput'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        transformationIDs:
          $ref: '#/components/schemas/transformationIDs'
      required:
        - destinationID
        - type
        - name
        - input
        - createdAt
        - updatedAt
    DestinationCreate:
      type: object
      additionalProperties: false
      description: API request body for creating a new destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        transformationIDs:
          $ref: '#/components/schemas/transformationIDs'
      required:
        - type
        - name
        - input
    DestinationCreateResponse:
      type: object
      additionalProperties: false
      description: API response for creating a new destination.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - destinationID
        - name
        - createdAt
    DestinationSearch:
      type: object
      additionalProperties: false
      description: API request body for searching destinations.
      properties:
        destinationIDs:
          type: array
          items:
            $ref: '#/components/schemas/destinationID'
      required:
        - destinationIDs
    DestinationUpdate:
      type: object
      additionalProperties: false
      description: API request body for updating a destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        transformationIDs:
          $ref: '#/components/schemas/transformationIDs'
    DestinationUpdateResponse:
      type: object
      additionalProperties: false
      description: API response for updating a destination.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - destinationID
        - name
        - updatedAt
    SourceType:
      type: string
      enum:
        - bigcommerce
        - bigquery
        - commercetools
        - csv
        - docker
        - ga4BigqueryExport
        - json
        - shopify
        - push
    sourceSortKeys:
      type: string
      description: Property by which to sort the list of sources.
      default: createdAt
      enum:
        - name
        - type
        - updatedAt
        - createdAt
    sourceID:
      type: string
      description: Universally uniqud identifier (UUID) of a source.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    CommercetoolsCustomFields:
      type: object
      additionalProperties: false
      description: >
        Custom fields from commercetools to add to the records.


        For more information, see [Using Custom Types and Custom
        Fields](https://docs.commercetools.com/tutorials/custom-types).
      properties:
        inventory:
          oneOf:
            - type: array
              description: Inventory custom fields.
              items:
                type: string
            - type: 'null'
        price:
          oneOf:
            - type: array
              description: Price custom fields.
              items:
                type: string
            - type: 'null'
        category:
          oneOf:
            - type: array
              description: Category custom fields.
              items:
                type: string
            - type: 'null'
    SourceCommercetools:
      type: object
      description: Specific configuration attributes of a `commercetools` source.
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          items:
            description: Unique and immutable key of the referenced store.
            type: string
        locales:
          type: array
          description: Locales for your commercetools stores.
          items:
            type: string
            pattern: ^[a-z]{2}(-[A-Z]{2})?$
            description: >-
              Locale specified as combination of a two-letter language code and
              an optional two-letter country code.
            example: fr-FR
        url:
          type: string
        projectKey:
          type: string
        fallbackIsInStockValue:
          type: boolean
          default: true
          description: >
            Whether a fallback value is stored in the Algolia record if there's
            no inventory information about the product.
        productQueryPredicate:
          type: string
          description: >
            Predicate to filter out specific products when indexing. For more
            information, see [Query
            Predicate](https://docs.commercetools.com/api/predicates/query).
        customFields:
          $ref: '#/components/schemas/CommercetoolsCustomFields'
      required:
        - url
        - projectKey
      x-discriminator-fields:
        - projectKey
    BigCommerceChannel:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: ID of the BigCommerce channel.
        currencies:
          type: array
          description: Currencies for the given channel.
          example:
            - usd
            - eur
          items:
            type: string
            description: Three-letter code for the currency.
            example: usd
      required:
        - id
    BigCommerceMetafield:
      type: object
      additionalProperties: false
      properties:
        namespace:
          type: string
          description: Namespace of the metafield.
        key:
          type: string
          description: Key identifier of the metafield.
      required:
        - namespace
        - key
    SourceBigCommerce:
      type: object
      description: Specific configuration attributes of a `bigcommerce` source.
      additionalProperties: false
      properties:
        storeHash:
          type: string
          description: Store hash identifying your BigCommerce store.
        channel:
          $ref: '#/components/schemas/BigCommerceChannel'
        customFields:
          type: array
          items:
            type: string
        productMetafields:
          type: array
          items:
            $ref: '#/components/schemas/BigCommerceMetafield'
        variantMetafields:
          type: array
          items:
            $ref: '#/components/schemas/BigCommerceMetafield'
      required:
        - storeHash
      x-discriminator-fields:
        - storeHash
    UniqueIDColumn:
      type: string
      description: >-
        Name of a column that contains a unique ID which will be used as
        `objectID` in Algolia.
    MethodType:
      type: string
      description: HTTP method to be used for retrieving your data.
      enum:
        - GET
        - POST
    SourceJSON:
      type: object
      description: Specific configuration attributes of a `json` source.
      additionalProperties: false
      properties:
        url:
          type: string
          description: URL of the file.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
        method:
          $ref: '#/components/schemas/MethodType'
      required:
        - url
    MappingTypeCSV:
      type: string
      enum:
        - string
        - integer
        - float
        - boolean
        - json
    SourceCSV:
      type: object
      description: Specific configuration attributes of a `csv` source.
      additionalProperties: false
      properties:
        url:
          type: string
          description: URL of the file.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
        mapping:
          type: object
          description: |
            Key-value pairs of column names and their expected types.
          x-additionalPropertyName: column name
          additionalProperties:
            $ref: '#/components/schemas/MappingTypeCSV'
        method:
          $ref: '#/components/schemas/MethodType'
        delimiter:
          type: string
          minLength: 1
          maxLength: 1
          default: ','
          description: >-
            The character used to split the value on each line, default to a
            comma (\r, \n, 0xFFFD, and space are forbidden).
      required:
        - url
    BigQueryDataType:
      type: string
      enum:
        - ga4
        - ga360
    SourceBigQuery:
      type: object
      description: Specific configuration attributes of a `bigquery` source.
      additionalProperties: false
      properties:
        projectID:
          type: string
          description: Project ID of the BigQuery source.
        datasetID:
          type: string
          description: Dataset ID of the BigQuery source.
        dataType:
          $ref: '#/components/schemas/BigQueryDataType'
        table:
          type: string
          description: Table name for the BigQuery export.
        tablePrefix:
          type: string
          description: Table prefix for a Google Analytics 4 data export to BigQuery.
        customSQLRequest:
          type: string
          description: Custom SQL request to extract data from the BigQuery table.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
      required:
        - projectID
        - datasetID
      x-discriminator-fields:
        - projectID
    SourceGA4BigQueryExport:
      type: object
      description: Specific configuration attributes of a `ga4BigqueryExport` source.
      additionalProperties: false
      properties:
        projectID:
          type: string
          description: GCP project ID that the BigQuery export writes to.
        datasetID:
          type: string
          description: BigQuery dataset ID that the BigQuery export writes to.
        tablePrefix:
          type: string
          description: Prefix of the tables that the BigQuery Export writes to.
          example: events_intraday_
      required:
        - projectID
        - datasetID
        - tablePrefix
      x-discriminator-fields:
        - projectID
        - datasetID
        - tablePrefix
    SourceDocker:
      type: object
      description: Specific configuration attributes of a `docker` source.
      additionalProperties: false
      properties:
        image:
          type: string
          description: Name of the connector.
          example: zendesk
        configuration:
          type: object
          description: Configuration of the spec.
      required:
        - image
        - configuration
      x-discriminator-fields:
        - image
        - configuration
    SourceUpdateShopify:
      type: object
      description: Specific configuration attributes of a `shopify` source.
      additionalProperties: false
      properties:
        featureFlags:
          type: object
          description: Feature flags for the Shopify source.
          additionalProperties: true
    sourceShopifyBase:
      type: object
      additionalProperties: false
      properties:
        shopURL:
          type: string
          description: URL of the Shopify store.
      required:
        - shopURL
      x-discriminator-fields:
        - shopURL
    SourceShopify:
      allOf:
        - $ref: '#/components/schemas/SourceUpdateShopify'
        - $ref: '#/components/schemas/sourceShopifyBase'
    SourceInput:
      oneOf:
        - $ref: '#/components/schemas/SourceCommercetools'
        - $ref: '#/components/schemas/SourceBigCommerce'
        - $ref: '#/components/schemas/SourceJSON'
        - $ref: '#/components/schemas/SourceCSV'
        - $ref: '#/components/schemas/SourceBigQuery'
        - $ref: '#/components/schemas/SourceGA4BigQueryExport'
        - $ref: '#/components/schemas/SourceDocker'
        - $ref: '#/components/schemas/SourceShopify'
    Source:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        owner:
          $ref: '#/components/schemas/owner'
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - type
        - name
        - createdAt
        - updatedAt
    SourceCreate:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
          description: Descriptive name of the source.
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - type
        - name
    SourceCreateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
          description: Descriptive name of the source.
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - sourceID
        - name
        - createdAt
    SourceSearch:
      type: object
      additionalProperties: false
      properties:
        sourceIDs:
          type: array
          items:
            type: string
      required:
        - sourceIDs
    SourceUpdateCommercetools:
      type: object
      description: Specific configuration attributes of a `commercetools` source.
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          items:
            description: Unique and immutable key of the referenced store.
            type: string
        locales:
          type: array
          description: Locales for your commercetools stores.
          items:
            type: string
            pattern: ^[a-z]{2}(-[A-Z]{2})?$
            description: >-
              Locale specified as combination of a two-letter language code and
              an optional two-letter country code.
            example: fr-FR
        url:
          type: string
        fallbackIsInStockValue:
          type: boolean
          description: >
            Whether a fallback value is stored in the Algolia record if there's
            no inventory information about the product.
        productQueryPredicate:
          type: string
          description: >
            Predicate to filter out specific products when indexing. For more
            information, see [Query
            Predicate](https://docs.commercetools.com/api/predicates/query).
        customFields:
          $ref: '#/components/schemas/CommercetoolsCustomFields'
    SourceUpdateDocker:
      type: object
      description: Specific configuration attributes of a `docker` source.
      additionalProperties: false
      properties:
        configuration:
          type: object
          description: Configuration of the spec.
      required:
        - configuration
      x-discriminator-fields:
        - configuration
    SourceUpdateInput:
      oneOf:
        - $ref: '#/components/schemas/SourceUpdateCommercetools'
        - $ref: '#/components/schemas/SourceJSON'
        - $ref: '#/components/schemas/SourceCSV'
        - $ref: '#/components/schemas/SourceBigQuery'
        - $ref: '#/components/schemas/SourceGA4BigQueryExport'
        - $ref: '#/components/schemas/SourceUpdateDocker'
        - $ref: '#/components/schemas/SourceUpdateShopify'
    SourceUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: Descriptive name of the source.
        input:
          $ref: '#/components/schemas/SourceUpdateInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
    SourceUpdateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
          description: Descriptive name of the source.
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - name
        - updatedAt
    EntityType:
      type: string
      description: Type of entity to update.
      enum:
        - product
        - collection
    RunSourcePayload:
      type: object
      additionalProperties: false
      properties:
        indexToInclude:
          type: array
          description: List of index names to include in reindex/update.
          items:
            type: string
        indexToExclude:
          type: array
          description: List of index names to exclude in reindex/update.
          items:
            type: string
        entityIDs:
          type: array
          items:
            type: string
          description: List of entityIDs to update.
        entityType:
          $ref: '#/components/schemas/EntityType'
        runMetadata:
          type: object
          additionalProperties: true
          description: Additional information that will be passed to the created runs.
    ActionType:
      type: string
      description: Action to perform on the Algolia index.
      enum:
        - replace
        - save
        - partial
        - partialNoCreate
        - append
    TriggerType:
      type: string
      description: |
        Task trigger, describing when a task should run.

        - `onDemand`.
          Manually trigger the task with the `/run` endpoint.

        - `schedule`.
          Regularly trigger the task on a `cron` schedule.

        - `subscription`.
          Trigger the task after an event is received, such as, a webhook.

        - `streaming`.
          Run the task continuously.
      enum:
        - onDemand
        - schedule
        - subscription
        - streaming
    taskSortKeys:
      type: string
      description: Property by which to sort the list of tasks.
      default: createdAt
      enum:
        - enabled
        - triggerType
        - action
        - updatedAt
        - createdAt
    taskID:
      type: string
      description: Universally unique identifier (UUID) of a task.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    Cron:
      type: string
      description: Cron expression for the task's schedule.
      example: '* * 1 * *'
    LastRun:
      description: The last time the scheduled task ran in RFC 3339 format.
      type: string
    NextRun:
      description: The next scheduled run of the task in RFC 3339 format.
      type: string
    MappingFormatSchema:
      type: string
      description: Mapping format schema.
      enum:
        - mappingkit/v1
    MappingFieldDirective:
      type: object
      additionalProperties: false
      description: >-
        Describes how a field should be resolved by applying a set of
        directives.
      properties:
        fieldKey:
          description: Destination field key.
          type: string
        value:
          type: object
          additionalProperties: true
          description: How the destination field should be resolved from the source.
      required:
        - fieldKey
        - value
    MappingKitAction:
      type: object
      additionalProperties: false
      description: >-
        Describes how a destination object should be resolved by means of
        applying a set of directives.
      properties:
        id:
          description: ID to uniquely identify this action.
          type: string
        enabled:
          description: Whether this action has any effect.
          type: boolean
        trigger:
          description: >-
            Condition which must be satisfied to apply the action. If this
            evaluates to false, the action is not applied, and the process
            attempts to apply the next action, if any.
          type: string
        fieldDirectives:
          type: array
          items:
            $ref: '#/components/schemas/MappingFieldDirective'
      required:
        - enabled
        - trigger
        - fieldDirectives
    MappingInput:
      type: object
      additionalProperties: false
      description: Transformations to apply to the source, serialized as a JSON string.
      properties:
        format:
          $ref: '#/components/schemas/MappingFormatSchema'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/MappingKitAction'
      required:
        - format
        - actions
      x-discriminator-fields:
        - format
        - actions
    StreamingInput:
      type: object
      additionalProperties: false
      description: >-
        Input for a `streaming` task whose source is of type `ga4BigqueryExport`
        and for which extracted data is continuously streamed.
      properties:
        mapping:
          $ref: '#/components/schemas/MappingInput'
      required:
        - mapping
      x-discriminator-fields:
        - mapping
    DockerStreamsSyncMode:
      type: string
      description: The strategy to use to fetch the data.
      enum:
        - incremental
        - fullTable
    DockerStreams:
      type: object
      properties:
        name:
          type: string
          description: The name of the stream to fetch the data from (e.g. table name).
        properties:
          type: array
          description: The properties of the stream to select (e.g. column).
          items:
            type: string
        syncMode:
          $ref: '#/components/schemas/DockerStreamsSyncMode'
      required:
        - name
        - syncMode
    DockerStreamsInput:
      description: The selected streams of an airbyte connector.
      type: object
      properties:
        streams:
          type: array
          items:
            $ref: '#/components/schemas/DockerStreams'
      required:
        - streams
      x-discriminator-fields:
        - streams
    ShopifyMetafield:
      type: object
      additionalProperties: false
      description: Represents a metafield in Shopify.
      properties:
        namespace:
          type: string
        key:
          type: string
        value:
          type: string
      required:
        - namespace
        - key
        - value
    ShopifyMarket:
      type: object
      additionalProperties: false
      description: Represents a market in Shopify.
      properties:
        countries:
          type: array
          items:
            type: string
        currencies:
          type: array
          items:
            type: string
        locales:
          type: array
          items:
            type: string
      required:
        - countries
        - currencies
        - locales
    ShopifyInput:
      type: object
      additionalProperties: false
      description: >-
        Represents the required elements of the task input when using a
        `shopify` source.
      properties:
        metafields:
          type: array
          items:
            $ref: '#/components/schemas/ShopifyMetafield'
        market:
          $ref: '#/components/schemas/ShopifyMarket'
      required:
        - metafields
        - market
    TaskInput:
      description: Configuration of the task, depending on its type.
      oneOf:
        - $ref: '#/components/schemas/StreamingInput'
        - $ref: '#/components/schemas/DockerStreamsInput'
        - $ref: '#/components/schemas/ShopifyInput'
    failureThreshold:
      type: integer
      minimum: 0
      maximum: 100
      description: >-
        Maximum accepted percentage of failures for a task run to finish
        successfully.
    cursor:
      type: string
      description: Date of the last cursor in RFC 3339 format.
    Notifications:
      type: object
      additionalProperties: false
      description: Notifications settings for a task.
      properties:
        email:
          title: emailNotifications
          type: object
          additionalProperties: false
          properties:
            enabled:
              description: >-
                Whether to send email notifications, note that this doesn't
                prevent the task from being blocked.
              type: boolean
      required:
        - email
    Policies:
      type: object
      additionalProperties: false
      description: Set of rules for a task.
      properties:
        criticalThreshold:
          description: >-
            The number of critical failures in a row before blocking the task
            and sending a notification.
          type: integer
          minimum: 1
          maximum: 10
    Task:
      type: object
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        cron:
          $ref: '#/components/schemas/Cron'
        lastRun:
          $ref: '#/components/schemas/LastRun'
        nextRun:
          $ref: '#/components/schemas/NextRun'
        owner:
          $ref: '#/components/schemas/owner'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          type: boolean
          default: true
          description: Whether the task is enabled.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        action:
          $ref: '#/components/schemas/ActionType'
        subscriptionAction:
          $ref: '#/components/schemas/ActionType'
        cursor:
          $ref: '#/components/schemas/cursor'
        notifications:
          $ref: '#/components/schemas/Notifications'
        policies:
          $ref: '#/components/schemas/Policies'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - sourceID
        - destinationID
        - enabled
        - createdAt
        - updatedAt
    TaskCreate:
      type: object
      additionalProperties: false
      description: API request body for creating a task.
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        action:
          $ref: '#/components/schemas/ActionType'
        subscriptionAction:
          $ref: '#/components/schemas/ActionType'
        cron:
          $ref: '#/components/schemas/Cron'
        enabled:
          type: boolean
          description: Whether the task is enabled.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        input:
          $ref: '#/components/schemas/TaskInput'
        cursor:
          $ref: '#/components/schemas/cursor'
        notifications:
          $ref: '#/components/schemas/Notifications'
        policies:
          $ref: '#/components/schemas/Policies'
      required:
        - sourceID
        - destinationID
        - action
    TaskCreateResponse:
      type: object
      additionalProperties: false
      description: API response for creating a task.
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - taskID
        - createdAt
    TaskSearch:
      type: object
      additionalProperties: false
      properties:
        taskIDs:
          type: array
          items:
            $ref: '#/components/schemas/taskID'
      required:
        - taskIDs
    TaskReplace:
      type: object
      additionalProperties: false
      description: API request body for updating a task.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        action:
          $ref: '#/components/schemas/ActionType'
        subscriptionAction:
          $ref: '#/components/schemas/ActionType'
        cron:
          $ref: '#/components/schemas/Cron'
        enabled:
          type: boolean
          description: Whether the task is enabled.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        input:
          $ref: '#/components/schemas/TaskInput'
        cursor:
          $ref: '#/components/schemas/cursor'
        notifications:
          $ref: '#/components/schemas/Notifications'
        policies:
          $ref: '#/components/schemas/Policies'
      required:
        - destinationID
        - action
    TaskUpdateResponse:
      type: object
      description: API response for updating a task.
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - updatedAt
    TaskUpdate:
      type: object
      additionalProperties: false
      description: API request body for partially updating a task.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        cron:
          $ref: '#/components/schemas/Cron'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          type: boolean
          description: Whether the task is enabled.
        subscriptionAction:
          $ref: '#/components/schemas/ActionType'
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        notifications:
          $ref: '#/components/schemas/Notifications'
        policies:
          $ref: '#/components/schemas/Policies'
    RunTaskPayload:
      type: object
      additionalProperties: false
      properties:
        runMetadata:
          type: object
          additionalProperties: true
          description: Additional information that will be passed to the created run.
    RunResponse:
      type: object
      additionalProperties: false
      description: API response for running a task.
      properties:
        runID:
          $ref: '#/components/schemas/RunID'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - runID
        - createdAt
    OnDemandTriggerType:
      type: string
      description: Task is run manually, with the `/run` endpoint.
      enum:
        - onDemand
    OnDemandTrigger:
      type: object
      additionalProperties: false
      description: Trigger information for manually-triggered tasks.
      properties:
        type:
          $ref: '#/components/schemas/OnDemandTriggerType'
        lastRun:
          $ref: '#/components/schemas/LastRun'
      required:
        - type
    ScheduleTriggerType:
      type: string
      description: Task runs on a schedule.
      enum:
        - schedule
    ScheduleTrigger:
      type: object
      additionalProperties: false
      description: Trigger information for scheduled tasks.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
        lastRun:
          $ref: '#/components/schemas/LastRun'
        nextRun:
          $ref: '#/components/schemas/NextRun'
      required:
        - type
        - cron
        - nextRun
    SubscriptionTriggerType:
      type: string
      description: Task runs after receiving subscribed event.
      enum:
        - subscription
    SubscriptionTrigger:
      type: object
      additionalProperties: false
      description: Trigger input for subscription tasks.
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionTriggerType'
      required:
        - type
    StreamingTriggerType:
      type: string
      description: Task runs continuously.
      enum:
        - streaming
    StreamingTrigger:
      type: object
      additionalProperties: false
      description: Trigger input for continuously running tasks.
      properties:
        type:
          $ref: '#/components/schemas/StreamingTriggerType'
      required:
        - type
    Trigger:
      description: Trigger that runs the task.
      oneOf:
        - $ref: '#/components/schemas/OnDemandTrigger'
        - $ref: '#/components/schemas/ScheduleTrigger'
        - $ref: '#/components/schemas/SubscriptionTrigger'
        - $ref: '#/components/schemas/StreamingTrigger'
    TaskV1:
      type: object
      additionalProperties: false
      deprecated: true
      description: >-
        The V1 task object, please use methods and types that don't contain the
        V1 suffix.
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/Trigger'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          type: boolean
          default: true
          description: Whether the task is enabled.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        action:
          $ref: '#/components/schemas/ActionType'
        cursor:
          $ref: '#/components/schemas/cursor'
        notifications:
          $ref: '#/components/schemas/Notifications'
        policies:
          $ref: '#/components/schemas/Policies'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - sourceID
        - destinationID
        - trigger
        - enabled
        - createdAt
        - updatedAt
    OnDemandTriggerInput:
      type: object
      additionalProperties: false
      description: Trigger information for manually-triggered tasks.
      properties:
        type:
          $ref: '#/components/schemas/OnDemandTriggerType'
      required:
        - type
    ScheduleTriggerInput:
      type: object
      additionalProperties: false
      description: Trigger input for scheduled tasks.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
      required:
        - type
        - cron
      x-discriminator-fields:
        - cron
    TaskCreateTrigger:
      oneOf:
        - $ref: '#/components/schemas/OnDemandTriggerInput'
        - $ref: '#/components/schemas/ScheduleTriggerInput'
        - $ref: '#/components/schemas/SubscriptionTrigger'
        - $ref: '#/components/schemas/StreamingTrigger'
    TaskCreateV1:
      type: object
      additionalProperties: false
      deprecated: true
      description: >-
        API request body for creating a task using the V1 shape, please use
        methods and types that don't contain the V1 suffix.
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TaskCreateTrigger'
        action:
          $ref: '#/components/schemas/ActionType'
        enabled:
          type: boolean
          description: Whether the task is enabled.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        input:
          $ref: '#/components/schemas/TaskInput'
        cursor:
          $ref: '#/components/schemas/cursor'
      required:
        - sourceID
        - destinationID
        - trigger
        - action
    TriggerUpdateInput:
      type: object
      additionalProperties: false
      description: Trigger for a task update.
      properties:
        cron:
          $ref: '#/components/schemas/Cron'
      required:
        - cron
    Enabled:
      type: boolean
      description: Whether the task is enabled.
    TaskUpdateV1:
      type: object
      additionalProperties: false
      deprecated: true
      description: >-
        API request body for updating a task using the V1 shape, please use
        methods and types that don't contain the V1 suffix.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TriggerUpdateInput'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          $ref: '#/components/schemas/Enabled'
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
    transformationSortKeys:
      type: string
      description: Property by which to sort the list of transformations.
      default: createdAt
      enum:
        - name
        - updatedAt
        - createdAt
    TransformationType:
      type: string
      description: The type of transformation, which can be either 'code' or 'noCode'.
      enum:
        - code
        - noCode
    AuthenticationIDs:
      description: The authentications associated with the current transformation.
      type: array
      items:
        $ref: '#/components/schemas/authenticationID'
    Code:
      type: string
      deprecated: true
      description: >-
        It is deprecated. Use the `input` field with proper `type` instead to
        specify the transformation code.
    TransformationCode:
      type: object
      additionalProperties: false
      description: >-
        Input for a transformation that contains the source code of the
        transformation.
      properties:
        code:
          type: string
          description: The source code of the transformation.
      required:
        - code
    TransformationNoCodeStep:
      type: object
      description: A step in a no-code transformation.
    TransformationNoCode:
      type: object
      additionalProperties: false
      description: Input for a no-code transformation that contains a series of steps.
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TransformationNoCodeStep'
      required:
        - steps
    TransformationInput:
      description: >-
        The input for the transformation, which can be either code or a no-code
        configuration.
      oneOf:
        - $ref: '#/components/schemas/TransformationCode'
        - $ref: '#/components/schemas/TransformationNoCode'
    Name:
      type: string
      description: The uniquely identified name of your transformation.
    Description:
      type: string
      description: A descriptive name for your transformation of what it does.
    Transformation:
      type: object
      additionalProperties: false
      properties:
        transformationID:
          $ref: '#/components/schemas/transformationID'
        authenticationIDs:
          $ref: '#/components/schemas/AuthenticationIDs'
        code:
          $ref: '#/components/schemas/Code'
        type:
          $ref: '#/components/schemas/TransformationType'
        input:
          $ref: '#/components/schemas/TransformationInput'
        name:
          $ref: '#/components/schemas/Name'
        description:
          $ref: '#/components/schemas/Description'
        owner:
          $ref: '#/components/schemas/owner'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - transformationID
        - code
        - name
        - createdAt
        - updatedAt
    TransformationCreate:
      type: object
      additionalProperties: false
      description: API request body for creating a transformation.
      properties:
        code:
          $ref: '#/components/schemas/Code'
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/TransformationType'
        input:
          $ref: '#/components/schemas/TransformationInput'
        description:
          $ref: '#/components/schemas/Description'
        authenticationIDs:
          $ref: '#/components/schemas/AuthenticationIDs'
      required:
        - name
    TransformationCreateResponse:
      type: object
      additionalProperties: false
      description: API response for creating a transformation.
      properties:
        transformationID:
          $ref: '#/components/schemas/transformationID'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
      required:
        - transformationID
        - createdAt
    TransformationTry:
      type: object
      additionalProperties: false
      properties:
        code:
          $ref: '#/components/schemas/Code'
        type:
          $ref: '#/components/schemas/TransformationType'
        input:
          $ref: '#/components/schemas/TransformationInput'
        sampleRecord:
          description: The record to apply the given code to.
          type: object
        authentications:
          type: array
          items:
            $ref: '#/components/schemas/AuthenticationCreate'
      required:
        - sampleRecord
    TransformationTryResponse:
      type: object
      additionalProperties: false
      properties:
        payloads:
          type: array
          description: >-
            The array of stringified records returned by the transformation
            service.
          items:
            type: string
        error:
          title: transformationError
          type: object
          description: The error if the transformation failed.
          properties:
            code:
              description: The error status code.
              type: integer
            message:
              description: A descriptive message explaining the failure.
              type: string
      required:
        - payloads
    TransformationSearch:
      type: object
      additionalProperties: false
      properties:
        transformationIDs:
          type: array
          items:
            $ref: '#/components/schemas/transformationID'
      required:
        - transformationIDs
    TransformationUpdateResponse:
      type: object
      description: API response for updating a transformation.
      additionalProperties: false
      properties:
        transformationID:
          $ref: '#/components/schemas/transformationID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - transformationID
        - updatedAt
    RunStatus:
      type: string
      description: Task run status.
      enum:
        - created
        - started
        - idled
        - finished
        - skipped
    RunType:
      type: string
      description: Task run type.
      enum:
        - reindex
        - update
        - discover
        - validate
        - push
    runSortKeys:
      type: string
      description: Property by which to sort the list of task runs.
      default: createdAt
      enum:
        - status
        - updatedAt
        - createdAt
    RunOutcome:
      type: string
      description: Task run outcome.
      enum:
        - success
        - failure
    RunReasonCode:
      type: string
      description: >-
        A code for the task run's outcome. A readable description of the code is
        included in the `reason` response property.
      enum:
        - internal
        - critical
        - no_events
        - too_many_errors
        - ok
        - discarded
        - blocking
    startedAt:
      type: string
      description: Date of start in RFC 3339 format.
    finishedAt:
      type: string
      description: Date of finish in RFC 3339 format.
    Run:
      type: object
      additionalProperties: false
      properties:
        runID:
          $ref: '#/components/schemas/RunID'
        appID:
          type: string
        taskID:
          $ref: '#/components/schemas/taskID'
        status:
          $ref: '#/components/schemas/RunStatus'
        progress:
          title: runProgress
          type: object
          additionalProperties: false
          properties:
            expectedNbOfEvents:
              type: integer
            receivedNbOfEvents:
              type: integer
          required:
            - expectedNbOfEvents
            - receivedNbOfEvents
        outcome:
          $ref: '#/components/schemas/RunOutcome'
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        reason:
          type: string
          description: More information about the task run's outcome.
        reasonCode:
          $ref: '#/components/schemas/RunReasonCode'
        type:
          $ref: '#/components/schemas/RunType'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        startedAt:
          $ref: '#/components/schemas/startedAt'
        finishedAt:
          $ref: '#/components/schemas/finishedAt'
      required:
        - runID
        - appID
        - taskID
        - status
        - type
        - createdAt
    Window:
      type: object
      additionalProperties: false
      description: Time window by which to filter the observability data.
      properties:
        startDate:
          type: string
          description: >-
            Date in RFC 3339 format representing the oldest data in the time
            window.
        endDate:
          type: string
          description: >-
            Date in RFC 3339 format representing the newest data in the time
            window.
      required:
        - startDate
        - endDate
    RunListResponse:
      type: object
      additionalProperties: false
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/Run'
        pagination:
          $ref: '#/components/schemas/Pagination'
        window:
          $ref: '#/components/schemas/Window'
      required:
        - runs
        - pagination
        - window
    eventSortKeys:
      type: string
      description: Property by which to sort the list of task run events.
      enum:
        - status
        - type
        - publishedAt
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
x-tagGroups:
  - name: Resources
    tags:
      - authentications
      - destinations
      - observability
      - sources
      - tasks
      - transformations
x-timeouts:
  browser:
    connect: 25000
    read: 25000
    write: 25000
  server:
    connect: 25000
    read: 25000
    write: 25000
