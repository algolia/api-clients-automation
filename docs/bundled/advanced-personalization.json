{
  "openapi": "3.0.2",
  "info": {
    "title": "Advanced Personalization API",
    "description": "The Advanced Personalization API lets you access user profiles built based on the behavior of your users on your website or app.\n\n## Client libraries\n\nUse Algolia's API clients and libraries to reliably integrate Algolia's APIs with your apps.\nThe official API clients are covered by Algolia's [Service Level Agreement](https://www.algolia.com/policies/sla/).\n\nSee: [Algolia's ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/)\n\n## Base URLs\n\nThe Advanced Personalization API can be reached from multiple domains, each specific to a region.\n\n- `https://ai-personalization.eu.algolia.com`\n- `https://ai-personalization.us.algolia.com`\n\nUse the URL that matches your [analytics region](https://dashboard.algolia.com/account/infrastructure/analytics).\n\n**All requests must use HTTPS.**\n\n## Authentication\n\nTo authenticate your API requests, add these headers:\n\n- `x-algolia-application-id`. Your Algolia application ID.\n- `x-algolia-api-key`. An API key with the `search`, `browse` and `recommendation` ACL permissions.\n\nYou can find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account).\n\n## Request format\n\nRequest bodies must be JSON objects.\n\n## Response status and errors\n\nThe Advanced Personalization API returns JSON responses.\nSince JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.\n\nSuccessful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a `5xx` status.\nError responses have a `message` property with more information.\n\n## Rate limiting\n\nWhen making requests to the Advanced Personalization API, you are limited to 500 API calls per minute per application.\n\nThe following headers provide information about your current limit:\n\n- `x-ratelimit-limit`: The number of requests allowed every 60 seconds.\n- `x-ratelimit-remaining`: The number of requests remaining in the current 60 second period.\n- `x-ratelimit-reset`: [Unix timestamp](https://www.unixtimestamp.com/) of the next time period.\n\n## Version\n\nThe current version of the Advanced Personalization API is version 2, as indicated by the `/2/` in each endpoint's URL.\n",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://ai-personalization.{region}.algolia.com",
      "variables": {
        "region": {
          "description": "Use the URL that matches your [analytics region](https://dashboard.algolia.com/account/infrastructure/analytics).\n",
          "enum": [
            "eu",
            "us"
          ],
          "default": "eu"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "config",
      "x-displayName": "Configuration",
      "description": "Manage your Advanced Personalization configuration.\n\nThe configuration defines the indices, facet attributes and events that describe your user's \nbehaviour on your website or app. It helps Advanced Personalization determine how personalization should affect the search results.\n"
    },
    {
      "name": "users",
      "x-displayName": "Users",
      "description": "Manage user profiles generated by Advanced Personalization.\n\nUser profiles contain the affinities each user has for the different facets in your index.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/personalization/ai-personalization/what-is-ai-personalization/concepts/user-profiles/",
        "description": "Related guide: User Profiles.\n"
      }
    }
  ],
  "externalDocs": {
    "url": "https://www.algolia.com/doc/guides/personalization/ai-personalization/what-is-ai-personalization/"
  },
  "paths": {
    "/{path}": {
      "get": {
        "operationId": "customGet",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "operationId": "customPost",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "operationId": "customPut",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "operationId": "customDelete",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/2/config": {
      "get": {
        "tags": [
          "config"
        ],
        "operationId": "getConfig",
        "x-acl": [
          "search",
          "browse",
          "recommendation"
        ],
        "summary": "Retrieve the configuration",
        "description": "Retrieves a list of configuration objects for each index.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/configurationObject"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "config"
        ],
        "operationId": "putConfig",
        "x-acl": [
          "search",
          "browse",
          "recommendation"
        ],
        "summary": "Update the configuration",
        "description": "Updates the configuration.\n\nThe configuration is a list of configuration objects for each index. To configure Advanced Personalization for an index, create a new configuration object for the index.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "configurationParameters",
                "type": "object",
                "properties": {
                  "indices": {
                    "type": "array",
                    "items": {
                      "title": "configurationParametersObject",
                      "type": "object",
                      "properties": {
                        "index": {
                          "type": "string"
                        },
                        "affinities": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "source": {
                          "title": "source",
                          "type": "object",
                          "properties": {
                            "type": {
                              "$ref": "#/components/schemas/sourceType"
                            },
                            "events": {
                              "$ref": "#/components/schemas/events"
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      }
                    },
                    "required": [
                      "index",
                      "affinities",
                      "source"
                    ]
                  },
                  "personalizationReRanking": {
                    "$ref": "#/components/schemas/personalizationReRanking"
                  },
                  "profileType": {
                    "$ref": "#/components/schemas/profileType"
                  },
                  "features": {
                    "$ref": "#/components/schemas/features"
                  }
                },
                "required": [
                  "indices",
                  "personalizationReRanking",
                  "profileType",
                  "features"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "putConfigResponse",
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/issue"
                      }
                    },
                    "warnings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/issue"
                      }
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "errors",
                    "warnings",
                    "message"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest-2"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled-2"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/2/users": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "getUsers",
        "x-acl": [
          "search",
          "browse",
          "recommendation"
        ],
        "summary": "Get a list of user profiles",
        "description": "Retrieves a list of user profiles in [lexicographical order](https://www.educative.io/answers/what-is-a-lexicographic-order).",
        "parameters": [
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          },
          {
            "$ref": "#/components/parameters/indices"
          },
          {
            "$ref": "#/components/parameters/affinity"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/nextPageToken"
          },
          {
            "$ref": "#/components/parameters/previousPageToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getUsersResponse",
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/user"
                      }
                    },
                    "previousPageToken": {
                      "type": "string"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "users"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/GenericUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/2/users/{userID}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "getUser",
        "x-acl": [
          "search",
          "browse",
          "recommendation"
        ],
        "summary": "Get a user profile",
        "description": "Retrieves a user profile.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadUserID"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/GenericNotFound"
          },
          "422": {
            "$ref": "#/components/responses/InvalidUserID"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "operationId": "deleteUser",
        "x-acl": [
          "search",
          "browse",
          "recommendation"
        ],
        "summary": "Delete a user profile",
        "description": "Deletes a user profile.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "deleteUserResponse",
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    },
                    "userID": {
                      "type": "string"
                    },
                    "deletedUntil": {
                      "type": "string"
                    },
                    "deletedAt": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadUserID"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/InvalidUserID"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/2/realtime/users/{userToken}": {
      "get": {
        "tags": [
          "users"
        ],
        "operationId": "getRealtimeUser",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Retrieve the real-time user's personalization profile",
        "description": "Retrieves the real-time user's personalization profiles containing search filters.",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserToken"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RealtimeUser"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "421": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/2/realtime/users/{userToken}/compute": {
      "post": {
        "tags": [
          "users"
        ],
        "operationId": "computeRealtimeUser",
        "x-acl": [
          "recommendation"
        ],
        "summary": "Compute the real-time user's personalization profile",
        "description": "Sends a request to compute the real-time user's personalization profile.",
        "deprecated": true,
        "parameters": [
          {
            "$ref": "#/components/parameters/UserToken"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Accepted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "421": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "422": {
            "$ref": "#/components/responses/StatusUnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/setClientApiKey": {
      "get": {
        "x-helper": true,
        "x-asynchronous-helper": false,
        "tags": [
          "Api Key"
        ],
        "operationId": "setClientApiKey",
        "summary": "Switch the API key used to authenticate requests",
        "description": "Switch the API key used to authenticate requests.\n",
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "API key to be used from now on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-application-id",
        "description": "Your Algolia application ID."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-api-key",
        "description": "Your Algolia API key with the necessary permissions to make the request.\nPermissions are controlled through access control lists (ACL) and access restrictions.\nThe required ACL to make a request is listed in each endpoint's reference.\n"
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, for example `1/newFeature`.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "startDate": {
        "name": "startDate",
        "description": "Filter users by start date (in RFC3339 format).\nOnly users that were updated after the passed date will be returned.\n",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "2024-06-27T08:27:26Z"
        }
      },
      "endDate": {
        "name": "endDate",
        "description": "Filter users by end date (in RFC3339 format).\nOnly users that were updated before the passed date will be returned.\n",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "2024-06-28T08:27:26Z"
        }
      },
      "indices": {
        "name": "indices",
        "description": "Filter users by matching indices.\nIf multiple indices are passed, returned users will match all indices.\n",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "examples": {
          "singleIndex": {
            "value": [
              "products_EN"
            ],
            "summary": "Filter by single index"
          },
          "multipleIndices": {
            "value": [
              "products_EN",
              "products_FR"
            ],
            "summary": "Filter by multiple indices"
          }
        },
        "style": "form",
        "explode": false
      },
      "affinity": {
        "name": "affinity",
        "description": "Filter users by affinity name and value.\nIf multiple values are passed, returned users will match all values.\n",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "examples": {
          "affinityName": {
            "value": "brand",
            "summary": "Filter by single affinity name"
          },
          "affinityValuePair": {
            "value": "brand:Nike",
            "summary": "Filter by single affinity name and value"
          },
          "multipleAffinityNames": {
            "value": "brand,color",
            "summary": "Filter by multiple affinity names"
          },
          "multipleAffinityValuePairs": {
            "value": "brand:Nike,color:white",
            "summary": "Filter by multiple affinity name and value pairs"
          }
        }
      },
      "limit": {
        "name": "limit",
        "description": "Limit the number of users in the response.\nThe value of this parameter ranges from 1 to 1000.\n",
        "in": "query",
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1,
          "maximum": 1000
        }
      },
      "nextPageToken": {
        "name": "nextPageToken",
        "description": "Reference for the next page, when navigating forward using pagination.\nCan't be used in the same request as `previousPageToken`.\n",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "previousPageToken": {
        "name": "previousPageToken",
        "description": "Reference for the previous page, when navigating backward using pagination.\nCan't be used in the same request as `nextPageToken`.\n",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "userID": {
        "name": "userID",
        "description": "ID of the user.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "UserToken": {
        "name": "userToken",
        "in": "path",
        "required": true,
        "description": "Unique identifier representing a user for which to fetch the personalization profile.",
        "schema": {
          "$ref": "#/components/schemas/userToken"
        }
      }
    },
    "schemas": {
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "x-keep-model": true,
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "sourceType": {
        "title": "type",
        "type": "string",
        "enum": [
          "insights"
        ]
      },
      "eventType": {
        "type": "string",
        "enum": [
          "view",
          "click",
          "conversion"
        ]
      },
      "subtype": {
        "type": "string",
        "enum": [
          "addToCart",
          "purchase"
        ]
      },
      "event": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/eventType"
          },
          "subtype": {
            "$ref": "#/components/schemas/subtype"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "events": {
        "type": "object",
        "properties": {
          "viewDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "viewListing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "addToCart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "purchase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          }
        },
        "required": [
          "viewDetails",
          "viewListing",
          "addToCart",
          "purchase"
        ]
      },
      "issue": {
        "type": "object",
        "description": "An issue is either an 'error' or a 'warning' that is generated by the validator.",
        "properties": {
          "code": {
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "index",
          "message"
        ]
      },
      "personalizationReRanking": {
        "type": "string",
        "description": "The impact that personalization has on the re-ranking of search results.",
        "enum": [
          "none",
          "low",
          "medium",
          "high",
          "maximum"
        ]
      },
      "profileType": {
        "type": "string",
        "enum": [
          "basic"
        ],
        "description": "The type of user profiles to generate.\n\nBasic profiles are based on past behaviors, ensuring search results align with previous interests.\n"
      },
      "status": {
        "title": "status",
        "type": "string",
        "enum": [
          "pending",
          "active",
          "paused"
        ]
      },
      "errorCodes": {
        "title": "errorCodes",
        "type": "string",
        "enum": [
          "blocked",
          "deleted",
          "no_perso_access",
          "all_attr_value_filtered",
          "missing_index",
          "no_events_last_30_days",
          "pending_pipelines",
          "invalid_config",
          "all_facets_invalid"
        ]
      },
      "Configuration_status": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/status"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/errorCodes"
            }
          },
          "lastUpdatedAt": {
            "type": "string"
          }
        }
      },
      "realtime": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the realtime personalization feature is enabled."
          }
        }
      },
      "features": {
        "type": "object",
        "properties": {
          "realtime": {
            "$ref": "#/components/schemas/realtime"
          }
        }
      },
      "configurationObject": {
        "type": "object",
        "properties": {
          "indices": {
            "type": "array",
            "items": {
              "title": "configurationObject",
              "type": "object",
              "properties": {
                "index": {
                  "type": "string"
                },
                "affinities": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "source": {
                  "title": "source",
                  "type": "object",
                  "properties": {
                    "type": {
                      "$ref": "#/components/schemas/sourceType"
                    },
                    "events": {
                      "$ref": "#/components/schemas/events"
                    }
                  }
                },
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "warnings": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/issue"
                  }
                },
                "lastUpdatedAt": {
                  "type": "string"
                }
              },
              "required": [
                "index",
                "affinities",
                "source",
                "errors",
                "warnings",
                "lastUpdatedAt"
              ]
            }
          },
          "personalizationReRanking": {
            "$ref": "#/components/schemas/personalizationReRanking"
          },
          "profileType": {
            "$ref": "#/components/schemas/profileType"
          },
          "status": {
            "$ref": "#/components/schemas/Configuration_status"
          },
          "features": {
            "$ref": "#/components/schemas/features"
          }
        },
        "required": [
          "indices",
          "personalzationReRanking",
          "profileType",
          "status",
          "features"
        ]
      },
      "unauthorized": {
        "type": "integer",
        "description": "HTTP status code for an authorization error.",
        "enum": [
          401
        ]
      },
      "ErrorMessages_unauthorized": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Unauthorized"
        ]
      },
      "ErrorResponses_unauthorized": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/unauthorized"
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessages_unauthorized"
          }
        }
      },
      "internalServerError": {
        "type": "integer",
        "description": "HTTP status code for an internal server error.",
        "enum": [
          500
        ]
      },
      "ErrorMessages_internalServerError": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Internal Server Error"
        ]
      },
      "ErrorResponses_internalServerError": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/internalServerError"
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessages_internalServerError"
          }
        }
      },
      "badRequest": {
        "type": "integer",
        "description": "HTTP status code for a bad request error.",
        "enum": [
          400
        ]
      },
      "ErrorMessages_badRequest": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Invalid request body"
        ]
      },
      "ErrorResponses_badRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/badRequest"
          },
          "message": {
            "$ref": "#/components/schemas/ErrorMessages_badRequest"
          }
        }
      },
      "paymentRequired": {
        "type": "integer",
        "description": "HTTP status code for a payment required error.",
        "enum": [
          402
        ]
      },
      "featureNotEnabled": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Predictive profiles are not allowed for this app. Please contact support to upgrade your plan: https://support.algolia.com/",
          "Realtime Personalization is not allowed for this app. Please contact support to upgrade your plan: https://support.algolia.com/"
        ]
      },
      "ErrorResponses_featureNotEnabled": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/paymentRequired"
          },
          "message": {
            "$ref": "#/components/schemas/featureNotEnabled"
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "userID": {
            "type": "string"
          },
          "affinities": {
            "type": "array",
            "items": {
              "title": "affinity",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "indices": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minimum": 1
                  }
                },
                "value": {
                  "type": "string"
                },
                "score": {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 20
                },
                "lastUpdatedAt": {
                  "type": "string"
                }
              },
              "required": [
                "name",
                "indices",
                "value",
                "score",
                "lastUpdatedAt"
              ]
            }
          },
          "lastUpdatedAt": {
            "type": "string"
          }
        },
        "required": [
          "userID",
          "affinities",
          "lastUpdatedAt"
        ]
      },
      "unprocessableEntity": {
        "type": "integer",
        "description": "HTTP status code for an unprocessable entity error.",
        "enum": [
          422
        ]
      },
      "genericUnprocessableEntity": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Unprocessable Entity"
        ]
      },
      "ErrorResponses_genericUnprocessableEntity": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/unprocessableEntity"
          },
          "message": {
            "$ref": "#/components/schemas/genericUnprocessableEntity"
          }
        }
      },
      "badUserID": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Invalid userID format"
        ]
      },
      "ErrorResponses_badUserID": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/badRequest"
          },
          "message": {
            "$ref": "#/components/schemas/badUserID"
          }
        }
      },
      "notFound": {
        "type": "integer",
        "description": "HTTP status code for a not found error.",
        "enum": [
          404
        ]
      },
      "genericNotFound": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "Not Found"
        ]
      },
      "ErrorResponses_genericNotFound": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/notFound"
          },
          "message": {
            "$ref": "#/components/schemas/genericNotFound"
          }
        }
      },
      "invalidUserID": {
        "type": "string",
        "description": "Details about the response, such as error messages.",
        "enum": [
          "UserID must contain only alphanumeric",
          "equal",
          "plus",
          "slash",
          "hyphen",
          "or underscore characters",
          "and be between 1 and 129 characters long"
        ]
      },
      "ErrorResponses_invalidUserID": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/unprocessableEntity"
          },
          "message": {
            "$ref": "#/components/schemas/invalidUserID"
          }
        }
      },
      "userToken": {
        "type": "string",
        "description": "Unique pseudonymous or anonymous user identifier.\n\nThis helps with analytics and click and conversion events.\nFor more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
        "example": "test-user-123",
        "x-categories": [
          "Personalization"
        ]
      },
      "strategy": {
        "type": "string",
        "enum": [
          "session",
          "historical",
          "hybrid"
        ],
        "example": "session"
      },
      "searchFilter": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "session": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "brand:Dyson<score=12>"
            ]
          }
        }
      },
      "searchFilters": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "indices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "storefront",
              "storefront_price_asc",
              "storefront_price_desc"
            ]
          },
          "strategy": {
            "$ref": "#/components/schemas/strategy"
          },
          "filters": {
            "$ref": "#/components/schemas/searchFilter"
          }
        }
      },
      "RealtimeUser": {
        "title": "RealtimeUser",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version",
          "userID",
          "lastUpdatedAt",
          "search"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "Version of the response format."
          },
          "userID": {
            "type": "string",
            "description": "User ID of the user."
          },
          "lastUpdatedAt": {
            "type": "string",
            "description": "Date and time when the profile was last computed, in RFC 3339 format.",
            "example": "2023-06-15T15:06:04.249906Z"
          },
          "search": {
            "type": "object",
            "description": "Index personalization filters by index name.\n",
            "additionalProperties": {
              "$ref": "#/components/schemas/searchFilters"
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Not authorized to access this resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_unauthorized"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_internalServerError"
            }
          }
        }
      },
      "BadRequest-2": {
        "description": "Bad request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_badRequest"
            }
          }
        }
      },
      "FeatureNotEnabled-2": {
        "description": "Feature not enabled.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_featureNotEnabled"
            }
          }
        }
      },
      "GenericUnprocessableEntity": {
        "description": "Unprocessable entity.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_genericUnprocessableEntity"
            }
          }
        }
      },
      "BadUserID": {
        "description": "Bad user ID.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_badUserID"
            }
          }
        }
      },
      "GenericNotFound": {
        "description": "Not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_genericNotFound"
            }
          }
        }
      },
      "InvalidUserID": {
        "description": "Invalid user ID format.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponses_invalidUserID"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests.",
        "content": {
          "application/json": {
            "schema": {
              "title": "tooManyRequestsResponse",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 421,
                  "description": "Status code."
                },
                "message": {
                  "type": "string",
                  "example": "Too Many Requests",
                  "description": "Response message."
                }
              }
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "Accepted": {
        "description": "Accepted.",
        "content": {
          "application/json": {
            "schema": {
              "title": "acceptedResponse",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 202,
                  "description": "Status code."
                },
                "message": {
                  "type": "string",
                  "example": "Accepted",
                  "description": "Response message."
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict.",
        "content": {
          "application/json": {
            "schema": {
              "title": "conflictResponse",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409,
                  "description": "Status code."
                },
                "message": {
                  "type": "string",
                  "example": "Conflict",
                  "description": "Response message."
                }
              }
            }
          }
        }
      },
      "StatusUnprocessableEntity": {
        "description": "Unprocessable Entity.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Advanced Personalization",
      "tags": [
        "config",
        "users"
      ]
    }
  ]
}