{
  "openapi": "3.0.2",
  "info": {
    "title": "Composition API",
    "description": "Composition API.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://{appId}.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-1.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-2.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-3.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-dsn.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Compositions",
      "description": "Manage your compositions and composition settings.\n"
    },
    {
      "name": "Rules",
      "description": "Manage your compositions rules.\n"
    },
    {
      "name": "Search",
      "description": "Search one or more indices for matching records or facet values."
    }
  ],
  "paths": {
    "/{path}": {
      "get": {
        "operationId": "customGet",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "operationId": "customPost",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "operationId": "customPut",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "operationId": "customDelete",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/run": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "search",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Run a Composition",
        "description": "Runs a query on a single composition and returns matching results.",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "requestBody",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/params"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/facets/{facetName}/query": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "searchForFacetValues",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Search for facet values",
        "description": "Searches for values of a specified facet attribute on the composition's main source's index.\n\n- By default, facet values are sorted by decreasing count.\n  You can adjust this with the `sortFacetValueBy` parameter.\n- Searching for facet values doesn't work if you have **more than 65 searchable facets and searchable attributes combined**.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          },
          {
            "name": "facetName",
            "description": "Facet attribute in which to search for values.\n\nThis attribute must be included in the `attributesForFaceting` index setting with the `searchable()` modifier.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "searchForFacetValuesRequest",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "params": {
                    "title": "searchForFacetValuesParams",
                    "type": "object",
                    "properties": {
                      "query": {
                        "$ref": "#/components/schemas/query"
                      },
                      "maxFacetHits": {
                        "$ref": "#/components/schemas/maxFacetHits"
                      },
                      "searchQuery": {
                        "$ref": "#/components/schemas/params"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchForFacetValuesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}": {
      "get": {
        "tags": [
          "Compositions"
        ],
        "operationId": "getComposition",
        "x-acl": [
          "editSettings",
          "settings"
        ],
        "summary": "Retrieve a composition",
        "description": "Retrieve a single composition in the current Algolia application.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/composition"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/CompositionNotFound"
          }
        }
      }
    },
    "/1/compositions/*/batch": {
      "post": {
        "tags": [
          "Compositions"
        ],
        "operationId": "multipleBatch",
        "description": "Adds, updates, or deletes compositions with a single API request.\n",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Batch action to multiple compositions",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "batchParams",
                "description": "Batch parameters.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "requests": {
                    "type": "array",
                    "items": {
                      "title": "multipleBatchRequest",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "action": {
                          "$ref": "#/components/schemas/action"
                        },
                        "body": {
                          "$ref": "#/components/schemas/batchCompositionAction"
                        }
                      },
                      "required": [
                        "action",
                        "body"
                      ]
                    }
                  }
                },
                "required": [
                  "requests"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "multipleBatchResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "object",
                      "description": "Task IDs. One for each index.",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/taskID"
                      }
                    }
                  },
                  "required": [
                    "taskID"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/rules/{objectID}": {
      "get": {
        "tags": [
          "Rules"
        ],
        "operationId": "getRule",
        "x-acl": [
          "settings"
        ],
        "summary": "Retrieve a rule",
        "description": "Retrieves a rule by its ID.\nTo find the object ID of rules, use the [`search` operation](#tag/Rules/operation/searchRules).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          },
          {
            "$ref": "#/components/parameters/ObjectIDRule"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/compositionRule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/rules/batch": {
      "post": {
        "tags": [
          "Rules"
        ],
        "operationId": "saveRules",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Create or update or delete composition rules",
        "description": "Create or update or delete multiple composition rules.\n",
        "x-codegen-request-body-name": "rules",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "compositionRulesBatchParams",
                "description": "Composition rules batch parameters.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "requests": {
                    "type": "array",
                    "items": {
                      "title": "rulesMultipleBatchRequest",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "action": {
                          "$ref": "#/components/schemas/action"
                        },
                        "body": {
                          "$ref": "#/components/schemas/rulesBatchCompositionAction"
                        }
                      },
                      "required": [
                        "action",
                        "body"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "rulesMultipleBatchResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "$ref": "#/components/schemas/taskID"
                    }
                  },
                  "required": [
                    "taskID"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/rules/search": {
      "post": {
        "tags": [
          "Rules"
        ],
        "operationId": "searchCompositionRules",
        "x-acl": [
          "settings"
        ],
        "summary": "Search for composition rules",
        "description": "Searches for composition rules in your index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "searchCompositionRulesParams",
                "type": "object",
                "description": "Composition Rules search parameters.",
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/parameters_query"
                  },
                  "anchoring": {
                    "$ref": "#/components/schemas/anchoring"
                  },
                  "context": {
                    "type": "string",
                    "description": "Only return composition rules that match the context (exact match).",
                    "example": "mobile"
                  },
                  "page": {
                    "$ref": "#/components/schemas/parameters_page"
                  },
                  "hitsPerPage": {
                    "$ref": "#/components/schemas/parameters_hitsPerPage"
                  },
                  "enabled": {
                    "oneOf": [
                      {
                        "type": "boolean",
                        "description": "If `true`, return only enabled composition rules.\nIf `false`, return only inactive composition rules.\nBy default, _all_ composition rules are returned.\n"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchCompositionRulesResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hits",
                    "nbHits",
                    "page",
                    "nbPages"
                  ],
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "Composition rules that matched the search criteria.",
                      "items": {
                        "$ref": "#/components/schemas/compositionRule"
                      }
                    },
                    "nbHits": {
                      "type": "integer",
                      "description": "Number of composition rules that matched the search criteria."
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page."
                    },
                    "nbPages": {
                      "type": "integer",
                      "description": "Number of pages."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions/{compositionID}/task/{taskID}": {
      "get": {
        "tags": [
          "Compositions"
        ],
        "operationId": "getTask",
        "x-acl": [
          "editSettings",
          "settings",
          "addObject",
          "deleteObject",
          "deleteIndex"
        ],
        "description": "Checks the status of a given task.\n",
        "summary": "Check task status",
        "parameters": [
          {
            "$ref": "#/components/parameters/compositionID"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Unique task identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1506303845001
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/compositions": {
      "get": {
        "tags": [
          "Compositions"
        ],
        "operationId": "listCompositions",
        "x-acl": [
          "editSettings",
          "settings"
        ],
        "summary": "List compositions",
        "description": "Lists all compositions in the current Algolia application.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/HitsPerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listCompositionsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/CompositionNotFound"
          }
        }
      }
    },
    "/setClientApiKey": {
      "get": {
        "x-helper": true,
        "x-asynchronous-helper": false,
        "tags": [
          "Api Key"
        ],
        "operationId": "setClientApiKey",
        "summary": "Switch the API key used to authenticate requests",
        "description": "Switch the API key used to authenticate requests.\n",
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "API key to be used from now on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    },
    "/waitForCompositionTask": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "waitForCompositionTask",
        "summary": "Wait for operation to complete",
        "description": "Wait for a task to complete to ensure synchronized composition updates.\n\nAll Algolia write operations are asynchronous. When you make a request for a write operation, for example, to upsert or delete a composition, Algolia creates a task on a queue and returns a taskID. The task itself runs separately, depending on the server load.\n",
        "parameters": [
          {
            "in": "query",
            "name": "compositionID",
            "description": "The ID of the composition on which the operation was performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "taskID",
            "description": "The taskID returned by the operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/CompositionNotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-application-id",
        "description": "Your Algolia application ID."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-api-key",
        "description": "Your Algolia API key with the necessary permissions to make the request.\nPermissions are controlled through access control lists (ACL) and access restrictions.\nThe required ACL to make a request is listed in each endpoint's reference.\n"
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, for example `1/newFeature`.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "compositionID": {
        "in": "path",
        "name": "compositionID",
        "description": "Unique Composition ObjectID.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/compositionObjectID"
        }
      },
      "ObjectIDRule": {
        "in": "path",
        "name": "objectID",
        "description": "Unique identifier of a rule object.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ruleID"
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "description": "Requested page of the API response.\nIf `null`, the API response is not paginated.\n",
        "required": false,
        "schema": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "HitsPerPage": {
        "in": "query",
        "name": "hitsPerPage",
        "description": "Number of hits per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100
        }
      }
    },
    "schemas": {
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "x-keep-model": true,
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "compositionObjectID": {
        "type": "string",
        "description": "Unique Composition ObjectID."
      },
      "query": {
        "type": "string",
        "description": "Search query.",
        "default": "",
        "x-categories": [
          "Search"
        ]
      },
      "filters": {
        "type": "string",
        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
        "example": "(category:Book OR category:Ebook) AND _tags:published",
        "x-categories": [
          "Filtering"
        ]
      },
      "page": {
        "type": "integer",
        "description": "Page of search results to retrieve.",
        "default": 0,
        "minimum": 0,
        "x-categories": [
          "Pagination"
        ]
      },
      "facetFilters": {
        "description": "Filter the search by facet values, so that only records with the same facet values are retrieved.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\n- `[filter1, filter2]` is interpreted as `filter1 AND filter2`.\n- `[[filter1, filter2], filter3]` is interpreted as `filter1 OR filter2 AND filter3`.\n- `facet:-value` is interpreted as `NOT facet:value`.\n\nWhile it's best to avoid attributes that start with a `-`, you can still filter them by escaping with a backslash:\n`facet:\\-value`.\n",
        "example": [
          [
            "category:Book",
            "category:-Movie"
          ],
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/facetFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "optionalFilters": {
        "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n\n- Optional filters don't work on virtual replicas.\n- Optional filters are applied _after_ sort-by attributes.\n- Optional filters are applied _before_ custom ranking attributes (in the default [ranking](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/)).\n- Optional filters don't work with numeric attributes.\n",
        "example": [
          "category:Book",
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/optionalFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "numericFilters": {
        "description": "Filter by numeric facets.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\nYou can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`.\nComparisons are precise up to 3 decimals.\nYou can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and upper boundaries.\nThe same combination rules apply as for `facetFilters`.\n",
        "example": [
          [
            "inStock = 1",
            "deliveryDate < 1441755506"
          ],
          "price < 1000"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/numericFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "hitsPerPage": {
        "type": "integer",
        "description": "Number of hits per page.",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "x-categories": [
          "Pagination"
        ]
      },
      "aroundLatLng": {
        "type": "string",
        "description": "Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.\n\nOnly records included within a circle around this central location are included in the results.\nThe radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings.\nThis parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.\n",
        "example": "40.71,-74.01",
        "default": "",
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundLatLngViaIP": {
        "type": "boolean",
        "description": "Whether to obtain the coordinates from the request's IP address.",
        "default": false,
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundRadiusAll": {
        "title": "all",
        "type": "string",
        "description": "Return all records with a valid `_geoloc` attribute. Don't filter by distance.",
        "enum": [
          "all"
        ]
      },
      "aroundRadius": {
        "description": "Maximum radius for a search around a central location.\n\nThis parameter works in combination with the `aroundLatLng` and `aroundLatLngViaIP` parameters.\nBy default, the search radius is determined automatically from the density of hits around the central location.\nThe search radius is small if there are many hits close to the central coordinates.\n",
        "oneOf": [
          {
            "type": "integer",
            "minimum": 1,
            "description": "Maximum search radius around a central location in meters."
          },
          {
            "$ref": "#/components/schemas/aroundRadiusAll"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundPrecisionFromValue": {
        "title": "range objects",
        "type": "array",
        "items": {
          "title": "range",
          "type": "object",
          "description": "Range object with lower and upper values in meters to define custom ranges.",
          "properties": {
            "from": {
              "type": "integer",
              "description": "Lower boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.",
              "example": 20
            },
            "value": {
              "type": "integer",
              "description": "Upper boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal."
            }
          }
        }
      },
      "aroundPrecision": {
        "description": "Precision of a coordinate-based search in meters to group results with similar distances.\n\nThe Geo ranking criterion considers all matches within the same range of distances to be equal.\n",
        "oneOf": [
          {
            "type": "integer",
            "default": 10,
            "description": "Distance in meters to group results by similar distances.\n\nFor example, if you set `aroundPrecision` to 100, records wihin 100 meters to the central coordinate are considered to have the same distance,\nas are records between 100 and 199 meters.\n"
          },
          {
            "$ref": "#/components/schemas/aroundPrecisionFromValue"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBoxArray": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates for a rectangular area in which to search.\n\nEach bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair:\n`[p1 lat, p1 long, p2 lat, p2 long]`.\nProvide multiple bounding boxes as nested arrays.\nFor more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBox": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/components/schemas/insideBoundingBoxArray"
          }
        ]
      },
      "insidePolygon": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 6,
          "maxItems": 20000,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates of a polygon in which to search.\n\nPolygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude.\nProvide multiple polygons as nested arrays.\nFor more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\nThis parameter is ignored if you also specify `insideBoundingBox`.\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201,
            47.32,
            4.9
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916,
            39.2587,
            2.0104
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "supportedLanguage": {
        "type": "string",
        "description": "ISO code for a supported language.",
        "enum": [
          "af",
          "ar",
          "az",
          "bg",
          "bn",
          "ca",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en",
          "eo",
          "es",
          "et",
          "eu",
          "fa",
          "fi",
          "fo",
          "fr",
          "ga",
          "gl",
          "he",
          "hi",
          "hu",
          "hy",
          "id",
          "is",
          "it",
          "ja",
          "ka",
          "kk",
          "ko",
          "ku",
          "ky",
          "lt",
          "lv",
          "mi",
          "mn",
          "mr",
          "ms",
          "mt",
          "nb",
          "nl",
          "no",
          "ns",
          "pl",
          "ps",
          "pt",
          "pt-br",
          "qu",
          "ro",
          "ru",
          "sk",
          "sq",
          "sv",
          "sw",
          "ta",
          "te",
          "th",
          "tl",
          "tn",
          "tr",
          "tt",
          "uk",
          "ur",
          "uz",
          "zh"
        ]
      },
      "userToken": {
        "type": "string",
        "description": "Unique pseudonymous or anonymous user identifier.\n\nThis helps with analytics and click and conversion events.\nFor more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
        "example": "test-user-123",
        "x-categories": [
          "Personalization"
        ]
      },
      "params": {
        "title": "Composition Search parameters as object",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "getRankingInfo": {
            "type": "boolean",
            "description": "Whether the search response should include detailed ranking information."
          },
          "relevancyStrictness": {
            "type": "integer"
          },
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "optionalFilters": {
            "$ref": "#/components/schemas/optionalFilters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          },
          "aroundLatLng": {
            "$ref": "#/components/schemas/aroundLatLng"
          },
          "aroundLatLngViaIP": {
            "$ref": "#/components/schemas/aroundLatLngViaIP"
          },
          "aroundRadius": {
            "$ref": "#/components/schemas/aroundRadius"
          },
          "aroundPrecision": {
            "$ref": "#/components/schemas/aroundPrecision"
          },
          "minimumAroundRadius": {
            "type": "integer",
            "description": "Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.",
            "minimum": 1,
            "x-categories": [
              "Geo-Search"
            ]
          },
          "insideBoundingBox": {
            "$ref": "#/components/schemas/insideBoundingBox"
          },
          "insidePolygon": {
            "$ref": "#/components/schemas/insidePolygon"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "es"
            ],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "naturalLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "description": "ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):\n\n- Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.\n- Sets `removeWordsIfNoResults` to `allOptional`.\n- Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": [
              "Rules"
            ]
          },
          "ruleContexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigns a rule context to the search query.\n\n[Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.\n",
            "default": [],
            "example": [
              "mobile"
            ],
            "x-categories": [
              "Rules"
            ]
          },
          "userToken": {
            "$ref": "#/components/schemas/userToken"
          },
          "clickAnalytics": {
            "type": "boolean",
            "description": "Whether to include a `queryID` attribute in the response.\n\nThe query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).\n",
            "default": false,
            "x-categories": [
              "Analytics"
            ]
          },
          "analytics": {
            "type": "boolean",
            "description": "Whether this search will be included in Analytics.",
            "default": true,
            "x-categories": [
              "Analytics"
            ]
          },
          "analyticsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).",
            "default": [],
            "x-categories": [
              "Analytics"
            ]
          },
          "enableABTest": {
            "type": "boolean",
            "description": "Whether to enable A/B testing for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": [
              "Filtering"
            ]
          }
        }
      },
      "objectID": {
        "type": "string",
        "description": "Unique record identifier.",
        "example": "test-record-123"
      },
      "compositionRunSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "appliedRules": {
            "type": "array",
            "items": {
              "title": "compositionRunAppliedRules",
              "type": "object",
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": [
                "objectID"
              ]
            }
          }
        },
        "required": [
          "objectID"
        ]
      },
      "compositionsSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "run": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/compositionRunSearchResponse"
            }
          }
        },
        "required": [
          "run"
        ]
      },
      "compositionBaseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "processingTimeMS"
        ],
        "properties": {
          "compositions": {
            "$ref": "#/components/schemas/compositionsSearchResponse"
          }
        }
      },
      "processingTimeMS": {
        "type": "integer",
        "description": "Time the server took to process the request, in milliseconds.",
        "example": 20
      },
      "RedirectRuleIndexMetadata": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Source index for the redirect rule."
          },
          "dest": {
            "type": "string",
            "description": "Destination index for the redirect rule."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the redirect rule."
          },
          "succeed": {
            "type": "boolean",
            "description": "Redirect rule status."
          },
          "data": {
            "title": "redirectRuleIndexData",
            "type": "object",
            "description": "Redirect rule data.",
            "required": [
              "ruleObjectID"
            ],
            "properties": {
              "ruleObjectID": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data",
          "succeed",
          "reason",
          "dest",
          "source"
        ]
      },
      "order": {
        "description": "Explicit order of facets or facet values.\n\nThis setting lets you always show specific facets or facet values at the top of the list.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "facets": {
        "description": "Order of facet names.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          }
        }
      },
      "sortRemainingBy": {
        "description": "Order of facet values that aren't explicitly positioned with the `order` setting.\n\n- `count`.\n  Order remaining facet values by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Sort facet values alphabetically.\n\n- `hidden`.\n  Don't show facet values that aren't explicitly positioned.\n",
        "type": "string",
        "enum": [
          "count",
          "alpha",
          "hidden"
        ]
      },
      "hide": {
        "description": "Hide facet values.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "value": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          },
          "sortRemainingBy": {
            "$ref": "#/components/schemas/sortRemainingBy"
          },
          "hide": {
            "$ref": "#/components/schemas/hide"
          }
        }
      },
      "values": {
        "description": "Order of facet values. One object for each facet.",
        "type": "object",
        "additionalProperties": {
          "x-additionalPropertiesName": "facet",
          "$ref": "#/components/schemas/value"
        }
      },
      "facetOrdering": {
        "description": "Order of facet names and facet values in your UI.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facets": {
            "$ref": "#/components/schemas/facets"
          },
          "values": {
            "$ref": "#/components/schemas/values"
          }
        }
      },
      "redirectURL": {
        "description": "The redirect rule container.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImageUrl": {
        "description": "URL for an image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImage": {
        "description": "Image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bannerImageUrl"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "bannerLink": {
        "description": "Link for a banner defined in the Merchandising Studio.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "banner": {
        "description": "Banner with image and link to redirect users.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "image": {
            "$ref": "#/components/schemas/bannerImage"
          },
          "link": {
            "$ref": "#/components/schemas/bannerLink"
          }
        }
      },
      "banners": {
        "description": "Banners defined in the Merchandising Studio for a given search.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/banner"
        }
      },
      "widgets": {
        "description": "Widgets returned from any rules that are applied to the current search.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "banners": {
            "$ref": "#/components/schemas/banners"
          }
        }
      },
      "renderingContent": {
        "description": "Extra data that can be used in the search UI.\n\nYou can use this to control aspects of your search UI, such as the order of facet names and values\nwithout changing your frontend code.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetOrdering": {
            "$ref": "#/components/schemas/facetOrdering"
          },
          "redirect": {
            "$ref": "#/components/schemas/redirectURL"
          },
          "widgets": {
            "$ref": "#/components/schemas/widgets"
          }
        },
        "x-categories": [
          "Advanced"
        ]
      },
      "userData": {
        "example": {
          "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
          "pluginVersion": "1.6.0"
        },
        "description": "An object with custom data.\n\nYou can store up to 32kB as custom data.\n",
        "default": {},
        "x-categories": [
          "Advanced"
        ]
      },
      "baseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "abTestID": {
            "type": "integer",
            "description": "A/B test ID. This is only included in the response for indices that are part of an A/B test."
          },
          "abTestVariantID": {
            "type": "integer",
            "minimum": 1,
            "description": "Variant ID. This is only included in the response for indices that are part of an A/B test."
          },
          "aroundLatLng": {
            "type": "string",
            "description": "Computed geographical location.",
            "example": "40.71,-74.01",
            "pattern": "^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$"
          },
          "automaticRadius": {
            "type": "string",
            "description": "Distance from a central coordinate provided by `aroundLatLng`."
          },
          "exhaustive": {
            "title": "exhaustive",
            "type": "object",
            "description": "Whether certain properties of the search response are calculated exhaustive (exact) or approximated.",
            "properties": {
              "facetsCount": {
                "type": "boolean",
                "title": "facetsCount",
                "description": "Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
              },
              "facetValues": {
                "type": "boolean",
                "title": "facetValues",
                "description": "The value is `false` if not all facet values are retrieved."
              },
              "nbHits": {
                "type": "boolean",
                "title": "nbHits",
                "description": "Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didn’t, in the end, impact the exhaustivity of the query."
              },
              "rulesMatch": {
                "type": "boolean",
                "title": "rulesMatch",
                "description": "Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large."
              },
              "typo": {
                "type": "boolean",
                "title": "typo",
                "description": "Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled."
              }
            }
          },
          "appliedRules": {
            "description": "Rules applied to the query.",
            "title": "appliedRules",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "See the `facetsCount` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveNbHits": {
            "type": "boolean",
            "description": "See the `nbHits` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveTypo": {
            "type": "boolean",
            "description": "See the `typo` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "facets": {
            "title": "facets",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "facet",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "facet count",
                "type": "integer"
              }
            },
            "description": "Facet counts.",
            "example": {
              "category": {
                "food": 1,
                "tech": 42
              }
            }
          },
          "facets_stats": {
            "type": "object",
            "description": "Statistics for numerical facets.",
            "additionalProperties": {
              "title": "facetStats",
              "type": "object",
              "properties": {
                "min": {
                  "type": "number",
                  "format": "double",
                  "description": "Minimum value in the results."
                },
                "max": {
                  "type": "number",
                  "format": "double",
                  "description": "Maximum value in the results."
                },
                "avg": {
                  "type": "number",
                  "format": "double",
                  "description": "Average facet value in the results."
                },
                "sum": {
                  "type": "number",
                  "format": "double",
                  "description": "Sum of all values in the results."
                }
              }
            }
          },
          "index": {
            "type": "string",
            "example": "indexName",
            "description": "Index name used for the query."
          },
          "indexUsed": {
            "type": "string",
            "description": "Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query.",
            "example": "indexNameAlt"
          },
          "message": {
            "type": "string",
            "description": "Warnings about the query."
          },
          "nbSortedHits": {
            "type": "integer",
            "description": "Number of hits selected and sorted by the relevant sort algorithm.",
            "example": 20
          },
          "parsedQuery": {
            "type": "string",
            "description": "Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched.",
            "example": "george clo"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          },
          "processingTimingsMS": {
            "type": "object",
            "description": "Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues."
          },
          "queryAfterRemoval": {
            "type": "string",
            "description": "Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set."
          },
          "redirect": {
            "title": "redirect",
            "type": "object",
            "description": "[Redirect results to a URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/), this this parameter is for internal use only.\n",
            "properties": {
              "index": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RedirectRuleIndexMetadata"
                }
              }
            }
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "serverTimeMS": {
            "type": "integer",
            "description": "Time the server took to process the request, in milliseconds.",
            "example": 20
          },
          "serverUsed": {
            "type": "string",
            "description": "Host name of the server that processed the request.",
            "example": "c2-uk-3.algolia.net"
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "queryID": {
            "type": "string",
            "description": "Unique identifier for the query. This is used for [click analytics](https://www.algolia.com/doc/guides/analytics/click-analytics/).",
            "example": "a00dbc80a8d13c4565a442e7e2dca80a"
          },
          "_automaticInsights": {
            "type": "boolean",
            "description": "Whether automatic events collection is enabled for the application."
          }
        }
      },
      "nbHits": {
        "type": "integer",
        "description": "Number of results (hits).",
        "example": 20
      },
      "nbPages": {
        "type": "integer",
        "description": "Number of pages of results.",
        "example": 1
      },
      "SearchPagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        },
        "required": [
          "page",
          "nbHits",
          "nbPages",
          "hitsPerPage"
        ]
      },
      "highlightedValue": {
        "type": "string",
        "description": "Highlighted attribute value, including HTML tags.",
        "example": "<em>George</em> <em>Clo</em>oney"
      },
      "matchLevel": {
        "type": "string",
        "description": "Whether the whole query string matches or only a part.",
        "enum": [
          "none",
          "partial",
          "full"
        ]
      },
      "highlightResultOption": {
        "title": "highlightResultOption",
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          },
          "matchedWords": {
            "type": "array",
            "description": "List of matched words from the search query.",
            "example": [
              "action"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullyHighlighted": {
            "type": "boolean",
            "description": "Whether the entire attribute value is highlighted."
          }
        },
        "required": [
          "value",
          "matchLevel",
          "matchedWords"
        ],
        "x-discriminator-fields": [
          "matchLevel",
          "matchedWords"
        ]
      },
      "highlightResultMap": {
        "title": "highlightResultMap",
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "highlightResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/highlightResultOption"
          },
          {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          {
            "$ref": "#/components/schemas/highlightResultArray"
          }
        ]
      },
      "highlightResultArray": {
        "title": "highlightResultArray",
        "type": "array",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "items": {
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "snippetResultOption": {
        "title": "snippetResultOption",
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          }
        },
        "required": [
          "value",
          "matchLevel"
        ],
        "x-discriminator-fields": [
          "matchLevel"
        ]
      },
      "snippetResultMap": {
        "title": "snippetResultMap",
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "snippetResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/snippetResultOption"
          },
          {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          {
            "$ref": "#/components/schemas/snippetResultArray"
          }
        ]
      },
      "snippetResultArray": {
        "title": "snippetResultArray",
        "type": "array",
        "description": "Snippets that show the context around a matching search query.",
        "items": {
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "matchedGeoLocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the matched location."
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the matched location."
          },
          "distance": {
            "type": "integer",
            "description": "Distance between the matched location and the search location (in meters)."
          }
        }
      },
      "personalization": {
        "type": "object",
        "properties": {
          "filtersScore": {
            "type": "integer",
            "description": "The score of the filters."
          },
          "rankingScore": {
            "type": "integer",
            "description": "The score of the ranking."
          },
          "score": {
            "type": "integer",
            "description": "The score of the event."
          }
        }
      },
      "rankingInfo": {
        "type": "object",
        "description": "Object with detailed information about the record's ranking.",
        "additionalProperties": false,
        "properties": {
          "filters": {
            "type": "integer",
            "minimum": 0,
            "description": "Whether a filter matched the query."
          },
          "firstMatchedWord": {
            "type": "integer",
            "minimum": 0,
            "description": "Position of the first matched word in the best matching attribute of the record."
          },
          "geoDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters)."
          },
          "geoPrecision": {
            "type": "integer",
            "minimum": 1,
            "description": "Precision used when computing the geo distance, in meters."
          },
          "matchedGeoLocation": {
            "$ref": "#/components/schemas/matchedGeoLocation"
          },
          "personalization": {
            "$ref": "#/components/schemas/personalization"
          },
          "nbExactWords": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of exactly matched words."
          },
          "nbTypos": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of typos encountered when matching the record."
          },
          "promoted": {
            "type": "boolean",
            "description": "Whether the record was promoted by a rule."
          },
          "proximityDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of words between multiple matches in the query plus 1. For single word queries, `proximityDistance` is 0."
          },
          "userScore": {
            "type": "integer",
            "description": "Overall ranking of the record, expressed as a single integer. This attribute is internal."
          },
          "words": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of matched words."
          },
          "promotedByReRanking": {
            "type": "boolean",
            "description": "Whether the record is re-ranked."
          }
        },
        "required": [
          "nbTypos",
          "firstMatchedWord",
          "geoDistance",
          "nbExactWords",
          "userScore"
        ]
      },
      "compositionRankingInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "composed": {
            "title": "composedRankingInfo",
            "type": "object",
            "additionalProperties": {
              "title": "compositionIdRankingInfo",
              "x-additionalPropertiesName": "composition-id",
              "type": "object",
              "properties": {
                "index": {
                  "type": "string"
                },
                "injectedItemKey": {
                  "type": "string"
                }
              },
              "required": [
                "index",
                "injectedItemKey"
              ]
            }
          }
        }
      },
      "Hit_rankingInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/rankingInfo"
          },
          {
            "$ref": "#/components/schemas/compositionRankingInfo"
          }
        ]
      },
      "distinctSeqID": {
        "type": "integer"
      },
      "hit": {
        "type": "object",
        "description": "Search result.\n\nA hit is a record from your index, augmented with special attributes for highlighting, snippeting, and ranking.\n",
        "x-is-generic": true,
        "additionalProperties": true,
        "required": [
          "objectID"
        ],
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "_highlightResult": {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          "_snippetResult": {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          "_rankingInfo": {
            "$ref": "#/components/schemas/Hit_rankingInfo"
          },
          "_distinctSeqID": {
            "$ref": "#/components/schemas/distinctSeqID"
          }
        }
      },
      "searchHits": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Search results (hits).\n\nHits are records from your index that match the search criteria, augmented with additional attributes, such as, for highlighting.\n",
            "items": {
              "$ref": "#/components/schemas/hit"
            }
          },
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "params": {
            "type": "string",
            "description": "URL-encoded string of all search parameters.",
            "example": "query=a&hitsPerPage=20"
          }
        },
        "required": [
          "hits",
          "query",
          "params"
        ]
      },
      "resultsInjectedItemInfoResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "key": {
            "type": "string"
          },
          "appliedRules": {
            "type": "array",
            "items": {
              "title": "resultsInjectedItemAppliedRulesInfoResponse",
              "type": "object",
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": [
                "objectID"
              ]
            }
          }
        },
        "required": [
          "key"
        ]
      },
      "resultsCompositionsResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "compositions": {
            "title": "resultsCompositionsInfoResponse",
            "type": "object",
            "additionalProperties": {
              "title": "resultsCompositionInfoResponse",
              "x-additionalPropertiesName": "composition-id",
              "type": "object",
              "properties": {
                "injectedItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/resultsInjectedItemInfoResponse"
                  }
                }
              },
              "required": [
                "injectedItems"
              ]
            }
          }
        },
        "required": [
          "compositions"
        ]
      },
      "searchResultsItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/SearchPagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          },
          {
            "$ref": "#/components/schemas/resultsCompositionsResponse"
          }
        ]
      },
      "searchResults": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "Search results.",
            "items": {
              "$ref": "#/components/schemas/searchResultsItem"
            }
          }
        },
        "required": [
          "results"
        ]
      },
      "searchResponse": {
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/compositionBaseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/searchResults"
          }
        ]
      },
      "maxFacetHits": {
        "type": "integer",
        "description": "Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).",
        "maximum": 100,
        "default": 10,
        "x-categories": [
          "Advanced"
        ]
      },
      "searchForFacetValuesResults": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "facetHits",
          "exhaustiveFacetsCount",
          "indexName"
        ],
        "x-discriminator-fields": [
          "facetHits"
        ],
        "properties": {
          "indexName": {
            "type": "string"
          },
          "facetHits": {
            "type": "array",
            "description": "Matching facet values.",
            "items": {
              "title": "facetHits",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "value",
                "highlighted",
                "count"
              ],
              "properties": {
                "value": {
                  "description": "Facet value.",
                  "example": "Mobile phone",
                  "type": "string"
                },
                "highlighted": {
                  "$ref": "#/components/schemas/highlightedValue"
                },
                "count": {
                  "description": "Number of records with this facet value. [The count may be approximated](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).",
                  "type": "integer"
                }
              }
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "Whether the facet count is exhaustive (true) or approximate (false).\nFor more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).\n"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          }
        }
      },
      "searchForFacetValuesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "results": {
            "type": "array",
            "description": "Search for facet values results.",
            "items": {
              "$ref": "#/components/schemas/searchForFacetValuesResults"
            }
          }
        }
      },
      "typoToleranceEnum": {
        "type": "string",
        "title": "typo tolerance",
        "description": "- `min`. Return matches with the lowest number of typos.\n  For example, if you have matches without typos, only include those.\n  But if there are no matches without typos (with 1 typo), include matches with 1 typo (2 typos).\n- `strict`. Return matches with the two lowest numbers of typos.\n  With `strict`, the Typo ranking criterion is applied first in the `ranking` setting.\n",
        "enum": [
          "min",
          "strict",
          "true",
          "false"
        ]
      },
      "typoTolerance": {
        "description": "Whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) is enabled and how it is applied.\n\nIf typo tolerance is true, `min`, or `strict`, [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) are also active.\n",
        "oneOf": [
          {
            "type": "boolean",
            "default": true,
            "description": "Whether typo tolerance is active. If true, matches with typos are included in the search results and rank after exact matches."
          },
          {
            "$ref": "#/components/schemas/typoToleranceEnum"
          }
        ],
        "x-categories": [
          "Typos"
        ]
      },
      "booleanString": {
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "ignorePlurals": {
        "description": "Treat singular, plurals, and other forms of declensions as equivalent.\nYou should only use this feature for the languages used in your index.\n",
        "example": [
          "ca",
          "es"
        ],
        "oneOf": [
          {
            "type": "array",
            "description": "ISO code for languages for which this feature should be active.\nThis overrides languages you set with `queryLanguages`.\n",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            }
          },
          {
            "$ref": "#/components/schemas/booleanString"
          },
          {
            "type": "boolean",
            "description": "If true, `ignorePlurals` is active for all languages included in `queryLanguages`, or for all supported languages, if `queryLanguges` is empty.\nIf false, singulars, plurals, and other declensions won't be considered equivalent.\n",
            "default": false
          }
        ],
        "x-categories": [
          "Languages"
        ]
      },
      "removeStopWords": {
        "description": "Removes stop words from the search query.\n\nStop words are common words like articles, conjunctions, prepositions, or pronouns that have little or no meaning on their own.\nIn English, \"the\", \"a\", or \"and\" are stop words.\n\nYou should only use this feature for the languages used in your index.\n",
        "example": [
          "ca",
          "es"
        ],
        "oneOf": [
          {
            "type": "array",
            "description": "ISO code for languages for which stop words should be removed. This overrides languages you set in `queryLanguges`.",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, stop words are removed for all languages you included in `queryLanguages`, or for all supported languages, if `queryLanguages` is empty.\nIf false, stop words are not removed.\n"
          }
        ],
        "x-categories": [
          "Languages"
        ]
      },
      "queryType": {
        "type": "string",
        "enum": [
          "prefixLast",
          "prefixAll",
          "prefixNone"
        ],
        "description": "Determines if and how query words are interpreted as prefixes.\n\nBy default, only the last query word is treated as a prefix (`prefixLast`).\nTo turn off prefix search, use `prefixNone`.\nAvoid `prefixAll`, which treats all query words as prefixes.\nThis might lead to counterintuitive results and makes your search slower.\n\nFor more information, see [Prefix searching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/).\n",
        "default": "prefixLast",
        "x-categories": [
          "Query strategy"
        ]
      },
      "removeWordsIfNoResults": {
        "type": "string",
        "enum": [
          "none",
          "lastWords",
          "firstWords",
          "allOptional"
        ],
        "example": "firstWords",
        "description": "Strategy for removing words from the query when it doesn't return any results.\nThis helps to avoid returning empty search results.\n\n- `none`.\n  No words are removed when a query doesn't return results.\n\n- `lastWords`.\n  Treat the last (then second to last, then third to last) word as optional,\n  until there are results or at most 5 words have been removed.\n\n- `firstWords`.\n  Treat the first (then second, then third) word as optional,\n  until there are results or at most 5 words have been removed.\n\n- `allOptional`.\n  Treat all words as optional.\n\nFor more information, see [Remove words to improve results](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/in-depth/why-use-remove-words-if-no-results/).\n",
        "default": "none",
        "x-categories": [
          "Query strategy"
        ]
      },
      "exactOnSingleWordQuery": {
        "type": "string",
        "enum": [
          "attribute",
          "none",
          "word"
        ],
        "description": "Determines how the [Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes) is computed when the search query has only one word.\n\n- `attribute`.\n  The Exact ranking criterion is 1 if the query word and attribute value are the same.\n  For example, a search for \"road\" will match the value \"road\", but not \"road trip\".\n\n- `none`.\n  The Exact ranking criterion is ignored on single-word searches.\n\n- `word`.\n  The Exact ranking criterion is 1 if the query word is found in the attribute value.\n  The query word must have at least 3 characters and must not be a stop word.\n  Only exact matches will be highlighted,\n  partial and prefix matches won't.\n",
        "default": "attribute",
        "x-categories": [
          "Query strategy"
        ]
      },
      "alternativesAsExact": {
        "type": "string",
        "enum": [
          "ignorePlurals",
          "singleWordSynonym",
          "multiWordsSynonym",
          "ignoreConjugations"
        ],
        "x-categories": [
          "Query strategy"
        ]
      },
      "advancedSyntaxFeatures": {
        "type": "string",
        "enum": [
          "exactPhrase",
          "excludeWords"
        ],
        "x-categories": [
          "Query strategy"
        ]
      },
      "distinct": {
        "description": "Determines how many records of a group are included in the search results.\n\nRecords with the same value for the `attributeForDistinct` attribute are considered a group.\nThe `distinct` setting controls how many members of the group are returned.\nThis is useful for [deduplication and grouping](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).\n\nThe `distinct` setting is ignored if `attributeForDistinct` is not set.\n",
        "example": 1,
        "oneOf": [
          {
            "type": "boolean",
            "description": "Whether deduplication is turned on. If true, only one member of a group is shown in the search results."
          },
          {
            "type": "integer",
            "description": "Number of members of a group of records to include in the search results.\n\n- Don't use `distinct > 1` for records that might be [promoted by rules](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/promote-hits/).\n  The number of hits won't be correct and faceting won't work as expected.\n- With `distinct > 1`, the `hitsPerPage` parameter controls the number of returned groups.\n  For example, with `hitsPerPage: 10` and `distinct: 2`, up to 20 records are returned.\n  Likewise, the `nbHits` response attribute contains the number of returned groups.\n",
            "minimum": 0,
            "maximum": 4,
            "default": 0
          }
        ],
        "x-categories": [
          "Advanced"
        ]
      },
      "mainInjectionQueryParameters": {
        "title": "Composition Main Injection Query parameters as object",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesToRetrieve": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "content"
            ],
            "description": "Attributes to include in the API response.\n\nTo reduce the size of your response, you can retrieve only some of the attributes.\nAttribute names are case-sensitive.\n\n- `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings.\n- To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`.\n- The `objectID` attribute is always included.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Attributes"
            ]
          },
          "restrictSearchableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "title",
              "author"
            ],
            "description": "Restricts a search to a subset of your searchable attributes.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Filtering"
            ]
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "optionalFilters": {
            "$ref": "#/components/schemas/optionalFilters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "sumOrFiltersScores": {
            "type": "boolean",
            "description": "Whether to sum all filter scores.\n\nIf true, all filter scores are summed.\nOtherwise, the maximum filter score is kept.\nFor more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).\n",
            "default": false,
            "x-categories": [
              "Filtering"
            ]
          },
          "facets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.\n\nTo retrieve all facets, use the wildcard character `*`.\nFor more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).\n",
            "default": [],
            "example": [
              "*"
            ],
            "x-categories": [
              "Faceting"
            ]
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of facet values to return for each facet.",
            "default": 100,
            "maximum": 1000,
            "x-categories": [
              "Faceting"
            ]
          },
          "facetingAfterDistinct": {
            "type": "boolean",
            "description": "Whether faceting should be applied after deduplication with `distinct`.\n\nThis leads to accurate facet counts when using faceting in combination with `distinct`.\nIt's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting,\nas `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.\n",
            "default": false,
            "x-categories": [
              "Faceting"
            ]
          },
          "sortFacetValuesBy": {
            "type": "string",
            "description": "Order in which to retrieve facet values.\n\n- `count`.\n  Facet values are retrieved by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Retrieve facet values alphabetically.\n\nThis setting doesn't influence how facet values are displayed in your UI (see `renderingContent`).\nFor more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/).\n",
            "default": "count",
            "x-categories": [
              "Faceting"
            ]
          },
          "attributesToHighlight": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "conten",
              "content"
            ],
            "description": "Attributes to highlight.\n\nBy default, all searchable attributes are highlighted.\nUse `*` to highlight all attributes or use an empty array `[]` to turn off highlighting.\nAttribute names are case-sensitive.\n\nWith highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`.\nYou can use this to visually highlight matching parts of a search query in your UI.\n\nFor more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).\n",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "attributesToSnippet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "content:80",
              "description"
            ],
            "description": "Attributes for which to enable snippets.\nAttribute names are case-sensitive.\n\nSnippets provide additional context to matched words.\nIf you enable snippets, they include 10 words, including the matched word.\nThe matched word will also be wrapped by HTML tags for highlighting.\nYou can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`,\nwhere `NUMBER` is the number of words to be extracted.\n",
            "default": [],
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPreTag": {
            "type": "string",
            "description": "HTML tag to insert before the highlighted parts in all highlighted results and snippets.",
            "default": "<em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPostTag": {
            "type": "string",
            "description": "HTML tag to insert after the highlighted parts in all highlighted results and snippets.",
            "default": "</em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "snippetEllipsisText": {
            "type": "string",
            "description": "String used as an ellipsis indicator when a snippet is truncated.",
            "default": "…",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "restrictHighlightAndSnippetArrays": {
            "type": "boolean",
            "description": "Whether to restrict highlighting and snippeting to items that at least partially matched the search query.\nBy default, all items are highlighted and snippeted.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          },
          "length": {
            "type": "integer",
            "description": "Number of hits to retrieve (used in combination with `offset`).",
            "minimum": 0,
            "maximum": 1000,
            "x-categories": [
              "Pagination"
            ]
          },
          "minWordSizefor1Typo": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 4,
            "x-categories": [
              "Typos"
            ]
          },
          "minWordSizefor2Typos": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 8,
            "x-categories": [
              "Typos"
            ]
          },
          "typoTolerance": {
            "$ref": "#/components/schemas/typoTolerance"
          },
          "allowTyposOnNumericTokens": {
            "type": "boolean",
            "description": "Whether to allow typos on numbers in the search query.\n\nTurn off this setting to reduce the number of irrelevant matches\nwhen searching in large sets of similar numbers.\n",
            "default": true,
            "x-categories": [
              "Typos"
            ]
          },
          "disableTypoToleranceOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sku"
            ],
            "description": "Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).\nAttribute names are case-sensitive.\n\nReturning only exact matches can help when:\n\n- [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/).\n- Reducing the number of matches when you have too many.\n  This can happen with attributes that are long blocks of text, such as product descriptions.\n\nConsider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.\n",
            "default": [],
            "x-categories": [
              "Typos"
            ]
          },
          "ignorePlurals": {
            "$ref": "#/components/schemas/ignorePlurals"
          },
          "removeStopWords": {
            "$ref": "#/components/schemas/removeStopWords"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "es"
            ],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "naturalLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "description": "ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):\n\n- Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.\n- Sets `removeWordsIfNoResults` to `allOptional`.\n- Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "decompoundQuery": {
            "type": "boolean",
            "description": "Whether to split compound words in the query into their building blocks.\n\nFor more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).\nWord segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).\n",
            "default": true,
            "x-categories": [
              "Languages"
            ]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": [
              "Rules"
            ]
          },
          "ruleContexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigns a rule context to the search query.\n\n[Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.\n",
            "default": [],
            "example": [
              "mobile"
            ],
            "x-categories": [
              "Rules"
            ]
          },
          "enablePersonalization": {
            "type": "boolean",
            "description": "Whether to enable Personalization.",
            "default": false,
            "x-categories": [
              "Personalization"
            ]
          },
          "personalizationImpact": {
            "type": "integer",
            "description": "Impact that Personalization should have on this search.\n\nThe higher this value is, the more Personalization determines the ranking compared to other factors.\nFor more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).\n",
            "default": 100,
            "minimum": 0,
            "maximum": 100,
            "x-categories": [
              "Personalization"
            ]
          },
          "queryType": {
            "$ref": "#/components/schemas/queryType"
          },
          "removeWordsIfNoResults": {
            "$ref": "#/components/schemas/removeWordsIfNoResults"
          },
          "advancedSyntax": {
            "type": "boolean",
            "description": "Whether to support phrase matching and excluding words from search queries.\n\nUse the `advancedSyntaxFeatures` parameter to control which feature is supported.\n",
            "default": false,
            "x-categories": [
              "Query strategy"
            ]
          },
          "optionalWords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "blue",
              "iphone case"
            ],
            "description": "Words that should be considered optional when found in the query.\n\nBy default, records must match all words in the search query to be included in the search results.\nAdding optional words can help to increase the number of search results by running an additional search query that doesn't include the optional words.\nFor example, if the search query is \"action video\" and \"video\" is an optional word,\nthe search engine runs two queries. One for \"action video\" and one for \"action\".\nRecords that match all words are ranked higher.\n\nFor a search query with 4 or more words **and** all its words are optional,\nthe number of matched words required for a record to be included in the search results increases for every 1,000 records:\n\n- If `optionalWords` has less than 10 words, the required number of matched words increases by 1:\n  results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 2 matched words.\n- If `optionalWords` has 10 or more words, the number of required matched words increases by the number of optional words divided by 5 (rounded down).\n  For example, with 18 optional words: results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 4 matched words.\n\nFor more information, see [Optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).\n",
            "default": [],
            "x-categories": [
              "Query strategy"
            ]
          },
          "disableExactOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "description"
            ],
            "description": "Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).\nAttribute names are case-sensitive.\n\nThis can be useful for attributes with long values, where the likelihood of an exact match is high,\nsuch as product descriptions.\nTurning off the Exact ranking criterion for these attributes favors exact matching on other attributes.\nThis reduces the impact of individual attributes with a lot of content on ranking.\n",
            "default": [],
            "x-categories": [
              "Query strategy"
            ]
          },
          "exactOnSingleWordQuery": {
            "$ref": "#/components/schemas/exactOnSingleWordQuery"
          },
          "alternativesAsExact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alternativesAsExact"
            },
            "description": "Determine which plurals and synonyms should be considered an exact matches.\n\nBy default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching.\nFor example:\n\n- \"swimsuit\" and \"swimsuits\" are treated the same\n- \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).\n\n- `ignorePlurals`.\n  Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.\n\n- `singleWordSynonym`.\n  Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.\n\n- `multiWordsSynonym`.\n  Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.\n",
            "default": [
              "ignorePlurals",
              "singleWordSynonym"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "advancedSyntaxFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/advancedSyntaxFeatures"
            },
            "description": "Advanced search syntax features you want to support.\n\n- `exactPhrase`.\n  Phrases in quotes must match exactly.\n  For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".\n\n- `excludeWords`.\n  Query words prefixed with a `-` must not occur in a record.\n  For example, `search -engine` matches records that contain \"search\" but not \"engine\".\n\nThis setting only has an effect if `advancedSyntax` is true.\n",
            "default": [
              "exactPhrase",
              "excludeWords"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "distinct": {
            "$ref": "#/components/schemas/distinct"
          },
          "getRankingInfo": {
            "type": "boolean",
            "description": "Whether the search response should include detailed ranking information."
          },
          "clickAnalytics": {
            "type": "boolean",
            "description": "Whether to include a `queryID` attribute in the response.\n\nThe query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).\n",
            "default": false,
            "x-categories": [
              "Analytics"
            ]
          },
          "analytics": {
            "type": "boolean",
            "description": "Whether this search will be included in Analytics.",
            "default": true,
            "x-categories": [
              "Analytics"
            ]
          },
          "analyticsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).",
            "default": [],
            "x-categories": [
              "Analytics"
            ]
          },
          "synonyms": {
            "type": "boolean",
            "description": "Whether to take into account an index's synonyms for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "replaceSynonymsInHighlight": {
            "type": "boolean",
            "description": "Whether to replace a highlighted word with the matched synonym.\n\nBy default, the original words are highlighted even if a synonym matches.\nFor example, with `home` as a synonym for `house` and a search for `home`,\nrecords matching either \"home\" or \"house\" are included in the search results,\nand either \"home\" or \"house\" are highlighted.\n\nWith `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,\nbut all occurrences of \"house\" are replaced by \"home\" in the highlighted response.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "minProximity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "description": "Minimum proximity score for two matching words.\n\nThis adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)\nby equally scoring matches that are farther apart.\n\nFor example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.\n",
            "default": 1,
            "x-categories": [
              "Advanced"
            ]
          },
          "responseFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties to include in the API response of `search` and `browse` requests.\n\nBy default, all response properties are included.\nTo reduce the response size, you can select, which attributes should be included.\n\nYou can't exclude these properties:\n`message`, `warning`, `cursor`, `serverUsed`, `indexUsed`,\n`abTestVariantID`, `parsedQuery`, or any property triggered by the `getRankingInfo` parameter.\n\nDon't exclude properties that you might need in your search UI.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Advanced"
            ]
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "percentileComputation": {
            "type": "boolean",
            "description": "Whether to include this search when calculating processing-time percentiles.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "attributeCriteriaComputedByMinProximity": {
            "type": "boolean",
            "description": "Whether the best matching attribute should be determined by minimum proximity.\n\nThis setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting.\nIf true, the best matching attribute is selected based on the minimum proximity of multiple matches.\nOtherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.\n",
            "default": false,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableABTest": {
            "type": "boolean",
            "description": "Whether to enable A/B testing for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": [
              "Filtering"
            ]
          }
        }
      },
      "optionalWordsArray": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "blue",
          "iphone case"
        ],
        "description": "List of [optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).",
        "default": [],
        "x-categories": [
          "Query strategy"
        ]
      },
      "optionalWords": {
        "description": "Words that should be considered optional when found in the query.\n\nBy default, records must match all words in the search query to be included in the search results.\nAdding optional words can help to increase the number of search results by running an additional search query that doesn't include the optional words.\nFor example, if the search query is \"action video\" and \"video\" is an optional word,\nthe search engine runs two queries. One for \"action video\" and one for \"action\".\nRecords that match all words are ranked higher.\n\nFor a search query with 4 or more words **and** all its words are optional,\nthe number of matched words required for a record to be included in the search results increases for every 1,000 records:\n\n- If `optionalWords` has less than 10 words, the required number of matched words increases by 1:\n  results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 2 matched words.\n- If `optionalWords` has 10 or more words, the number of required matched words increases by the number of optional words divided by 5 (rounded down).\n  For example, with 18 optional words: results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 4 matched words.\n\nFor more information, see [Optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).\n",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/components/schemas/optionalWordsArray"
          }
        ]
      },
      "injectedItemsQueryParameters": {
        "title": "Composition injectedItems Query parameters as object",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesToRetrieve": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "content"
            ],
            "description": "Attributes to include in the API response.\n\nTo reduce the size of your response, you can retrieve only some of the attributes.\nAttribute names are case-sensitive.\n\n- `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings.\n- To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`.\n- The `objectID` attribute is always included.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Attributes"
            ]
          },
          "restrictSearchableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "title",
              "author"
            ],
            "description": "Restricts a search to a subset of your searchable attributes.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Filtering"
            ]
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "optionalFilters": {
            "$ref": "#/components/schemas/optionalFilters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "attributesToHighlight": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "conten",
              "content"
            ],
            "description": "Attributes to highlight.\n\nBy default, all searchable attributes are highlighted.\nUse `*` to highlight all attributes or use an empty array `[]` to turn off highlighting.\nAttribute names are case-sensitive.\n\nWith highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`.\nYou can use this to visually highlight matching parts of a search query in your UI.\n\nFor more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).\n",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "attributesToSnippet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "content:80",
              "description"
            ],
            "description": "Attributes for which to enable snippets.\nAttribute names are case-sensitive.\n\nSnippets provide additional context to matched words.\nIf you enable snippets, they include 10 words, including the matched word.\nThe matched word will also be wrapped by HTML tags for highlighting.\nYou can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`,\nwhere `NUMBER` is the number of words to be extracted.\n",
            "default": [],
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPreTag": {
            "type": "string",
            "description": "HTML tag to insert before the highlighted parts in all highlighted results and snippets.",
            "default": "<em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPostTag": {
            "type": "string",
            "description": "HTML tag to insert after the highlighted parts in all highlighted results and snippets.",
            "default": "</em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "snippetEllipsisText": {
            "type": "string",
            "description": "String used as an ellipsis indicator when a snippet is truncated.",
            "default": "…",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "restrictHighlightAndSnippetArrays": {
            "type": "boolean",
            "description": "Whether to restrict highlighting and snippeting to items that at least partially matched the search query.\nBy default, all items are highlighted and snippeted.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "minWordSizefor1Typo": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 4,
            "x-categories": [
              "Typos"
            ]
          },
          "minWordSizefor2Typos": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 8,
            "x-categories": [
              "Typos"
            ]
          },
          "typoTolerance": {
            "$ref": "#/components/schemas/typoTolerance"
          },
          "allowTyposOnNumericTokens": {
            "type": "boolean",
            "description": "Whether to allow typos on numbers in the search query.\n\nTurn off this setting to reduce the number of irrelevant matches\nwhen searching in large sets of similar numbers.\n",
            "default": true,
            "x-categories": [
              "Typos"
            ]
          },
          "disableTypoToleranceOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sku"
            ],
            "description": "Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).\nAttribute names are case-sensitive.\n\nReturning only exact matches can help when:\n\n- [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/).\n- Reducing the number of matches when you have too many.\n  This can happen with attributes that are long blocks of text, such as product descriptions.\n\nConsider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.\n",
            "default": [],
            "x-categories": [
              "Typos"
            ]
          },
          "ignorePlurals": {
            "$ref": "#/components/schemas/ignorePlurals"
          },
          "removeStopWords": {
            "$ref": "#/components/schemas/removeStopWords"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "es"
            ],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "naturalLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "description": "ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):\n\n- Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.\n- Sets `removeWordsIfNoResults` to `allOptional`.\n- Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "decompoundQuery": {
            "type": "boolean",
            "description": "Whether to split compound words in the query into their building blocks.\n\nFor more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).\nWord segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).\n",
            "default": true,
            "x-categories": [
              "Languages"
            ]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": [
              "Rules"
            ]
          },
          "ruleContexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigns a rule context to the search query.\n\n[Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.\n",
            "default": [],
            "example": [
              "mobile"
            ],
            "x-categories": [
              "Rules"
            ]
          },
          "enablePersonalization": {
            "type": "boolean",
            "description": "Whether to enable Personalization.",
            "default": false,
            "x-categories": [
              "Personalization"
            ]
          },
          "personalizationImpact": {
            "type": "integer",
            "description": "Impact that Personalization should have on this search.\n\nThe higher this value is, the more Personalization determines the ranking compared to other factors.\nFor more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).\n",
            "default": 100,
            "minimum": 0,
            "maximum": 100,
            "x-categories": [
              "Personalization"
            ]
          },
          "queryType": {
            "$ref": "#/components/schemas/queryType"
          },
          "removeWordsIfNoResults": {
            "$ref": "#/components/schemas/removeWordsIfNoResults"
          },
          "advancedSyntax": {
            "type": "boolean",
            "description": "Whether to support phrase matching and excluding words from search queries.\n\nUse the `advancedSyntaxFeatures` parameter to control which feature is supported.\n",
            "default": false,
            "x-categories": [
              "Query strategy"
            ]
          },
          "optionalWords": {
            "$ref": "#/components/schemas/optionalWords"
          },
          "disableExactOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "description"
            ],
            "description": "Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).\nAttribute names are case-sensitive.\n\nThis can be useful for attributes with long values, where the likelihood of an exact match is high,\nsuch as product descriptions.\nTurning off the Exact ranking criterion for these attributes favors exact matching on other attributes.\nThis reduces the impact of individual attributes with a lot of content on ranking.\n",
            "default": [],
            "x-categories": [
              "Query strategy"
            ]
          },
          "exactOnSingleWordQuery": {
            "$ref": "#/components/schemas/exactOnSingleWordQuery"
          },
          "alternativesAsExact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alternativesAsExact"
            },
            "description": "Determine which plurals and synonyms should be considered an exact matches.\n\nBy default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching.\nFor example:\n\n- \"swimsuit\" and \"swimsuits\" are treated the same\n- \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).\n\n- `ignorePlurals`.\n  Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.\n\n- `singleWordSynonym`.\n  Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.\n\n- `multiWordsSynonym`.\n  Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.\n",
            "default": [
              "ignorePlurals",
              "singleWordSynonym"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "advancedSyntaxFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/advancedSyntaxFeatures"
            },
            "description": "Advanced search syntax features you want to support.\n\n- `exactPhrase`.\n  Phrases in quotes must match exactly.\n  For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".\n\n- `excludeWords`.\n  Query words prefixed with a `-` must not occur in a record.\n  For example, `search -engine` matches records that contain \"search\" but not \"engine\".\n\nThis setting only has an effect if `advancedSyntax` is true.\n",
            "default": [
              "exactPhrase",
              "excludeWords"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "distinct": {
            "$ref": "#/components/schemas/distinct"
          },
          "getRankingInfo": {
            "type": "boolean",
            "description": "Whether the search response should include detailed ranking information."
          },
          "clickAnalytics": {
            "type": "boolean",
            "description": "Whether to include a `queryID` attribute in the response.\n\nThe query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).\n",
            "default": false,
            "x-categories": [
              "Analytics"
            ]
          },
          "analytics": {
            "type": "boolean",
            "description": "Whether this search will be included in Analytics.",
            "default": true,
            "x-categories": [
              "Analytics"
            ]
          },
          "analyticsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).",
            "default": [],
            "x-categories": [
              "Analytics"
            ]
          },
          "synonyms": {
            "type": "boolean",
            "description": "Whether to take into account an index's synonyms for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "replaceSynonymsInHighlight": {
            "type": "boolean",
            "description": "Whether to replace a highlighted word with the matched synonym.\n\nBy default, the original words are highlighted even if a synonym matches.\nFor example, with `home` as a synonym for `house` and a search for `home`,\nrecords matching either \"home\" or \"house\" are included in the search results,\nand either \"home\" or \"house\" are highlighted.\n\nWith `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,\nbut all occurrences of \"house\" are replaced by \"home\" in the highlighted response.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "minProximity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "description": "Minimum proximity score for two matching words.\n\nThis adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)\nby equally scoring matches that are farther apart.\n\nFor example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.\n",
            "default": 1,
            "x-categories": [
              "Advanced"
            ]
          },
          "responseFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties to include in the API response of `search` and `browse` requests.\n\nBy default, all response properties are included.\nTo reduce the response size, you can select, which attributes should be included.\n\nYou can't exclude these properties:\n`message`, `warning`, `cursor`, `serverUsed`, `indexUsed`,\n`abTestVariantID`, `parsedQuery`, or any property triggered by the `getRankingInfo` parameter.\n\nDon't exclude properties that you might need in your search UI.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Advanced"
            ]
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "percentileComputation": {
            "type": "boolean",
            "description": "Whether to include this search when calculating processing-time percentiles.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "attributeCriteriaComputedByMinProximity": {
            "type": "boolean",
            "description": "Whether the best matching attribute should be determined by minimum proximity.\n\nThis setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting.\nIf true, the best matching attribute is selected based on the minimum proximity of multiple matches.\nOtherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.\n",
            "default": false,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableABTest": {
            "type": "boolean",
            "description": "Whether to enable A/B testing for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": [
              "Filtering"
            ]
          }
        }
      },
      "injectedItem": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "description": "injected Item unique identifier."
          },
          "source": {
            "title": "injectedItemSource",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "search": {
                "title": "injectedItemSourceSearch",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "index": {
                    "type": "string",
                    "description": "Composition Main Index name.",
                    "example": "Products"
                  },
                  "params": {
                    "$ref": "#/components/schemas/injectedItemsQueryParameters"
                  }
                },
                "required": [
                  "index"
                ]
              }
            },
            "required": [
              "search"
            ]
          },
          "position": {
            "type": "integer",
            "minimum": 0,
            "maximum": 19
          },
          "length": {
            "type": "integer",
            "minimum": 0,
            "maximum": 20
          }
        },
        "required": [
          "key",
          "source",
          "position",
          "length"
        ]
      },
      "compositionBehavior": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "injection": {
            "title": "injection",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "main": {
                "title": "main",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "source": {
                    "title": "compositionSource",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "search": {
                        "title": "compositionSourceSearch",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "index": {
                            "type": "string",
                            "description": "Composition Main Index name.",
                            "example": "Products"
                          },
                          "params": {
                            "$ref": "#/components/schemas/mainInjectionQueryParameters"
                          }
                        },
                        "required": [
                          "index"
                        ]
                      }
                    },
                    "required": [
                      "search"
                    ]
                  }
                },
                "required": [
                  "source"
                ]
              },
              "injectedItems": {
                "type": "array",
                "description": "list of injected items of the current Composition.",
                "minItems": 0,
                "maxItems": 2,
                "items": {
                  "$ref": "#/components/schemas/injectedItem"
                }
              }
            },
            "required": [
              "main"
            ]
          }
        },
        "required": [
          "injection"
        ]
      },
      "composition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "name": {
            "type": "string",
            "description": "Composition name.",
            "example": "my lovely crafted composition"
          },
          "description": {
            "type": "string",
            "description": "Composition description.",
            "example": "my lovely crafted composition that is used for X purpose"
          },
          "behavior": {
            "$ref": "#/components/schemas/compositionBehavior"
          }
        },
        "required": [
          "objectID",
          "behavior",
          "name"
        ]
      },
      "action": {
        "type": "string",
        "enum": [
          "upsert",
          "delete"
        ],
        "description": "Type of Composition Batch operation."
      },
      "deleteCompositionAction": {
        "type": "object",
        "description": "Operation arguments when deleting.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          }
        },
        "required": [
          "objectID"
        ]
      },
      "batchCompositionAction": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/composition"
          },
          {
            "$ref": "#/components/schemas/deleteCompositionAction"
          }
        ]
      },
      "taskID": {
        "type": "integer",
        "format": "int64",
        "example": 1514562690001,
        "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
      },
      "ruleID": {
        "title": "objectID",
        "type": "string",
        "description": "Unique identifier of a rule object."
      },
      "anchoring": {
        "type": "string",
        "description": "Which part of the search query the pattern should match:\n\n- `startsWith`. The pattern must match the beginning of the query.\n- `endsWith`. The pattern must match the end of the query.\n- `is`. The pattern must match the query exactly.\n- `contains`. The pattern must match anywhere in the query.\n\nEmpty queries are only allowed as patterns with `anchoring: is`.\n",
        "enum": [
          "is",
          "startsWith",
          "endsWith",
          "contains"
        ]
      },
      "context": {
        "type": "string",
        "pattern": "[A-Za-z0-9_-]+",
        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
        "example": "mobile"
      },
      "condition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "pattern": {
            "type": "string",
            "description": "Query pattern that triggers the rule.\n\nYou can use either a literal string, or a special pattern `{facet:ATTRIBUTE}`, where `ATTRIBUTE` is a facet name.\nThe rule is triggered if the query matches the literal string or a value of the specified facet.\nFor example, with `pattern: {facet:genre}`, the rule is triggered when users search for a genre, such as \"comedy\".\n",
            "example": "{facet:genre}"
          },
          "anchoring": {
            "$ref": "#/components/schemas/anchoring"
          },
          "alternatives": {
            "type": "boolean",
            "description": "Whether the pattern should match plurals, synonyms, and typos.",
            "default": false
          },
          "context": {
            "$ref": "#/components/schemas/context"
          },
          "filters": {
            "type": "string",
            "description": "Filters that trigger the rule.\n\nYou can add add filters using the syntax `facet:value` so that the rule is triggered, when the specific filter is selected.\nYou can use `filters` on its own or combine it with the `pattern` parameter.\n",
            "example": "genre:comedy"
          }
        }
      },
      "timeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should start to be active, in Unix epoch time."
          },
          "until": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should stop to be active, in Unix epoch time."
          }
        }
      },
      "compositionRule": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "conditions": {
            "type": "array",
            "minItems": 0,
            "maxItems": 25,
            "description": "Conditions that trigger a composition rule.",
            "items": {
              "$ref": "#/components/schemas/condition"
            }
          },
          "consequence": {
            "title": "compositionRuleConsequence",
            "type": "object",
            "description": "Effect of the rule.",
            "additionalProperties": false,
            "properties": {
              "behavior": {
                "$ref": "#/components/schemas/compositionBehavior"
              }
            },
            "required": [
              "behavior"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the rule's purpose to help you distinguish between different rules.",
            "example": "Display a promotional banner"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the rule is active."
          },
          "validity": {
            "type": "array",
            "description": "Time periods when the rule is active.",
            "items": {
              "$ref": "#/components/schemas/timeRange"
            }
          }
        },
        "required": [
          "objectID",
          "conditions",
          "consequence"
        ]
      },
      "deleteCompositionRuleAction": {
        "type": "object",
        "description": "Operation arguments when deleting.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          }
        },
        "required": [
          "objectID"
        ]
      },
      "rulesBatchCompositionAction": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/compositionRule"
          },
          {
            "$ref": "#/components/schemas/deleteCompositionRuleAction"
          }
        ]
      },
      "parameters_query": {
        "type": "string",
        "description": "Search query for rules.",
        "default": ""
      },
      "parameters_page": {
        "type": "integer",
        "minimum": 0,
        "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "parameters_hitsPerPage": {
        "type": "integer",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "taskStatus": {
        "type": "string",
        "enum": [
          "published",
          "notPublished"
        ],
        "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
      },
      "GetTaskResponse": {
        "title": "getTaskResponse",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/taskStatus"
          }
        },
        "required": [
          "status"
        ]
      },
      "listCompositionsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "All compositions in your Algolia application.",
            "items": {
              "$ref": "#/components/schemas/composition"
            }
          },
          "nbPages": {
            "type": "integer",
            "description": "Number of pages.",
            "example": 100
          },
          "page": {
            "type": "integer",
            "description": "Current page.",
            "example": 0
          },
          "hitsPerPage": {
            "type": "integer",
            "description": "Number of items per page.",
            "example": 20
          },
          "nbHits": {
            "type": "integer",
            "description": "Number of items.",
            "example": 200
          }
        },
        "required": [
          "hitsPerPage",
          "items",
          "nbHits",
          "nbPages",
          "page"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "CompositionNotFound": {
        "description": "Composition not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Search",
      "tags": [
        "Compositions"
      ]
    }
  ]
}