{
  "openapi": "3.0.2",
  "info": {
    "title": "Search API",
    "description": "The Algolia Search API lets you search, configure, and manage your indices and records.\n\n## Client libraries\n\nUse Algolia's API clients and libraries to reliably integrate Algolia's APIs with your apps.\nThe official API clients are covered by Algolia's [Service Level Agreement](https://www.algolia.com/policies/sla/).\n\nSee: [Algolia's ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/)\n\n## Base URLs\n\nThe base URLs for requests to the Search API are:\n\n- `https://{APPLICATION_ID}.algolia.net`\n- `https://{APPLICATION_ID}-dsn.algolia.net`.\n  If your subscription includes a [Distributed Search Network](https://dashboard.algolia.com/infra),\n  this ensures that requests are sent to servers closest to users.\n\nBoth URLs provide high availability by distributing requests with load balancing.\n\n**All requests must use HTTPS.**\n\n## Retry strategy\n\nTo guarantee high availability, implement a retry strategy for all API requests using the URLs of your servers as fallbacks:\n\n- `https://{APPLICATION_ID}-1.algolianet.com`\n- `https://{APPLICATION_ID}-2.algolianet.com`\n- `https://{APPLICATION_ID}-3.algolianet.com`\n\nThese URLs use a different DNS provider than the primary URLs.\nYou should randomize this list to ensure an even load across the three servers.\n\nAll Algolia API clients implement this retry strategy.\n\n## Authentication\n\nTo authenticate your API requests, add these headers:\n\n- `x-algolia-application-id`. Your Algolia application ID.\n- `x-algolia-api-key`. An API key with the necessary permissions to make the request.\n  The required access control list (ACL) to make a request is listed in each endpoint's reference.\n\nYou can find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account).\n\n## Request format\n\nDepending on the endpoint, request bodies are either JSON objects or arrays of JSON objects,\n\n## Parameters\n\nParameters are passed as query parameters for GET and DELETE requests,\nand in the request body for POST and PUT requests.\n\nQuery parameters must be [URL-encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding).\nNon-ASCII characters must be UTF-8 encoded.\nPlus characters (`+`) are interpreted as spaces.\nArrays as query parameters must be one of:\n\n- A comma-separated string: `attributesToRetrieve=title,description`\n- A URL-encoded JSON array: `attributesToRetrieve=%5B%22title%22,%22description%22%D`\n\n## Response status and errors\n\nThe Search API returns JSON responses.\nSince JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.\n\nSuccessful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a `5xx` status.\nError responses have a `message` property with more information.\n\n## Version\n\nThe current version of the Search API is version 1, as indicated by the `/1/` in each endpoint's URL.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://{appId}.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-1.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-2.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-3.algolianet.com",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    },
    {
      "url": "https://{appId}-dsn.algolia.net",
      "variables": {
        "appId": {
          "default": "ALGOLIA_APPLICATION_ID"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "Advanced",
      "description": "Query your logs."
    },
    {
      "name": "Api Keys",
      "x-displayName": "API keys",
      "description": "Manage your API keys.\n\nAPI requests must be authenticated with an API key.\nAPI keys can have permissions (access control lists, ACL) and restrictions.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/security/api-keys/",
        "description": "Related guide: API keys.\n"
      }
    },
    {
      "name": "Clusters",
      "description": "Multi-cluster operations.\n\nMulti-cluster operations are **deprecated**.\nIf you have issues with your Algolia infrastructure\ndue to large volumes of data, contact the Algolia support team.\n"
    },
    {
      "name": "Dictionaries",
      "description": "Manage your dictionaries.\n\nCustomize language-specific settings, such as stop words, plurals, or word segmentation.\n\nDictionaries are application-wide.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/",
        "description": "Related guide: Natural languages.\n"
      }
    },
    {
      "name": "Indices",
      "description": "Manage your indices and index settings.\n\nIndices are copies of your data that are stored on Algolia's servers.\nThey're optimal data structures for fast search and are made up of records and settings.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/",
        "description": "Related guide: Manage your indices.\n"
      }
    },
    {
      "name": "Records",
      "description": "Add, update, and delete records from your indices.\n\nRecords are individual items in your index.\nWhen they match a search query, they're returned as search results, in the order determined by your ranking.\nRecords are schemaless JSON objects.\nWhen adding or updating many records, check the [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/",
        "description": "Related guide: Prepare your records.\n"
      }
    },
    {
      "name": "Rules",
      "description": "Create, update, delete, and search for rules.\n\nRules are _if-then_ statements that you can use to curate search results.\nRules have _conditions_ that can trigger _consequences_.\nConsequences are changes to the search results, such as changing the order of search results or boosting a facet.\nThis can be useful for tuning specific queries or for merchandising.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/",
        "description": "Related guide: Rules.\n"
      }
    },
    {
      "name": "Search",
      "description": "Search one or more indices for matching records or facet values."
    },
    {
      "name": "Synonyms",
      "description": "Create, update, delete, and search for synonyms.\n\nSynonyms are terms that the search engine should consider equal.\n",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/",
        "description": "Related guide: Synonyms.\n"
      }
    },
    {
      "name": "Vaults",
      "description": "Algolia Vault lets you restrict access to your clusters to specific IP addresses and provides disk-level encryption at rest.",
      "externalDocs": {
        "url": "https://www.algolia.com/doc/guides/security/algolia-vault/",
        "description": "Related guide: Algolia Vault.\n"
      }
    },
    {
      "name": "_model_index_settings",
      "x-displayName": "Index settings",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/indexSettings\" />.\n"
    }
  ],
  "paths": {
    "/{path}": {
      "get": {
        "operationId": "customGet",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "operationId": "customPost",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "operationId": "customPut",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "operationId": "customDelete",
        "summary": "Send requests to the Algolia REST API",
        "description": "This method lets you send requests to the Algolia REST API.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PathInPath"
          },
          {
            "$ref": "#/components/parameters/Parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/query": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "searchSingleIndex",
        "x-mcp-tool": true,
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Search an index",
        "description": "Searches a single index and returns matching search results (_hits_).\n\nThis method lets you retrieve up to 1,000 hits.\nIf you need more, use the [`browse` operation](#tag/Search/operation/browse) or increase the `paginatedLimitedTo` index setting.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/*/queries": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "search",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-legacy-signature": true,
        "x-acl": [
          "search"
        ],
        "summary": "Search multiple indices",
        "description": "Sends multiple search requests to one or more indices.\n\nThis can be useful in these cases:\n\n- Different indices for different purposes, such as, one index for products, another one for marketing content.\n- Multiple searches to the same index—for example, with different filters.\n\nUse the helper `searchForHits` or `searchForFacets` to get the results in a more convenient format, if you already know the return type you want.\n",
        "requestBody": {
          "required": true,
          "description": "Muli-search request body. Results are returned in the same order as the requests.",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchMethodParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "requests": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SearchQuery"
                    }
                  },
                  "strategy": {
                    "$ref": "#/components/schemas/searchStrategy"
                  }
                },
                "required": [
                  "requests"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchResponses",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/searchResult"
                      }
                    }
                  },
                  "required": [
                    "results"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/facets/{facetName}/query": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "searchForFacetValues",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Search for facet values",
        "description": "Searches for values of a specified facet attribute.\n\n- By default, facet values are sorted by decreasing count.\n  You can adjust this with the `sortFacetValueBy` parameter.\n- Searching for facet values doesn't work if you have **more than 65 searchable facets and searchable attributes combined**.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "name": "facetName",
            "description": "Facet attribute in which to search for values.\n\nThis attribute must be included in the `attributesForFaceting` index setting with the `searchable()` modifier.\n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "searchForFacetValuesRequest",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "params": {
                    "$ref": "#/components/schemas/paramsAsString"
                  },
                  "facetQuery": {
                    "$ref": "#/components/schemas/facetQuery"
                  },
                  "maxFacetHits": {
                    "$ref": "#/components/schemas/maxFacetHits"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchForFacetValuesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/browse": {
      "post": {
        "tags": [
          "Search"
        ],
        "operationId": "browse",
        "x-use-read-transporter": true,
        "x-acl": [
          "browse"
        ],
        "summary": "Browse for records",
        "description": "Retrieves records from an index, up to 1,000 per request.\n\nWhile searching retrieves _hits_ (records augmented with attributes for highlighting and ranking details),\nbrowsing _just_ returns matching records.\nThis can be useful if you want to export your indices.\n\n- The Analytics API doesn't collect data when using `browse`.\n- Records are ranked by attributes and custom ranking.\n- There's no ranking for: typo-tolerance, number of matched words, proximity, geo distance.\n\nBrowse requests automatically apply these settings:\n\n- `advancedSyntax`: `false`\n- `attributesToHighlight`: `[]`\n- `attributesToSnippet`: `[]`\n- `distinct`: `false`\n- `enablePersonalization`: `false`\n- `enableRules`: `false`\n- `facets`: `[]`\n- `getRankingInfo`: `false`\n- `ignorePlurals`: `false`\n- `optionalFilters`: `[]`\n- `typoTolerance`: `true` or `false` (`min` and `strict` evaluate to `true`)\n\nIf you send these parameters with your browse requests, they'll be ignored.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/browseParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/browseResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "saveObject",
        "x-mcp-tool": true,
        "x-acl": [
          "addObject"
        ],
        "description": "Adds a record to an index or replaces it.\n\n- If the record doesn't have an object ID, a new record with an auto-generated object ID is added to your index.\n- If a record with the specified object ID exists, the existing record is replaced.\n- If a record with the specified object ID doesn't exist, a new record is added to your index.\n- If you add a record to an index that doesn't exist yet, a new index is created.\n\nTo update _some_ attributes of a record, use the [`partial` operation](#tag/Records/operation/partialUpdateObject).\nTo add, update, or replace multiple records, use the [`batch` operation](#tag/Records/operation/batch).\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "summary": "Add a new record (with auto-generated object ID)",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The record. A schemaless object with attributes that are useful in the context of search and discovery.",
          "x-is-generic": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "objectID": "blackTShirt",
                  "name": "Black T-shirt",
                  "color": "#000000"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "saveObjectResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "createdAt": {
                      "$ref": "#/components/schemas/createdAt"
                    },
                    "taskID": {
                      "$ref": "#/components/schemas/taskID"
                    },
                    "objectID": {
                      "$ref": "#/components/schemas/objectID"
                    }
                  },
                  "required": [
                    "taskID",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Indices"
        ],
        "operationId": "deleteIndex",
        "x-acl": [
          "deleteIndex"
        ],
        "summary": "Delete an index",
        "description": "Deletes an index and all its settings.\n\n- Deleting an index doesn't delete its analytics data.\n- If you try to delete a non-existing index, the operation is ignored without warning.\n- If the index you want to delete has replica indices, the replicas become independent indices.\n- If the index you want to delete is a replica index, you must first unlink it from its primary index before you can delete it.\n  For more information, see [Delete replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/deleting-replicas/).\n",
        "externalDocs": {
          "url": "https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/how-to/delete-indices/",
          "description": "Related guide: Delete indices.\n"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/{objectID}": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "getObject",
        "x-acl": [
          "search"
        ],
        "summary": "Retrieve a record",
        "description": "Retrieves one record by its object ID.\n\nTo retrieve more than one record, use the [`objects` operation](#tag/Records/operation/getObjects).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectID"
          },
          {
            "name": "attributesToRetrieve",
            "in": "query",
            "description": "Attributes to include with the records in the response.\nThis is useful to reduce the size of the API response.\nBy default, all retrievable attributes are returned.\n\n`objectID` is always retrieved.\n\nAttributes included in `unretrievableAttributes`\nwon't be retrieved unless the request is authenticated with the admin API key.\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The requested record."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Records"
        ],
        "operationId": "addOrUpdateObject",
        "x-acl": [
          "addObject"
        ],
        "summary": "Add or replace a record",
        "description": "If a record with the specified object ID exists, the existing record is replaced.\nOtherwise, a new record is added to the index.\n\nIf you want to use auto-generated object IDs, use the [`saveObject` operation](#tag/Records/operation/saveObject).\nTo update _some_ attributes of an existing record, use the [`partial` operation](#tag/Records/operation/partialUpdateObject) instead.\nTo add, update, or replace multiple records, use the [`batch` operation](#tag/Records/operation/batch).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The record. A schemaless object with attributes that are useful in the context of search and discovery.",
          "x-is-generic": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "objectID": "blackTShirt",
                  "name": "Black T-shirt",
                  "color": "#000000"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAtWithObjectId"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Records"
        ],
        "operationId": "deleteObject",
        "x-acl": [
          "deleteObject"
        ],
        "summary": "Delete a record",
        "description": "Deletes a record by its object ID.\n\nTo delete more than one record, use the [`batch` operation](#tag/Records/operation/batch).\nTo delete records matching a query, use the [`deleteBy` operation](#tag/Records/operation/deleteBy).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectID"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/deleteByQuery": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "deleteBy",
        "x-mcp-tool": true,
        "x-acl": [
          "deleteIndex"
        ],
        "summary": "Delete records matching a filter",
        "description": "This operation doesn't accept empty filters.\n\nThis operation is resource-intensive.\nYou should only use it if you can't get the object IDs of the records you want to delete.\nIt's more efficient to get a list of object IDs with the [`browse` operation](#tag/Search/operation/browse),\nand then delete the records using the [`batch` operation](#tag/Records/operation/batch).\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "externalDocs": {
          "url": "https://support.algolia.com/hc/en-us/articles/16385098766353-Should-I-use-the-deleteby-method-for-deleting-records-matching-a-query-",
          "description": "Should I use the deleteBy method for deleting records."
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteByParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/clear": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "clearObjects",
        "x-acl": [
          "deleteIndex"
        ],
        "summary": "Delete all records from an index",
        "description": "Deletes only the records from an index while keeping settings, synonyms, and rules.\nThis operation is resource-intensive and subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/{objectID}/partial": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "partialUpdateObject",
        "x-mcp-tool": true,
        "x-acl": [
          "addObject"
        ],
        "summary": "Add or update attributes",
        "x-codegen-request-body-name": "attributesToUpdate",
        "description": "Adds new attributes to a record, or updates existing ones.\n\n- If a record with the specified object ID doesn't exist,\n  a new record is added to the index **if** `createIfNotExists` is true.\n- If the index doesn't exist yet, this method creates a new index.\n- You can use any first-level attribute but not nested attributes.\n  If you specify a nested attribute, this operation replaces its first-level ancestor.\n\nTo update an attribute without pushing the entire record, you can use these built-in operations.\nThese operations can be helpful if you don't have access to your initial data.\n\n- Increment: increment a numeric attribute\n- Decrement: decrement a numeric attribute\n- Add: append a number or string element to an array attribute\n- Remove: remove all matching number or string elements from an array attribute made of numbers or strings\n- AddUnique: add a number or string element to an array attribute made of numbers or strings only if it's not already present\n- IncrementFrom: increment a numeric integer attribute only if the provided value matches the current value, and otherwise ignore the whole object update. For example, if you pass an IncrementFrom value of 2 for the version attribute, but the current value of the attribute is 1, the engine ignores the update. If the object doesn't exist, the engine only creates it if you pass an IncrementFrom value of 0.\n- IncrementSet: increment a numeric integer attribute only if the provided value is greater than the current value, and otherwise ignore the whole object update. For example, if you pass an IncrementSet value of 2 for the version attribute, and the current value of the attribute is 1, the engine updates the object. If the object doesn't exist yet, the engine only creates it if you pass an IncrementSet value greater than 0.\n\nYou can specify an operation by providing an object with the attribute to update as the key and its value being an object with the following properties:\n\n- _operation: the operation to apply on the attribute\n- value: the right-hand side argument to the operation, for example, increment or decrement step, value to add or remove.\n\nWhen updating multiple attributes or using multiple operations targeting the same record, you should use a single partial update for faster processing.\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectID"
          },
          {
            "name": "createIfNotExists",
            "description": "Whether to create a new record if it doesn't exist.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Attributes with their values.",
          "content": {
            "application/json": {
              "schema": {
                "description": "Attributes to update.",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAtWithObjectId"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/batch": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "batch",
        "x-mcp-tool": true,
        "summary": "Batch indexing operations on one index",
        "description": "Adds, updates, or deletes records in one index with a single API request.\n\nBatching index updates reduces latency and increases data integrity.\n\n- Actions are applied in the order they're specified.\n- Actions are equivalent to the individual API requests of the same name.\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "x-codegen-request-body-name": "batchWriteParams",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchWriteParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/*/batch": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "multipleBatch",
        "x-mcp-tool": true,
        "description": "Adds, updates, or deletes records in multiple indices with a single API request.\n\n- Actions are applied in the order they are specified.\n- Actions are equivalent to the individual API requests of the same name.\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "summary": "Batch indexing operations on multiple indices",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "batchParams",
                "description": "Batch parameters.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "requests": {
                    "type": "array",
                    "items": {
                      "title": "multipleBatchRequest",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "action": {
                          "$ref": "#/components/schemas/action"
                        },
                        "body": {
                          "type": "object",
                          "description": "Operation arguments (varies with specified `action`)."
                        },
                        "indexName": {
                          "$ref": "#/components/schemas/indexName"
                        }
                      },
                      "required": [
                        "action",
                        "indexName"
                      ]
                    }
                  }
                },
                "required": [
                  "requests"
                ]
              },
              "examples": {
                "batch": {
                  "summary": "Batch indexing request to two indices",
                  "value": {
                    "requests": [
                      {
                        "action": "addObject",
                        "indexName": "contacts",
                        "body": {
                          "name": "Betty Jane McCamey",
                          "company": "Vita Foods Inc.",
                          "email": "betty@mccamey.com"
                        }
                      },
                      {
                        "action": "addObject",
                        "indexName": "public_contacts",
                        "body": {
                          "name": "Gayla Geimer",
                          "company": "Ortman McCain Co.",
                          "email": "gayla@geimer.com"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "multipleBatchResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "object",
                      "description": "Task IDs. One for each index.",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/taskID"
                      }
                    },
                    "objectIDs": {
                      "$ref": "#/components/schemas/objectIDs"
                    }
                  },
                  "required": [
                    "taskID",
                    "objectIDs"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/*/objects": {
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "getObjects",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "search"
        ],
        "summary": "Retrieve records",
        "description": "Retrieves one or more records, potentially from different indices.\n\nRecords are returned in the same order as the requests.\n",
        "requestBody": {
          "required": true,
          "description": "Request object.",
          "content": {
            "application/json": {
              "schema": {
                "title": "getObjectsParams",
                "description": "Request parameters.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "requests": {
                    "type": "array",
                    "items": {
                      "title": "getObjectsRequest",
                      "description": "Request body for retrieving records.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "objectID",
                        "indexName"
                      ],
                      "properties": {
                        "attributesToRetrieve": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "Attributes to retrieve.\nIf not specified, all retrievable attributes are returned.\n",
                          "example": [
                            "author",
                            "title",
                            "content"
                          ]
                        },
                        "objectID": {
                          "type": "string",
                          "description": "Object ID for the record to retrieve.",
                          "example": "product-1"
                        },
                        "indexName": {
                          "type": "string",
                          "description": "Index from which to retrieve the records.",
                          "example": "books"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "requests"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getObjectsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "An optional status message.",
                      "example": "Index INDEX_NAME does not exist."
                    },
                    "results": {
                      "type": "array",
                      "description": "Retrieved records.",
                      "items": {
                        "type": "object",
                        "description": "Retrieved record.",
                        "x-is-generic": true
                      }
                    }
                  },
                  "required": [
                    "results"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/settings": {
      "get": {
        "tags": [
          "Indices"
        ],
        "operationId": "getSettings",
        "x-mcp-tool": true,
        "x-acl": [
          "settings"
        ],
        "description": "Retrieves an object with non-null index settings.",
        "summary": "Retrieve index settings",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/settingsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Indices"
        ],
        "operationId": "setSettings",
        "x-acl": [
          "editSettings"
        ],
        "description": "Update the specified index settings.\n\nIndex settings that you don't specify are left unchanged.\nSpecify `null` to reset a setting to its default value.\n\nFor best performance, update the index settings before you add new records to your index.\n",
        "summary": "Update index settings",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/indexSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/synonyms/{objectID}": {
      "get": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "getSynonym",
        "x-acl": [
          "settings"
        ],
        "summary": "Retrieve a synonym",
        "description": "Retrieves a synonym by its ID.\nTo find the object IDs for your synonyms,\nuse the [`search` operation](#tag/Synonyms/operation/searchSynonyms).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/parameters_ObjectID"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/synonymHit"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "saveSynonym",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Create or replace a synonym",
        "description": "If a synonym with the specified object ID doesn't exist, Algolia adds a new one.\nOtherwise, the existing synonym is replaced.\nTo add multiple synonyms in a single API request, use the [`batch` operation](#tag/Synonyms/operation/saveSynonyms).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/parameters_ObjectID"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/synonymHit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "saveSynonymResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "$ref": "#/components/schemas/taskID"
                    },
                    "updatedAt": {
                      "$ref": "#/components/schemas/updatedAt"
                    },
                    "id": {
                      "$ref": "#/components/schemas/id"
                    }
                  },
                  "required": [
                    "taskID",
                    "updatedAt",
                    "id"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "deleteSynonym",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Delete a synonym",
        "description": "Deletes a synonym by its ID.\nTo find the object IDs of your synonyms, use the [`search` operation](#tag/Synonyms/operation/searchSynonyms).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/parameters_ObjectID"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DeletedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/synonyms/batch": {
      "post": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "saveSynonyms",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Create or replace synonyms",
        "description": "If a synonym with the `objectID` doesn't exist, Algolia adds a new one.\nOtherwise, existing synonyms are replaced.\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          },
          {
            "$ref": "#/components/parameters/ReplaceExistingSynonyms"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/synonymHits"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/synonyms/clear": {
      "post": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "clearSynonyms",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Delete all synonyms",
        "description": "Deletes all synonyms from the index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/synonyms/search": {
      "post": {
        "tags": [
          "Synonyms"
        ],
        "operationId": "searchSynonyms",
        "x-mcp-tool": true,
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "settings"
        ],
        "summary": "Search for synonyms",
        "description": "Searches for synonyms in your index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "description": "Body of the `searchSynonyms` operation.",
          "content": {
            "application/json": {
              "schema": {
                "title": "searchSynonymsParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/query"
                  },
                  "type": {
                    "$ref": "#/components/schemas/SynonymType"
                  },
                  "page": {
                    "$ref": "#/components/schemas/page"
                  },
                  "hitsPerPage": {
                    "$ref": "#/components/schemas/hitsPerPage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchSynonymsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/keys": {
      "get": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "listApiKeys",
        "x-acl": [
          "admin"
        ],
        "summary": "List API keys",
        "description": "Lists all API keys associated with your Algolia application, including their permissions and restrictions.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listApiKeysResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "keys"
                  ],
                  "properties": {
                    "keys": {
                      "type": "array",
                      "description": "API keys.",
                      "items": {
                        "$ref": "#/components/schemas/getApiKeyResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "addApiKey",
        "x-acl": [
          "admin"
        ],
        "summary": "Create an API key",
        "description": "Creates a new API key with specific permissions and restrictions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apiKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/keys/{key}": {
      "get": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "getApiKey",
        "summary": "Retrieve API key permissions",
        "description": "Gets the permissions and restrictions of an API key.\n\nWhen authenticating with the admin API key, you can request information for any of your application's keys.\nWhen authenticating with other API keys, you can only retrieve information for that key,\nwith the description replaced by `<redacted>`.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyString"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "updateApiKey",
        "x-acl": [
          "admin"
        ],
        "summary": "Update an API key",
        "description": "Replaces the permissions of an existing API key.\n\nAny unspecified attribute resets that attribute to its default value.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyString"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apiKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "updateApiKeyResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "key",
                    "updatedAt"
                  ],
                  "properties": {
                    "key": {
                      "$ref": "#/components/schemas/keyString"
                    },
                    "updatedAt": {
                      "$ref": "#/components/schemas/updatedAt"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "deleteApiKey",
        "x-acl": [
          "admin"
        ],
        "summary": "Delete an API key",
        "description": "Deletes the API key.",
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyString"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "deleteApiKeyResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "deletedAt"
                  ],
                  "properties": {
                    "deletedAt": {
                      "$ref": "#/components/schemas/deletedAt"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/keys/{key}/restore": {
      "post": {
        "tags": [
          "Api Keys"
        ],
        "operationId": "restoreApiKey",
        "x-acl": [
          "admin"
        ],
        "summary": "Restore an API key",
        "description": "Restores a deleted API key.\n\nRestoring resets the `validity` attribute to `0`.\n\nAlgolia stores up to 1,000 API keys per application.\nIf you create more, the oldest API keys are deleted and can't be restored.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/KeyString"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/rules/{objectID}": {
      "get": {
        "tags": [
          "Rules"
        ],
        "operationId": "getRule",
        "x-acl": [
          "settings"
        ],
        "summary": "Retrieve a rule",
        "description": "Retrieves a rule by its ID.\nTo find the object ID of rules, use the [`search` operation](#tag/Rules/operation/searchRules).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectIDRule"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Rules"
        ],
        "operationId": "saveRule",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Create or replace a rule",
        "description": "If a rule with the specified object ID doesn't exist, it's created.\nOtherwise, the existing rule is replaced.\n\nTo create or update more than one rule, use the [`batch` operation](#tag/Rules/operation/saveRules).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectIDRule"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Rules"
        ],
        "operationId": "deleteRule",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Delete a rule",
        "description": "Deletes a rule by its ID.\nTo find the object ID for rules,\nuse the [`search` operation](#tag/Rules/operation/searchRules).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ObjectIDRule"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/rules/batch": {
      "post": {
        "tags": [
          "Rules"
        ],
        "operationId": "saveRules",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Create or update rules",
        "description": "Create or update multiple rules.\n\nIf a rule with the specified object ID doesn't exist, Algolia creates a new one.\nOtherwise, existing rules are replaced.\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "x-codegen-request-body-name": "rules",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          },
          {
            "$ref": "#/components/parameters/ClearExistingRules"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Rules to add or replace.",
                "items": {
                  "$ref": "#/components/schemas/rule"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/rules/clear": {
      "post": {
        "tags": [
          "Rules"
        ],
        "operationId": "clearRules",
        "x-acl": [
          "editSettings"
        ],
        "summary": "Delete all rules",
        "description": "Deletes all rules from the index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "$ref": "#/components/parameters/ForwardToReplicas"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/rules/search": {
      "post": {
        "tags": [
          "Rules"
        ],
        "operationId": "searchRules",
        "x-mcp-tool": true,
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "settings"
        ],
        "summary": "Search for rules",
        "description": "Searches for rules in your index.",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "searchRulesParams",
                "type": "object",
                "description": "Rules search parameters.",
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/parameters_query"
                  },
                  "anchoring": {
                    "$ref": "#/components/schemas/anchoring"
                  },
                  "context": {
                    "type": "string",
                    "description": "Only return rules that match the context (exact match).",
                    "example": "mobile"
                  },
                  "page": {
                    "$ref": "#/components/schemas/parameters_page"
                  },
                  "hitsPerPage": {
                    "$ref": "#/components/schemas/parameters_hitsPerPage"
                  },
                  "enabled": {
                    "oneOf": [
                      {
                        "type": "boolean",
                        "description": "If `true`, return only enabled rules.\nIf `false`, return only inactive rules.\nBy default, _all_ rules are returned.\n"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "default": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchRulesResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "hits",
                    "nbHits",
                    "page",
                    "nbPages"
                  ],
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "Rules that matched the search criteria.",
                      "items": {
                        "$ref": "#/components/schemas/rule"
                      }
                    },
                    "nbHits": {
                      "type": "integer",
                      "description": "Number of rules that matched the search criteria."
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page."
                    },
                    "nbPages": {
                      "type": "integer",
                      "description": "Number of pages."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/dictionaries/{dictionaryName}/batch": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "operationId": "batchDictionaryEntries",
        "x-acl": [
          "editSettings"
        ],
        "description": "Adds or deletes multiple entries from your plurals, segmentation, or stop word dictionaries.",
        "summary": "Add or delete dictionary entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/DictionaryName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "batchDictionaryEntriesParams",
                "description": "Request body for updating dictionary entries.",
                "type": "object",
                "required": [
                  "requests"
                ],
                "additionalProperties": false,
                "properties": {
                  "clearExistingDictionaryEntries": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to replace all custom entries in the dictionary with the ones sent with this request."
                  },
                  "requests": {
                    "type": "array",
                    "description": "List of additions and deletions to your dictionaries.",
                    "items": {
                      "title": "batchDictionaryEntriesRequest",
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "action",
                        "body"
                      ],
                      "properties": {
                        "action": {
                          "$ref": "#/components/schemas/dictionaryAction"
                        },
                        "body": {
                          "$ref": "#/components/schemas/dictionaryEntry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/dictionaries/{dictionaryName}/search": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "operationId": "searchDictionaryEntries",
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "settings"
        ],
        "description": "Searches for standard and custom dictionary entries.",
        "summary": "Search dictionary entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/DictionaryName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "searchDictionaryEntriesParams",
                "description": "Search parameter.",
                "type": "object",
                "required": [
                  "query"
                ],
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "$ref": "#/components/schemas/query"
                  },
                  "page": {
                    "$ref": "#/components/schemas/page"
                  },
                  "hitsPerPage": {
                    "$ref": "#/components/schemas/hitsPerPage"
                  },
                  "language": {
                    "$ref": "#/components/schemas/supportedLanguage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchDictionaryEntriesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/dictionaries/*/settings": {
      "get": {
        "tags": [
          "Dictionaries"
        ],
        "operationId": "getDictionarySettings",
        "x-acl": [
          "settings"
        ],
        "summary": "Retrieve dictionary settings",
        "description": "Retrieves the languages for which standard dictionary entries are turned off.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getDictionarySettingsResponse",
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "disableStandardEntries"
                  ],
                  "properties": {
                    "disableStandardEntries": {
                      "$ref": "#/components/schemas/standardEntries"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Dictionaries"
        ],
        "operationId": "setDictionarySettings",
        "x-acl": [
          "editSettings"
        ],
        "description": "Turns standard stop word dictionary entries on or off for a given language.",
        "summary": "Update dictionary settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "dictionarySettingsParams",
                "type": "object",
                "additionalProperties": false,
                "description": "Turn on or off the built-in Algolia stop words for a specific language.\n",
                "required": [
                  "disableStandardEntries"
                ],
                "properties": {
                  "disableStandardEntries": {
                    "$ref": "#/components/schemas/standardEntries"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/dictionaries/*/languages": {
      "get": {
        "tags": [
          "Dictionaries"
        ],
        "operationId": "getDictionaryLanguages",
        "x-acl": [
          "settings"
        ],
        "description": "Lists supported languages with their supported dictionary types and number of custom entries.\n",
        "summary": "List available languages",
        "externalDocs": {
          "url": "https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/",
          "description": "Supported languages."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getDictionaryLanguagesResponse",
                  "type": "object",
                  "additionalProperties": {
                    "x-additionalPropertiesName": "language",
                    "$ref": "#/components/schemas/languages"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "operationId": "assignUserId",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Assign or move a user ID",
        "description": "Assigns or moves a user ID to a cluster.\n\nThe time it takes to move a user is proportional to the amount of data linked to the user ID.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIDInHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "assignUserIdParams",
                "type": "object",
                "description": "Assign userID parameters.",
                "additionalProperties": false,
                "properties": {
                  "cluster": {
                    "$ref": "#/components/schemas/clusterName"
                  }
                },
                "required": [
                  "cluster"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "listUserIds",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "List user IDs",
        "description": "Lists the userIDs assigned to a multi-cluster application.\n\nSince it can take a few seconds to get the data from the different clusters,\nthe response isn't real-time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/HitsPerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listUserIdsResponse",
                  "type": "object",
                  "description": "User ID data.",
                  "properties": {
                    "userIDs": {
                      "type": "array",
                      "description": "User IDs.",
                      "items": {
                        "$ref": "#/components/schemas/userId"
                      }
                    }
                  },
                  "required": [
                    "userIDs"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping/batch": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "operationId": "batchAssignUserIds",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Assign multiple userIDs",
        "description": "Assigns multiple user IDs to a cluster.\n\n**You can't move users with this operation**.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIDInHeader"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "batchAssignUserIdsParams",
                "type": "object",
                "description": "Assign userID parameters.",
                "additionalProperties": false,
                "properties": {
                  "cluster": {
                    "$ref": "#/components/schemas/clusterName"
                  },
                  "users": {
                    "type": "array",
                    "description": "User IDs to assign.",
                    "example": [
                      "einstein",
                      "bohr",
                      "feynman"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "cluster",
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping/top": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "getTopUserIds",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Get top user IDs",
        "description": "Get the IDs of the 10 users with the highest number of records per cluster.\n\nSince it can take a few seconds to get the data from the different clusters,\nthe response isn't real-time.\n",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getTopUserIdsResponse",
                  "type": "object",
                  "description": "User IDs and clusters.",
                  "properties": {
                    "topUsers": {
                      "type": "array",
                      "description": "Key-value pairs with cluster names as keys and lists of users with the highest number of records per cluster as values.",
                      "items": {
                        "type": "object",
                        "additionalProperties": {
                          "x-additionalPropertiesName": "cluster",
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/userId"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "topUsers"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping/{userID}": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "getUserId",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Retrieve user ID",
        "description": "Returns the user ID data stored in the mapping.\n\nSince it can take a few seconds to get the data from the different clusters,\nthe response isn't real-time.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIDInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Clusters"
        ],
        "operationId": "removeUserId",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Delete user ID",
        "description": "Deletes a user ID and its associated data from the clusters.",
        "parameters": [
          {
            "$ref": "#/components/parameters/UserIDInPath"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "removeUserIdResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "deletedAt": {
                      "$ref": "#/components/schemas/deletedAt"
                    }
                  },
                  "required": [
                    "deletedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "listClusters",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "List clusters",
        "description": "Lists the available clusters in a multi-cluster setup.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listClustersResponse",
                  "type": "object",
                  "description": "Clusters.",
                  "properties": {
                    "topUsers": {
                      "type": "array",
                      "description": "Key-value pairs with cluster names as keys and lists of users with the highest number of records per cluster as values.",
                      "items": {
                        "$ref": "#/components/schemas/clusterName"
                      }
                    }
                  },
                  "required": [
                    "topUsers"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping/search": {
      "post": {
        "tags": [
          "Clusters"
        ],
        "operationId": "searchUserIds",
        "deprecated": true,
        "x-use-read-transporter": true,
        "x-cacheable": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Search for user IDs",
        "description": "Since it can take a few seconds to get the data from the different clusters,\nthe response isn't real-time.\n\nTo ensure rapid updates, the user IDs index isn't built at the same time as the mapping. Instead, it's built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "searchUserIdsParams",
                "type": "object",
                "description": "OK",
                "additionalProperties": false,
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Query to search. The search is a prefix search with [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) enabled. An empty query will retrieve all users."
                  },
                  "clusterName": {
                    "$ref": "#/components/schemas/clusterName"
                  },
                  "page": {
                    "$ref": "#/components/schemas/page"
                  },
                  "hitsPerPage": {
                    "$ref": "#/components/schemas/hitsPerPage"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchUserIdsResponse",
                  "type": "object",
                  "description": "userIDs data.",
                  "properties": {
                    "hits": {
                      "type": "array",
                      "description": "User objects that match the query.",
                      "items": {
                        "title": "userHit",
                        "type": "object",
                        "properties": {
                          "userID": {
                            "$ref": "#/components/schemas/userID"
                          },
                          "clusterName": {
                            "$ref": "#/components/schemas/clusterName"
                          },
                          "nbRecords": {
                            "$ref": "#/components/schemas/nbRecords"
                          },
                          "dataSize": {
                            "$ref": "#/components/schemas/dataSize"
                          },
                          "objectID": {
                            "type": "string",
                            "description": "userID of the requested user. Same as userID."
                          },
                          "_highlightResult": {
                            "title": "userHighlightResult",
                            "type": "object",
                            "properties": {
                              "userID": {
                                "$ref": "#/components/schemas/highlightResult"
                              },
                              "clusterName": {
                                "$ref": "#/components/schemas/highlightResult"
                              }
                            },
                            "required": [
                              "userID",
                              "clusterName"
                            ]
                          }
                        },
                        "required": [
                          "userID",
                          "clusterName",
                          "nbRecords",
                          "dataSize",
                          "objectID",
                          "_highlightResult"
                        ]
                      }
                    },
                    "nbHits": {
                      "$ref": "#/components/schemas/nbHits"
                    },
                    "page": {
                      "$ref": "#/components/schemas/page"
                    },
                    "hitsPerPage": {
                      "$ref": "#/components/schemas/parameters_hitsPerPage"
                    },
                    "updatedAt": {
                      "$ref": "#/components/schemas/updatedAt"
                    }
                  },
                  "required": [
                    "hits",
                    "nbHits",
                    "page",
                    "hitsPerPage",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/clusters/mapping/pending": {
      "get": {
        "tags": [
          "Clusters"
        ],
        "operationId": "hasPendingMappings",
        "deprecated": true,
        "x-acl": [
          "admin"
        ],
        "summary": "Get migration and user mapping status",
        "description": "To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process.\n",
        "parameters": [
          {
            "in": "query",
            "name": "getClusters",
            "description": "Whether to include the cluster's pending mapping state in the response.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "hasPendingMappingsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "pending": {
                      "description": "Whether there are clusters undergoing migration, creation, or deletion.",
                      "type": "boolean"
                    },
                    "clusters": {
                      "description": "Cluster pending mapping state: migrating, creating, deleting.\n",
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "pending"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/security/sources": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "operationId": "getSources",
        "x-acl": [
          "admin"
        ],
        "summary": "List allowed sources",
        "description": "Retrieves all allowed IP addresses with access to your application.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sources"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Vaults"
        ],
        "operationId": "replaceSources",
        "x-acl": [
          "admin"
        ],
        "summary": "Replace allowed sources",
        "description": "Replaces the list of allowed sources.",
        "requestBody": {
          "required": true,
          "description": "Allowed sources.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sources"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "replaceSourceResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "updatedAt"
                  ],
                  "properties": {
                    "updatedAt": {
                      "$ref": "#/components/schemas/updatedAt"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/security/sources/append": {
      "post": {
        "tags": [
          "Vaults"
        ],
        "operationId": "appendSource",
        "x-acl": [
          "admin"
        ],
        "description": "Adds a source to the list of allowed sources.",
        "summary": "Add a source",
        "requestBody": {
          "required": true,
          "description": "Source to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/source"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/security/sources/{source}": {
      "delete": {
        "tags": [
          "Vaults"
        ],
        "operationId": "deleteSource",
        "x-acl": [
          "admin"
        ],
        "description": "Deletes a source from the list of allowed sources.",
        "summary": "Delete a source",
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "required": true,
            "description": "IP address range of the source.",
            "schema": {
              "type": "string",
              "example": "10.0.0.1/32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "deleteSourceResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "deletedAt"
                  ],
                  "properties": {
                    "deletedAt": {
                      "$ref": "#/components/schemas/deletedAt"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/logs": {
      "get": {
        "tags": [
          "Advanced"
        ],
        "operationId": "getLogs",
        "x-acl": [
          "logs"
        ],
        "description": "The request must be authenticated by an API key with the [`logs` ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).\n\n- Logs are held for the last seven days.\n- Up to 1,000 API requests per server are logged.\n- This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn't appear in the logs itself.\n",
        "summary": "Retrieve log entries",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "First log entry to retrieve. The most recent entries are listed first.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "length",
            "in": "query",
            "description": "Maximum number of entries to retrieve.",
            "schema": {
              "type": "integer",
              "default": 10,
              "maximum": 1000
            }
          },
          {
            "name": "indexName",
            "in": "query",
            "description": "Index for which to retrieve log entries.\nBy default, log entries are retrieved for all indices.\n",
            "example": "products",
            "schema": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of log entries to retrieve.\nBy default, all log entries are retrieved.\n",
            "schema": {
              "$ref": "#/components/schemas/logType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "getLogsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "logs"
                  ],
                  "properties": {
                    "logs": {
                      "type": "array",
                      "items": {
                        "title": "log",
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "Date and time of the API request, in RFC 3339 format.",
                            "example": "2023-03-08T12:34:56Z"
                          },
                          "method": {
                            "type": "string",
                            "description": "HTTP method of the request.",
                            "example": "GET"
                          },
                          "answer_code": {
                            "type": "string",
                            "description": "HTTP status code of the response.",
                            "example": "200"
                          },
                          "query_body": {
                            "type": "string",
                            "maxLength": 1000,
                            "description": "Request body.",
                            "example": "{\\n \\\"requests\\\": [\\n  {\\n   \\\"indexName\\\": \\\"best_buy\\\",\\n   \\\"params\\\": \\\"query=&hitsPerPage=10&page=0&attributesToRetrieve=*&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&getRankingInfo=1&facets=%5B%22brand%22%2C%22categories%22%2C%22free_shipping%22%2C%22type%22%5D&tagFilters=\\\"\\n  }\\n ]\\n}\\n"
                          },
                          "answer": {
                            "type": "string",
                            "maxLength": 1000,
                            "description": "Response body.",
                            "example": "'n{\\n \"results\": [\\n  {\\n   \"hits\": [\\n    {\\n     \"name\": \"Amazon - Fire TV Stick\",\\n     \"description\": \"Amazon Fire TV Stick connects to your TV's HDMI port. Just grab and go to enjoy Netflix, Prime Instant Video, Hulu Plus, YouTube.com, music, and much more.\",\\n     \"brand\": \"Amazon\",\\n     \"categories\": [\\n      \"TV & Home Theater\",\\n      \"Streaming Media Players\"\\n     ],\\n     \"hierarchicalCategories\": {\\n      \"lvl0\": \"TV & Home Theater\",\\n      \"lvl1\": \"TV & Home Theater > Streaming Media Players\"\\n     },\\n     \"type\": \"Streaming media player\",\\n     \"price\": 39.99,\\n     \"price_range\": \"1 }\\n   ]\\n  }\\n ]\\n}'\n"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri-reference",
                            "description": "URL of the API endpoint.",
                            "example": "/1/indexes"
                          },
                          "ip": {
                            "type": "string",
                            "format": "ipv4",
                            "description": "IP address of the client that performed the request.",
                            "example": "93.184.216.34"
                          },
                          "query_headers": {
                            "type": "string",
                            "description": "Request headers (API keys are obfuscated).",
                            "example": "User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8x zlib/1.2.5\\nHost: example.com\\nAccept: */*\\nContent-Type: application/json; charset=utf-8\\nX-Algolia-API-Key: 20f***************************\\nX-Algolia-Application-Id: MyApplicationID\\n"
                          },
                          "sha1": {
                            "type": "string",
                            "description": "SHA1 signature of the log entry.",
                            "example": "26c53bd7e38ca71f4741b71994cd94a600b7ac68"
                          },
                          "nb_api_calls": {
                            "type": "string",
                            "description": "Number of API requests.",
                            "example": "1"
                          },
                          "processing_time_ms": {
                            "type": "string",
                            "description": "Processing time for the query in milliseconds.\nThis doesn't include latency due to the network.\n",
                            "example": "2"
                          },
                          "index": {
                            "type": "string",
                            "description": "Index targeted by the query.",
                            "example": "products"
                          },
                          "query_params": {
                            "type": "string",
                            "description": "Query parameters sent with the request.",
                            "example": "query=georgia&attributesToRetrieve=name,city,country"
                          },
                          "query_nb_hits": {
                            "type": "string",
                            "description": "Number of search results (hits) returned for the query.",
                            "example": "1"
                          },
                          "inner_queries": {
                            "type": "array",
                            "description": "Queries performed for the given request.",
                            "items": {
                              "title": "logQuery",
                              "type": "object",
                              "properties": {
                                "index_name": {
                                  "type": "string",
                                  "description": "Index targeted by the query.",
                                  "example": "products"
                                },
                                "user_token": {
                                  "type": "string",
                                  "description": "A user identifier.",
                                  "example": "93.189.166.128"
                                },
                                "query_id": {
                                  "type": "string",
                                  "description": "Unique query identifier.",
                                  "example": "96f59a3145dd9bd8963dc223950507c8"
                                }
                              }
                            }
                          }
                        },
                        "required": [
                          "timestamp",
                          "method",
                          "answer_code",
                          "query_body",
                          "answer",
                          "url",
                          "ip",
                          "query_headers",
                          "sha1",
                          "processing_time_ms"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/task/{taskID}": {
      "get": {
        "tags": [
          "Advanced"
        ],
        "operationId": "getAppTask",
        "x-acl": [
          "editSettings"
        ],
        "description": "Checks the status of a given application task.\n",
        "summary": "Check application task status",
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "description": "Unique task identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1506303845001
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          }
        }
      }
    },
    "/1/indexes/{indexName}/task/{taskID}": {
      "get": {
        "tags": [
          "Indices"
        ],
        "operationId": "getTask",
        "x-acl": [
          "addObject"
        ],
        "description": "Checks the status of a given task.\n\nIndexing tasks are asynchronous.\nWhen you add, update, or delete records or indices,\na task is created on a queue and completed depending on the load on the server.\n\nThe indexing tasks' responses include a task ID that you can use to check the status.\n",
        "summary": "Check task status",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "Unique task identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1506303845001
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes/{indexName}/operation": {
      "post": {
        "tags": [
          "Indices"
        ],
        "operationId": "operationIndex",
        "x-acl": [
          "addObject"
        ],
        "summary": "Copy or move an index",
        "description": "Copies or moves (renames) an index within the same Algolia application.\n\n- Existing destination indices are overwritten, except for their analytics data.\n- If the destination index doesn't exist yet, it'll be created.\n- This operation is resource-intensive.\n\n**Copy**\n\n- Copying a source index that doesn't exist creates a new index with 0 records and default settings.\n- The API keys of the source index are merged with the existing keys in the destination index.\n- You can't copy the `enableReRanking`, `mode`, and `replicas` settings.\n- You can't copy to a destination index that already has replicas.\n- Be aware of the [size limits](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits).\n- Related guide: [Copy indices](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/how-to/copy-indices/)\n\n**Move**\n\n- Moving a source index that doesn't exist is ignored without returning an error.\n- When moving an index, the analytics data keeps its original name, and a new set of analytics data is started for the new name.\n  To access the original analytics in the dashboard, create an index with the original name.\n- If the destination index has replicas, moving will overwrite the existing index and copy the data to the replica indices.\n- Related guide: [Move indices](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/how-to/move-indices/).\n\nThis operation is subject to [indexing rate limits](https://support.algolia.com/hc/en-us/articles/4406975251089-Is-there-a-rate-limit-for-indexing-on-Algolia).\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IndexName"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "operationIndexParams",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "operation": {
                    "$ref": "#/components/schemas/operationType"
                  },
                  "destination": {
                    "$ref": "#/components/schemas/indexName"
                  },
                  "scope": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/scopeType"
                    },
                    "description": "**Only for copying.**\n\nIf you specify a scope, only the selected scopes are copied. Records and the other scopes are left unchanged.\nIf you omit the `scope` parameter, everything is copied: records, settings, synonyms, and rules.\n"
                  }
                },
                "required": [
                  "operation",
                  "destination"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdatedAt"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/1/indexes": {
      "get": {
        "tags": [
          "Indices"
        ],
        "operationId": "listIndices",
        "x-mcp-tool": true,
        "x-acl": [
          "listIndexes"
        ],
        "summary": "List indices",
        "description": "Lists all indices in the current Algolia application.\n\nThe request follows any index restrictions of the API key you use to make the request.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/HitsPerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/listIndicesResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "402": {
            "$ref": "#/components/responses/FeatureNotEnabled"
          },
          "403": {
            "$ref": "#/components/responses/MethodNotAllowed"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/waitForApiKey": {
      "get": {
        "x-helper": true,
        "tags": [
          "Api Keys"
        ],
        "operationId": "waitForApiKey",
        "summary": "Wait for an API key operation",
        "description": "Waits for an API key to be added, updated, or deleted.",
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "description": "API key to wait for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "operation",
            "description": "Whether the API key was created, updated, or deleted.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/apiKeyOperation"
            }
          },
          {
            "in": "query",
            "name": "apiKey",
            "description": "Used to compare fields of the `getApiKey` response on an `update` operation, to check if the `key` has been updated.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/apiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/waitForTask": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "waitForTask",
        "summary": "Wait for operation to complete",
        "description": "Wait for a task to complete to ensure synchronized index updates.\n\nAll Algolia write operations are asynchronous. When you make a request for a write operation, for example, to add or update records in your index, Algolia creates a task on a queue and returns a taskID. The task itself runs separately, depending on the server load.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The name of the index on which the operation was performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "taskID",
            "description": "The taskID returned by the operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/waitForAppTask": {
      "get": {
        "x-helper": true,
        "operationId": "waitForAppTask",
        "summary": "Wait for application-level operation to complete",
        "description": "Wait for a application-level task to complete.",
        "parameters": [
          {
            "in": "query",
            "name": "taskID",
            "description": "The taskID returned by the operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/browseObjects": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "browseObjects",
        "summary": "Get all records from an index",
        "description": "You can use the browse method to get records from an index—for example, to export your index as a backup. To export all records, use an empty query.\n\nUse browse instead of search when exporting records from your index, when ranking, or analytics, isn't important. The Analytics API doesn't collect data when using browse.\n\nDon't use this method for building a search UI. Use search instead.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The name of the index on which the operation was performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "browseParams",
            "description": "Browse parameters.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/browseParamsObject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/generateSecuredApiKey": {
      "get": {
        "x-helper": true,
        "x-asynchronous-helper": false,
        "tags": [
          "Api Keys"
        ],
        "operationId": "generateSecuredApiKey",
        "summary": "Create secured API keys",
        "description": "Generates a secured API key without any requests to Algolia's servers.\n\nSecured API keys are API keys that you generate on your server without any API request to Algolia.\nSecured API keys help in environments where you can't easily update the client-side code, such as mobile apps,\nor when you need to restrict access to a part of your index for every user.\n\nWhen your users start searching, instead of using the Search API key, they request a short-lived secured API key from your server.\nOn your server, you use this method to create a secured API key, with any restrictions you'd like, such as filters, index access restrictions,\nor expiration times. The API key gets longer the more restrictions you add.\nYour users then use the secured API key to search with Algolia.\n\nYou can't create secured API keys from other secured API keys or from your Admin API key.\nThe generated API key can have the same restrictions as the parent API key, or be more restrictive.\n",
        "parameters": [
          {
            "in": "query",
            "name": "parentApiKey",
            "description": "API key from which the secured API key will inherit its restrictions.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "restrictions",
            "description": "Restrictions to add to the API key.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/securedApiKeyRestrictions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/accountCopyIndex": {
      "get": {
        "x-helper": true,
        "x-available-languages": [
          "javascript"
        ],
        "tags": [
          "Account"
        ],
        "x-acl": [
          "browse",
          "editSettings",
          "addObject",
          "settings",
          "search"
        ],
        "operationId": "accountCopyIndex",
        "summary": "Copies the given `sourceIndexName` records, rules and synonyms to an other Algolia application for the given `destinationIndexName`",
        "description": "Copies the given `sourceIndexName` records, rules and synonyms to an other Algolia application for the given `destinationIndexName`.\n",
        "parameters": [
          {
            "in": "query",
            "name": "sourceIndexName",
            "description": "The name of the index to copy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "destinationAppID",
            "description": "The application ID to write the index to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "destinationApiKey",
            "description": "The API Key of the `destinationAppID` to write the index to, must have write ACLs.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "destinationIndexName",
            "description": "The name of the index to write the copied index to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/components/responses/IndexInSameApp"
          },
          "403": {
            "$ref": "#/components/responses/IndexAlreadyExists"
          },
          "404": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/replaceAllObjects": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "replaceAllObjects",
        "summary": "Replace all records in an index",
        "description": "Replace all records from your index with a new set of records.\n\nThis method lets you replace all records in your index without downtime. It performs these operations:\n  1. Copy settings, synonyms, and rules from your original index to a temporary index.\n  2. Add your new records to the temporary index.\n  3. Replace your original index with the temporary index.\n\nUse the safe parameter to ensure that these (asynchronous) operations are performed in sequence.\nIf there's an error duing one of these steps, the temporary index won't be deleted.\nThis operation is rate-limited.\nThis method creates a temporary index: your record count is temporarily doubled. Algolia doesn't count the three days with the highest number of records towards your monthly usage.\nIf you're on a legacy plan (before July 2020), this method counts two operations towards your usage (in addition to the number of records): copySettings and moveIndex.\nThe API key you use for this operation must have access to the index YourIndex and the temporary index YourIndex_tmp.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` to replace `objects` in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "List of objects to replace the current objects with.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "scopes",
            "description": "List of scopes to kepp in the index. Defaults to `settings`, `synonyms`, and `rules`.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/scopeType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replaceAllObjectsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/chunkedBatch": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "chunkedBatch",
        "summary": "Replace all records in an index",
        "description": "Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` to replace `objects` in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "List of objects to replace the current objects with.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "action",
            "description": "The `batch` `action` to perform on the given array of `objects`, defaults to `addObject`.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/action"
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/batchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/saveObjects": {
      "get": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "saveObjects",
        "summary": "Saves the given array of objects in the given index",
        "description": "Helper: Saves the given array of objects in the given index. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` to save `objects` into.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "The objects to save in the index.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "requestOptions",
            "description": "The request options to pass to the `batch` method.",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/batchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/saveObjectsWithTransformation": {
      "get": {
        "x-helper": true,
        "x-available-languages": [
          "javascript",
          "go",
          "python"
        ],
        "tags": [
          "Records"
        ],
        "operationId": "saveObjectsWithTransformation",
        "summary": "Save objects to an Algolia index by leveraging the Transformation pipeline setup using the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/)",
        "description": "Helper: Similar to the `saveObjects` method but requires a Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/) to be created first, in order to transform records before indexing them to Algolia. The `region` must have been passed to the client instantiation method.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` to save `objects` into.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "The objects to save in the index.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "requestOptions",
            "description": "The request options to pass to the `batch` method.",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/deleteObjects": {
      "post": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "deleteObjects",
        "summary": "Deletes every records for the given objectIDs",
        "description": "Helper: Deletes every records for the given objectIDs. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objectIDs in it.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` to delete `objectIDs` from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objectIDs",
            "description": "The objectIDs to delete.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "requestOptions",
            "description": "The request options to pass to the `batch` method.",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/batchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/partialUpdateObjects": {
      "post": {
        "x-helper": true,
        "tags": [
          "Records"
        ],
        "operationId": "partialUpdateObjects",
        "summary": "Replaces object content of all the given objects according to their respective `objectID` field",
        "description": "Helper: Replaces object content of all the given objects according to their respective `objectID` field. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` where to update `objects`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "The objects to update.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "createIfNotExists",
            "description": "To be provided if non-existing objects are passed, otherwise, the call will fail.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "requestOptions",
            "description": "The request options to pass to the `batch` method.",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/batchResponse"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/partialUpdateObjectsWithTransformation": {
      "post": {
        "x-helper": true,
        "x-available-languages": [
          "javascript",
          "go",
          "python"
        ],
        "tags": [
          "Records"
        ],
        "operationId": "partialUpdateObjectsWithTransformation",
        "summary": "Save objects to an Algolia index by leveraging the Transformation pipeline setup using the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/)",
        "description": "Helper: Similar to the `partialUpdateObjects` method but requires a Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/) to be created first, in order to transform records before indexing them to Algolia. The `region` must have been passed to the client instantiation method.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The `indexName` where to update `objects`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "objects",
            "description": "The objects to update.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          {
            "in": "query",
            "name": "createIfNotExists",
            "description": "To be provided if non-existing objects are passed, otherwise, the call will fail.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "waitForTasks",
            "description": "Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "batchSize",
            "description": "The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "requestOptions",
            "description": "The request options to pass to the `batch` method.",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WatchResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/IndexNotFound"
          }
        }
      }
    },
    "/indexExists": {
      "get": {
        "x-helper": true,
        "tags": [
          "Index"
        ],
        "operationId": "indexExists",
        "summary": "Check if an index exists or not",
        "description": "You can initialize an index with any name. The index is created on Algolia's servers when you add objects or set settings. To prevent accidentally creating new indices, or changing existing indices, you can use the exists method. The exists method returns a boolean that indicates whether an initialized index has been created.\n",
        "parameters": [
          {
            "in": "query",
            "name": "indexName",
            "description": "The name of the index to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Index exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/setClientApiKey": {
      "get": {
        "x-helper": true,
        "x-asynchronous-helper": false,
        "tags": [
          "Api Key"
        ],
        "operationId": "setClientApiKey",
        "summary": "Switch the API key used to authenticate requests",
        "description": "Switch the API key used to authenticate requests.\n",
        "parameters": [
          {
            "in": "query",
            "name": "apiKey",
            "description": "API key to be used from now on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-application-id",
        "description": "Your Algolia application ID."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-algolia-api-key",
        "description": "Your Algolia API key with the necessary permissions to make the request.\nPermissions are controlled through access control lists (ACL) and access restrictions.\nThe required ACL to make a request is listed in each endpoint's reference.\n"
      }
    },
    "schemas": {
      "attributeToUpdate": {
        "x-keep-model": true,
        "deprecated": true,
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/components/schemas/builtInOperation"
          }
        ]
      },
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "x-keep-model": true,
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "paramsAsString": {
        "description": "Search parameters as a URL-encoded query string.",
        "example": "hitsPerPage=2&getRankingInfo=1",
        "type": "string",
        "default": ""
      },
      "searchParamsString": {
        "type": "object",
        "title": "Search parameters as query string.",
        "description": "Search parameters as query string.",
        "additionalProperties": false,
        "x-discriminator-fields": [
          "params"
        ],
        "properties": {
          "params": {
            "$ref": "#/components/schemas/paramsAsString"
          }
        }
      },
      "query": {
        "type": "string",
        "description": "Search query.",
        "default": "",
        "x-categories": [
          "Search"
        ]
      },
      "searchParamsQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/query"
          }
        }
      },
      "filters": {
        "type": "string",
        "description": "Filter expression to only include items that match the filter criteria in the response.\n\nYou can use these filter expressions:\n\n- **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.\n- **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).\n- **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.\n- **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).\n- **Boolean filters.** `<facet>: true | false`.\n\nYou can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:\n\n- You can only combine filters of the same type with `OR`.\n  **Not supported:** `facet:value OR num > 3`.\n- You can't use `NOT` with combinations of filters.\n  **Not supported:** `NOT(facet:value OR facet:value)`\n- You can't combine conjunctions (`AND`) with `OR`.\n  **Not supported:** `facet:value OR (facet:value AND facet:value)`\n\nUse quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.\nIf a facet attribute is an array, the filter matches if it matches at least one element of the array.\n\nFor more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).\n",
        "example": "(category:Book OR category:Ebook) AND _tags:published",
        "x-categories": [
          "Filtering"
        ]
      },
      "facetFilters": {
        "description": "Filter the search by facet values, so that only records with the same facet values are retrieved.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\n- `[filter1, filter2]` is interpreted as `filter1 AND filter2`.\n- `[[filter1, filter2], filter3]` is interpreted as `filter1 OR filter2 AND filter3`.\n- `facet:-value` is interpreted as `NOT facet:value`.\n\nWhile it's best to avoid attributes that start with a `-`, you can still filter them by escaping with a backslash:\n`facet:\\-value`.\n",
        "example": [
          [
            "category:Book",
            "category:-Movie"
          ],
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/facetFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "optionalFilters": {
        "description": "Filters to promote or demote records in the search results.\n\nOptional filters work like facet filters, but they don't exclude records from the search results.\nRecords that match the optional filter rank before records that don't match.\nIf you're using a negative filter `facet:-value`, matching records rank after records that don't match.\n\n- Optional filters don't work on virtual replicas.\n- Optional filters are applied _after_ sort-by attributes.\n- Optional filters are applied _before_ custom ranking attributes (in the default [ranking](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/)).\n- Optional filters don't work with numeric attributes.\n",
        "example": [
          "category:Book",
          "author:John Doe"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/optionalFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "numericFilters": {
        "description": "Filter by numeric facets.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\nYou can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`.\nComparisons are precise up to 3 decimals.\nYou can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and upper boundaries.\nThe same combination rules apply as for `facetFilters`.\n",
        "example": [
          [
            "inStock = 1",
            "deliveryDate < 1441755506"
          ],
          "price < 1000"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/numericFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "tagFilters": {
        "description": "Filter the search by values of the special `_tags` attribute.\n\n**Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**\n\nDifferent from regular facets, `_tags` can only be used for filtering (including or excluding records).\nYou won't get a facet count.\nThe same combination and escaping rules apply as for `facetFilters`.\n",
        "example": [
          [
            "Book",
            "Movie"
          ],
          "SciFi"
        ],
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagFilters"
            }
          },
          {
            "type": "string"
          }
        ],
        "x-categories": [
          "Filtering"
        ]
      },
      "page": {
        "type": "integer",
        "description": "Page of search results to retrieve.",
        "default": 0,
        "minimum": 0,
        "x-categories": [
          "Pagination"
        ]
      },
      "aroundLatLng": {
        "type": "string",
        "description": "Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.\n\nOnly records included within a circle around this central location are included in the results.\nThe radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings.\nThis parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.\n",
        "example": "40.71,-74.01",
        "default": "",
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundLatLngViaIP": {
        "type": "boolean",
        "description": "Whether to obtain the coordinates from the request's IP address.",
        "default": false,
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundRadiusAll": {
        "title": "all",
        "type": "string",
        "description": "Return all records with a valid `_geoloc` attribute. Don't filter by distance.",
        "enum": [
          "all"
        ]
      },
      "aroundRadius": {
        "description": "Maximum radius for a search around a central location.\n\nThis parameter works in combination with the `aroundLatLng` and `aroundLatLngViaIP` parameters.\nBy default, the search radius is determined automatically from the density of hits around the central location.\nThe search radius is small if there are many hits close to the central coordinates.\n",
        "oneOf": [
          {
            "type": "integer",
            "minimum": 1,
            "description": "Maximum search radius around a central location in meters."
          },
          {
            "$ref": "#/components/schemas/aroundRadiusAll"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "aroundPrecisionFromValue": {
        "title": "range objects",
        "type": "array",
        "items": {
          "title": "range",
          "type": "object",
          "description": "Range object with lower and upper values in meters to define custom ranges.",
          "properties": {
            "from": {
              "type": "integer",
              "description": "Lower boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.",
              "example": 20
            },
            "value": {
              "type": "integer",
              "description": "Upper boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal."
            }
          }
        }
      },
      "aroundPrecision": {
        "description": "Precision of a coordinate-based search in meters to group results with similar distances.\n\nThe Geo ranking criterion considers all matches within the same range of distances to be equal.\n",
        "oneOf": [
          {
            "type": "integer",
            "default": 10,
            "description": "Distance in meters to group results by similar distances.\n\nFor example, if you set `aroundPrecision` to 100, records wihin 100 meters to the central coordinate are considered to have the same distance,\nas are records between 100 and 199 meters.\n"
          },
          {
            "$ref": "#/components/schemas/aroundPrecisionFromValue"
          }
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBoxArray": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates for a rectangular area in which to search.\n\nEach bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair:\n`[p1 lat, p1 long, p2 lat, p2 long]`.\nProvide multiple bounding boxes as nested arrays.\nFor more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "insideBoundingBox": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/components/schemas/insideBoundingBoxArray"
          }
        ]
      },
      "insidePolygon": {
        "type": "array",
        "items": {
          "type": "array",
          "minItems": 6,
          "maxItems": 20000,
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "description": "Coordinates of a polygon in which to search.\n\nPolygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude.\nProvide multiple polygons as nested arrays.\nFor more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).\nThis parameter is ignored if you also specify `insideBoundingBox`.\n",
        "example": [
          [
            47.3165,
            4.9665,
            47.3424,
            5.0201,
            47.32,
            4.9
          ],
          [
            40.9234,
            2.1185,
            38.643,
            1.9916,
            39.2587,
            2.0104
          ]
        ],
        "x-categories": [
          "Geo-Search"
        ]
      },
      "supportedLanguage": {
        "type": "string",
        "description": "ISO code for a supported language.",
        "enum": [
          "af",
          "ar",
          "az",
          "bg",
          "bn",
          "ca",
          "cs",
          "cy",
          "da",
          "de",
          "el",
          "en",
          "eo",
          "es",
          "et",
          "eu",
          "fa",
          "fi",
          "fo",
          "fr",
          "ga",
          "gl",
          "he",
          "hi",
          "hu",
          "hy",
          "id",
          "is",
          "it",
          "ja",
          "ka",
          "kk",
          "ko",
          "ku",
          "ky",
          "lt",
          "lv",
          "mi",
          "mn",
          "mr",
          "ms",
          "mt",
          "nb",
          "nl",
          "no",
          "ns",
          "pl",
          "ps",
          "pt",
          "pt-br",
          "qu",
          "ro",
          "ru",
          "sk",
          "sq",
          "sv",
          "sw",
          "ta",
          "te",
          "th",
          "tl",
          "tn",
          "tr",
          "tt",
          "uk",
          "ur",
          "uz",
          "zh"
        ]
      },
      "userToken": {
        "type": "string",
        "description": "Unique pseudonymous or anonymous user identifier.\n\nThis helps with analytics and click and conversion events.\nFor more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).\n",
        "example": "test-user-123",
        "x-categories": [
          "Personalization"
        ]
      },
      "baseSearchParamsWithoutQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "similarQuery": {
            "type": "string",
            "description": "Keywords to be used instead of the search query to conduct a more broader search.\n\nUsing the `similarQuery` parameter changes other settings:\n\n- `queryType` is set to `prefixNone`.\n- `removeStopWords` is set to true.\n- `words` is set as the first ranking criterion.\n- All remaining words are treated as `optionalWords`.\n\nSince the `similarQuery` is supposed to do a broad search, they usually return many results.\nCombine it with `filters` to narrow down the list of results.\n",
            "default": "",
            "example": "comedy drama crime Macy Buscemi",
            "x-categories": [
              "Search"
            ]
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "optionalFilters": {
            "$ref": "#/components/schemas/optionalFilters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "tagFilters": {
            "$ref": "#/components/schemas/tagFilters"
          },
          "sumOrFiltersScores": {
            "type": "boolean",
            "description": "Whether to sum all filter scores.\n\nIf true, all filter scores are summed.\nOtherwise, the maximum filter score is kept.\nFor more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).\n",
            "default": false,
            "x-categories": [
              "Filtering"
            ]
          },
          "restrictSearchableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "title",
              "author"
            ],
            "description": "Restricts a search to a subset of your searchable attributes.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Filtering"
            ]
          },
          "facets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.\n\nTo retrieve all facets, use the wildcard character `*`.\nFor more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).\n",
            "default": [],
            "example": [
              "*"
            ],
            "x-categories": [
              "Faceting"
            ]
          },
          "facetingAfterDistinct": {
            "type": "boolean",
            "description": "Whether faceting should be applied after deduplication with `distinct`.\n\nThis leads to accurate facet counts when using faceting in combination with `distinct`.\nIt's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting,\nas `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.\n",
            "default": false,
            "x-categories": [
              "Faceting"
            ]
          },
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "offset": {
            "type": "integer",
            "description": "Position of the first hit to retrieve.",
            "x-categories": [
              "Pagination"
            ]
          },
          "length": {
            "type": "integer",
            "description": "Number of hits to retrieve (used in combination with `offset`).",
            "minimum": 0,
            "maximum": 1000,
            "x-categories": [
              "Pagination"
            ]
          },
          "aroundLatLng": {
            "$ref": "#/components/schemas/aroundLatLng"
          },
          "aroundLatLngViaIP": {
            "$ref": "#/components/schemas/aroundLatLngViaIP"
          },
          "aroundRadius": {
            "$ref": "#/components/schemas/aroundRadius"
          },
          "aroundPrecision": {
            "$ref": "#/components/schemas/aroundPrecision"
          },
          "minimumAroundRadius": {
            "type": "integer",
            "description": "Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.",
            "minimum": 1,
            "x-categories": [
              "Geo-Search"
            ]
          },
          "insideBoundingBox": {
            "$ref": "#/components/schemas/insideBoundingBox"
          },
          "insidePolygon": {
            "$ref": "#/components/schemas/insidePolygon"
          },
          "naturalLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "description": "ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):\n\n- Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.\n- Sets `removeWordsIfNoResults` to `allOptional`.\n- Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "ruleContexts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Assigns a rule context to the search query.\n\n[Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.\n",
            "default": [],
            "example": [
              "mobile"
            ],
            "x-categories": [
              "Rules"
            ]
          },
          "personalizationImpact": {
            "type": "integer",
            "description": "Impact that Personalization should have on this search.\n\nThe higher this value is, the more Personalization determines the ranking compared to other factors.\nFor more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).\n",
            "default": 100,
            "minimum": 0,
            "maximum": 100,
            "x-categories": [
              "Personalization"
            ]
          },
          "userToken": {
            "$ref": "#/components/schemas/userToken"
          },
          "getRankingInfo": {
            "type": "boolean",
            "description": "Whether the search response should include detailed ranking information.",
            "default": false,
            "x-categories": [
              "Advanced"
            ]
          },
          "synonyms": {
            "type": "boolean",
            "description": "Whether to take into account an index's synonyms for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "clickAnalytics": {
            "type": "boolean",
            "description": "Whether to include a `queryID` attribute in the response.\n\nThe query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).\n",
            "default": false,
            "x-categories": [
              "Analytics"
            ]
          },
          "analytics": {
            "type": "boolean",
            "description": "Whether this search will be included in Analytics.",
            "default": true,
            "x-categories": [
              "Analytics"
            ]
          },
          "analyticsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).",
            "default": [],
            "x-categories": [
              "Analytics"
            ]
          },
          "percentileComputation": {
            "type": "boolean",
            "description": "Whether to include this search when calculating processing-time percentiles.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          },
          "enableABTest": {
            "type": "boolean",
            "description": "Whether to enable A/B testing for this search.",
            "default": true,
            "x-categories": [
              "Advanced"
            ]
          }
        }
      },
      "baseSearchParams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParamsQuery"
          },
          {
            "$ref": "#/components/schemas/baseSearchParamsWithoutQuery"
          }
        ]
      },
      "hitsPerPage": {
        "type": "integer",
        "description": "Number of hits per page.",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "x-categories": [
          "Pagination"
        ]
      },
      "typoToleranceEnum": {
        "type": "string",
        "title": "typo tolerance",
        "description": "- `min`. Return matches with the lowest number of typos.\n  For example, if you have matches without typos, only include those.\n  But if there are no matches without typos (with 1 typo), include matches with 1 typo (2 typos).\n- `strict`. Return matches with the two lowest numbers of typos.\n  With `strict`, the Typo ranking criterion is applied first in the `ranking` setting.\n",
        "enum": [
          "min",
          "strict",
          "true",
          "false"
        ]
      },
      "typoTolerance": {
        "description": "Whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) is enabled and how it is applied.\n\nIf typo tolerance is true, `min`, or `strict`, [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) are also active.\n",
        "oneOf": [
          {
            "type": "boolean",
            "default": true,
            "description": "Whether typo tolerance is active. If true, matches with typos are included in the search results and rank after exact matches."
          },
          {
            "$ref": "#/components/schemas/typoToleranceEnum"
          }
        ],
        "x-categories": [
          "Typos"
        ]
      },
      "booleanString": {
        "type": "string",
        "enum": [
          "true",
          "false"
        ]
      },
      "ignorePlurals": {
        "description": "Treat singular, plurals, and other forms of declensions as equivalent.\nYou should only use this feature for the languages used in your index.\n",
        "example": [
          "ca",
          "es"
        ],
        "oneOf": [
          {
            "type": "array",
            "description": "ISO code for languages for which this feature should be active.\nThis overrides languages you set with `queryLanguages`.\n",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            }
          },
          {
            "$ref": "#/components/schemas/booleanString"
          },
          {
            "type": "boolean",
            "description": "If true, `ignorePlurals` is active for all languages included in `queryLanguages`, or for all supported languages, if `queryLanguges` is empty.\nIf false, singulars, plurals, and other declensions won't be considered equivalent.\n",
            "default": false
          }
        ],
        "x-categories": [
          "Languages"
        ]
      },
      "removeStopWords": {
        "description": "Removes stop words from the search query.\n\nStop words are common words like articles, conjunctions, prepositions, or pronouns that have little or no meaning on their own.\nIn English, \"the\", \"a\", or \"and\" are stop words.\n\nYou should only use this feature for the languages used in your index.\n",
        "example": [
          "ca",
          "es"
        ],
        "oneOf": [
          {
            "type": "array",
            "description": "ISO code for languages for which stop words should be removed. This overrides languages you set in `queryLanguges`.",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If true, stop words are removed for all languages you included in `queryLanguages`, or for all supported languages, if `queryLanguages` is empty.\nIf false, stop words are not removed.\n"
          }
        ],
        "x-categories": [
          "Languages"
        ]
      },
      "queryType": {
        "type": "string",
        "enum": [
          "prefixLast",
          "prefixAll",
          "prefixNone"
        ],
        "description": "Determines if and how query words are interpreted as prefixes.\n\nBy default, only the last query word is treated as a prefix (`prefixLast`).\nTo turn off prefix search, use `prefixNone`.\nAvoid `prefixAll`, which treats all query words as prefixes.\nThis might lead to counterintuitive results and makes your search slower.\n\nFor more information, see [Prefix searching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/).\n",
        "default": "prefixLast",
        "x-categories": [
          "Query strategy"
        ]
      },
      "removeWordsIfNoResults": {
        "type": "string",
        "enum": [
          "none",
          "lastWords",
          "firstWords",
          "allOptional"
        ],
        "example": "firstWords",
        "description": "Strategy for removing words from the query when it doesn't return any results.\nThis helps to avoid returning empty search results.\n\n- `none`.\n  No words are removed when a query doesn't return results.\n\n- `lastWords`.\n  Treat the last (then second to last, then third to last) word as optional,\n  until there are results or at most 5 words have been removed.\n\n- `firstWords`.\n  Treat the first (then second, then third) word as optional,\n  until there are results or at most 5 words have been removed.\n\n- `allOptional`.\n  Treat all words as optional.\n\nFor more information, see [Remove words to improve results](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/in-depth/why-use-remove-words-if-no-results/).\n",
        "default": "none",
        "x-categories": [
          "Query strategy"
        ]
      },
      "mode": {
        "type": "string",
        "enum": [
          "neuralSearch",
          "keywordSearch"
        ],
        "description": "Search mode the index will use to query for results.\n\nThis setting only applies to indices, for which Algolia enabled NeuralSearch for you.\n",
        "default": "keywordSearch",
        "x-categories": [
          "Query strategy"
        ]
      },
      "semanticSearch": {
        "type": "object",
        "description": "Settings for the semantic search part of NeuralSearch.\nOnly used when `mode` is `neuralSearch`.\n",
        "properties": {
          "eventSources": {
            "oneOf": [
              {
                "type": "array",
                "description": "Indices from which to collect click and conversion events.\n\nIf null, the current index and all its replicas are used.\n",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "optionalWordsArray": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "blue",
          "iphone case"
        ],
        "description": "List of [optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).",
        "default": [],
        "x-categories": [
          "Query strategy"
        ]
      },
      "optionalWords": {
        "description": "Words that should be considered optional when found in the query.\n\nBy default, records must match all words in the search query to be included in the search results.\nAdding optional words can help to increase the number of search results by running an additional search query that doesn't include the optional words.\nFor example, if the search query is \"action video\" and \"video\" is an optional word,\nthe search engine runs two queries. One for \"action video\" and one for \"action\".\nRecords that match all words are ranked higher.\n\nFor a search query with 4 or more words **and** all its words are optional,\nthe number of matched words required for a record to be included in the search results increases for every 1,000 records:\n\n- If `optionalWords` has less than 10 words, the required number of matched words increases by 1:\n  results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 2 matched words.\n- If `optionalWords` has 10 or more words, the number of required matched words increases by the number of optional words divided by 5 (rounded down).\n  For example, with 18 optional words: results 1 to 1,000 require 1 matched word, results 1,001 to 2000 need 4 matched words.\n\nFor more information, see [Optional words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words).\n",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          },
          {
            "$ref": "#/components/schemas/optionalWordsArray"
          }
        ]
      },
      "exactOnSingleWordQuery": {
        "type": "string",
        "enum": [
          "attribute",
          "none",
          "word"
        ],
        "description": "Determines how the [Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes) is computed when the search query has only one word.\n\n- `attribute`.\n  The Exact ranking criterion is 1 if the query word and attribute value are the same.\n  For example, a search for \"road\" will match the value \"road\", but not \"road trip\".\n\n- `none`.\n  The Exact ranking criterion is ignored on single-word searches.\n\n- `word`.\n  The Exact ranking criterion is 1 if the query word is found in the attribute value.\n  The query word must have at least 3 characters and must not be a stop word.\n  Only exact matches will be highlighted,\n  partial and prefix matches won't.\n",
        "default": "attribute",
        "x-categories": [
          "Query strategy"
        ]
      },
      "alternativesAsExact": {
        "type": "string",
        "enum": [
          "ignorePlurals",
          "singleWordSynonym",
          "multiWordsSynonym",
          "ignoreConjugations"
        ],
        "x-categories": [
          "Query strategy"
        ]
      },
      "advancedSyntaxFeatures": {
        "type": "string",
        "enum": [
          "exactPhrase",
          "excludeWords"
        ],
        "x-categories": [
          "Query strategy"
        ]
      },
      "distinct": {
        "description": "Determines how many records of a group are included in the search results.\n\nRecords with the same value for the `attributeForDistinct` attribute are considered a group.\nThe `distinct` setting controls how many members of the group are returned.\nThis is useful for [deduplication and grouping](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).\n\nThe `distinct` setting is ignored if `attributeForDistinct` is not set.\n",
        "example": 1,
        "oneOf": [
          {
            "type": "boolean",
            "description": "Whether deduplication is turned on. If true, only one member of a group is shown in the search results."
          },
          {
            "type": "integer",
            "description": "Number of members of a group of records to include in the search results.\n\n- Don't use `distinct > 1` for records that might be [promoted by rules](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/promote-hits/).\n  The number of hits won't be correct and faceting won't work as expected.\n- With `distinct > 1`, the `hitsPerPage` parameter controls the number of returned groups.\n  For example, with `hitsPerPage: 10` and `distinct: 2`, up to 20 records are returned.\n  Likewise, the `nbHits` response attribute contains the number of returned groups.\n",
            "minimum": 0,
            "maximum": 4,
            "default": 0
          }
        ],
        "x-categories": [
          "Advanced"
        ]
      },
      "order": {
        "description": "Explicit order of facets or facet values.\n\nThis setting lets you always show specific facets or facet values at the top of the list.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "facets": {
        "description": "Order of facet names.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          }
        }
      },
      "sortRemainingBy": {
        "description": "Order of facet values that aren't explicitly positioned with the `order` setting.\n\n- `count`.\n  Order remaining facet values by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Sort facet values alphabetically.\n\n- `hidden`.\n  Don't show facet values that aren't explicitly positioned.\n",
        "type": "string",
        "enum": [
          "count",
          "alpha",
          "hidden"
        ]
      },
      "hide": {
        "description": "Hide facet values.",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "value": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "order": {
            "$ref": "#/components/schemas/order"
          },
          "sortRemainingBy": {
            "$ref": "#/components/schemas/sortRemainingBy"
          },
          "hide": {
            "$ref": "#/components/schemas/hide"
          }
        }
      },
      "values": {
        "description": "Order of facet values. One object for each facet.",
        "type": "object",
        "additionalProperties": {
          "x-additionalPropertiesName": "facet",
          "$ref": "#/components/schemas/value"
        }
      },
      "facetOrdering": {
        "description": "Order of facet names and facet values in your UI.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facets": {
            "$ref": "#/components/schemas/facets"
          },
          "values": {
            "$ref": "#/components/schemas/values"
          }
        }
      },
      "redirectURL": {
        "description": "The redirect rule container.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImageUrl": {
        "description": "URL for an image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "bannerImage": {
        "description": "Image to show inside a banner.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bannerImageUrl"
            }
          },
          "title": {
            "type": "string"
          }
        }
      },
      "bannerLink": {
        "description": "Link for a banner defined in the Merchandising Studio.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "banner": {
        "description": "Banner with image and link to redirect users.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "image": {
            "$ref": "#/components/schemas/bannerImage"
          },
          "link": {
            "$ref": "#/components/schemas/bannerLink"
          }
        }
      },
      "banners": {
        "description": "Banners defined in the Merchandising Studio for a given search.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/banner"
        }
      },
      "widgets": {
        "description": "Widgets returned from any rules that are applied to the current search.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "banners": {
            "$ref": "#/components/schemas/banners"
          }
        }
      },
      "renderingContent": {
        "description": "Extra data that can be used in the search UI.\n\nYou can use this to control aspects of your search UI, such as the order of facet names and values\nwithout changing your frontend code.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetOrdering": {
            "$ref": "#/components/schemas/facetOrdering"
          },
          "redirect": {
            "$ref": "#/components/schemas/redirectURL"
          },
          "widgets": {
            "$ref": "#/components/schemas/widgets"
          }
        },
        "x-categories": [
          "Advanced"
        ]
      },
      "reRankingApplyFilter": {
        "description": "Restrict [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/) to records that match these filters.\n",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reRankingApplyFilter"
            }
          },
          {
            "type": "string",
            "x-categories": [
              "Filtering"
            ]
          }
        ]
      },
      "indexSettingsAsSearchParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesToRetrieve": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "content"
            ],
            "description": "Attributes to include in the API response.\n\nTo reduce the size of your response, you can retrieve only some of the attributes.\nAttribute names are case-sensitive.\n\n- `*` retrieves all attributes, except attributes included in the `customRanking` and `unretrievableAttributes` settings.\n- To retrieve all attributes except a specific one, prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`.\n- The `objectID` attribute is always included.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Attributes"
            ]
          },
          "ranking": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Determines the order in which Algolia returns your results.\n\nBy default, each entry corresponds to a [ranking criteria](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/).\nThe tie-breaking algorithm sequentially applies each criterion in the order they're specified.\nIf you configure a replica index for [sorting by an attribute](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-by-attribute/),\nyou put the sorting attribute at the top of the list.\n\n**Modifiers**\n\n- `asc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in ascending order.\n- `desc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in descending order.\n\nBefore you modify the default setting,\nyou should test your changes in the dashboard,\nand by [A/B testing](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/).\n",
            "default": [
              "typo",
              "geo",
              "words",
              "filters",
              "proximity",
              "attribute",
              "exact",
              "custom"
            ],
            "x-categories": [
              "Ranking"
            ]
          },
          "relevancyStrictness": {
            "type": "integer",
            "example": 90,
            "description": "Relevancy threshold below which less relevant results aren't included in the results.\n\nYou can only set `relevancyStrictness` on [virtual replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/#what-are-virtual-replicas).\nUse this setting to strike a balance between the relevance and number of returned results.\n",
            "default": 100,
            "x-categories": [
              "Ranking"
            ]
          },
          "attributesToHighlight": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "title",
              "conten",
              "content"
            ],
            "description": "Attributes to highlight.\n\nBy default, all searchable attributes are highlighted.\nUse `*` to highlight all attributes or use an empty array `[]` to turn off highlighting.\nAttribute names are case-sensitive.\n\nWith highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`.\nYou can use this to visually highlight matching parts of a search query in your UI.\n\nFor more information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).\n",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "attributesToSnippet": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "content:80",
              "description"
            ],
            "description": "Attributes for which to enable snippets.\nAttribute names are case-sensitive.\n\nSnippets provide additional context to matched words.\nIf you enable snippets, they include 10 words, including the matched word.\nThe matched word will also be wrapped by HTML tags for highlighting.\nYou can adjust the number of words with the following notation: `ATTRIBUTE:NUMBER`,\nwhere `NUMBER` is the number of words to be extracted.\n",
            "default": [],
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPreTag": {
            "type": "string",
            "description": "HTML tag to insert before the highlighted parts in all highlighted results and snippets.",
            "default": "<em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "highlightPostTag": {
            "type": "string",
            "description": "HTML tag to insert after the highlighted parts in all highlighted results and snippets.",
            "default": "</em>",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "snippetEllipsisText": {
            "type": "string",
            "description": "String used as an ellipsis indicator when a snippet is truncated.",
            "default": "…",
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "restrictHighlightAndSnippetArrays": {
            "type": "boolean",
            "description": "Whether to restrict highlighting and snippeting to items that at least partially matched the search query.\nBy default, all items are highlighted and snippeted.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          },
          "minWordSizefor1Typo": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 4,
            "x-categories": [
              "Typos"
            ]
          },
          "minWordSizefor2Typos": {
            "type": "integer",
            "description": "Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).",
            "default": 8,
            "x-categories": [
              "Typos"
            ]
          },
          "typoTolerance": {
            "$ref": "#/components/schemas/typoTolerance"
          },
          "allowTyposOnNumericTokens": {
            "type": "boolean",
            "description": "Whether to allow typos on numbers in the search query.\n\nTurn off this setting to reduce the number of irrelevant matches\nwhen searching in large sets of similar numbers.\n",
            "default": true,
            "x-categories": [
              "Typos"
            ]
          },
          "disableTypoToleranceOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sku"
            ],
            "description": "Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).\nAttribute names are case-sensitive.\n\nReturning only exact matches can help when:\n\n- [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/).\n- Reducing the number of matches when you have too many.\n  This can happen with attributes that are long blocks of text, such as product descriptions.\n\nConsider alternatives such as `disableTypoToleranceOnWords` or adding synonyms if your attributes have intentional unusual spellings that might look like typos.\n",
            "default": [],
            "x-categories": [
              "Typos"
            ]
          },
          "ignorePlurals": {
            "$ref": "#/components/schemas/ignorePlurals"
          },
          "removeStopWords": {
            "$ref": "#/components/schemas/removeStopWords"
          },
          "queryLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "es"
            ],
            "description": "Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection dictionaries.\n\nThis setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals` settings.\nThis setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk) languages.\nTo support this, you must place the CJK language **first**.\n\n**You should always specify a query language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "decompoundQuery": {
            "type": "boolean",
            "description": "Whether to split compound words in the query into their building blocks.\n\nFor more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).\nWord segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).\n",
            "default": true,
            "x-categories": [
              "Languages"
            ]
          },
          "enableRules": {
            "type": "boolean",
            "description": "Whether to enable rules.",
            "default": true,
            "x-categories": [
              "Rules"
            ]
          },
          "enablePersonalization": {
            "type": "boolean",
            "description": "Whether to enable Personalization.",
            "default": false,
            "x-categories": [
              "Personalization"
            ]
          },
          "queryType": {
            "$ref": "#/components/schemas/queryType"
          },
          "removeWordsIfNoResults": {
            "$ref": "#/components/schemas/removeWordsIfNoResults"
          },
          "mode": {
            "$ref": "#/components/schemas/mode"
          },
          "semanticSearch": {
            "$ref": "#/components/schemas/semanticSearch"
          },
          "advancedSyntax": {
            "type": "boolean",
            "description": "Whether to support phrase matching and excluding words from search queries.\n\nUse the `advancedSyntaxFeatures` parameter to control which feature is supported.\n",
            "default": false,
            "x-categories": [
              "Query strategy"
            ]
          },
          "optionalWords": {
            "$ref": "#/components/schemas/optionalWords"
          },
          "disableExactOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "description"
            ],
            "description": "Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).\nAttribute names are case-sensitive.\n\nThis can be useful for attributes with long values, where the likelihood of an exact match is high,\nsuch as product descriptions.\nTurning off the Exact ranking criterion for these attributes favors exact matching on other attributes.\nThis reduces the impact of individual attributes with a lot of content on ranking.\n",
            "default": [],
            "x-categories": [
              "Query strategy"
            ]
          },
          "exactOnSingleWordQuery": {
            "$ref": "#/components/schemas/exactOnSingleWordQuery"
          },
          "alternativesAsExact": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alternativesAsExact"
            },
            "description": "Determine which plurals and synonyms should be considered an exact matches.\n\nBy default, Algolia treats singular and plural forms of a word, and single-word synonyms, as [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact) matches when searching.\nFor example:\n\n- \"swimsuit\" and \"swimsuits\" are treated the same\n- \"swimsuit\" and \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms)).\n\n- `ignorePlurals`.\n  Plurals and similar declensions added by the `ignorePlurals` setting are considered exact matches.\n\n- `singleWordSynonym`.\n  Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches.\n\n- `multiWordsSynonym`.\n  Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.\n",
            "default": [
              "ignorePlurals",
              "singleWordSynonym"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "advancedSyntaxFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/advancedSyntaxFeatures"
            },
            "description": "Advanced search syntax features you want to support.\n\n- `exactPhrase`.\n  Phrases in quotes must match exactly.\n  For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\".\n\n- `excludeWords`.\n  Query words prefixed with a `-` must not occur in a record.\n  For example, `search -engine` matches records that contain \"search\" but not \"engine\".\n\nThis setting only has an effect if `advancedSyntax` is true.\n",
            "default": [
              "exactPhrase",
              "excludeWords"
            ],
            "x-categories": [
              "Query strategy"
            ]
          },
          "distinct": {
            "$ref": "#/components/schemas/distinct"
          },
          "replaceSynonymsInHighlight": {
            "type": "boolean",
            "description": "Whether to replace a highlighted word with the matched synonym.\n\nBy default, the original words are highlighted even if a synonym matches.\nFor example, with `home` as a synonym for `house` and a search for `home`,\nrecords matching either \"home\" or \"house\" are included in the search results,\nand either \"home\" or \"house\" are highlighted.\n\nWith `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,\nbut all occurrences of \"house\" are replaced by \"home\" in the highlighted response.\n",
            "default": false,
            "x-categories": [
              "Highlighting and Snippeting"
            ]
          },
          "minProximity": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "description": "Minimum proximity score for two matching words.\n\nThis adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)\nby equally scoring matches that are farther apart.\n\nFor example, if `minProximity` is 2, neighboring matches and matches with one word between them would have the same score.\n",
            "default": 1,
            "x-categories": [
              "Advanced"
            ]
          },
          "responseFields": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Properties to include in the API response of search and browse requests.\n\nBy default, all response properties are included.\nTo reduce the response size, you can select which properties should be included.\n\nAn empty list may lead to an empty API response (except properties you can't exclude).\n\nYou can't exclude these properties:\n`message`, `warning`, `cursor`, `abTestVariantID`,\nor any property added by setting `getRankingInfo` to true.\n\nYour search depends on the `hits` field. If you omit this field, searches won't return any results.\nYour UI might also depend on other properties, for example, for pagination.\nBefore restricting the response size, check the impact on your search experience.\n",
            "default": [
              "*"
            ],
            "x-categories": [
              "Advanced"
            ]
          },
          "maxValuesPerFacet": {
            "type": "integer",
            "description": "Maximum number of facet values to return for each facet.",
            "default": 100,
            "maximum": 1000,
            "x-categories": [
              "Faceting"
            ]
          },
          "sortFacetValuesBy": {
            "type": "string",
            "description": "Order in which to retrieve facet values.\n\n- `count`.\n  Facet values are retrieved by decreasing count.\n  The count is the number of matching records containing this facet value.\n\n- `alpha`.\n  Retrieve facet values alphabetically.\n\nThis setting doesn't influence how facet values are displayed in your UI (see `renderingContent`).\nFor more information, see [facet value display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js/).\n",
            "default": "count",
            "x-categories": [
              "Faceting"
            ]
          },
          "attributeCriteriaComputedByMinProximity": {
            "type": "boolean",
            "description": "Whether the best matching attribute should be determined by minimum proximity.\n\nThis setting only affects ranking if the Attribute ranking criterion comes before Proximity in the `ranking` setting.\nIf true, the best matching attribute is selected based on the minimum proximity of multiple matches.\nOtherwise, the best matching attribute is determined by the order in the `searchableAttributes` setting.\n",
            "default": false,
            "x-categories": [
              "Advanced"
            ]
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "enableReRanking": {
            "type": "boolean",
            "description": "Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/).\n\nThis setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.\n",
            "default": true,
            "x-categories": [
              "Filtering"
            ]
          },
          "reRankingApplyFilter": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/reRankingApplyFilter"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "searchParamsObject": {
        "title": "Search parameters as object",
        "description": "Each parameter value, including the `query` must not be larger than 512 bytes.",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchParams"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          }
        ]
      },
      "searchParams": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchParamsString"
          },
          {
            "$ref": "#/components/schemas/searchParamsObject"
          }
        ]
      },
      "processingTimeMS": {
        "type": "integer",
        "description": "Time the server took to process the request, in milliseconds.",
        "example": 20
      },
      "RedirectRuleIndexMetadata": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Source index for the redirect rule."
          },
          "dest": {
            "type": "string",
            "description": "Destination index for the redirect rule."
          },
          "reason": {
            "type": "string",
            "description": "Reason for the redirect rule."
          },
          "succeed": {
            "type": "boolean",
            "description": "Redirect rule status."
          },
          "data": {
            "title": "redirectRuleIndexData",
            "type": "object",
            "description": "Redirect rule data.",
            "required": [
              "ruleObjectID"
            ],
            "properties": {
              "ruleObjectID": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data",
          "succeed",
          "reason",
          "dest",
          "source"
        ]
      },
      "userData": {
        "example": {
          "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
          "pluginVersion": "1.6.0"
        },
        "description": "An object with custom data.\n\nYou can store up to 32kB as custom data.\n",
        "default": {},
        "x-categories": [
          "Advanced"
        ]
      },
      "baseSearchResponse": {
        "type": "object",
        "additionalProperties": true,
        "required": [
          "processingTimeMS"
        ],
        "properties": {
          "abTestID": {
            "type": "integer",
            "description": "A/B test ID. This is only included in the response for indices that are part of an A/B test."
          },
          "abTestVariantID": {
            "type": "integer",
            "minimum": 1,
            "description": "Variant ID. This is only included in the response for indices that are part of an A/B test."
          },
          "aroundLatLng": {
            "type": "string",
            "description": "Computed geographical location.",
            "example": "40.71,-74.01",
            "pattern": "^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$"
          },
          "automaticRadius": {
            "type": "string",
            "description": "Distance from a central coordinate provided by `aroundLatLng`."
          },
          "exhaustive": {
            "title": "exhaustive",
            "type": "object",
            "description": "Whether certain properties of the search response are calculated exhaustive (exact) or approximated.",
            "properties": {
              "facetsCount": {
                "type": "boolean",
                "title": "facetsCount",
                "description": "Whether the facet count is exhaustive (`true`) or approximate (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
              },
              "facetValues": {
                "type": "boolean",
                "title": "facetValues",
                "description": "The value is `false` if not all facet values are retrieved."
              },
              "nbHits": {
                "type": "boolean",
                "title": "nbHits",
                "description": "Whether the `nbHits` is exhaustive (`true`) or approximate (`false`). When the query takes more than 50ms to be processed, the engine makes an approximation. This can happen when using complex filters on millions of records, when typo-tolerance was not exhaustive, or when enough hits have been retrieved (for example, after the engine finds 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever an approximation is made, even if the approximation didn’t, in the end, impact the exhaustivity of the query."
              },
              "rulesMatch": {
                "type": "boolean",
                "title": "rulesMatch",
                "description": "Rules matching exhaustivity. The value is `false` if rules were enable for this query, and could not be fully processed due a timeout. This is generally caused by the number of alternatives (such as typos) which is too large."
              },
              "typo": {
                "type": "boolean",
                "title": "typo",
                "description": "Whether the typo search was exhaustive (`true`) or approximate (`false`). An approximation is done when the typo search query part takes more than 10% of the query budget (ie. 5ms by default) to be processed (this can happen when a lot of typo alternatives exist for the query). This field will not be included when typo-tolerance is entirely disabled."
              }
            }
          },
          "appliedRules": {
            "description": "Rules applied to the query.",
            "title": "appliedRules",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "See the `facetsCount` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveNbHits": {
            "type": "boolean",
            "description": "See the `nbHits` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "exhaustiveTypo": {
            "type": "boolean",
            "description": "See the `typo` field of the `exhaustive` object in the response.",
            "deprecated": true
          },
          "facets": {
            "title": "facets",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "facet",
              "type": "object",
              "additionalProperties": {
                "x-additionalPropertiesName": "facet count",
                "type": "integer"
              }
            },
            "description": "Facet counts.",
            "example": {
              "category": {
                "food": 1,
                "tech": 42
              }
            }
          },
          "facets_stats": {
            "type": "object",
            "description": "Statistics for numerical facets.",
            "additionalProperties": {
              "title": "facetStats",
              "type": "object",
              "properties": {
                "min": {
                  "type": "number",
                  "format": "double",
                  "description": "Minimum value in the results."
                },
                "max": {
                  "type": "number",
                  "format": "double",
                  "description": "Maximum value in the results."
                },
                "avg": {
                  "type": "number",
                  "format": "double",
                  "description": "Average facet value in the results."
                },
                "sum": {
                  "type": "number",
                  "format": "double",
                  "description": "Sum of all values in the results."
                }
              }
            }
          },
          "index": {
            "type": "string",
            "example": "indexName",
            "description": "Index name used for the query."
          },
          "indexUsed": {
            "type": "string",
            "description": "Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query.",
            "example": "indexNameAlt"
          },
          "message": {
            "type": "string",
            "description": "Warnings about the query."
          },
          "nbSortedHits": {
            "type": "integer",
            "description": "Number of hits selected and sorted by the relevant sort algorithm.",
            "example": 20
          },
          "parsedQuery": {
            "type": "string",
            "description": "Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched.",
            "example": "george clo"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          },
          "processingTimingsMS": {
            "type": "object",
            "description": "Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues."
          },
          "queryAfterRemoval": {
            "type": "string",
            "description": "Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set."
          },
          "redirect": {
            "title": "redirect",
            "type": "object",
            "description": "[Redirect results to a URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/), this this parameter is for internal use only.\n",
            "properties": {
              "index": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RedirectRuleIndexMetadata"
                }
              }
            }
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          },
          "serverTimeMS": {
            "type": "integer",
            "description": "Time the server took to process the request, in milliseconds.",
            "example": 20
          },
          "serverUsed": {
            "type": "string",
            "description": "Host name of the server that processed the request.",
            "example": "c2-uk-3.algolia.net"
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "queryID": {
            "type": "string",
            "description": "Unique identifier for the query. This is used for [click analytics](https://www.algolia.com/doc/guides/analytics/click-analytics/).",
            "example": "a00dbc80a8d13c4565a442e7e2dca80a"
          },
          "_automaticInsights": {
            "type": "boolean",
            "description": "Whether automatic events collection is enabled for the application."
          }
        }
      },
      "nbHits": {
        "type": "integer",
        "description": "Number of results (hits).",
        "example": 20
      },
      "nbPages": {
        "type": "integer",
        "description": "Number of pages of results.",
        "example": 1
      },
      "SearchPagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        }
      },
      "objectID": {
        "type": "string",
        "description": "Unique record identifier.",
        "example": "test-record-123"
      },
      "highlightedValue": {
        "type": "string",
        "description": "Highlighted attribute value, including HTML tags.",
        "example": "<em>George</em> <em>Clo</em>oney"
      },
      "matchLevel": {
        "type": "string",
        "description": "Whether the whole query string matches or only a part.",
        "enum": [
          "none",
          "partial",
          "full"
        ]
      },
      "highlightResultOption": {
        "title": "highlightResultOption",
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          },
          "matchedWords": {
            "type": "array",
            "description": "List of matched words from the search query.",
            "example": [
              "action"
            ],
            "items": {
              "type": "string"
            }
          },
          "fullyHighlighted": {
            "type": "boolean",
            "description": "Whether the entire attribute value is highlighted."
          }
        },
        "required": [
          "value",
          "matchLevel",
          "matchedWords"
        ],
        "x-discriminator-fields": [
          "matchLevel",
          "matchedWords"
        ]
      },
      "highlightResultMap": {
        "title": "highlightResultMap",
        "type": "object",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "highlightResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/highlightResultOption"
          },
          {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          {
            "$ref": "#/components/schemas/highlightResultArray"
          }
        ]
      },
      "highlightResultArray": {
        "title": "highlightResultArray",
        "type": "array",
        "description": "Surround words that match the query with HTML tags for highlighting.",
        "items": {
          "$ref": "#/components/schemas/highlightResult"
        }
      },
      "snippetResultOption": {
        "title": "snippetResultOption",
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/highlightedValue"
          },
          "matchLevel": {
            "$ref": "#/components/schemas/matchLevel"
          }
        },
        "required": [
          "value",
          "matchLevel"
        ],
        "x-discriminator-fields": [
          "matchLevel"
        ]
      },
      "snippetResultMap": {
        "title": "snippetResultMap",
        "type": "object",
        "description": "Snippets that show the context around a matching search query.",
        "x-is-free-form": false,
        "additionalProperties": {
          "x-additionalPropertiesName": "attribute",
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "snippetResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/snippetResultOption"
          },
          {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          {
            "$ref": "#/components/schemas/snippetResultArray"
          }
        ]
      },
      "snippetResultArray": {
        "title": "snippetResultArray",
        "type": "array",
        "description": "Snippets that show the context around a matching search query.",
        "items": {
          "$ref": "#/components/schemas/snippetResult"
        }
      },
      "matchedGeoLocation": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "format": "double",
            "description": "Latitude of the matched location."
          },
          "lng": {
            "type": "number",
            "format": "double",
            "description": "Longitude of the matched location."
          },
          "distance": {
            "type": "integer",
            "description": "Distance between the matched location and the search location (in meters)."
          }
        }
      },
      "personalization": {
        "type": "object",
        "properties": {
          "filtersScore": {
            "type": "integer",
            "description": "The score of the filters."
          },
          "rankingScore": {
            "type": "integer",
            "description": "The score of the ranking."
          },
          "score": {
            "type": "integer",
            "description": "The score of the event."
          }
        }
      },
      "rankingInfo": {
        "type": "object",
        "description": "Object with detailed information about the record's ranking.",
        "additionalProperties": false,
        "properties": {
          "filters": {
            "type": "integer",
            "minimum": 0,
            "description": "Whether a filter matched the query."
          },
          "firstMatchedWord": {
            "type": "integer",
            "minimum": 0,
            "description": "Position of the first matched word in the best matching attribute of the record."
          },
          "geoDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters)."
          },
          "geoPrecision": {
            "type": "integer",
            "minimum": 1,
            "description": "Precision used when computing the geo distance, in meters."
          },
          "matchedGeoLocation": {
            "$ref": "#/components/schemas/matchedGeoLocation"
          },
          "personalization": {
            "$ref": "#/components/schemas/personalization"
          },
          "nbExactWords": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of exactly matched words."
          },
          "nbTypos": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of typos encountered when matching the record."
          },
          "promoted": {
            "type": "boolean",
            "description": "Whether the record was promoted by a rule."
          },
          "proximityDistance": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of words between multiple matches in the query plus 1. For single word queries, `proximityDistance` is 0."
          },
          "userScore": {
            "type": "integer",
            "description": "Overall ranking of the record, expressed as a single integer. This attribute is internal."
          },
          "words": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of matched words."
          },
          "promotedByReRanking": {
            "type": "boolean",
            "description": "Whether the record is re-ranked."
          }
        },
        "required": [
          "nbTypos",
          "firstMatchedWord",
          "geoDistance",
          "nbExactWords",
          "userScore"
        ]
      },
      "distinctSeqID": {
        "type": "integer"
      },
      "hit": {
        "type": "object",
        "description": "Search result.\n\nA hit is a record from your index, augmented with special attributes for highlighting, snippeting, and ranking.\n",
        "x-is-generic": true,
        "additionalProperties": true,
        "required": [
          "objectID"
        ],
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "_highlightResult": {
            "$ref": "#/components/schemas/highlightResultMap"
          },
          "_snippetResult": {
            "$ref": "#/components/schemas/snippetResultMap"
          },
          "_rankingInfo": {
            "$ref": "#/components/schemas/rankingInfo"
          },
          "_distinctSeqID": {
            "$ref": "#/components/schemas/distinctSeqID"
          }
        }
      },
      "searchHits": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Search results (hits).\n\nHits are records from your index that match the search criteria, augmented with additional attributes, such as, for highlighting.\n",
            "items": {
              "$ref": "#/components/schemas/hit"
            }
          },
          "query": {
            "$ref": "#/components/schemas/query"
          },
          "params": {
            "type": "string",
            "description": "URL-encoded string of all search parameters.",
            "example": "query=a&hitsPerPage=20"
          }
        },
        "required": [
          "hits",
          "query",
          "params"
        ]
      },
      "searchResponse": {
        "additionalProperties": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/SearchPagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          }
        ]
      },
      "indexName": {
        "type": "string",
        "example": "products",
        "description": "Index name (case-sensitive)."
      },
      "searchTypeDefault": {
        "type": "string",
        "enum": [
          "default"
        ],
        "default": "default",
        "description": "- `default`: perform a search query\n- `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).\n"
      },
      "searchForHitsOptions": {
        "x-is-SearchForHitsOptions": true,
        "type": "object",
        "properties": {
          "indexName": {
            "$ref": "#/components/schemas/indexName"
          },
          "type": {
            "$ref": "#/components/schemas/searchTypeDefault"
          }
        },
        "required": [
          "indexName"
        ]
      },
      "SearchForHits": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParams"
          },
          {
            "$ref": "#/components/schemas/searchForHitsOptions"
          }
        ]
      },
      "facetQuery": {
        "type": "string",
        "description": "Text to search inside the facet's values.",
        "example": "george",
        "default": ""
      },
      "maxFacetHits": {
        "type": "integer",
        "description": "Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).",
        "maximum": 100,
        "default": 10,
        "x-categories": [
          "Advanced"
        ]
      },
      "searchTypeFacet": {
        "type": "string",
        "enum": [
          "facet"
        ],
        "default": "facet",
        "description": "- `default`: perform a search query\n- `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).\n"
      },
      "searchForFacetsOptions": {
        "type": "object",
        "properties": {
          "facet": {
            "type": "string",
            "description": "Facet name."
          },
          "indexName": {
            "$ref": "#/components/schemas/indexName"
          },
          "facetQuery": {
            "$ref": "#/components/schemas/facetQuery"
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "type": {
            "$ref": "#/components/schemas/searchTypeFacet"
          }
        },
        "required": [
          "indexName",
          "type",
          "facet"
        ]
      },
      "SearchForFacets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParams"
          },
          {
            "$ref": "#/components/schemas/searchForFacetsOptions"
          }
        ],
        "x-discriminator-fields": [
          "facet",
          "type"
        ]
      },
      "SearchQuery": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SearchForHits"
          },
          {
            "$ref": "#/components/schemas/SearchForFacets"
          }
        ]
      },
      "searchStrategy": {
        "type": "string",
        "enum": [
          "none",
          "stopIfEnoughMatches"
        ],
        "description": "Strategy for multiple search queries:\n\n- `none`. Run all queries.\n- `stopIfEnoughMatches`. Run the queries one by one, stopping as soon as a query matches at least the `hitsPerPage` number of results.\n"
      },
      "searchForFacetValuesResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "facetHits",
          "exhaustiveFacetsCount"
        ],
        "x-discriminator-fields": [
          "facetHits"
        ],
        "properties": {
          "facetHits": {
            "type": "array",
            "description": "Matching facet values.",
            "items": {
              "title": "facetHits",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "value",
                "highlighted",
                "count"
              ],
              "properties": {
                "value": {
                  "description": "Facet value.",
                  "example": "Mobile phone",
                  "type": "string"
                },
                "highlighted": {
                  "$ref": "#/components/schemas/highlightedValue"
                },
                "count": {
                  "description": "Number of records with this facet value. [The count may be approximated](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).",
                  "type": "integer"
                }
              }
            }
          },
          "exhaustiveFacetsCount": {
            "type": "boolean",
            "description": "Whether the facet count is exhaustive (true) or approximate (false).\nFor more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).\n"
          },
          "processingTimeMS": {
            "$ref": "#/components/schemas/processingTimeMS"
          }
        }
      },
      "searchResult": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchResponse"
          },
          {
            "$ref": "#/components/schemas/searchForFacetValuesResponse"
          }
        ]
      },
      "cursor": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cursor": {
            "type": "string",
            "description": "Cursor to get the next page of the response.\n\nThe parameter must match the value returned in the response of a previous request.\nThe last page of the response does not return a `cursor` attribute.\n",
            "example": "jMDY3M2MwM2QwMWUxMmQwYWI0ZTN"
          }
        }
      },
      "browseParamsObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/searchParamsObject"
          },
          {
            "$ref": "#/components/schemas/cursor"
          }
        ]
      },
      "browseParams": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/searchParamsString"
          },
          {
            "$ref": "#/components/schemas/browseParamsObject"
          }
        ]
      },
      "BrowsePagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "page": {
            "$ref": "#/components/schemas/page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          },
          "hitsPerPage": {
            "$ref": "#/components/schemas/hitsPerPage"
          }
        }
      },
      "browseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchResponse"
          },
          {
            "$ref": "#/components/schemas/BrowsePagination"
          },
          {
            "$ref": "#/components/schemas/searchHits"
          },
          {
            "$ref": "#/components/schemas/cursor"
          }
        ]
      },
      "createdAt": {
        "type": "string",
        "example": "2023-07-04T12:49:15Z",
        "description": "Date and time when the object was created, in RFC 3339 format."
      },
      "taskID": {
        "type": "integer",
        "format": "int64",
        "example": 1514562690001,
        "description": "Unique identifier of a task.\n\nA successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`.\n"
      },
      "deletedAt": {
        "type": "string",
        "example": "2023-06-27T14:42:38.831Z",
        "description": "Date and time when the object was deleted, in RFC 3339 format."
      },
      "updatedAt": {
        "type": "string",
        "example": "2023-07-04T12:49:15Z",
        "description": "Date and time when the object was updated, in RFC 3339 format."
      },
      "deleteByParams": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "facetFilters": {
            "$ref": "#/components/schemas/facetFilters"
          },
          "filters": {
            "$ref": "#/components/schemas/filters"
          },
          "numericFilters": {
            "$ref": "#/components/schemas/numericFilters"
          },
          "tagFilters": {
            "$ref": "#/components/schemas/tagFilters"
          },
          "aroundLatLng": {
            "$ref": "#/components/schemas/aroundLatLng"
          },
          "aroundRadius": {
            "$ref": "#/components/schemas/aroundRadius"
          },
          "insideBoundingBox": {
            "$ref": "#/components/schemas/insideBoundingBox"
          },
          "insidePolygon": {
            "$ref": "#/components/schemas/insidePolygon"
          }
        }
      },
      "updatedAtResponse": {
        "type": "object",
        "description": "Response, taskID, and update timestamp.",
        "additionalProperties": false,
        "required": [
          "taskID",
          "updatedAt"
        ],
        "properties": {
          "taskID": {
            "$ref": "#/components/schemas/taskID"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        }
      },
      "action": {
        "type": "string",
        "enum": [
          "addObject",
          "updateObject",
          "partialUpdateObject",
          "partialUpdateObjectNoCreate",
          "deleteObject",
          "delete",
          "clear"
        ],
        "description": "Type of indexing operation."
      },
      "batchWriteParams": {
        "title": "batchWriteParams",
        "description": "Batch parameters.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "title": "batchRequest",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/action"
                },
                "body": {
                  "type": "object",
                  "description": "Operation arguments (varies with specified `action`).",
                  "example": {
                    "name": "Betty Jane McCamey",
                    "company": "Vita Foods Inc.",
                    "email": "betty@mccamey.com"
                  }
                }
              },
              "required": [
                "action",
                "body"
              ]
            }
          }
        },
        "required": [
          "requests"
        ],
        "example": {
          "requests": [
            {
              "action": "addObject",
              "body": {
                "name": "Betty Jane McCamey",
                "company": "Vita Foods Inc.",
                "email": "betty@mccamey.com"
              }
            },
            {
              "action": "addObject",
              "body": {
                "name": "Gayla geimer",
                "company": "Ortman McCain Co.",
                "email": "gayla@geimer.com"
              }
            }
          ]
        }
      },
      "objectIDs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "record-1",
          "record-2"
        ],
        "description": "Unique record identifiers."
      },
      "batchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "taskID": {
            "$ref": "#/components/schemas/taskID"
          },
          "objectIDs": {
            "$ref": "#/components/schemas/objectIDs"
          }
        },
        "required": [
          "taskID",
          "objectIDs"
        ]
      },
      "baseIndexSettings": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "attributesForFaceting": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "author",
              "filterOnly(isbn)",
              "searchable(edition)",
              "afterDistinct(category)",
              "afterDistinct(searchable(publisher))"
            ],
            "description": "Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).\n\nFacets are attributes that let you categorize search results.\nThey can be used for filtering search results.\nBy default, no attribute is used for faceting.\nAttribute names are case-sensitive.\n\n**Modifiers**\n\n- `filterOnly(\"ATTRIBUTE\")`.\n  Allows the attribute to be used as a filter but doesn't evaluate the facet values.\n\n- `searchable(\"ATTRIBUTE\")`.\n  Allows searching for facet values.\n\n- `afterDistinct(\"ATTRIBUTE\")`.\n  Evaluates the facet count _after_ deduplication with `distinct`.\n  This ensures accurate facet counts.\n  You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`.\n",
            "default": [],
            "x-categories": [
              "Faceting"
            ]
          },
          "replicas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "virtual(prod_products_price_asc)",
              "dev_products_replica"
            ],
            "description": "Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).\n\nReplicas are copies of a primary index with the same records but different settings, synonyms, or rules.\nIf you want to offer a different ranking or sorting of your search results, you'll use replica indices.\nAll index operations on a primary index are automatically forwarded to its replicas.\nTo add a replica index, you must provide the complete set of replicas to this parameter.\nIf you omit a replica from this list, the replica turns into a regular, standalone index that will no longer be synced with the primary index.\n\n**Modifier**\n\n- `virtual(\"REPLICA\")`.\n  Create a virtual replica,\n  Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/).\n",
            "default": [],
            "x-categories": [
              "Ranking"
            ]
          },
          "paginationLimitedTo": {
            "type": "integer",
            "example": 100,
            "description": "Maximum number of search results that can be obtained through pagination.\n\nHigher pagination limits might slow down your search.\nFor pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed.\n",
            "default": 1000,
            "maximum": 20000
          },
          "unretrievableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "total_sales"
            ],
            "description": "Attributes that can't be retrieved at query time.\n\nThis can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/),\nbut don't want to include it in the search results.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Attributes"
            ]
          },
          "disableTypoToleranceOnWords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "wheel",
              "1X2BCD"
            ],
            "description": "Creates a list of [words which require exact matches](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#turn-off-typo-tolerance-for-certain-words).\nThis also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words.\n",
            "default": [],
            "x-categories": [
              "Typos"
            ]
          },
          "attributesToTransliterate": {
            "description": "Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).\n\nTransliteration supports searching in any of the Japanese writing systems.\nTo support transliteration, you must set the indexing language to Japanese.\nAttribute names are case-sensitive.\n",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "name",
              "description"
            ],
            "x-categories": [
              "Languages"
            ]
          },
          "camelCaseAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "description"
            ],
            "description": "Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words.\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "decompoundedAttributes": {
            "type": "object",
            "example": {
              "de": [
                "name"
              ]
            },
            "description": "Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding).\nAttribute names are case-sensitive.\n\nCompound words are formed by combining two or more individual words,\nand are particularly prevalent in Germanic languages—for example, \"firefighter\".\nWith decompounding, the individual components are indexed separately.\n\nYou can specify different lists for different languages.\nDecompounding is supported for these languages:\nDutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`).\nDecompounding doesn't work for words with [non-spacing mark Unicode characters](https://www.charactercodes.net/category/non-spacing_mark).\nFor example, `Gartenstühle` won't be decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).\n",
            "default": {},
            "x-categories": [
              "Languages"
            ]
          },
          "indexLanguages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportedLanguage"
            },
            "example": [
              "ja"
            ],
            "description": "Languages for language-specific processing steps, such as word detection and dictionary settings.\n\n**You should always specify an indexing language.**\nIf you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),\nor the languages you specified with the `ignorePlurals` or `removeStopWords` parameters.\nThis can lead to unexpected search results.\nFor more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).\n",
            "default": [],
            "x-categories": [
              "Languages"
            ]
          },
          "disablePrefixOnAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "sku"
            ],
            "description": "Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).\nAttribute names are case-sensitive.\n",
            "default": [],
            "x-categories": [
              "Query strategy"
            ]
          },
          "allowCompressionOfIntegerArray": {
            "type": "boolean",
            "description": "Whether arrays with exclusively non-negative integers should be compressed for better performance.\nIf true, the compressed arrays may be reordered.\n",
            "default": false,
            "x-categories": [
              "Performance"
            ]
          },
          "numericAttributesForFiltering": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).\nAttribute names are case-sensitive.\n\nBy default, all numeric attributes are available as numerical filters.\nFor faster indexing, reduce the number of numeric attributes.\n\nTo turn off filtering for all numeric attributes, specify an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.\n\n**Modifier**\n\n- `equalOnly(\"ATTRIBUTE\")`.\n  Support only filtering based on equality comparisons `=` and `!=`.\n",
            "example": [
              "equalOnly(quantity)",
              "popularity"
            ],
            "default": [],
            "x-categories": [
              "Performance"
            ]
          },
          "separatorsToIndex": {
            "type": "string",
            "example": "+#",
            "description": "Control which non-alphanumeric characters are indexed.\n\nBy default, Algolia ignores [non-alphanumeric characters](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/#handling-non-alphanumeric-characters) like hyphen (`-`), plus (`+`), and parentheses (`(`,`)`).\nTo include such characters, define them with `separatorsToIndex`.\n\nSeparators are all non-letter characters except spaces and currency characters, such as $€£¥.\n\nWith `separatorsToIndex`, Algolia treats separator characters as separate words.\nFor example, in a search for \"Disney+\", Algolia considers \"Disney\" and \"+\" as two separate words.\n",
            "default": "",
            "x-categories": [
              "Typos"
            ]
          },
          "searchableAttributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "title,alternative_title",
              "author",
              "unordered(text)",
              "emails.personal"
            ],
            "description": "Attributes used for searching. Attribute names are case-sensitive.\n\nBy default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off.\nWith a non-empty list, Algolia only returns results with matches in the selected attributes.\nIn addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first.\nTo make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`.\nAttributes with the same priority are always unordered.\n\nFor more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).\n\n**Modifier**\n\n- `unordered(\"ATTRIBUTE\")`.\n  Ignore the position of a match within the attribute.\n\nWithout a modifier, matches at the beginning of an attribute rank higher than matches at the end.\n",
            "default": [],
            "x-categories": [
              "Attributes"
            ]
          },
          "userData": {
            "$ref": "#/components/schemas/userData"
          },
          "customNormalization": {
            "description": "Characters and their normalized replacements.\nThis overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).\n",
            "type": "object",
            "example": {
              "default": {
                "ä": "ae",
                "ü": "ue"
              }
            },
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "x-categories": [
              "Languages"
            ]
          },
          "attributeForDistinct": {
            "description": "Attribute that should be used to establish groups of results.\nAttribute names are case-sensitive.\n\nAll records with the same value for this attribute are considered a group.\nYou can combine `attributeForDistinct` with the `distinct` search parameter to control\nhow many items per group are included in the search results.\n\nIf you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting.\nThis applies faceting _after_ deduplication, which will result in accurate facet counts.\n",
            "example": "url",
            "type": "string"
          },
          "maxFacetHits": {
            "$ref": "#/components/schemas/maxFacetHits"
          },
          "keepDiacriticsOnCharacters": {
            "type": "string",
            "example": "øé",
            "description": "Characters for which diacritics should be preserved.\n\nBy default, Algolia removes diacritics from letters.\nFor example, `é` becomes `e`. If this causes issues in your search,\nyou can specify characters that should keep their diacritics.\n",
            "default": "",
            "x-categories": [
              "Languages"
            ]
          },
          "customRanking": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "desc(popularity)",
              "asc(price)"
            ],
            "description": "Attributes to use as [custom ranking](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/).\nAttribute names are case-sensitive.\n\nThe custom ranking attributes decide which items are shown first if the other ranking criteria are equal.\n\nRecords with missing values for your selected custom ranking attributes are always sorted last.\nBoolean attributes are sorted based on their alphabetical order.\n\n**Modifiers**\n\n- `asc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in ascending order.\n\n- `desc(\"ATTRIBUTE\")`.\n  Sort the index by the values of an attribute, in descending order.\n\nIf you use two or more custom ranking attributes,\n[reduce the precision](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/how-to/controlling-custom-ranking-metrics-precision/) of your first attributes,\nor the other attributes will never be applied.\n",
            "default": [],
            "x-categories": [
              "Ranking"
            ]
          }
        }
      },
      "indexSettings": {
        "description": "Index settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/baseIndexSettings"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          }
        ]
      },
      "WithPrimary": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "primary": {
            "type": "string",
            "description": "Replica indices only: the name of the primary index for this replica.\n"
          }
        }
      },
      "settingsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/indexSettings"
          },
          {
            "$ref": "#/components/schemas/WithPrimary"
          }
        ]
      },
      "SynonymType": {
        "type": "string",
        "description": "Synonym type.",
        "example": "onewaysynonym",
        "enum": [
          "synonym",
          "onewaysynonym",
          "altcorrection1",
          "altcorrection2",
          "placeholder",
          "oneWaySynonym",
          "altCorrection1",
          "altCorrection2"
        ]
      },
      "synonymHit": {
        "type": "object",
        "description": "Synonym object.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "type": "string",
            "description": "Unique identifier of a synonym object.",
            "example": "synonymID"
          },
          "type": {
            "$ref": "#/components/schemas/SynonymType"
          },
          "synonyms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Words or phrases considered equivalent.",
            "example": [
              "vehicle",
              "auto"
            ]
          },
          "input": {
            "type": "string",
            "description": "Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).",
            "example": "car"
          },
          "word": {
            "type": "string",
            "description": "Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).",
            "example": "car"
          },
          "corrections": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Words to be matched in records.",
            "example": [
              "vehicle",
              "auto"
            ]
          },
          "placeholder": {
            "type": "string",
            "description": "[Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records.\n",
            "example": "<Street>"
          },
          "replacements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).",
            "example": [
              "street",
              "st"
            ]
          }
        },
        "required": [
          "objectID",
          "type"
        ]
      },
      "id": {
        "type": "string",
        "example": "12",
        "description": "Unique identifier of a synonym object."
      },
      "synonymHits": {
        "type": "array",
        "description": "Matching synonyms.",
        "items": {
          "$ref": "#/components/schemas/synonymHit"
        }
      },
      "searchSynonymsResponse": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "hits": {
            "$ref": "#/components/schemas/synonymHits"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          }
        },
        "required": [
          "hits",
          "nbHits"
        ]
      },
      "keyString": {
        "type": "string",
        "description": "API key.",
        "example": "13ad45b4d0a2f6ea65ecbddf6aa260f2"
      },
      "createdAtTimestamp": {
        "type": "integer",
        "format": "int64",
        "example": 1656345570000,
        "description": "Timestamp when the object was created, in milliseconds since the Unix epoch."
      },
      "baseGetApiKeyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "value": {
            "$ref": "#/components/schemas/keyString"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAtTimestamp"
          }
        },
        "required": [
          "value",
          "createdAt"
        ]
      },
      "acl": {
        "description": "Access control list permissions.",
        "type": "string",
        "enum": [
          "addObject",
          "analytics",
          "browse",
          "deleteObject",
          "deleteIndex",
          "editSettings",
          "inference",
          "listIndexes",
          "logs",
          "personalization",
          "recommendation",
          "search",
          "seeUnretrievableAttributes",
          "settings",
          "usage"
        ]
      },
      "apiKey": {
        "type": "object",
        "description": "API key object.",
        "additionalProperties": false,
        "properties": {
          "acl": {
            "type": "array",
            "description": "Permissions that determine the type of API requests this key can make.\nThe required ACL is listed in each endpoint's reference.\nFor more information, see [access control list](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).\n",
            "example": [
              "search",
              "addObject"
            ],
            "default": [],
            "items": {
              "$ref": "#/components/schemas/acl"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of an API key to help you identify this API key.",
            "example": "Used for indexing by the CLI",
            "default": ""
          },
          "indexes": {
            "type": "array",
            "description": "Index names or patterns that this API key can access.\nBy default, an API key can access all indices in the same application.\n\nYou can use leading and trailing wildcard characters (`*`):\n\n- `dev_*` matches all indices starting with \"dev_\".\n- `*_dev` matches all indices ending with \"_dev\".\n- `*_products_*` matches all indices containing \"_products_\".\n",
            "example": [
              "dev_*",
              "prod_en_products"
            ],
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "maxHitsPerQuery": {
            "type": "integer",
            "description": "Maximum number of results this API key can retrieve in one query.\nBy default, there's no limit.\n",
            "default": 0
          },
          "maxQueriesPerIPPerHour": {
            "type": "integer",
            "description": "Maximum number of API requests allowed per IP address or [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/) per hour.\n\nIf this limit is reached, the API returns an error with status code `429`.\nBy default, there's no limit.\n",
            "default": 0
          },
          "queryParameters": {
            "type": "string",
            "description": "Query parameters to add when making API requests with this API key.\n\nTo restrict this API key to specific IP addresses, add the `restrictSources` parameter.\nYou can only add a single source, but you can provide a range of IP addresses.\n\nCreating an API key fails if the request is made from an IP address outside the restricted range.\n",
            "example": "typoTolerance=strict&restrictSources=192.168.1.0/24",
            "default": ""
          },
          "referers": {
            "type": "array",
            "description": "Allowed HTTP referrers for this API key.\n\nBy default, all referrers are allowed.\nYou can use leading and trailing wildcard characters (`*`):\n\n- `https://algolia.com/*` allows all referrers starting with \"https://algolia.com/\"\n- `*.algolia.com` allows all referrers ending with \".algolia.com\"\n- `*algolia.com*` allows all referrers in the domain \"algolia.com\".\n\nLike all HTTP headers, referrers can be spoofed. Don't rely on them to secure your data.\nFor more information, see [HTTP referrer restrictions](https://www.algolia.com/doc/guides/security/security-best-practices/#http-referrers-restrictions).\n",
            "example": [
              "*algolia.com*"
            ],
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "validity": {
            "type": "integer",
            "description": "Duration (in seconds) after which the API key expires.\nBy default, API keys don't expire.\n",
            "example": 86400,
            "default": 0
          }
        },
        "required": [
          "acl"
        ]
      },
      "getApiKeyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseGetApiKeyResponse"
          },
          {
            "$ref": "#/components/schemas/apiKey"
          }
        ]
      },
      "addApiKeyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "key": {
            "$ref": "#/components/schemas/keyString"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          }
        },
        "required": [
          "key",
          "createdAt"
        ]
      },
      "ruleID": {
        "title": "objectID",
        "type": "string",
        "description": "Unique identifier of a rule object."
      },
      "anchoring": {
        "type": "string",
        "description": "Which part of the search query the pattern should match:\n\n- `startsWith`. The pattern must match the beginning of the query.\n- `endsWith`. The pattern must match the end of the query.\n- `is`. The pattern must match the query exactly.\n- `contains`. The pattern must match anywhere in the query.\n\nEmpty queries are only allowed as patterns with `anchoring: is`.\n",
        "enum": [
          "is",
          "startsWith",
          "endsWith",
          "contains"
        ]
      },
      "context": {
        "type": "string",
        "pattern": "[A-Za-z0-9_-]+",
        "description": "An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts` parameter.\nFor example, if `context: mobile`, the rule is only triggered when the search request has a matching `ruleContexts: mobile`.\nA rule context must only contain alphanumeric characters.\n",
        "example": "mobile"
      },
      "condition": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "pattern": {
            "type": "string",
            "description": "Query pattern that triggers the rule.\n\nYou can use either a literal string, or a special pattern `{facet:ATTRIBUTE}`, where `ATTRIBUTE` is a facet name.\nThe rule is triggered if the query matches the literal string or a value of the specified facet.\nFor example, with `pattern: {facet:genre}`, the rule is triggered when users search for a genre, such as \"comedy\".\n",
            "example": "{facet:genre}"
          },
          "anchoring": {
            "$ref": "#/components/schemas/anchoring"
          },
          "alternatives": {
            "type": "boolean",
            "description": "Whether the pattern should match plurals, synonyms, and typos.",
            "default": false
          },
          "context": {
            "$ref": "#/components/schemas/context"
          },
          "filters": {
            "type": "string",
            "description": "Filters that trigger the rule.\n\nYou can add filters using the syntax `facet:value` so that the rule is triggered, when the specific filter is selected.\nYou can use `filters` on its own or combine it with the `pattern` parameter.\nYou can't combine multiple filters with `OR` and you can't use numeric filters.\n",
            "example": "genre:comedy"
          }
        }
      },
      "editType": {
        "description": "Type of edit.",
        "type": "string",
        "enum": [
          "remove",
          "replace"
        ]
      },
      "edit": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "$ref": "#/components/schemas/editType"
          },
          "delete": {
            "description": "Text or patterns to remove from the query string.",
            "type": "string"
          },
          "insert": {
            "description": "Text to be added in place of the deleted text inside the query string.",
            "type": "string"
          }
        }
      },
      "consequenceQueryObject": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "remove": {
            "description": "Words to remove from the search query.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "edits": {
            "description": "Changes to make to the search query.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/edit"
            }
          }
        }
      },
      "consequenceQuery": {
        "description": "Replace or edit the search query.\n\nIf `consequenceQuery` is a string, the entire search query is replaced with that string.\nIf `consequenceQuery` is an object, it describes incremental edits made to the query.\n",
        "oneOf": [
          {
            "$ref": "#/components/schemas/consequenceQueryObject"
          },
          {
            "type": "string"
          }
        ]
      },
      "automaticFacetFilter": {
        "type": "object",
        "description": "Filter or optional filter to be applied to the search.",
        "additionalProperties": false,
        "properties": {
          "facet": {
            "type": "string",
            "description": "Facet name to be applied as filter.\nThe name must match placeholders in the `pattern` parameter.\nFor example, with `pattern: {facet:genre}`, `automaticFacetFilters` must be `genre`.\n"
          },
          "score": {
            "type": "integer",
            "default": 1,
            "description": "Filter scores to give different weights to individual filters."
          },
          "disjunctive": {
            "type": "boolean",
            "default": false,
            "description": "Whether the filter is disjunctive or conjunctive.\n\nIf true the filter has multiple matches, multiple occurences are combined with the logical `OR` operation.\nIf false, multiple occurences are combined with the logical `AND` operation.\n"
          }
        },
        "required": [
          "facet"
        ]
      },
      "automaticFacetFilters": {
        "description": "Filter to be applied to the search.\n\nYou can use this to respond to search queries that match a facet value.\nFor example, if users search for \"comedy\", which matches a facet value of the \"genre\" facet,\nyou can filter the results to show the top-ranked comedy movies.\n",
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/automaticFacetFilter"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "params": {
        "type": "object",
        "description": "Parameters to apply to this search.\n\nYou can use all search parameters, plus special `automaticFacetFilters`, `automaticOptionalFacetFilters`, and `query`.\n",
        "additionalProperties": false,
        "properties": {
          "query": {
            "$ref": "#/components/schemas/consequenceQuery"
          },
          "automaticFacetFilters": {
            "$ref": "#/components/schemas/automaticFacetFilters"
          },
          "automaticOptionalFacetFilters": {
            "$ref": "#/components/schemas/automaticFacetFilters"
          },
          "renderingContent": {
            "$ref": "#/components/schemas/renderingContent"
          }
        }
      },
      "consequenceParams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSearchParamsWithoutQuery"
          },
          {
            "$ref": "#/components/schemas/indexSettingsAsSearchParams"
          },
          {
            "$ref": "#/components/schemas/params"
          }
        ]
      },
      "promotePosition": {
        "type": "integer",
        "description": "Position in the search results where you want to show the promoted records.",
        "example": 0
      },
      "promoteObjectIDs": {
        "title": "objectIDs",
        "description": "Records to promote.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectIDs": {
            "type": "array",
            "maxItems": 100,
            "description": "Object IDs of the records you want to promote.\n\nThe records are placed as a group at the `position`.\nFor example, if you want to promote four records to position `0`,\nthey will be the first four search results.\n",
            "items": {
              "$ref": "#/components/schemas/objectID"
            }
          },
          "position": {
            "$ref": "#/components/schemas/promotePosition"
          }
        },
        "required": [
          "position",
          "objectIDs"
        ],
        "x-discriminator-fields": [
          "objectIDs"
        ]
      },
      "promoteObjectID": {
        "title": "objectID",
        "description": "Record to promote.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/objectID"
          },
          "position": {
            "$ref": "#/components/schemas/promotePosition"
          }
        },
        "required": [
          "position",
          "objectID"
        ],
        "x-discriminator-fields": [
          "objectID"
        ]
      },
      "promote": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/promoteObjectIDs"
          },
          {
            "$ref": "#/components/schemas/promoteObjectID"
          }
        ]
      },
      "consequence": {
        "type": "object",
        "description": "Effect of the rule.\n\nFor more information, see [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences).\n",
        "additionalProperties": false,
        "properties": {
          "params": {
            "$ref": "#/components/schemas/consequenceParams"
          },
          "promote": {
            "type": "array",
            "maxItems": 300,
            "description": "Records you want to pin to a specific position in the search results.\n\nYou can promote up to 300 records, either individually, or as groups of up to 100 records each.\n",
            "items": {
              "$ref": "#/components/schemas/promote"
            }
          },
          "filterPromotes": {
            "type": "boolean",
            "default": false,
            "description": "Whether promoted records must match an active filter for the consequence to be applied.\n\nThis ensures that user actions (filtering the search) are given a higher precendence.\nFor example, if you promote a record with the `color: red` attribute, and the user filters the search for `color: blue`,\nthe \"red\" record won't be shown.\n"
          },
          "hide": {
            "type": "array",
            "maxItems": 50,
            "description": "Records you want to hide from the search results.",
            "items": {
              "title": "consequenceHide",
              "type": "object",
              "description": "Object ID of the record to hide.",
              "additionalProperties": false,
              "properties": {
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              },
              "required": [
                "objectID"
              ]
            }
          },
          "userData": {
            "type": "object",
            "description": "A JSON object with custom data that will be appended to the `userData` array in the response.\nThis object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON.\n",
            "example": {
              "settingID": "f2a7b51e3503acc6a39b3784ffb84300",
              "pluginVersion": "1.6.0"
            }
          }
        }
      },
      "timeRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should start to be active, in Unix epoch time."
          },
          "until": {
            "type": "integer",
            "format": "int64",
            "description": "When the rule should stop to be active, in Unix epoch time."
          }
        },
        "required": [
          "from",
          "until"
        ]
      },
      "rule": {
        "type": "object",
        "description": "Rule object.",
        "additionalProperties": false,
        "properties": {
          "objectID": {
            "$ref": "#/components/schemas/ruleID"
          },
          "conditions": {
            "type": "array",
            "minItems": 0,
            "maxItems": 25,
            "description": "Conditions that trigger a rule.\n\nSome consequences require specific conditions or don't require any condition.\nFor more information, see [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions).\n",
            "items": {
              "$ref": "#/components/schemas/condition"
            }
          },
          "consequence": {
            "$ref": "#/components/schemas/consequence"
          },
          "description": {
            "type": "string",
            "description": "Description of the rule's purpose to help you distinguish between different rules.",
            "example": "Display a promotional banner"
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the rule is active."
          },
          "validity": {
            "type": "array",
            "description": "Time periods when the rule is active.",
            "items": {
              "$ref": "#/components/schemas/timeRange"
            }
          }
        },
        "required": [
          "objectID",
          "consequence"
        ]
      },
      "parameters_query": {
        "type": "string",
        "description": "Search query for rules.",
        "default": ""
      },
      "parameters_page": {
        "type": "integer",
        "minimum": 0,
        "description": "Requested page of the API response.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "parameters_hitsPerPage": {
        "type": "integer",
        "default": 20,
        "minimum": 1,
        "maximum": 1000,
        "description": "Maximum number of hits per page.\n\nAlgolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).\n\n- `hitsPerPage`: sets the number of search results (_hits_) displayed per page.\n- `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.\n\nFor example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.\n"
      },
      "dictionaryType": {
        "type": "string",
        "enum": [
          "plurals",
          "stopwords",
          "compounds"
        ]
      },
      "dictionaryAction": {
        "type": "string",
        "enum": [
          "addEntry",
          "deleteEntry"
        ],
        "description": "Actions to perform."
      },
      "dictionaryEntryState": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ],
        "default": "enabled",
        "description": "Whether a dictionary entry is active."
      },
      "dictionaryEntryType": {
        "type": "string",
        "enum": [
          "custom",
          "standard"
        ],
        "description": "Whether a dictionary entry is provided by Algolia (standard), or has been added by you (custom)."
      },
      "dictionaryEntry": {
        "type": "object",
        "description": "Dictionary entry.",
        "additionalProperties": true,
        "required": [
          "objectID"
        ],
        "properties": {
          "objectID": {
            "type": "string",
            "description": "Unique identifier for the dictionary entry.",
            "example": "828afd405e1f4fe950b6b98c2c43c032"
          },
          "language": {
            "$ref": "#/components/schemas/supportedLanguage"
          },
          "word": {
            "type": "string",
            "description": "Matching dictionary word for `stopwords` and `compounds` dictionaries.",
            "example": "the"
          },
          "words": {
            "type": "array",
            "description": "Matching words in the `plurals` dictionary including declensions.",
            "example": [
              "cheval",
              "cheveaux"
            ],
            "items": {
              "type": "string"
            }
          },
          "decomposition": {
            "type": "array",
            "description": "Invividual components of a compound word in the `compounds` dictionary.",
            "example": [
              "kopf",
              "schmerz",
              "tablette"
            ],
            "items": {
              "type": "string"
            }
          },
          "state": {
            "$ref": "#/components/schemas/dictionaryEntryState"
          },
          "type": {
            "$ref": "#/components/schemas/dictionaryEntryType"
          }
        }
      },
      "searchDictionaryEntriesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "hits": {
            "type": "array",
            "description": "Dictionary entries matching the search criteria.",
            "items": {
              "$ref": "#/components/schemas/dictionaryEntry"
            }
          },
          "page": {
            "$ref": "#/components/schemas/parameters_page"
          },
          "nbHits": {
            "$ref": "#/components/schemas/nbHits"
          },
          "nbPages": {
            "$ref": "#/components/schemas/nbPages"
          }
        },
        "required": [
          "hits",
          "page",
          "nbHits",
          "nbPages"
        ]
      },
      "standardEntry": {
        "oneOf": [
          {
            "type": "object",
            "description": "Key-value pair of a language ISO code and a boolean value.",
            "example": {
              "fr": false
            },
            "additionalProperties": {
              "x-additionalPropertiesName": "language",
              "type": "boolean"
            }
          },
          {
            "type": "null"
          }
        ]
      },
      "standardEntries": {
        "type": "object",
        "description": "Key-value pairs of [supported language ISO codes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and boolean values.\n",
        "additionalProperties": false,
        "properties": {
          "plurals": {
            "$ref": "#/components/schemas/standardEntry"
          },
          "stopwords": {
            "$ref": "#/components/schemas/standardEntry"
          },
          "compounds": {
            "$ref": "#/components/schemas/standardEntry"
          }
        }
      },
      "dictionaryLanguage": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "description": "Dictionary type. If `null`, this dictionary type isn't supported for the language.",
            "properties": {
              "nbCustomEntries": {
                "description": "Number of custom dictionary entries.",
                "type": "integer"
              }
            }
          },
          {
            "type": "null"
          }
        ]
      },
      "languages": {
        "type": "object",
        "description": "Dictionary language.",
        "additionalProperties": false,
        "required": [
          "plurals",
          "stopwords",
          "compounds"
        ],
        "properties": {
          "plurals": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          },
          "stopwords": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          },
          "compounds": {
            "$ref": "#/components/schemas/dictionaryLanguage"
          }
        }
      },
      "userID": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9 \\-*.]+$",
        "description": "Unique identifier of the user who makes the search request.",
        "example": "user1"
      },
      "userId": {
        "title": "userID",
        "type": "object",
        "description": "Unique user ID.",
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/userID"
          },
          "clusterName": {
            "type": "string",
            "description": "Cluster to which the user is assigned.",
            "example": "c1-test"
          },
          "nbRecords": {
            "type": "integer",
            "description": "Number of records belonging to the user.",
            "example": 42
          },
          "dataSize": {
            "type": "integer",
            "description": "Data size used by the user.",
            "example": 0
          }
        },
        "required": [
          "userID",
          "clusterName",
          "nbRecords",
          "dataSize"
        ]
      },
      "clusterName": {
        "type": "string",
        "description": "Cluster name.",
        "example": "c11-test"
      },
      "nbRecords": {
        "type": "integer",
        "description": "Number of records in the cluster.",
        "example": 3
      },
      "dataSize": {
        "type": "integer",
        "description": "Data size taken by all the users assigned to the cluster.",
        "example": 481
      },
      "source": {
        "type": "object",
        "description": "Source.",
        "required": [
          "source"
        ],
        "properties": {
          "source": {
            "description": "IP address range of the source.",
            "type": "string",
            "example": "10.0.0.1/32"
          },
          "description": {
            "description": "Source description.",
            "type": "string",
            "example": "Server subnet"
          }
        }
      },
      "sources": {
        "description": "Sources.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/source"
        }
      },
      "logType": {
        "type": "string",
        "enum": [
          "all",
          "query",
          "build",
          "error"
        ],
        "default": "all"
      },
      "taskStatus": {
        "type": "string",
        "enum": [
          "published",
          "notPublished"
        ],
        "description": "Task status, `published` if the task is completed, `notPublished` otherwise."
      },
      "GetTaskResponse": {
        "title": "getTaskResponse",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/taskStatus"
          }
        },
        "required": [
          "status"
        ]
      },
      "operationType": {
        "type": "string",
        "enum": [
          "move",
          "copy"
        ],
        "example": "copy",
        "description": "Operation to perform on the index."
      },
      "scopeType": {
        "type": "string",
        "enum": [
          "settings",
          "synonyms",
          "rules"
        ]
      },
      "fetchedIndex": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Index name.",
            "example": "movies"
          },
          "createdAt": {
            "type": "string",
            "description": "Index creation date. An empty string means that the index has no records.",
            "example": "2022-09-19T16:36:44.471Z"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "entries": {
            "type": "integer",
            "description": "Number of records contained in the index.",
            "example": 100
          },
          "dataSize": {
            "type": "integer",
            "format": "int64",
            "description": "Number of bytes of the index in minified format.",
            "example": 48450
          },
          "fileSize": {
            "type": "integer",
            "format": "int64",
            "description": "Number of bytes of the index binary file.",
            "example": 112927
          },
          "lastBuildTimeS": {
            "type": "integer",
            "description": "Last build time.",
            "example": 3
          },
          "numberOfPendingTasks": {
            "type": "integer",
            "default": 0,
            "description": "Number of pending indexing operations. This value is deprecated and should not be used."
          },
          "pendingTask": {
            "type": "boolean",
            "default": false,
            "description": "A boolean which says whether the index has pending tasks. This value is deprecated and should not be used."
          },
          "primary": {
            "type": "string",
            "description": "Only present if the index is a replica. Contains the name of the related primary index.",
            "example": "T02"
          },
          "replicas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Only present if the index is a primary index with replicas. Contains the names of all linked replicas.",
            "example": [
              "T02_push",
              "T2replica"
            ]
          },
          "virtual": {
            "type": "boolean",
            "description": "Only present if the index is a [virtual replica](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/how-to/sort-an-index-alphabetically/#virtual-replicas).",
            "x-categories": [
              "Ranking"
            ]
          }
        },
        "required": [
          "name",
          "createdAt",
          "updatedAt",
          "entries",
          "dataSize",
          "fileSize",
          "lastBuildTimeS",
          "pendingTask",
          "numberOfPendingTasks"
        ]
      },
      "listIndicesResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "description": "All indices in your Algolia application.",
            "items": {
              "$ref": "#/components/schemas/fetchedIndex"
            }
          },
          "nbPages": {
            "type": "integer",
            "description": "Number of pages.",
            "example": 100
          }
        },
        "required": [
          "items"
        ]
      },
      "apiKeyOperation": {
        "type": "string",
        "enum": [
          "add",
          "delete",
          "update"
        ]
      },
      "securedApiKeyRestrictions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "searchParams": {
            "$ref": "#/components/schemas/searchParamsObject"
          },
          "filters": {
            "type": "string",
            "description": "Filters that apply to every search made with the secured API key.\nExtra filters added at search time will be combined with `AND`.\nFor example, if you set `group:admin` as fixed filter on your generated API key,\nand add `groups:visitors` to the search query, the complete set of filters will be `group:admin AND groups:visitors`.\n"
          },
          "validUntil": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp when the secured API key expires, measured in seconds since the Unix epoch."
          },
          "restrictIndices": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Index names or patterns that this API key can access.\nBy default, an API key can access all indices in the same application.\n\nYou can use leading and trailing wildcard characters (`*`):\n\n- `dev_*` matches all indices starting with \"dev_\".\n- `*_dev` matches all indices ending with \"_dev\".\n- `*_products_*` matches all indices containing \"_products_\".\n"
          },
          "restrictSources": {
            "type": "string",
            "description": "IP network that are allowed to use this key.\n\nYou can only add a single source, but you can provide a range of IP addresses.\nUse this to protect against API key leaking and reuse.\n",
            "example": "192.168.1.0/24"
          },
          "userToken": {
            "type": "string",
            "description": "Pseudonymous user identifier to restrict usage of this API key to specific users.\n\nBy default, rate limits are set based on IP addresses. This can be an issue if many users search from the same IP address.\nTo avoid this, add a user token to each generated API key.\n"
          }
        }
      },
      "replaceAllObjectsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "copyOperationResponse": {
            "description": "The response of the `operationIndex` request for the `copy` operation.",
            "$ref": "#/components/schemas/updatedAtResponse"
          },
          "batchResponses": {
            "type": "array",
            "description": "The response of the `batch` request(s).",
            "items": {
              "$ref": "#/components/schemas/batchResponse"
            }
          },
          "moveOperationResponse": {
            "description": "The response of the `operationIndex` request for the `move` operation.",
            "$ref": "#/components/schemas/updatedAtResponse"
          }
        },
        "required": [
          "copyOperationResponse",
          "batchResponses",
          "moveOperationResponse"
        ]
      },
      "RunID": {
        "type": "string",
        "description": "Universally unique identifier (UUID) of a task run.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "EventID": {
        "type": "string",
        "description": "Universally unique identifier (UUID) of an event.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "EventStatus": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "created",
              "started",
              "retried",
              "failed",
              "succeeded",
              "critical"
            ]
          },
          {
            "type": "null"
          }
        ]
      },
      "EventType": {
        "type": "string",
        "enum": [
          "fetch",
          "record",
          "log",
          "transform"
        ]
      },
      "PublishedAt": {
        "type": "string",
        "description": "Date of publish RFC 3339 format."
      },
      "Event": {
        "type": "object",
        "description": "An event describe a step of the task execution flow..",
        "additionalProperties": false,
        "properties": {
          "eventID": {
            "$ref": "#/components/schemas/EventID"
          },
          "runID": {
            "$ref": "#/components/schemas/RunID"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "batchSize": {
            "type": "integer",
            "description": "The extracted record batch size.",
            "example": 10,
            "minimum": 0,
            "multipleOf": 1
          },
          "data": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "null"
              }
            ]
          },
          "publishedAt": {
            "$ref": "#/components/schemas/PublishedAt"
          }
        },
        "required": [
          "eventID",
          "runID",
          "status",
          "type",
          "batchSize",
          "publishedAt"
        ]
      },
      "CreatedAt": {
        "type": "string",
        "description": "Date of creation in RFC 3339 format."
      },
      "WatchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "runID": {
            "$ref": "#/components/schemas/RunID"
          },
          "eventID": {
            "$ref": "#/components/schemas/EventID"
          },
          "data": {
            "type": "array",
            "description": "This field is always null when used with the Push endpoint.\nWhen used for a source discover or source validate run, it will include the sampled data of the source.\n",
            "items": {
              "type": "object"
            }
          },
          "events": {
            "description": "in case of error, observability events will be added to the response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "message": {
            "description": "a message describing the outcome of the operation that has been ran (push, discover or validate) run.",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          }
        },
        "required": [
          "runID"
        ]
      },
      "builtInOperationType": {
        "type": "string",
        "enum": [
          "Increment",
          "Decrement",
          "Add",
          "Remove",
          "AddUnique",
          "IncrementFrom",
          "IncrementSet"
        ],
        "description": "How to change the attribute."
      },
      "builtInOperationValue": {
        "oneOf": [
          {
            "type": "string",
            "description": "A string to append or remove for the `Add`, `Remove`, and `AddUnique` operations."
          },
          {
            "type": "integer",
            "description": "A number to add, remove, or append, depending on the operation."
          }
        ]
      },
      "builtInOperation": {
        "type": "object",
        "description": "Update to perform on the attribute.",
        "additionalProperties": false,
        "properties": {
          "_operation": {
            "$ref": "#/components/schemas/builtInOperationType"
          },
          "value": {
            "$ref": "#/components/schemas/builtInOperationValue"
          }
        },
        "required": [
          "_operation",
          "value"
        ]
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, anything after \"/1\" must be specified.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "IndexName": {
        "name": "indexName",
        "in": "path",
        "description": "Name of the index on which to perform the operation.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ALGOLIA_INDEX_NAME"
        }
      },
      "ObjectID": {
        "name": "objectID",
        "in": "path",
        "description": "Unique record identifier.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/objectID"
        }
      },
      "ForwardToReplicas": {
        "in": "query",
        "name": "forwardToReplicas",
        "required": false,
        "description": "Whether changes are applied to replica indices.",
        "schema": {
          "type": "boolean"
        }
      },
      "parameters_ObjectID": {
        "name": "objectID",
        "in": "path",
        "description": "Unique identifier of a synonym object.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "synonymID"
        }
      },
      "ReplaceExistingSynonyms": {
        "in": "query",
        "name": "replaceExistingSynonyms",
        "schema": {
          "type": "boolean"
        },
        "description": "Whether to replace all synonyms in the index with the ones sent with this request."
      },
      "KeyString": {
        "in": "path",
        "name": "key",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ALGOLIA_API_KEY"
        },
        "description": "API key."
      },
      "ObjectIDRule": {
        "in": "path",
        "name": "objectID",
        "description": "Unique identifier of a rule object.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ruleID"
        }
      },
      "ClearExistingRules": {
        "in": "query",
        "name": "clearExistingRules",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "Whether existing rules should be deleted before adding this batch."
      },
      "DictionaryName": {
        "in": "path",
        "name": "dictionaryName",
        "description": "Dictionary type in which to search.",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/dictionaryType"
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "description": "Requested page of the API response.\nIf `null`, the API response is not paginated.\n",
        "required": false,
        "schema": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "HitsPerPage": {
        "in": "query",
        "name": "hitsPerPage",
        "description": "Number of hits per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100
        }
      },
      "UserIDInHeader": {
        "name": "X-Algolia-User-ID",
        "description": "Unique identifier of the user who makes the search request.",
        "in": "header",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/userID"
        }
      },
      "UserIDInPath": {
        "name": "userID",
        "description": "Unique identifier of the user who makes the search request.",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/userID"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "DeletedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "deletedAtResponse",
              "description": "Response, taskID, and deletion timestamp.",
              "additionalProperties": false,
              "type": "object",
              "required": [
                "taskID",
                "deletedAt"
              ],
              "properties": {
                "taskID": {
                  "$ref": "#/components/schemas/taskID"
                },
                "deletedAt": {
                  "$ref": "#/components/schemas/deletedAt"
                }
              }
            }
          }
        }
      },
      "UpdatedAtWithObjectId": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "updatedAtWithObjectIdResponse",
              "description": "Response, taskID, unique object identifier, and an update timestamp.",
              "additionalProperties": false,
              "type": "object",
              "properties": {
                "taskID": {
                  "$ref": "#/components/schemas/taskID"
                },
                "updatedAt": {
                  "$ref": "#/components/schemas/updatedAt"
                },
                "objectID": {
                  "$ref": "#/components/schemas/objectID"
                }
              }
            }
          }
        }
      },
      "UpdatedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updatedAtResponse"
            }
          }
        }
      },
      "CreatedAt": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "title": "createdAtResponse",
              "description": "Response and creation timestamp.",
              "additionalProperties": false,
              "type": "object",
              "required": [
                "createdAt"
              ],
              "properties": {
                "createdAt": {
                  "$ref": "#/components/schemas/createdAt"
                }
              }
            }
          }
        }
      },
      "IndexInSameApp": {
        "description": "Indices are in the same application. Use operationIndex instead.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      },
      "IndexAlreadyExists": {
        "description": "Destination index already exists.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorBase"
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Search and indexing",
      "tags": [
        "Indices",
        "Records",
        "Search"
      ]
    },
    {
      "name": "Relevance",
      "tags": [
        "Rules",
        "Synonyms",
        "Dictionaries"
      ]
    },
    {
      "name": "Others",
      "tags": [
        "Api Keys",
        "Clusters",
        "Vaults",
        "Advanced"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "_model_index_settings"
      ]
    }
  ]
}