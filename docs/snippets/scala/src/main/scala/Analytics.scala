// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.methods.snippets

import scala.concurrent.duration.Duration

// >IMPORT
import algoliasearch.api.AnalyticsClient

// IMPORT<
import algoliasearch.analytics.*

import org.json4s.*
import org.json4s.native.JsonParser.*
import scala.concurrent.{Await, ExecutionContextExecutor}

class SnippetAnalyticsClient {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  /** Snippet for the customDelete method.
    *
    * allow del method for a custom path with minimal parameters
    */
  def snippetForAnalyticsClientCustomDelete(): Unit = {
    // >SEPARATOR customDelete default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.customDelete[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customGet method.
    *
    * allow get method for a custom path with minimal parameters
    */
  def snippetForAnalyticsClientCustomGet(): Unit = {
    // >SEPARATOR customGet default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.customGet[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPost method.
    *
    * allow post method for a custom path with minimal parameters
    */
  def snippetForAnalyticsClientCustomPost(): Unit = {
    // >SEPARATOR customPost default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.customPost[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPut method.
    *
    * allow put method for a custom path with minimal parameters
    */
  def snippetForAnalyticsClientCustomPut(): Unit = {
    // >SEPARATOR customPut default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.customPut[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getAddToCartRate method.
    *
    * get getAddToCartRate with minimal parameters
    */
  def snippetForAnalyticsClientGetAddToCartRate(): Unit = {
    // >SEPARATOR getAddToCartRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getAddToCartRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getAverageClickPosition method.
    *
    * get getAverageClickPosition with minimal parameters
    */
  def snippetForAnalyticsClientGetAverageClickPosition(): Unit = {
    // >SEPARATOR getAverageClickPosition default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getAverageClickPosition(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getClickPositions method.
    *
    * get getClickPositions with minimal parameters
    */
  def snippetForAnalyticsClientGetClickPositions(): Unit = {
    // >SEPARATOR getClickPositions default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getClickPositions(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getClickThroughRate method.
    *
    * get getClickThroughRate with minimal parameters
    */
  def snippetForAnalyticsClientGetClickThroughRate(): Unit = {
    // >SEPARATOR getClickThroughRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getClickThroughRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getConversionRate method.
    *
    * get getConversationRate with minimal parameters
    */
  def snippetForAnalyticsClientGetConversionRate(): Unit = {
    // >SEPARATOR getConversionRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getConversionRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getNoClickRate method.
    *
    * get getNoClickRate with minimal parameters
    */
  def snippetForAnalyticsClientGetNoClickRate(): Unit = {
    // >SEPARATOR getNoClickRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getNoClickRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getNoResultsRate method.
    *
    * get getNoResultsRate with minimal parameters
    */
  def snippetForAnalyticsClientGetNoResultsRate(): Unit = {
    // >SEPARATOR getNoResultsRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getNoResultsRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getPurchaseRate method.
    *
    * get getPurchaseRate with minimal parameters
    */
  def snippetForAnalyticsClientGetPurchaseRate(): Unit = {
    // >SEPARATOR getPurchaseRate default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getPurchaseRate(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getRevenue method.
    *
    * get getRevenue with minimal parameters
    */
  def snippetForAnalyticsClientGetRevenue(): Unit = {
    // >SEPARATOR getRevenue default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getRevenue(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSearchesCount method.
    *
    * get getSearchesCount with minimal parameters
    */
  def snippetForAnalyticsClientGetSearchesCount(): Unit = {
    // >SEPARATOR getSearchesCount default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getSearchesCount(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSearchesNoClicks method.
    *
    * get getSearchesNoClicks with minimal parameters
    */
  def snippetForAnalyticsClientGetSearchesNoClicks(): Unit = {
    // >SEPARATOR getSearchesNoClicks default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getSearchesNoClicks(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSearchesNoResults method.
    *
    * get getSearchesNoResults with minimal parameters
    */
  def snippetForAnalyticsClientGetSearchesNoResults(): Unit = {
    // >SEPARATOR getSearchesNoResults default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getSearchesNoResults(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getStatus method.
    *
    * get getStatus with minimal parameters
    */
  def snippetForAnalyticsClientGetStatus(): Unit = {
    // >SEPARATOR getStatus default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getStatus(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopCountries method.
    *
    * get getTopCountries with minimal parameters
    */
  def snippetForAnalyticsClientGetTopCountries(): Unit = {
    // >SEPARATOR getTopCountries default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopCountries(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopFilterAttributes method.
    *
    * get getTopFilterAttributes with minimal parameters
    */
  def snippetForAnalyticsClientGetTopFilterAttributes(): Unit = {
    // >SEPARATOR getTopFilterAttributes default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopFilterAttributes(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopFilterForAttribute method.
    *
    * get getTopFilterForAttribute with minimal parameters
    */
  def snippetForAnalyticsClientGetTopFilterForAttribute(): Unit = {
    // >SEPARATOR getTopFilterForAttribute default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopFilterForAttribute(
      attribute = "myAttribute",
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopFiltersNoResults method.
    *
    * get getTopFiltersNoResults with minimal parameters
    */
  def snippetForAnalyticsClientGetTopFiltersNoResults(): Unit = {
    // >SEPARATOR getTopFiltersNoResults default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopFiltersNoResults(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopHits method.
    *
    * get getTopHits with minimal parameters
    */
  def snippetForAnalyticsClientGetTopHits(): Unit = {
    // >SEPARATOR getTopHits default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopHits(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopSearches method.
    *
    * get getTopSearches with minimal parameters
    */
  def snippetForAnalyticsClientGetTopSearches(): Unit = {
    // >SEPARATOR getTopSearches default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getTopSearches(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getUsersCount method.
    *
    * get getUsersCount with minimal parameters
    */
  def snippetForAnalyticsClientGetUsersCount(): Unit = {
    // >SEPARATOR getUsersCount default
    // Initialize the client
    val client = AnalyticsClient(
      appId = "ALGOLIA_APPLICATION_ID",
      apiKey = "ALGOLIA_API_KEY",
      region = Option("ALGOLIA_APPLICATION_REGION")
    )

    // Call the API
    val response = client.getUsersCount(
      index = "index"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

}
