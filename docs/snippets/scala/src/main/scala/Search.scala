// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.methods.snippets

import scala.concurrent.duration.Duration

// >IMPORT
import algoliasearch.api.SearchClient
import algoliasearch.extension.SearchClientExtensions

// IMPORT<
import algoliasearch.search.*

import org.json4s.*
import org.json4s.native.JsonParser.*
import scala.concurrent.{Await, ExecutionContextExecutor}

class SnippetSearchClient {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  /** Snippet for the addApiKey method.
    *
    * addApiKey
    */
  def snippetForSearchClientAddApiKey(): Unit = {
    // >SEPARATOR addApiKey default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.addApiKey(
      apiKey = ApiKey(
        acl = Seq(Acl.withName("search"), Acl.withName("addObject")),
        description = Some("my new api key"),
        validity = Some(300),
        maxQueriesPerIPPerHour = Some(100),
        maxHitsPerQuery = Some(20)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the addOrUpdateObject method.
    *
    * addOrUpdateObject
    */
  def snippetForSearchClientAddOrUpdateObject(): Unit = {
    // >SEPARATOR addOrUpdateObject default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.addOrUpdateObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      body = JObject(List(JField("key", JString("value"))))
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the appendSource method.
    *
    * appendSource
    */
  def snippetForSearchClientAppendSource(): Unit = {
    // >SEPARATOR appendSource default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.appendSource(
      source = Source(
        source = "theSource",
        description = Some("theDescription")
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the assignUserId method.
    *
    * simple
    */
  def snippetForSearchClientAssignUserId(): Unit = {
    // >SEPARATOR assignUserId default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.assignUserId(
      xAlgoliaUserID = "user42",
      assignUserIdParams = AssignUserIdParams(
        cluster = "d4242-eu"
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * addObject
    */
  def snippetForSearchClientBatch(): Unit = {
    // >SEPARATOR batch addObject
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("addObject"),
            body = JObject(List(JField("key", JString("bar")), JField("foo", JString("1"))))
          ),
          BatchRequest(
            action = Action.withName("addObject"),
            body = JObject(List(JField("key", JString("baz")), JField("foo", JString("2"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * clear
    */
  def snippetForSearchClientBatch1(): Unit = {
    // >SEPARATOR batch clear
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("clear"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * delete
    */
  def snippetForSearchClientBatch2(): Unit = {
    // >SEPARATOR batch delete
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("delete"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * deleteObject
    */
  def snippetForSearchClientBatch3(): Unit = {
    // >SEPARATOR batch deleteObject
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("deleteObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * partialUpdateObject
    */
  def snippetForSearchClientBatch4(): Unit = {
    // >SEPARATOR batch partialUpdateObject
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("partialUpdateObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * partialUpdateObjectNoCreate
    */
  def snippetForSearchClientBatch5(): Unit = {
    // >SEPARATOR batch partialUpdateObjectNoCreate
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("partialUpdateObjectNoCreate"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * updateObject
    */
  def snippetForSearchClientBatch6(): Unit = {
    // >SEPARATOR batch updateObject
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("updateObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchAssignUserIds method.
    *
    * batchAssignUserIds
    */
  def snippetForSearchClientBatchAssignUserIds(): Unit = {
    // >SEPARATOR batchAssignUserIds default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batchAssignUserIds(
      xAlgoliaUserID = "userID",
      batchAssignUserIdsParams = BatchAssignUserIdsParams(
        cluster = "theCluster",
        users = Seq("user1", "user2")
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * replace
    */
  def snippetForSearchClientBatchDictionaryEntries(): Unit = {
    // >SEPARATOR batchDictionaryEntries replace
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("plurals"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = Some(true),
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("addEntry"),
            body = DictionaryEntry(
              objectID = "1",
              language = Some(SupportedLanguage.withName("en")),
              word = Some("fancy"),
              words = Some(Seq("believe", "algolia")),
              decomposition = Some(Seq("trust", "algolia")),
              state = Some(DictionaryEntryState.withName("enabled"))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * delete
    */
  def snippetForSearchClientBatchDictionaryEntries1(): Unit = {
    // >SEPARATOR batchDictionaryEntries delete
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("plurals"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = Some(true),
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("deleteEntry"),
            body = DictionaryEntry(
              objectID = "1"
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * append
    */
  def snippetForSearchClientBatchDictionaryEntries2(): Unit = {
    // >SEPARATOR batchDictionaryEntries append
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("stopwords"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("addEntry"),
            body = DictionaryEntry(
              objectID = "1",
              language = Some(SupportedLanguage.withName("en")),
              additionalProperties = Some(List(JField("additional", JString("try me"))))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the browse method.
    *
    * browse with minimal parameters
    */
  def snippetForSearchClientBrowse(): Unit = {
    // >SEPARATOR browse default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.browse(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearObjects method.
    *
    * clearObjects
    */
  def snippetForSearchClientClearObjects(): Unit = {
    // >SEPARATOR clearObjects default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.clearObjects(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearRules method.
    *
    * clearRules
    */
  def snippetForSearchClientClearRules(): Unit = {
    // >SEPARATOR clearRules default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.clearRules(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearSynonyms method.
    *
    * clearSynonyms
    */
  def snippetForSearchClientClearSynonyms(): Unit = {
    // >SEPARATOR clearSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.clearSynonyms(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customDelete method.
    *
    * allow del method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomDelete(): Unit = {
    // >SEPARATOR customDelete default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.customDelete[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customGet method.
    *
    * allow get method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomGet(): Unit = {
    // >SEPARATOR customGet default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.customGet[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPost method.
    *
    * allow post method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomPost(): Unit = {
    // >SEPARATOR customPost default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.customPost[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPut method.
    *
    * allow put method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomPut(): Unit = {
    // >SEPARATOR customPut default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.customPut[JObject](
      path = "test/minimal"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteApiKey method.
    *
    * deleteApiKey
    */
  def snippetForSearchClientDeleteApiKey(): Unit = {
    // >SEPARATOR deleteApiKey default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteApiKey(
      key = "myTestApiKey"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteBy method.
    *
    * deleteBy
    */
  def snippetForSearchClientDeleteBy(): Unit = {
    // >SEPARATOR deleteBy default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteBy(
      indexName = "<YOUR_INDEX_NAME>",
      deleteByParams = DeleteByParams(
        filters = Some("brand:brandName")
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteIndex method.
    *
    * deleteIndex
    */
  def snippetForSearchClientDeleteIndex(): Unit = {
    // >SEPARATOR deleteIndex default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteIndex(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteObject method.
    *
    * deleteObject
    */
  def snippetForSearchClientDeleteObject(): Unit = {
    // >SEPARATOR deleteObject default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteRule method.
    *
    * delete rule simple case
    */
  def snippetForSearchClientDeleteRule(): Unit = {
    // >SEPARATOR deleteRule default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteSource method.
    *
    * deleteSource
    */
  def snippetForSearchClientDeleteSource(): Unit = {
    // >SEPARATOR deleteSource default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteSource(
      source = "theSource"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteSynonym method.
    *
    * deleteSynonym
    */
  def snippetForSearchClientDeleteSynonym(): Unit = {
    // >SEPARATOR deleteSynonym default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.deleteSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getApiKey method.
    *
    * getApiKey
    */
  def snippetForSearchClientGetApiKey(): Unit = {
    // >SEPARATOR getApiKey default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getApiKey(
      key = "myTestApiKey"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getAppTask method.
    *
    * getAppTask
    */
  def snippetForSearchClientGetAppTask(): Unit = {
    // >SEPARATOR getAppTask default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getAppTask(
      taskID = 123L
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getDictionaryLanguages method.
    *
    * get getDictionaryLanguages
    */
  def snippetForSearchClientGetDictionaryLanguages(): Unit = {
    // >SEPARATOR getDictionaryLanguages default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getDictionaryLanguages(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getDictionarySettings method.
    *
    * get getDictionarySettings results
    */
  def snippetForSearchClientGetDictionarySettings(): Unit = {
    // >SEPARATOR getDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getDictionarySettings(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getLogs method.
    *
    * getLogs with minimal parameters
    */
  def snippetForSearchClientGetLogs(): Unit = {
    // >SEPARATOR getLogs default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getLogs(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getObject method.
    *
    * getObject
    */
  def snippetForSearchClientGetObject(): Unit = {
    // >SEPARATOR getObject default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      attributesToRetrieve = Some(Seq("attr1", "attr2"))
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getObjects method.
    *
    * getObjects
    */
  def snippetForSearchClientGetObjects(): Unit = {
    // >SEPARATOR getObjects default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getObjects(
      getObjectsParams = GetObjectsParams(
        requests = Seq(
          GetObjectsRequest(
            attributesToRetrieve = Some(Seq("attr1", "attr2")),
            objectID = "uniqueID",
            indexName = "<YOUR_INDEX_NAME>"
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getRule method.
    *
    * getRule
    */
  def snippetForSearchClientGetRule(): Unit = {
    // >SEPARATOR getRule default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "qr-1725004648916"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSettings method.
    *
    * getSettings
    */
  def snippetForSearchClientGetSettings(): Unit = {
    // >SEPARATOR getSettings default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getSettings(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSources method.
    *
    * getSources
    */
  def snippetForSearchClientGetSources(): Unit = {
    // >SEPARATOR getSources default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getSources(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSynonym method.
    *
    * getSynonym
    */
  def snippetForSearchClientGetSynonym(): Unit = {
    // >SEPARATOR getSynonym default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTask method.
    *
    * getTask
    */
  def snippetForSearchClientGetTask(): Unit = {
    // >SEPARATOR getTask default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getTask(
      indexName = "<YOUR_INDEX_NAME>",
      taskID = 123L
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopUserIds method.
    *
    * getTopUserIds
    */
  def snippetForSearchClientGetTopUserIds(): Unit = {
    // >SEPARATOR getTopUserIds default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getTopUserIds(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getUserId method.
    *
    * getUserId
    */
  def snippetForSearchClientGetUserId(): Unit = {
    // >SEPARATOR getUserId default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.getUserId(
      userID = "uniqueID"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the hasPendingMappings method.
    *
    * hasPendingMappings with minimal parameters
    */
  def snippetForSearchClientHasPendingMappings(): Unit = {
    // >SEPARATOR hasPendingMappings default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.hasPendingMappings(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listApiKeys method.
    *
    * listApiKeys
    */
  def snippetForSearchClientListApiKeys(): Unit = {
    // >SEPARATOR listApiKeys default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.listApiKeys(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listClusters method.
    *
    * listClusters
    */
  def snippetForSearchClientListClusters(): Unit = {
    // >SEPARATOR listClusters default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.listClusters(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listIndices method.
    *
    * listIndices with minimal parameters
    */
  def snippetForSearchClientListIndices(): Unit = {
    // >SEPARATOR listIndices default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.listIndices(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listUserIds method.
    *
    * listUserIds with minimal parameters
    */
  def snippetForSearchClientListUserIds(): Unit = {
    // >SEPARATOR listUserIds default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.listUserIds(
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the multipleBatch method.
    *
    * multipleBatch
    */
  def snippetForSearchClientMultipleBatch(): Unit = {
    // >SEPARATOR multipleBatch default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.multipleBatch(
      batchParams = BatchParams(
        requests = Seq(
          MultipleBatchRequest(
            action = Action.withName("addObject"),
            body = Some(JObject(List(JField("key", JString("value"))))),
            indexName = "<YOUR_INDEX_NAME>"
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * scopes
    */
  def snippetForSearchClientOperationIndex(): Unit = {
    // >SEPARATOR operationIndex scopes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("move"),
        destination = "<DESTINATION_INDEX_NAME>",
        scope = Some(Seq(ScopeType.withName("rules"), ScopeType.withName("settings")))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * copy
    */
  def snippetForSearchClientOperationIndex1(): Unit = {
    // >SEPARATOR operationIndex copy
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("copy"),
        destination = "<DESTINATION_INDEX_NAME>"
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * move
    */
  def snippetForSearchClientOperationIndex2(): Unit = {
    // >SEPARATOR operationIndex move
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("move"),
        destination = "<DESTINATION_INDEX_NAME>"
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the partialUpdateObject method.
    *
    * Partial update with a new value for an object attribute
    */
  def snippetForSearchClientPartialUpdateObject(): Unit = {
    // >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.partialUpdateObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      attributesToUpdate = JObject(List(JField("attributeId", JObject(List(JField("nested", JString("value")))))))
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the partialUpdateObject method.
    *
    * with visible_by filter
    */
  def snippetForSearchClientPartialUpdateObject1(): Unit = {
    // >SEPARATOR partialUpdateObject with visible_by filter
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.partialUpdateObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      attributesToUpdate = JObject(
        List(
          JField("visible_by", JArray(List(JString("Angela"), JString("group/Finance"), JString("group/Shareholders"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the removeUserId method.
    *
    * removeUserId
    */
  def snippetForSearchClientRemoveUserId(): Unit = {
    // >SEPARATOR removeUserId default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.removeUserId(
      userID = "uniqueID"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the replaceSources method.
    *
    * replaceSources
    */
  def snippetForSearchClientReplaceSources(): Unit = {
    // >SEPARATOR replaceSources default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.replaceSources(
      source = Seq(
        Source(
          source = "theSource",
          description = Some("theDescription")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the restoreApiKey method.
    *
    * restoreApiKey
    */
  def snippetForSearchClientRestoreApiKey(): Unit = {
    // >SEPARATOR restoreApiKey default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.restoreApiKey(
      key = "ALGOLIA_API_KEY"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveObject method.
    *
    * saveObject
    */
  def snippetForSearchClientSaveObject(): Unit = {
    // >SEPARATOR saveObject default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveObject(
      indexName = "<YOUR_INDEX_NAME>",
      body = JObject(List(JField("objectID", JString("id")), JField("test", JString("val"))))
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * b2b catalog
    */
  def snippetForSearchClientSaveRule(): Unit = {
    // >SEPARATOR saveRule b2b catalog
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "article-rule",
      rule = Rule(
        objectID = "article-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("article"),
              anchoring = Some(Anchoring.withName("startsWith"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("article")
                      )
                    )
                  )
                )
              ),
              restrictSearchableAttributes = Some(Seq("title", "book_id"))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * merchandising and promoting
    */
  def snippetForSearchClientSaveRule1(): Unit = {
    // >SEPARATOR saveRule merchandising and promoting
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "director-rule",
      rule = Rule(
        objectID = "director-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("{facet:director} director"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              restrictSearchableAttributes = Some(Seq("title", "book_id")),
              automaticFacetFilters = Some(
                AutomaticFacetFilters(
                  Seq(
                    AutomaticFacetFilter(
                      facet = "director"
                    )
                  )
                )
              ),
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("director")
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * harry potter
    */
  def snippetForSearchClientSaveRule2(): Unit = {
    // >SEPARATOR saveRule harry potter
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "harry-potter-rule",
      rule = Rule(
        objectID = "harry-potter-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("harry potter"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          userData = Some(JObject(List(JField("promo_content", JString("20% OFF on all Harry Potter books!")))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * merchandising empty query
    */
  def snippetForSearchClientSaveRule3(): Unit = {
    // >SEPARATOR saveRule merchandising empty query
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "clearance-category-filter",
      rule = Rule(
        objectID = "clearance-category-filter",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some(""),
              anchoring = Some(Anchoring.withName("is")),
              context = Some("landing")
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              optionalFilters = Some(OptionalFilters("clearance:true"))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * redirect
    */
  def snippetForSearchClientSaveRule4(): Unit = {
    // >SEPARATOR saveRule redirect
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "redirect-help-rule",
      rule = Rule(
        objectID = "redirect-help-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("help"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          userData = Some(JObject(List(JField("redirect", JString("https://www.algolia.com/support")))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * promote some results over others
    */
  def snippetForSearchClientSaveRule5(): Unit = {
    // >SEPARATOR saveRule promote some results over others
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "tomato-fruit",
      rule = Rule(
        objectID = "tomato-fruit",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("tomato"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              optionalFilters = Some(OptionalFilters("food_group:fruit"))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * promote several hits
    */
  def snippetForSearchClientSaveRule6(): Unit = {
    // >SEPARATOR saveRule promote several hits
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "Promote-Apple-Newest",
      rule = Rule(
        objectID = "Promote-Apple-Newest",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("apple"),
              anchoring = Some(Anchoring.withName("is"))
            )
          )
        ),
        consequence = Consequence(
          promote = Some(
            Seq(
              PromoteObjectIDs(
                objectIDs = Seq("iPhone-12345", "watch-123"),
                position = 0
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * promote newest release
    */
  def snippetForSearchClientSaveRule7(): Unit = {
    // >SEPARATOR saveRule promote newest release
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "Promote-iPhone-X",
      rule = Rule(
        objectID = "Promote-iPhone-X",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("iPhone"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          promote = Some(
            Seq(
              PromoteObjectID(
                objectID = "iPhone-12345",
                position = 0
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * promote single item
    */
  def snippetForSearchClientSaveRule8(): Unit = {
    // >SEPARATOR saveRule promote single item
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "promote-harry-potter-box-set",
      rule = Rule(
        objectID = "promote-harry-potter-box-set",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("Harry Potter"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          promote = Some(
            Seq(
              PromoteObjectID(
                objectID = "HP-12345",
                position = 0
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * limit search results
    */
  def snippetForSearchClientSaveRule9(): Unit = {
    // >SEPARATOR saveRule limit search results
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "article-rule",
      rule = Rule(
        objectID = "article-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("article"),
              anchoring = Some(Anchoring.withName("startsWith"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("article")
                      )
                    )
                  )
                )
              ),
              restrictSearchableAttributes = Some(Seq("title", "book_id"))
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * query match
    */
  def snippetForSearchClientSaveRule10(): Unit = {
    // >SEPARATOR saveRule query match
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "tagged-brand-rule",
      rule = Rule(
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("brand: {facet:brand}"),
              anchoring = Some(Anchoring.withName("contains")),
              alternatives = Some(false)
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              automaticFacetFilters = Some(
                AutomaticFacetFilters(
                  Seq(
                    AutomaticFacetFilter(
                      facet = "brand"
                    )
                  )
                )
              ),
              query = Some(
                ConsequenceQueryObject(
                  remove = Some(Seq("brand:", "{facet:brand}"))
                )
              )
            )
          )
        ),
        description = Some("filter on brand: {brand}"),
        objectID = "tagged-brand-rule"
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * dynamic filtering
    */
  def snippetForSearchClientSaveRule11(): Unit = {
    // >SEPARATOR saveRule dynamic filtering
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "color-facets",
      rule = Rule(
        objectID = "color-facets",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("{facet:color}")
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              automaticFacetFilters = Some(
                AutomaticFacetFilters(
                  Seq(
                    AutomaticFacetFilter(
                      facet = "color"
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * hide hits
    */
  def snippetForSearchClientSaveRule12(): Unit = {
    // >SEPARATOR saveRule hide hits
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "hide-12345",
      rule = Rule(
        objectID = "hide-12345",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("cheap"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          hide = Some(
            Seq(
              ConsequenceHide(
                objectID = "to-hide-12345"
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * one rule per facet
    */
  def snippetForSearchClientSaveRule13(): Unit = {
    // >SEPARATOR saveRule one rule per facet
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "red-color",
      rule = Rule(
        objectID = "red-color",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("red"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              query = Some(
                ConsequenceQueryObject(
                  remove = Some(Seq("red"))
                )
              ),
              filters = Some("color:red")
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * numerical filters
    */
  def snippetForSearchClientSaveRule14(): Unit = {
    // >SEPARATOR saveRule numerical filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "cheap",
      rule = Rule(
        objectID = "cheap",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("cheap"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              query = Some(
                ConsequenceQueryObject(
                  remove = Some(Seq("cheap"))
                )
              ),
              filters = Some("price < 10")
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * negative filters
    */
  def snippetForSearchClientSaveRule15(): Unit = {
    // >SEPARATOR saveRule negative filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "gluten-free-rule",
      rule = Rule(
        objectID = "gluten-free-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("gluten-free"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              filters = Some("NOT allergens:gluten"),
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("gluten-free")
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * positive filters
    */
  def snippetForSearchClientSaveRule16(): Unit = {
    // >SEPARATOR saveRule positive filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "diet-rule",
      rule = Rule(
        objectID = "diet-rule",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("diet"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        ),
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              filters = Some("'low-carb' OR 'low-fat'"),
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("diet")
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * conditionless
    */
  def snippetForSearchClientSaveRule17(): Unit = {
    // >SEPARATOR saveRule conditionless
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "diet-rule",
      rule = Rule(
        objectID = "diet-rule",
        consequence = Consequence(
          params = Some(
            ConsequenceParams(
              filters = Some("'low-carb' OR 'low-fat'"),
              query = Some(
                ConsequenceQueryObject(
                  edits = Some(
                    Seq(
                      Edit(
                        `type` = Some(EditType.withName("remove")),
                        delete = Some("diet")
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRules method.
    *
    * saveRules with minimal parameters
    */
  def snippetForSearchClientSaveRules(): Unit = {
    // >SEPARATOR saveRules default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveRules(
      indexName = "<YOUR_INDEX_NAME>",
      rules = Seq(
        Rule(
          objectID = "a-rule-id",
          conditions = Some(
            Seq(
              Condition(
                pattern = Some("smartphone"),
                anchoring = Some(Anchoring.withName("contains"))
              )
            )
          ),
          consequence = Consequence(
            params = Some(
              ConsequenceParams(
                filters = Some("brand:apple")
              )
            )
          )
        ),
        Rule(
          objectID = "a-second-rule-id",
          conditions = Some(
            Seq(
              Condition(
                pattern = Some("apple"),
                anchoring = Some(Anchoring.withName("contains"))
              )
            )
          ),
          consequence = Consequence(
            params = Some(
              ConsequenceParams(
                filters = Some("brand:samsung")
              )
            )
          )
        )
      ),
      forwardToReplicas = Some(false),
      clearExistingRules = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveSynonym method.
    *
    * saveSynonym
    */
  def snippetForSearchClientSaveSynonym(): Unit = {
    // >SEPARATOR saveSynonym default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
      synonymHit = SynonymHit(
        objectID = "id1",
        `type` = SynonymType.withName("synonym"),
        synonyms = Some(Seq("car", "vehicule", "auto"))
      ),
      forwardToReplicas = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveSynonyms method.
    *
    * saveSynonyms
    */
  def snippetForSearchClientSaveSynonyms(): Unit = {
    // >SEPARATOR saveSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.saveSynonyms(
      indexName = "<YOUR_INDEX_NAME>",
      synonymHit = Seq(
        SynonymHit(
          objectID = "id1",
          `type` = SynonymType.withName("synonym"),
          synonyms = Some(Seq("car", "vehicule", "auto"))
        ),
        SynonymHit(
          objectID = "id2",
          `type` = SynonymType.withName("onewaysynonym"),
          input = Some("iphone"),
          synonyms = Some(Seq("ephone", "aphone", "yphone"))
        )
      ),
      forwardToReplicas = Some(true),
      replaceExistingSynonyms = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * withHitsPerPage
    */
  def snippetForSearchClientSearch(): Unit = {
    // >SEPARATOR search withHitsPerPage
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            hitsPerPage = Some(50)
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterOnly
    */
  def snippetForSearchClientSearch1(): Unit = {
    // >SEPARATOR search filterOnly
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("actor:Scarlett Johansson")
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterOr
    */
  def snippetForSearchClientSearch2(): Unit = {
    // >SEPARATOR search filterOr
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("actor:Tom Cruise OR actor:Scarlett Johansson")
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterNot
    */
  def snippetForSearchClientSearch3(): Unit = {
    // >SEPARATOR search filterNot
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("NOT actor:Nicolas Cage")
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * retrieveFacets
    */
  def snippetForSearchClientSearch4(): Unit = {
    // >SEPARATOR search retrieveFacets
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            facets = Some(Seq("author", "genre"))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * retrieveFacetsWildcard
    */
  def snippetForSearchClientSearch5(): Unit = {
    // >SEPARATOR search retrieveFacetsWildcard
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            facets = Some(Seq("*"))
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchDictionaryEntries method.
    *
    * get searchDictionaryEntries results with minimal parameters
    */
  def snippetForSearchClientSearchDictionaryEntries(): Unit = {
    // >SEPARATOR searchDictionaryEntries default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchDictionaryEntries(
      dictionaryName = DictionaryType.withName("stopwords"),
      searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
        query = "about"
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchForFacetValues method.
    *
    * get searchForFacetValues results with minimal parameters
    */
  def snippetForSearchClientSearchForFacetValues(): Unit = {
    // >SEPARATOR searchForFacetValues default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchForFacetValues(
      indexName = "<YOUR_INDEX_NAME>",
      facetName = "facetName"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchRules method.
    *
    * searchRules
    */
  def snippetForSearchClientSearchRules(): Unit = {
    // >SEPARATOR searchRules default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchRules(
      indexName = "<YOUR_INDEX_NAME>",
      searchRulesParams = Some(
        SearchRulesParams(
          query = Some("zorro")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * search with searchParams
    */
  def snippetForSearchClientSearchSingleIndex(): Unit = {
    // >SEPARATOR searchSingleIndex search with searchParams
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          query = Some("myQuery"),
          facetFilters = Some(FacetFilters(Seq(FacetFilters("tags:algolia"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * query
    */
  def snippetForSearchClientSearchSingleIndex1(): Unit = {
    // >SEPARATOR searchSingleIndex query
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          query = Some("phone")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filters
    */
  def snippetForSearchClientSearchSingleIndex2(): Unit = {
    // >SEPARATOR searchSingleIndex filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("country:US AND price.gross < 2.0")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * distinct
    */
  def snippetForSearchClientSearchSingleIndex3(): Unit = {
    // >SEPARATOR searchSingleIndex distinct
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          distinct = Some(Distinct(true))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersNumeric
    */
  def snippetForSearchClientSearchSingleIndex4(): Unit = {
    // >SEPARATOR searchSingleIndex filtersNumeric
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("price < 10")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersTimestamp
    */
  def snippetForSearchClientSearchSingleIndex5(): Unit = {
    // >SEPARATOR searchSingleIndex filtersTimestamp
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("NOT date_timestamp:1514764800 TO 1546300799")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersSumOrFiltersScoresFalse
    */
  def snippetForSearchClientSearchSingleIndex6(): Unit = {
    // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)"),
          sumOrFiltersScores = Some(false)
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersSumOrFiltersScoresTrue
    */
  def snippetForSearchClientSearchSingleIndex7(): Unit = {
    // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)"),
          sumOrFiltersScores = Some(true)
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersStephenKing
    */
  def snippetForSearchClientSearchSingleIndex8(): Unit = {
    // >SEPARATOR searchSingleIndex filtersStephenKing
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("author:\"Stephen King\"")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersNotTags
    */
  def snippetForSearchClientSearchSingleIndex9(): Unit = {
    // >SEPARATOR searchSingleIndex filtersNotTags
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("NOT _tags:non-fiction")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * facetFiltersList
    */
  def snippetForSearchClientSearchSingleIndex10(): Unit = {
    // >SEPARATOR searchSingleIndex facetFiltersList
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          facetFilters = Some(
            FacetFilters(
              Seq(
                FacetFilters("publisher:Penguin"),
                FacetFilters(Seq(FacetFilters("author:Stephen King"), FacetFilters("genre:Horror")))
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * facetFiltersNeg
    */
  def snippetForSearchClientSearchSingleIndex11(): Unit = {
    // >SEPARATOR searchSingleIndex facetFiltersNeg
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          facetFilters = Some(FacetFilters("category:-Ebook"))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * filtersAndFacetFilters
    */
  def snippetForSearchClientSearchSingleIndex12(): Unit = {
    // >SEPARATOR searchSingleIndex filtersAndFacetFilters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("(author:\"Stephen King\" OR genre:\"Horror\")"),
          facetFilters = Some(FacetFilters(Seq(FacetFilters("publisher:Penguin"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * aroundLatLng
    */
  def snippetForSearchClientSearchSingleIndex13(): Unit = {
    // >SEPARATOR searchSingleIndex aroundLatLng
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          aroundLatLng = Some("40.71, -74.01")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * aroundLatLngViaIP
    */
  def snippetForSearchClientSearchSingleIndex14(): Unit = {
    // >SEPARATOR searchSingleIndex aroundLatLngViaIP
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          aroundLatLngViaIP = Some(true)
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * aroundRadius
    */
  def snippetForSearchClientSearchSingleIndex15(): Unit = {
    // >SEPARATOR searchSingleIndex aroundRadius
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          aroundLatLng = Some("40.71, -74.01"),
          aroundRadius = Some(AroundRadius(1000000))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * insideBoundingBox
    */
  def snippetForSearchClientSearchSingleIndex16(): Unit = {
    // >SEPARATOR searchSingleIndex insideBoundingBox
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          insideBoundingBox =
            Some(InsideBoundingBox(Seq(Seq(49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * insidePolygon
    */
  def snippetForSearchClientSearchSingleIndex17(): Unit = {
    // >SEPARATOR searchSingleIndex insidePolygon
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          insidePolygon = Some(
            Seq(
              Seq(42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
                31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
                -117.54828125)
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * insidePolygon
    */
  def snippetForSearchClientSearchSingleIndex18(): Unit = {
    // >SEPARATOR searchSingleIndex insidePolygon
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          insidePolygon = Some(
            Seq(
              Seq(42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
                31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
                -117.54828125)
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * optionalFilters
    */
  def snippetForSearchClientSearchSingleIndex19(): Unit = {
    // >SEPARATOR searchSingleIndex optionalFilters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          optionalFilters = Some(OptionalFilters(Seq(OptionalFilters("can_deliver_quickly:true"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * optionalFiltersMany
    */
  def snippetForSearchClientSearchSingleIndex20(): Unit = {
    // >SEPARATOR searchSingleIndex optionalFiltersMany
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          optionalFilters = Some(
            OptionalFilters(
              Seq(
                OptionalFilters("brand:Apple<score=3>"),
                OptionalFilters("brand:Samsung<score=2>"),
                OptionalFilters("brand:-Huawei")
              )
            )
          )
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * optionalFiltersSimple
    */
  def snippetForSearchClientSearchSingleIndex21(): Unit = {
    // >SEPARATOR searchSingleIndex optionalFiltersSimple
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          optionalFilters =
            Some(OptionalFilters(Seq(OptionalFilters("brand:Apple<score=2>"), OptionalFilters("type:tablet"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * restrictSearchableAttributes
    */
  def snippetForSearchClientSearchSingleIndex22(): Unit = {
    // >SEPARATOR searchSingleIndex restrictSearchableAttributes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          restrictSearchableAttributes = Some(Seq("title_fr"))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * getRankingInfo
    */
  def snippetForSearchClientSearchSingleIndex23(): Unit = {
    // >SEPARATOR searchSingleIndex getRankingInfo
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          getRankingInfo = Some(true)
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * clickAnalytics
    */
  def snippetForSearchClientSearchSingleIndex24(): Unit = {
    // >SEPARATOR searchSingleIndex clickAnalytics
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          clickAnalytics = Some(true)
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * clickAnalyticsUserToken
    */
  def snippetForSearchClientSearchSingleIndex25(): Unit = {
    // >SEPARATOR searchSingleIndex clickAnalyticsUserToken
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          clickAnalytics = Some(true),
          userToken = Some("user-1")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * enablePersonalization
    */
  def snippetForSearchClientSearchSingleIndex26(): Unit = {
    // >SEPARATOR searchSingleIndex enablePersonalization
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          enablePersonalization = Some(true),
          userToken = Some("user-1")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * userToken
    */
  def snippetForSearchClientSearchSingleIndex27(): Unit = {
    // >SEPARATOR searchSingleIndex userToken
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          userToken = Some("user-1")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * analyticsTag
    */
  def snippetForSearchClientSearchSingleIndex28(): Unit = {
    // >SEPARATOR searchSingleIndex analyticsTag
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          analyticsTags = Some(Seq("YOUR_ANALYTICS_TAG"))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * facetFiltersUsers
    */
  def snippetForSearchClientSearchSingleIndex29(): Unit = {
    // >SEPARATOR searchSingleIndex facetFiltersUsers
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          facetFilters = Some(FacetFilters(Seq(FacetFilters("user:user42"), FacetFilters("user:public"))))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * buildTheQuery
    */
  def snippetForSearchClientSearchSingleIndex30(): Unit = {
    // >SEPARATOR searchSingleIndex buildTheQuery
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
      searchParams = Some(
        SearchParamsObject(
          filters = Some("categoryPageId: Men's Clothing"),
          hitsPerPage = Some(50),
          analyticsTags = Some(Seq("mens-clothing"))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSynonyms method.
    *
    * searchSynonyms with minimal parameters
    */
  def snippetForSearchClientSearchSynonyms(): Unit = {
    // >SEPARATOR searchSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchSynonyms(
      indexName = "<YOUR_INDEX_NAME>"
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchUserIds method.
    *
    * searchUserIds
    */
  def snippetForSearchClientSearchUserIds(): Unit = {
    // >SEPARATOR searchUserIds default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.searchUserIds(
      searchUserIdsParams = SearchUserIdsParams(
        query = "test",
        clusterName = Some("theClusterName"),
        page = Some(5),
        hitsPerPage = Some(10)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setDictionarySettings method.
    *
    * get setDictionarySettings results with minimal parameters
    */
  def snippetForSearchClientSetDictionarySettings(): Unit = {
    // >SEPARATOR setDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setDictionarySettings(
      dictionarySettingsParams = DictionarySettingsParams(
        disableStandardEntries = StandardEntries(
          plurals = Some(Map("fr" -> false, "en" -> false, "ru" -> true))
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * removeStopWords boolean
    */
  def snippetForSearchClientSetSettings(): Unit = {
    // >SEPARATOR setSettings removeStopWords boolean
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        removeStopWords = Some(RemoveStopWords(true))
      ),
      forwardToReplicas = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * removeStopWords list of string
    */
  def snippetForSearchClientSetSettings1(): Unit = {
    // >SEPARATOR setSettings removeStopWords list of string
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        removeStopWords = Some(RemoveStopWords(Seq(SupportedLanguage.withName("fr"))))
      ),
      forwardToReplicas = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * distinct company
    */
  def snippetForSearchClientSetSettings2(): Unit = {
    // >SEPARATOR setSettings distinct company
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributeForDistinct = Some("company"),
        distinct = Some(Distinct(true))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * distinct design
    */
  def snippetForSearchClientSetSettings3(): Unit = {
    // >SEPARATOR setSettings distinct design
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributeForDistinct = Some("design"),
        distinct = Some(Distinct(true))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * distinct true
    */
  def snippetForSearchClientSetSettings4(): Unit = {
    // >SEPARATOR setSettings distinct true
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        distinct = Some(Distinct(true))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * distinct section
    */
  def snippetForSearchClientSetSettings5(): Unit = {
    // >SEPARATOR setSettings distinct section
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributeForDistinct = Some("section"),
        distinct = Some(Distinct(true))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting allergens
    */
  def snippetForSearchClientSetSettings6(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting allergens
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("allergens"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting categoryPageId
    */
  def snippetForSearchClientSetSettings7(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting categoryPageId
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("searchable(categoryPageId)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * unretrievableAttributes
    */
  def snippetForSearchClientSetSettings8(): Unit = {
    // >SEPARATOR setSettings unretrievableAttributes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        unretrievableAttributes = Some(Seq("visible_by"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting user restricted data
    */
  def snippetForSearchClientSetSettings9(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting user restricted data
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("filterOnly(visible_by)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting optional filters
    */
  def snippetForSearchClientSetSettings10(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting optional filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("can_deliver_quickly", "restaurant"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting redirect index
    */
  def snippetForSearchClientSetSettings11(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting redirect index
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("query_terms"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting multiple consequences
    */
  def snippetForSearchClientSetSettings12(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting multiple consequences
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("director"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting in-depth optional filters
    */
  def snippetForSearchClientSetSettings13(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting in-depth optional filters
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("filterOnly(brand)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * mode neuralSearch
    */
  def snippetForSearchClientSetSettings14(): Unit = {
    // >SEPARATOR setSettings mode neuralSearch
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        mode = Some(Mode.withName("neuralSearch"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * mode keywordSearch
    */
  def snippetForSearchClientSetSettings15(): Unit = {
    // >SEPARATOR setSettings mode keywordSearch
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        mode = Some(Mode.withName("keywordSearch"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributes same priority
    */
  def snippetForSearchClientSetSettings16(): Unit = {
    // >SEPARATOR setSettings searchableAttributes same priority
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("title,comments", "ingredients"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributes higher priority
    */
  def snippetForSearchClientSetSettings17(): Unit = {
    // >SEPARATOR setSettings searchableAttributes higher priority
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("title", "ingredients"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking retweets
    */
  def snippetForSearchClientSetSettings18(): Unit = {
    // >SEPARATOR setSettings customRanking retweets
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(retweets)", "desc(likes)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking boosted
    */
  def snippetForSearchClientSetSettings19(): Unit = {
    // >SEPARATOR setSettings customRanking boosted
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(boosted)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking pageviews
    */
  def snippetForSearchClientSetSettings20(): Unit = {
    // >SEPARATOR setSettings customRanking pageviews
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(pageviews)", "desc(comments)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking applying search parameters for a specific query
    */
  def snippetForSearchClientSetSettings21(): Unit = {
    // >SEPARATOR setSettings customRanking applying search parameters for a specific query
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(nb_airline_liaisons)")),
        attributesForFaceting = Some(Seq("city, country"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking rounded pageviews
    */
  def snippetForSearchClientSetSettings22(): Unit = {
    // >SEPARATOR setSettings customRanking rounded pageviews
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(rounded_pageviews)", "desc(comments)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking price
    */
  def snippetForSearchClientSetSettings23(): Unit = {
    // >SEPARATOR setSettings customRanking price
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(price)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * ranking exhaustive
    */
  def snippetForSearchClientSetSettings24(): Unit = {
    // >SEPARATOR setSettings ranking exhaustive
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        ranking =
          Some(Seq("desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * ranking standard replica
    */
  def snippetForSearchClientSetSettings25(): Unit = {
    // >SEPARATOR setSettings ranking standard replica
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        ranking = Some(Seq("desc(post_date_timestamp)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * ranking virtual replica
    */
  def snippetForSearchClientSetSettings26(): Unit = {
    // >SEPARATOR setSettings ranking virtual replica
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("desc(post_date_timestamp)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * customRanking and ranking sort alphabetically
    */
  def snippetForSearchClientSetSettings27(): Unit = {
    // >SEPARATOR setSettings customRanking and ranking sort alphabetically
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("asc(textual_attribute)")),
        ranking = Some(Seq("custom", "typo", "geo", "words", "filters", "proximity", "attribute", "exact"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * relevancyStrictness
    */
  def snippetForSearchClientSetSettings28(): Unit = {
    // >SEPARATOR setSettings relevancyStrictness
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        customRanking = Some(Seq("asc(textual_attribute)")),
        relevancyStrictness = Some(0)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * create replica index
    */
  def snippetForSearchClientSetSettings29(): Unit = {
    // >SEPARATOR setSettings create replica index
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        replicas = Some(Seq("products_price_desc"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * unlink replica index
    */
  def snippetForSearchClientSetSettings30(): Unit = {
    // >SEPARATOR setSettings unlink replica index
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        replicas = Some(Seq(""))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * forwardToReplicas
    */
  def snippetForSearchClientSetSettings31(): Unit = {
    // >SEPARATOR setSettings forwardToReplicas
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("name", "description"))
      ),
      forwardToReplicas = Some(true)
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * maxValuesPerFacet
    */
  def snippetForSearchClientSetSettings32(): Unit = {
    // >SEPARATOR setSettings maxValuesPerFacet
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        maxValuesPerFacet = Some(1000)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * maxFacetHits
    */
  def snippetForSearchClientSetSettings33(): Unit = {
    // >SEPARATOR setSettings maxFacetHits
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        maxFacetHits = Some(1000)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * attributesForFaceting complex
    */
  def snippetForSearchClientSetSettings34(): Unit = {
    // >SEPARATOR setSettings attributesForFaceting complex
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("actor", "filterOnly(category)", "searchable(publisher)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * ranking closest dates
    */
  def snippetForSearchClientSetSettings35(): Unit = {
    // >SEPARATOR setSettings ranking closest dates
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        ranking = Some(
          Seq("asc(date_timestamp)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom")
        )
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributes item variation
    */
  def snippetForSearchClientSetSettings36(): Unit = {
    // >SEPARATOR setSettings searchableAttributes item variation
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("design", "type", "color"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributes around location
    */
  def snippetForSearchClientSetSettings37(): Unit = {
    // >SEPARATOR setSettings searchableAttributes around location
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("name", "country", "code", "iata_code")),
        customRanking = Some(Seq("desc(links_count)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributes around location
    */
  def snippetForSearchClientSetSettings38(): Unit = {
    // >SEPARATOR setSettings searchableAttributes around location
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("name", "country", "code", "iata_code")),
        customRanking = Some(Seq("desc(links_count)"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * disableTypoToleranceOnAttributes
    */
  def snippetForSearchClientSetSettings39(): Unit = {
    // >SEPARATOR setSettings disableTypoToleranceOnAttributes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        disableTypoToleranceOnAttributes = Some(Seq("serial_number"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributesWithCustomRankingsAndAttributesForFaceting
    */
  def snippetForSearchClientSetSettings40(): Unit = {
    // >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("brand", "name", "categories", "unordered(description)")),
        customRanking = Some(Seq("desc(popularity)")),
        attributesForFaceting = Some(Seq("searchable(brand)", "type", "categories", "price"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributesProductReferenceSuffixes
    */
  def snippetForSearchClientSetSettings41(): Unit = {
    // >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("name", "product_reference", "product_reference_suffixes"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * queryLanguageAndIgnorePlurals
    */
  def snippetForSearchClientSetSettings42(): Unit = {
    // >SEPARATOR setSettings queryLanguageAndIgnorePlurals
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        queryLanguages = Some(Seq(SupportedLanguage.withName("en"))),
        ignorePlurals = Some(IgnorePlurals(true))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributesInMovies
    */
  def snippetForSearchClientSetSettings43(): Unit = {
    // >SEPARATOR setSettings searchableAttributesInMovies
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("title_eng", "title_fr", "title_es"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * disablePrefixOnAttributes
    */
  def snippetForSearchClientSetSettings44(): Unit = {
    // >SEPARATOR setSettings disablePrefixOnAttributes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        disablePrefixOnAttributes = Some(Seq("serial_number"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * disableTypoToleranceOnAttributes
    */
  def snippetForSearchClientSetSettings45(): Unit = {
    // >SEPARATOR setSettings disableTypoToleranceOnAttributes
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        disableTypoToleranceOnAttributes = Some(Seq("serial_number"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributesSimpleExample
    */
  def snippetForSearchClientSetSettings46(): Unit = {
    // >SEPARATOR setSettings searchableAttributesSimpleExample
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("serial_number"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * searchableAttributesSimpleExampleAlt
    */
  def snippetForSearchClientSetSettings47(): Unit = {
    // >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        searchableAttributes = Some(Seq("serial_number", "serial_number_suffixes"))
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the updateApiKey method.
    *
    * updateApiKey
    */
  def snippetForSearchClientUpdateApiKey(): Unit = {
    // >SEPARATOR updateApiKey default
    // Initialize the client
    val client = SearchClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    val response = client.updateApiKey(
      key = "ALGOLIA_API_KEY",
      apiKey = ApiKey(
        acl = Seq(Acl.withName("search"), Acl.withName("addObject")),
        validity = Some(300),
        maxQueriesPerIPPerHour = Some(100),
        maxHitsPerQuery = Some(20)
      )
    )

    // >LOG
    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

}
