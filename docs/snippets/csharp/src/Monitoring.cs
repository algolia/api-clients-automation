// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Monitoring;
// IMPORT<
using Action = Algolia.Search.Models.Ingestion.Action;

public class SnippetMonitoringClient
{
  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForMonitoringClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForMonitoringClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetClusterIncidents method.
  ///
  /// getClusterIncidents
  /// </summary>
  public async Task SnippetForMonitoringClientGetClusterIncidents()
  {
    // >SEPARATOR getClusterIncidents default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetClusterIncidentsAsync("c1-de");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetClusterStatus method.
  ///
  /// getClusterStatus
  /// </summary>
  public async Task SnippetForMonitoringClientGetClusterStatus()
  {
    // >SEPARATOR getClusterStatus default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetClusterStatusAsync("c1-de");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetIncidents method.
  ///
  /// getIncidents
  /// </summary>
  public async Task SnippetForMonitoringClientGetIncidents()
  {
    // >SEPARATOR getIncidents default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetIncidentsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetIndexingTime method.
  ///
  /// getIndexingTime
  /// </summary>
  public async Task SnippetForMonitoringClientGetIndexingTime()
  {
    // >SEPARATOR getIndexingTime default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetIndexingTimeAsync("c1-de");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetLatency method.
  ///
  /// getLatency
  /// </summary>
  public async Task SnippetForMonitoringClientGetLatency()
  {
    // >SEPARATOR getLatency default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetLatencyAsync("c1-de");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetMetrics method.
  ///
  /// getMetrics
  /// </summary>
  public async Task SnippetForMonitoringClientGetMetrics()
  {
    // >SEPARATOR getMetrics default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetMetricsAsync(
      Enum.Parse<Metric>("AvgBuildTime"),
      Enum.Parse<Period>("Minute")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetReachability method.
  ///
  /// getReachability
  /// </summary>
  public async Task SnippetForMonitoringClientGetReachability()
  {
    // >SEPARATOR getReachability default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetReachabilityAsync("c1-de");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetServers method.
  ///
  /// getInventory
  /// </summary>
  public async Task SnippetForMonitoringClientGetServers()
  {
    // >SEPARATOR getServers default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetServersAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetStatus method.
  ///
  /// getStatus
  /// </summary>
  public async Task SnippetForMonitoringClientGetStatus()
  {
    // >SEPARATOR getStatus default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetStatusAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForMonitoringClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new MonitoringClient(
      new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }
}
