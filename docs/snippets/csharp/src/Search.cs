// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Search;
// IMPORT<
using Action = Algolia.Search.Models.Search.Action;
using Range = Algolia.Search.Models.Search.Range;

public class SnippetSearchClient
{
  /// <summary>
  /// Snippet for the AddApiKey method.
  ///
  /// minimal
  /// </summary>
  public async Task SnippetForSearchClientAddApiKey()
  {
    // >SEPARATOR addApiKey minimal
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AddApiKeyAsync(
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Description = "my new api key",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AddApiKey method.
  ///
  /// all
  /// </summary>
  public async Task SnippetForSearchClientAddApiKey1()
  {
    // >SEPARATOR addApiKey all
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AddApiKeyAsync(
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Description = "my new api key",
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AddOrUpdateObject method.
  ///
  /// addOrUpdateObject
  /// </summary>
  public async Task SnippetForSearchClientAddOrUpdateObject()
  {
    // >SEPARATOR addOrUpdateObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AddOrUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, string> { { "key", "value" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AppendSource method.
  ///
  /// appendSource
  /// </summary>
  public async Task SnippetForSearchClientAppendSource()
  {
    // >SEPARATOR appendSource default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AppendSourceAsync(
      new Source { VarSource = "theSource", Description = "theDescription" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AssignUserId method.
  ///
  /// simple
  /// </summary>
  public async Task SnippetForSearchClientAssignUserId()
  {
    // >SEPARATOR assignUserId simple
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AssignUserIdAsync(
      "user42",
      new AssignUserIdParams { Cluster = "d4242-eu" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AssignUserId method.
  ///
  /// it should not encode the userID
  /// </summary>
  public async Task SnippetForSearchClientAssignUserId1()
  {
    // >SEPARATOR assignUserId it should not encode the userID
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AssignUserIdAsync(
      "user id with spaces",
      new AssignUserIdParams { Cluster = "cluster with spaces" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// addObject
  /// </summary>
  public async Task SnippetForSearchClientBatch()
  {
    // >SEPARATOR batch addObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "bar" }, { "foo", "1" } },
          },
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "baz" }, { "foo", "2" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// clear
  /// </summary>
  public async Task SnippetForSearchClientBatch1()
  {
    // >SEPARATOR batch clear
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Clear"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// delete
  /// </summary>
  public async Task SnippetForSearchClientBatch2()
  {
    // >SEPARATOR batch delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Delete"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// deleteObject
  /// </summary>
  public async Task SnippetForSearchClientBatch3()
  {
    // >SEPARATOR batch deleteObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("DeleteObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// partialUpdateObject
  /// </summary>
  public async Task SnippetForSearchClientBatch4()
  {
    // >SEPARATOR batch partialUpdateObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// partialUpdateObjectNoCreate
  /// </summary>
  public async Task SnippetForSearchClientBatch5()
  {
    // >SEPARATOR batch partialUpdateObjectNoCreate
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObjectNoCreate"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// updateObject
  /// </summary>
  public async Task SnippetForSearchClientBatch6()
  {
    // >SEPARATOR batch updateObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("UpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchAssignUserIds method.
  ///
  /// batchAssignUserIds
  /// </summary>
  public async Task SnippetForSearchClientBatchAssignUserIds()
  {
    // >SEPARATOR batchAssignUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAssignUserIdsAsync(
      "userID",
      new BatchAssignUserIdsParams
      {
        Cluster = "theCluster",
        Users = new List<string> { "user1", "user2" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// replace
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries()
  {
    // >SEPARATOR batchDictionaryEntries replace
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              Word = "fancy",
              Words = new List<string> { "believe", "algolia" },
              Decomposition = new List<string> { "trust", "algolia" },
              State = Enum.Parse<DictionaryEntryState>("Enabled"),
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// delete
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries1()
  {
    // >SEPARATOR batchDictionaryEntries delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("DeleteEntry"),
            Body = new DictionaryEntry { ObjectID = "1" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// append
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries2()
  {
    // >SEPARATOR batchDictionaryEntries append
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new BatchDictionaryEntriesParams
      {
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              AdditionalProperties = new Dictionary<string, object> { { "additional", "try me" } },
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Browse method.
  ///
  /// browse with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientBrowse()
  {
    // >SEPARATOR browse browse with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BrowseAsync<Hit>("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Browse method.
  ///
  /// browse with search parameters
  /// </summary>
  public async Task SnippetForSearchClientBrowse1()
  {
    // >SEPARATOR browse browse with search parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BrowseAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new BrowseParams(
        new BrowseParamsObject
        {
          Query = "myQuery",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("tags:algolia") }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Browse method.
  ///
  /// browse allow a cursor in parameters
  /// </summary>
  public async Task SnippetForSearchClientBrowse2()
  {
    // >SEPARATOR browse browse allow a cursor in parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BrowseAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new BrowseParams(new BrowseParamsObject { Cursor = "test" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearObjects method.
  ///
  /// clearObjects
  /// </summary>
  public async Task SnippetForSearchClientClearObjects()
  {
    // >SEPARATOR clearObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearObjectsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearRules method.
  ///
  /// clearRules
  /// </summary>
  public async Task SnippetForSearchClientClearRules()
  {
    // >SEPARATOR clearRules default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearRulesAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearSynonyms method.
  ///
  /// clearSynonyms
  /// </summary>
  public async Task SnippetForSearchClientClearSynonyms()
  {
    // >SEPARATOR clearSynonyms default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearSynonymsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForSearchClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForSearchClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForSearchClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForSearchClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForSearchClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForSearchClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForSearchClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForSearchClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForSearchClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteApiKey method.
  ///
  /// deleteApiKey
  /// </summary>
  public async Task SnippetForSearchClientDeleteApiKey()
  {
    // >SEPARATOR deleteApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteApiKeyAsync("myTestApiKey");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteBy method.
  ///
  /// deleteBy
  /// </summary>
  public async Task SnippetForSearchClientDeleteBy()
  {
    // >SEPARATOR deleteBy default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteByAsync(
      "<YOUR_INDEX_NAME>",
      new DeleteByParams { Filters = "brand:brandName" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteIndex method.
  ///
  /// deleteIndex
  /// </summary>
  public async Task SnippetForSearchClientDeleteIndex()
  {
    // >SEPARATOR deleteIndex default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteIndexAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteObject method.
  ///
  /// deleteObject
  /// </summary>
  public async Task SnippetForSearchClientDeleteObject()
  {
    // >SEPARATOR deleteObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteObjectAsync("<YOUR_INDEX_NAME>", "uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteObjects method.
  ///
  /// call deleteObjects without error
  /// </summary>
  public async Task SnippetForSearchClientDeleteObjects()
  {
    // >SEPARATOR deleteObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<string> { "1", "2" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteRule method.
  ///
  /// delete rule simple case
  /// </summary>
  public async Task SnippetForSearchClientDeleteRule()
  {
    // >SEPARATOR deleteRule delete rule simple case
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteRuleAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteRule method.
  ///
  /// delete rule with simple characters to encode in objectID
  /// </summary>
  public async Task SnippetForSearchClientDeleteRule1()
  {
    // >SEPARATOR deleteRule delete rule with simple characters to encode in objectID
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteRuleAsync("<YOUR_INDEX_NAME>", "test/with/slash");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteSource method.
  ///
  /// deleteSource
  /// </summary>
  public async Task SnippetForSearchClientDeleteSource()
  {
    // >SEPARATOR deleteSource default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteSourceAsync("theSource");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteSynonym method.
  ///
  /// deleteSynonym
  /// </summary>
  public async Task SnippetForSearchClientDeleteSynonym()
  {
    // >SEPARATOR deleteSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteSynonymAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// api key basic
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey()
  {
    // >SEPARATOR generateSecuredApiKey api key basic
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions
      {
        ValidUntil = 2524604400L,
        RestrictIndices = new List<string> { "Movies" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// with searchParams
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey1()
  {
    // >SEPARATOR generateSecuredApiKey with searchParams
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions
      {
        ValidUntil = 2524604400L,
        RestrictIndices = new List<string> { "Movies", "cts_e2e_settings" },
        RestrictSources = "192.168.1.0/24",
        Filters = "category:Book OR category:Ebook AND _tags:published",
        UserToken = "user123",
        SearchParams = new SearchParamsObject
        {
          Query = "batman",
          TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Strict")),
          AroundRadius = new AroundRadius(Enum.Parse<AroundRadiusAll>("All")),
          Mode = Enum.Parse<Mode>("NeuralSearch"),
          HitsPerPage = 10,
          OptionalWords = new OptionalWords(new List<string> { "one", "two" }),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// with filters
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey2()
  {
    // >SEPARATOR generateSecuredApiKey with filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions
      {
        Filters = "user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// with visible_by filter
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey3()
  {
    // >SEPARATOR generateSecuredApiKey with visible_by filter
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions { Filters = "visible_by:group/Finance" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// with userID
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey4()
  {
    // >SEPARATOR generateSecuredApiKey with userID
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions { UserToken = "user42" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetApiKey method.
  ///
  /// getApiKey
  /// </summary>
  public async Task SnippetForSearchClientGetApiKey()
  {
    // >SEPARATOR getApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetApiKeyAsync("myTestApiKey");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetAppTask method.
  ///
  /// getAppTask
  /// </summary>
  public async Task SnippetForSearchClientGetAppTask()
  {
    // >SEPARATOR getAppTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetAppTaskAsync(123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetDictionaryLanguages method.
  ///
  /// get getDictionaryLanguages
  /// </summary>
  public async Task SnippetForSearchClientGetDictionaryLanguages()
  {
    // >SEPARATOR getDictionaryLanguages default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetDictionaryLanguagesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetDictionarySettings method.
  ///
  /// get getDictionarySettings results
  /// </summary>
  public async Task SnippetForSearchClientGetDictionarySettings()
  {
    // >SEPARATOR getDictionarySettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetDictionarySettingsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetLogs method.
  ///
  /// getLogs with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientGetLogs()
  {
    // >SEPARATOR getLogs getLogs with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetLogsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetLogs method.
  ///
  /// getLogs with parameters
  /// </summary>
  public async Task SnippetForSearchClientGetLogs1()
  {
    // >SEPARATOR getLogs getLogs with parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetLogsAsync(
      5,
      10,
      "<YOUR_INDEX_NAME>",
      Enum.Parse<LogType>("All")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObject method.
  ///
  /// getObject
  /// </summary>
  public async Task SnippetForSearchClientGetObject()
  {
    // >SEPARATOR getObject getObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new List<string> { "attr1", "attr2" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObject method.
  ///
  /// search with a real object
  /// </summary>
  public async Task SnippetForSearchClientGetObject1()
  {
    // >SEPARATOR getObject search with a real object
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectAsync("<YOUR_INDEX_NAME>", "Batman and Robin");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObjects method.
  ///
  /// by ID
  /// </summary>
  public async Task SnippetForSearchClientGetObjects()
  {
    // >SEPARATOR getObjects by ID
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectsAsync<Hit>(
      new GetObjectsParams
      {
        Requests = new List<GetObjectsRequest>
        {
          new GetObjectsRequest { ObjectID = "uniqueID", IndexName = "<YOUR_INDEX_NAME>" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObjects method.
  ///
  /// multiple IDs
  /// </summary>
  public async Task SnippetForSearchClientGetObjects1()
  {
    // >SEPARATOR getObjects multiple IDs
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectsAsync<Hit>(
      new GetObjectsParams
      {
        Requests = new List<GetObjectsRequest>
        {
          new GetObjectsRequest { ObjectID = "uniqueID1", IndexName = "<YOUR_INDEX_NAME>" },
          new GetObjectsRequest { ObjectID = "uniqueID2", IndexName = "<YOUR_INDEX_NAME>" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObjects method.
  ///
  /// with attributesToRetrieve
  /// </summary>
  public async Task SnippetForSearchClientGetObjects2()
  {
    // >SEPARATOR getObjects with attributesToRetrieve
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectsAsync<Hit>(
      new GetObjectsParams
      {
        Requests = new List<GetObjectsRequest>
        {
          new GetObjectsRequest
          {
            AttributesToRetrieve = new List<string> { "attr1", "attr2" },
            ObjectID = "uniqueID",
            IndexName = "<YOUR_INDEX_NAME>",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRule method.
  ///
  /// getRule
  /// </summary>
  public async Task SnippetForSearchClientGetRule()
  {
    // >SEPARATOR getRule default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetRuleAsync("<YOUR_INDEX_NAME>", "qr-1725004648916");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSettings method.
  ///
  /// getSettings
  /// </summary>
  public async Task SnippetForSearchClientGetSettings()
  {
    // >SEPARATOR getSettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSettingsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSources method.
  ///
  /// getSources
  /// </summary>
  public async Task SnippetForSearchClientGetSources()
  {
    // >SEPARATOR getSources default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSourcesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSynonym method.
  ///
  /// getSynonym
  /// </summary>
  public async Task SnippetForSearchClientGetSynonym()
  {
    // >SEPARATOR getSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSynonymAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetTask method.
  ///
  /// getTask
  /// </summary>
  public async Task SnippetForSearchClientGetTask()
  {
    // >SEPARATOR getTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetTaskAsync("<YOUR_INDEX_NAME>", 123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetTopUserIds method.
  ///
  /// getTopUserIds
  /// </summary>
  public async Task SnippetForSearchClientGetTopUserIds()
  {
    // >SEPARATOR getTopUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetTopUserIdsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetUserId method.
  ///
  /// getUserId
  /// </summary>
  public async Task SnippetForSearchClientGetUserId()
  {
    // >SEPARATOR getUserId default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetUserIdAsync("uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the HasPendingMappings method.
  ///
  /// hasPendingMappings with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientHasPendingMappings()
  {
    // >SEPARATOR hasPendingMappings hasPendingMappings with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.HasPendingMappingsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the HasPendingMappings method.
  ///
  /// hasPendingMappings with parameters
  /// </summary>
  public async Task SnippetForSearchClientHasPendingMappings1()
  {
    // >SEPARATOR hasPendingMappings hasPendingMappings with parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.HasPendingMappingsAsync(true);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexExists
  /// </summary>
  public async Task SnippetForSearchClientIndexExists()
  {
    // >SEPARATOR indexExists indexExists
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexNotExists
  /// </summary>
  public async Task SnippetForSearchClientIndexExists1()
  {
    // >SEPARATOR indexExists indexNotExists
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexExistsWithError
  /// </summary>
  public async Task SnippetForSearchClientIndexExists2()
  {
    // >SEPARATOR indexExists indexExistsWithError
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListApiKeys method.
  ///
  /// listApiKeys
  /// </summary>
  public async Task SnippetForSearchClientListApiKeys()
  {
    // >SEPARATOR listApiKeys default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListApiKeysAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListClusters method.
  ///
  /// listClusters
  /// </summary>
  public async Task SnippetForSearchClientListClusters()
  {
    // >SEPARATOR listClusters default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListClustersAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListIndices method.
  ///
  /// listIndices with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientListIndices()
  {
    // >SEPARATOR listIndices listIndices with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListIndicesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListIndices method.
  ///
  /// listIndices with parameters
  /// </summary>
  public async Task SnippetForSearchClientListIndices1()
  {
    // >SEPARATOR listIndices listIndices with parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListIndicesAsync(8, 3);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListUserIds method.
  ///
  /// listUserIds with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientListUserIds()
  {
    // >SEPARATOR listUserIds listUserIds with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListUserIdsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListUserIds method.
  ///
  /// listUserIds with parameters
  /// </summary>
  public async Task SnippetForSearchClientListUserIds1()
  {
    // >SEPARATOR listUserIds listUserIds with parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListUserIdsAsync(8, 100);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the MultipleBatch method.
  ///
  /// multipleBatch
  /// </summary>
  public async Task SnippetForSearchClientMultipleBatch()
  {
    // >SEPARATOR multipleBatch default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.MultipleBatchAsync(
      new BatchParams
      {
        Requests = new List<MultipleBatchRequest>
        {
          new MultipleBatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
            IndexName = "<YOUR_INDEX_NAME>",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// scopes
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex()
  {
    // >SEPARATOR operationIndex scopes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
        Scope = new List<ScopeType>
        {
          Enum.Parse<ScopeType>("Rules"),
          Enum.Parse<ScopeType>("Settings"),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// copy
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex1()
  {
    // >SEPARATOR operationIndex copy
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Copy"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// move
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex2()
  {
    // >SEPARATOR operationIndex move
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for a string attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject()
  {
    // >SEPARATOR partialUpdateObject Partial update with a new value for a string attribute
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, string> { { "attributeId", "new value" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for an integer attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject1()
  {
    // >SEPARATOR partialUpdateObject Partial update with a new value for an integer attribute
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, int> { { "attributeId", 1 } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for a boolean attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject2()
  {
    // >SEPARATOR partialUpdateObject Partial update with a new value for a boolean attribute
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, Boolean> { { "attributeId", true } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for an array attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject3()
  {
    // >SEPARATOR partialUpdateObject Partial update with a new value for an array attribute
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, List<string>>
      {
        {
          "attributeId",
          new List<string> { "one", "two", "three" }
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for an object attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject4()
  {
    // >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, Object>
      {
        {
          "attributeId",
          new Dictionary<string, string> { { "nested", "value" } }
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// with visible_by filter
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject5()
  {
    // >SEPARATOR partialUpdateObject with visible_by filter
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, List<string>>
      {
        {
          "visible_by",
          new List<string> { "Angela", "group/Finance", "group/Shareholders" }
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObjects method.
  ///
  /// call partialUpdateObjects with createIfNotExists=true
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObjects()
  {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObjects method.
  ///
  /// call partialUpdateObjects with createIfNotExists=false
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObjects1()
  {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "3" }, { "name", "Cyril" } },
        new Dictionary<string, string> { { "objectID", "4" }, { "name", "David" } },
      },
      false
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the RemoveUserId method.
  ///
  /// removeUserId
  /// </summary>
  public async Task SnippetForSearchClientRemoveUserId()
  {
    // >SEPARATOR removeUserId default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.RemoveUserIdAsync("uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceAllObjects method.
  ///
  /// call replaceAllObjects without error
  /// </summary>
  public async Task SnippetForSearchClientReplaceAllObjects()
  {
    // >SEPARATOR replaceAllObjects call replaceAllObjects without error
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceAllObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
        new Dictionary<string, string> { { "objectID", "3" }, { "name", "Cyril" } },
        new Dictionary<string, string> { { "objectID", "4" }, { "name", "David" } },
        new Dictionary<string, string> { { "objectID", "5" }, { "name", "Eva" } },
        new Dictionary<string, string> { { "objectID", "6" }, { "name", "Fiona" } },
        new Dictionary<string, string> { { "objectID", "7" }, { "name", "Gael" } },
        new Dictionary<string, string> { { "objectID", "8" }, { "name", "Hugo" } },
        new Dictionary<string, string> { { "objectID", "9" }, { "name", "Igor" } },
        new Dictionary<string, string> { { "objectID", "10" }, { "name", "Julia" } },
      },
      3
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceAllObjects method.
  ///
  /// call replaceAllObjects with partial scopes
  /// </summary>
  public async Task SnippetForSearchClientReplaceAllObjects1()
  {
    // >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceAllObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      },
      77,
      new List<ScopeType> { Enum.Parse<ScopeType>("Settings"), Enum.Parse<ScopeType>("Synonyms") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceAllObjects method.
  ///
  /// replaceAllObjects should cleanup on failure
  /// </summary>
  public async Task SnippetForSearchClientReplaceAllObjects2()
  {
    // >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceAllObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "fine" }, { "body", "small obj" } },
        new Dictionary<string, string>
        {
          { "objectID", "toolarge" },
          { "body", "something bigger than 10KB" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceSources method.
  ///
  /// replaceSources
  /// </summary>
  public async Task SnippetForSearchClientReplaceSources()
  {
    // >SEPARATOR replaceSources default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceSourcesAsync(
      new List<Source>
      {
        new Source { VarSource = "theSource", Description = "theDescription" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the RestoreApiKey method.
  ///
  /// restoreApiKey
  /// </summary>
  public async Task SnippetForSearchClientRestoreApiKey()
  {
    // >SEPARATOR restoreApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.RestoreApiKeyAsync("ALGOLIA_API_KEY");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObject method.
  ///
  /// saveObject
  /// </summary>
  public async Task SnippetForSearchClientSaveObject()
  {
    // >SEPARATOR saveObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectAsync(
      "<YOUR_INDEX_NAME>",
      new Dictionary<string, string> { { "objectID", "id" }, { "test", "val" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// call saveObjects without error
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects()
  {
    // >SEPARATOR saveObjects call saveObjects without error
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// saveObjects should report errors
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects1()
  {
    // >SEPARATOR saveObjects saveObjects should report errors
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// saveObjectsPlaylist
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects2()
  {
    // >SEPARATOR saveObjects saveObjectsPlaylist
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string>
        {
          { "objectID", "1" },
          { "visibility", "public" },
          { "name", "Hot 100 Billboard Charts" },
          { "playlistId", "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f" },
          { "createdAt", "1500240452" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// saveObjectsPublicUser
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects3()
  {
    // >SEPARATOR saveObjects saveObjectsPublicUser
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string>
        {
          { "objectID", "1" },
          { "visibility", "public" },
          { "name", "Hot 100 Billboard Charts" },
          { "playlistId", "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f" },
          { "createdAt", "1500240452" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// saveRule with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule()
  {
    // >SEPARATOR saveRule saveRule with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "id1",
      new Rule
      {
        ObjectID = "id1",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams { Filters = "brand:xiaomi" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// saveRule with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule1()
  {
    // >SEPARATOR saveRule saveRule with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "id1",
      new Rule
      {
        ObjectID = "id1",
        Conditions = new List<Condition>
        {
          new Condition
          {
            Pattern = "apple",
            Anchoring = Enum.Parse<Anchoring>("Contains"),
            Alternatives = false,
            Context = "search",
          },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Filters = "brand:apple",
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Remove = new List<string> { "algolia" },
                Edits = new List<Edit>
                {
                  new Edit
                  {
                    Type = Enum.Parse<EditType>("Remove"),
                    Delete = "abc",
                    Insert = "cde",
                  },
                  new Edit
                  {
                    Type = Enum.Parse<EditType>("Replace"),
                    Delete = "abc",
                    Insert = "cde",
                  },
                },
              }
            ),
          },
          Hide = new List<ConsequenceHide> { new ConsequenceHide { ObjectID = "321" } },
          FilterPromotes = false,
          UserData = new Dictionary<string, string> { { "algolia", "aloglia" } },
          Promote = new List<Promote>
          {
            new Promote(new PromoteObjectID { ObjectID = "abc", Position = 3 }),
            new Promote(
              new PromoteObjectIDs
              {
                ObjectIDs = new List<string> { "abc", "def" },
                Position = 1,
              }
            ),
          },
        },
        Description = "test",
        Enabled = true,
        Validity = new List<TimeRange>
        {
          new TimeRange { From = 1656670273L, Until = 1656670277L },
        },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// b2b catalog
  /// </summary>
  public async Task SnippetForSearchClientSaveRule2()
  {
    // >SEPARATOR saveRule b2b catalog
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "article-rule",
      new Rule
      {
        ObjectID = "article-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "article", Anchoring = Enum.Parse<Anchoring>("StartsWith") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "article" },
                },
              }
            ),
            RestrictSearchableAttributes = new List<string> { "title", "book_id" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// merchandising and promoting
  /// </summary>
  public async Task SnippetForSearchClientSaveRule3()
  {
    // >SEPARATOR saveRule merchandising and promoting
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "director-rule",
      new Rule
      {
        ObjectID = "director-rule",
        Conditions = new List<Condition>
        {
          new Condition
          {
            Pattern = "{facet:director} director",
            Anchoring = Enum.Parse<Anchoring>("Contains"),
          },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            RestrictSearchableAttributes = new List<string> { "title", "book_id" },
            AutomaticFacetFilters = new AutomaticFacetFilters(
              new List<AutomaticFacetFilter> { new AutomaticFacetFilter { Facet = "director" } }
            ),
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "director" },
                },
              }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// harry potter
  /// </summary>
  public async Task SnippetForSearchClientSaveRule4()
  {
    // >SEPARATOR saveRule harry potter
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "harry-potter-rule",
      new Rule
      {
        ObjectID = "harry-potter-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "harry potter", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          UserData = new Dictionary<string, string>
          {
            { "promo_content", "20% OFF on all Harry Potter books!" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// merchandising empty query
  /// </summary>
  public async Task SnippetForSearchClientSaveRule5()
  {
    // >SEPARATOR saveRule merchandising empty query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "clearance-category-filter",
      new Rule
      {
        ObjectID = "clearance-category-filter",
        Conditions = new List<Condition>
        {
          new Condition
          {
            Pattern = "",
            Anchoring = Enum.Parse<Anchoring>("Is"),
            Context = "landing",
          },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            OptionalFilters = new OptionalFilters("clearance:true"),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// redirect
  /// </summary>
  public async Task SnippetForSearchClientSaveRule6()
  {
    // >SEPARATOR saveRule redirect
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "redirect-help-rule",
      new Rule
      {
        ObjectID = "redirect-help-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "help", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          UserData = new Dictionary<string, string>
          {
            { "redirect", "https://www.algolia.com/support" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// promote some results over others
  /// </summary>
  public async Task SnippetForSearchClientSaveRule7()
  {
    // >SEPARATOR saveRule promote some results over others
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "tomato-fruit",
      new Rule
      {
        ObjectID = "tomato-fruit",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "tomato", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            OptionalFilters = new OptionalFilters("food_group:fruit"),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// promote several hits
  /// </summary>
  public async Task SnippetForSearchClientSaveRule8()
  {
    // >SEPARATOR saveRule promote several hits
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "Promote-Apple-Newest",
      new Rule
      {
        ObjectID = "Promote-Apple-Newest",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Is") },
        },
        Consequence = new Consequence
        {
          Promote = new List<Promote>
          {
            new Promote(
              new PromoteObjectIDs
              {
                ObjectIDs = new List<string> { "iPhone-12345", "watch-123" },
                Position = 0,
              }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// promote newest release
  /// </summary>
  public async Task SnippetForSearchClientSaveRule9()
  {
    // >SEPARATOR saveRule promote newest release
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "Promote-iPhone-X",
      new Rule
      {
        ObjectID = "Promote-iPhone-X",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "iPhone", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Promote = new List<Promote>
          {
            new Promote(new PromoteObjectID { ObjectID = "iPhone-12345", Position = 0 }),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// promote single item
  /// </summary>
  public async Task SnippetForSearchClientSaveRule10()
  {
    // >SEPARATOR saveRule promote single item
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "promote-harry-potter-box-set",
      new Rule
      {
        ObjectID = "promote-harry-potter-box-set",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "Harry Potter", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Promote = new List<Promote>
          {
            new Promote(new PromoteObjectID { ObjectID = "HP-12345", Position = 0 }),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// limit search results
  /// </summary>
  public async Task SnippetForSearchClientSaveRule11()
  {
    // >SEPARATOR saveRule limit search results
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "article-rule",
      new Rule
      {
        ObjectID = "article-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "article", Anchoring = Enum.Parse<Anchoring>("StartsWith") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "article" },
                },
              }
            ),
            RestrictSearchableAttributes = new List<string> { "title", "book_id" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// query match
  /// </summary>
  public async Task SnippetForSearchClientSaveRule12()
  {
    // >SEPARATOR saveRule query match
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "tagged-brand-rule",
      new Rule
      {
        Conditions = new List<Condition>
        {
          new Condition
          {
            Pattern = "brand: {facet:brand}",
            Anchoring = Enum.Parse<Anchoring>("Contains"),
            Alternatives = false,
          },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            AutomaticFacetFilters = new AutomaticFacetFilters(
              new List<AutomaticFacetFilter> { new AutomaticFacetFilter { Facet = "brand" } }
            ),
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Remove = new List<string> { "brand:", "{facet:brand}" },
              }
            ),
          },
        },
        Description = "filter on brand: {brand}",
        ObjectID = "tagged-brand-rule",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// dynamic filtering
  /// </summary>
  public async Task SnippetForSearchClientSaveRule13()
  {
    // >SEPARATOR saveRule dynamic filtering
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "color-facets",
      new Rule
      {
        ObjectID = "color-facets",
        Conditions = new List<Condition> { new Condition { Pattern = "{facet:color}" } },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            AutomaticFacetFilters = new AutomaticFacetFilters(
              new List<AutomaticFacetFilter> { new AutomaticFacetFilter { Facet = "color" } }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// hide hits
  /// </summary>
  public async Task SnippetForSearchClientSaveRule14()
  {
    // >SEPARATOR saveRule hide hits
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "hide-12345",
      new Rule
      {
        ObjectID = "hide-12345",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "cheap", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Hide = new List<ConsequenceHide> { new ConsequenceHide { ObjectID = "to-hide-12345" } },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// one rule per facet
  /// </summary>
  public async Task SnippetForSearchClientSaveRule15()
  {
    // >SEPARATOR saveRule one rule per facet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "red-color",
      new Rule
      {
        ObjectID = "red-color",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "red", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject { Remove = new List<string> { "red" } }
            ),
            Filters = "color:red",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// numerical filters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule16()
  {
    // >SEPARATOR saveRule numerical filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "cheap",
      new Rule
      {
        ObjectID = "cheap",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "cheap", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject { Remove = new List<string> { "cheap" } }
            ),
            Filters = "price < 10",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// negative filters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule17()
  {
    // >SEPARATOR saveRule negative filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "gluten-free-rule",
      new Rule
      {
        ObjectID = "gluten-free-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "gluten-free", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Filters = "NOT allergens:gluten",
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "gluten-free" },
                },
              }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// positive filters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule18()
  {
    // >SEPARATOR saveRule positive filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "diet-rule",
      new Rule
      {
        ObjectID = "diet-rule",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "diet", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Filters = "'low-carb' OR 'low-fat'",
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "diet" },
                },
              }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// conditionless
  /// </summary>
  public async Task SnippetForSearchClientSaveRule19()
  {
    // >SEPARATOR saveRule conditionless
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "diet-rule",
      new Rule
      {
        ObjectID = "diet-rule",
        Consequence = new Consequence
        {
          Params = new ConsequenceParams
          {
            Filters = "'low-carb' OR 'low-fat'",
            Query = new ConsequenceQuery(
              new ConsequenceQueryObject
              {
                Edits = new List<Edit>
                {
                  new Edit { Type = Enum.Parse<EditType>("Remove"), Delete = "diet" },
                },
              }
            ),
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRules method.
  ///
  /// saveRules with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRules()
  {
    // >SEPARATOR saveRules saveRules with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "a-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "smartphone", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams { Filters = "brand:apple" },
          },
        },
        new Rule
        {
          ObjectID = "a-second-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams { Filters = "brand:samsung" },
          },
        },
      },
      false,
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRules method.
  ///
  /// saveRules with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRules1()
  {
    // >SEPARATOR saveRules saveRules with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "id1",
          Conditions = new List<Condition>
          {
            new Condition
            {
              Pattern = "apple",
              Anchoring = Enum.Parse<Anchoring>("Contains"),
              Alternatives = false,
              Context = "search",
            },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams
            {
              Filters = "brand:apple",
              Query = new ConsequenceQuery(
                new ConsequenceQueryObject
                {
                  Remove = new List<string> { "algolia" },
                  Edits = new List<Edit>
                  {
                    new Edit
                    {
                      Type = Enum.Parse<EditType>("Remove"),
                      Delete = "abc",
                      Insert = "cde",
                    },
                    new Edit
                    {
                      Type = Enum.Parse<EditType>("Replace"),
                      Delete = "abc",
                      Insert = "cde",
                    },
                  },
                }
              ),
            },
            Hide = new List<ConsequenceHide> { new ConsequenceHide { ObjectID = "321" } },
            FilterPromotes = false,
            UserData = new Dictionary<string, string> { { "algolia", "aloglia" } },
            Promote = new List<Promote>
            {
              new Promote(new PromoteObjectID { ObjectID = "abc", Position = 3 }),
              new Promote(
                new PromoteObjectIDs
                {
                  ObjectIDs = new List<string> { "abc", "def" },
                  Position = 1,
                }
              ),
            },
          },
          Description = "test",
          Enabled = true,
          Validity = new List<TimeRange>
          {
            new TimeRange { From = 1656670273L, Until = 1656670277L },
          },
        },
      },
      true,
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRules method.
  ///
  /// dynamic filtering
  /// </summary>
  public async Task SnippetForSearchClientSaveRules2()
  {
    // >SEPARATOR saveRules dynamic filtering
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "toaster",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "toaster", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams
            {
              Query = new ConsequenceQuery(
                new ConsequenceQueryObject { Remove = new List<string> { "toaster" } }
              ),
              Filters = "product_type:toaster",
            },
          },
        },
        new Rule
        {
          ObjectID = "cheap",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "cheap", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams
            {
              Query = new ConsequenceQuery(
                new ConsequenceQueryObject { Remove = new List<string> { "cheap" } }
              ),
              Filters = "price < 15",
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRules method.
  ///
  /// enhance search results
  /// </summary>
  public async Task SnippetForSearchClientSaveRules3()
  {
    // >SEPARATOR saveRules enhance search results
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "country",
          Conditions = new List<Condition>
          {
            new Condition
            {
              Pattern = "{facet:country}",
              Anchoring = Enum.Parse<Anchoring>("Contains"),
            },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams { AroundLatLngViaIP = false },
          },
        },
        new Rule
        {
          ObjectID = "city",
          Conditions = new List<Condition>
          {
            new Condition
            {
              Pattern = "{facet:city}",
              Anchoring = Enum.Parse<Anchoring>("Contains"),
            },
          },
          Consequence = new Consequence
          {
            Params = new ConsequenceParams { AroundLatLngViaIP = false },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveSynonym method.
  ///
  /// saveSynonym
  /// </summary>
  public async Task SnippetForSearchClientSaveSynonym()
  {
    // >SEPARATOR saveSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveSynonymAsync(
      "<YOUR_INDEX_NAME>",
      "id1",
      new SynonymHit
      {
        ObjectID = "id1",
        Type = Enum.Parse<SynonymType>("Synonym"),
        Synonyms = new List<string> { "car", "vehicule", "auto" },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveSynonyms method.
  ///
  /// saveSynonyms
  /// </summary>
  public async Task SnippetForSearchClientSaveSynonyms()
  {
    // >SEPARATOR saveSynonyms default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveSynonymsAsync(
      "<YOUR_INDEX_NAME>",
      new List<SynonymHit>
      {
        new SynonymHit
        {
          ObjectID = "id1",
          Type = Enum.Parse<SynonymType>("Synonym"),
          Synonyms = new List<string> { "car", "vehicule", "auto" },
        },
        new SynonymHit
        {
          ObjectID = "id2",
          Type = Enum.Parse<SynonymType>("Onewaysynonym"),
          Input = "iphone",
          Synonyms = new List<string> { "ephone", "aphone", "yphone" },
        },
      },
      true,
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// withHitsPerPage
  /// </summary>
  public async Task SnippetForSearchClientSearch()
  {
    // >SEPARATOR search withHitsPerPage
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              HitsPerPage = 50,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterOnly
  /// </summary>
  public async Task SnippetForSearchClientSearch1()
  {
    // >SEPARATOR search filterOnly
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Scarlett Johansson",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterOr
  /// </summary>
  public async Task SnippetForSearchClientSearch2()
  {
    // >SEPARATOR search filterOr
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Tom Cruise OR actor:Scarlett Johansson",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterNot
  /// </summary>
  public async Task SnippetForSearchClientSearch3()
  {
    // >SEPARATOR search filterNot
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "NOT actor:Nicolas Cage",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for a single hits request with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch4()
  {
    // >SEPARATOR search search for a single hits request with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(new SearchForHits { IndexName = "<YOUR_INDEX_NAME>" }),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search with highlight and snippet results
  /// </summary>
  public async Task SnippetForSearchClientSearch5()
  {
    // >SEPARATOR search search with highlight and snippet results
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "vim",
              AttributesToSnippet = new List<string> { "*:20" },
              AttributesToHighlight = new List<string> { "*" },
              AttributesToRetrieve = new List<string> { "*" },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// retrieveFacets
  /// </summary>
  public async Task SnippetForSearchClientSearch6()
  {
    // >SEPARATOR search retrieveFacets
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "author", "genre" },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// retrieveFacetsWildcard
  /// </summary>
  public async Task SnippetForSearchClientSearch7()
  {
    // >SEPARATOR search retrieveFacetsWildcard
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "*" },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for a single facet request with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch8()
  {
    // >SEPARATOR search search for a single facet request with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "editor",
            }
          ),
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for a single hits request with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch9()
  {
    // >SEPARATOR search search for a single hits request with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "myQuery",
              HitsPerPage = 50,
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for a single facet request with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch10()
  {
    // >SEPARATOR search search for a single facet request with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
              FacetQuery = "theFacetQuery",
              Query = "theQuery",
              MaxFacetHits = 50,
            }
          ),
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for multiple mixed requests in multiple indices with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch11()
  {
    // >SEPARATOR search search for multiple mixed requests in multiple indices with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(new SearchForHits { IndexName = "<YOUR_INDEX_NAME>" }),
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          ),
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search for multiple mixed requests in multiple indices with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch12()
  {
    // >SEPARATOR search search for multiple mixed requests in multiple indices with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForFacets
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Type = Enum.Parse<SearchTypeFacet>("Facet"),
              Facet = "theFacet",
              FacetQuery = "theFacetQuery",
              Query = "theQuery",
              MaxFacetHits = 50,
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "myQuery",
              HitsPerPage = 50,
              Type = Enum.Parse<SearchTypeDefault>("Default"),
            }
          ),
        },
        Strategy = Enum.Parse<SearchStrategy>("StopIfEnoughMatches"),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search filters accept all of the possible shapes
  /// </summary>
  public async Task SnippetForSearchClientSearch13()
  {
    // >SEPARATOR search search filters accept all of the possible shapes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              FacetFilters = new FacetFilters("mySearch:filters"),
              ReRankingApplyFilter = new ReRankingApplyFilter("mySearch:filters"),
              TagFilters = new TagFilters("mySearch:filters"),
              NumericFilters = new NumericFilters("mySearch:filters"),
              OptionalFilters = new OptionalFilters("mySearch:filters"),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("mySearch:filters"),
                  new FacetFilters(
                    new List<FacetFilters>
                    {
                      new FacetFilters("mySearch:filters"),
                      new FacetFilters(
                        new List<FacetFilters> { new FacetFilters("mySearch:filters") }
                      ),
                    }
                  ),
                }
              ),
              ReRankingApplyFilter = new ReRankingApplyFilter(
                new List<ReRankingApplyFilter>
                {
                  new ReRankingApplyFilter("mySearch:filters"),
                  new ReRankingApplyFilter(
                    new List<ReRankingApplyFilter> { new ReRankingApplyFilter("mySearch:filters") }
                  ),
                }
              ),
              TagFilters = new TagFilters(
                new List<TagFilters>
                {
                  new TagFilters("mySearch:filters"),
                  new TagFilters(new List<TagFilters> { new TagFilters("mySearch:filters") }),
                }
              ),
              NumericFilters = new NumericFilters(
                new List<NumericFilters>
                {
                  new NumericFilters("mySearch:filters"),
                  new NumericFilters(
                    new List<NumericFilters> { new NumericFilters("mySearch:filters") }
                  ),
                }
              ),
              OptionalFilters = new OptionalFilters(
                new List<OptionalFilters>
                {
                  new OptionalFilters("mySearch:filters"),
                  new OptionalFilters(
                    new List<OptionalFilters> { new OptionalFilters("mySearch:filters") }
                  ),
                }
              ),
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search filters end to end
  /// </summary>
  public async Task SnippetForSearchClientSearch14()
  {
    // >SEPARATOR search search filters end to end
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Filters = "editor:'visual studio' OR editor:neovim",
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters("editor:neovim"),
                }
              ),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters(new List<FacetFilters> { new FacetFilters("editor:neovim") }),
                }
              ),
            }
          ),
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              FacetFilters = new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("editor:'visual studio'"),
                  new FacetFilters(
                    new List<FacetFilters>
                    {
                      new FacetFilters("editor:neovim"),
                      new FacetFilters(
                        new List<FacetFilters> { new FacetFilters("editor:goland") }
                      ),
                    }
                  ),
                }
              ),
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// search with all search parameters
  /// </summary>
  public async Task SnippetForSearchClientSearch15()
  {
    // >SEPARATOR search search with all search parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              AdvancedSyntax = true,
              AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
              {
                Enum.Parse<AdvancedSyntaxFeatures>("ExactPhrase"),
              },
              AllowTyposOnNumericTokens = true,
              AlternativesAsExact = new List<AlternativesAsExact>
              {
                Enum.Parse<AlternativesAsExact>("MultiWordsSynonym"),
              },
              Analytics = true,
              AnalyticsTags = new List<string> { "" },
              AroundLatLng = "",
              AroundLatLngViaIP = true,
              AroundPrecision = new AroundPrecision(0),
              AroundRadius = new AroundRadius(Enum.Parse<AroundRadiusAll>("All")),
              AttributeCriteriaComputedByMinProximity = true,
              AttributesToHighlight = new List<string> { "" },
              AttributesToRetrieve = new List<string> { "" },
              AttributesToSnippet = new List<string> { "" },
              ClickAnalytics = true,
              DecompoundQuery = true,
              DisableExactOnAttributes = new List<string> { "" },
              DisableTypoToleranceOnAttributes = new List<string> { "" },
              Distinct = new Distinct(0),
              EnableABTest = true,
              EnablePersonalization = true,
              EnableReRanking = true,
              EnableRules = true,
              ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("Attribute"),
              FacetFilters = new FacetFilters(new List<FacetFilters> { new FacetFilters("") }),
              FacetingAfterDistinct = true,
              Facets = new List<string> { "" },
              Filters = "",
              GetRankingInfo = true,
              HighlightPostTag = "",
              HighlightPreTag = "",
              HitsPerPage = 1,
              IgnorePlurals = new IgnorePlurals(false),
              IndexName = "<YOUR_INDEX_NAME>",
              InsideBoundingBox = new InsideBoundingBox(
                new List<List<Double>>
                {
                  new List<Double> { 47.3165, 4.9665, 47.3424, 5.0201 },
                  new List<Double> { 40.9234, 2.1185, 38.643, 1.9916 },
                }
              ),
              InsidePolygon = new List<List<Double>>
              {
                new List<Double> { 47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9 },
                new List<Double> { 40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104 },
              },
              Length = 1,
              MaxValuesPerFacet = 0,
              MinProximity = 1,
              MinWordSizefor1Typo = 0,
              MinWordSizefor2Typos = 0,
              MinimumAroundRadius = 1,
              NaturalLanguages = new List<SupportedLanguage>
              {
                Enum.Parse<SupportedLanguage>("Fr"),
              },
              NumericFilters = new NumericFilters(
                new List<NumericFilters> { new NumericFilters("") }
              ),
              Offset = 0,
              OptionalFilters = new OptionalFilters(
                new List<OptionalFilters> { new OptionalFilters("") }
              ),
              OptionalWords = new OptionalWords(new List<string> { "" }),
              Page = 0,
              PercentileComputation = true,
              PersonalizationImpact = 0,
              Query = "",
              QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
              QueryType = Enum.Parse<QueryType>("PrefixAll"),
              Ranking = new List<string> { "" },
              ReRankingApplyFilter = new ReRankingApplyFilter(
                new List<ReRankingApplyFilter> { new ReRankingApplyFilter("") }
              ),
              RelevancyStrictness = 0,
              RemoveStopWords = new RemoveStopWords(true),
              RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("AllOptional"),
              RenderingContent = new RenderingContent
              {
                FacetOrdering = new FacetOrdering
                {
                  Facets = new Facets
                  {
                    Order = new List<string> { "a", "b" },
                  },
                  Values = new Dictionary<string, Value>
                  {
                    {
                      "a",
                      new Value
                      {
                        Order = new List<string> { "b" },
                        SortRemainingBy = Enum.Parse<SortRemainingBy>("Count"),
                      }
                    },
                  },
                },
              },
              ReplaceSynonymsInHighlight = true,
              ResponseFields = new List<string> { "" },
              RestrictHighlightAndSnippetArrays = true,
              RestrictSearchableAttributes = new List<string> { "" },
              RuleContexts = new List<string> { "" },
              SimilarQuery = "",
              SnippetEllipsisText = "",
              SortFacetValuesBy = "",
              SumOrFiltersScores = true,
              Synonyms = true,
              TagFilters = new TagFilters(new List<TagFilters> { new TagFilters("") }),
              Type = Enum.Parse<SearchTypeDefault>("Default"),
              TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Min")),
              UserToken = "",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchDictionaryEntries method.
  ///
  /// get searchDictionaryEntries results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchDictionaryEntries()
  {
    // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new SearchDictionaryEntriesParams { Query = "about" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchDictionaryEntries method.
  ///
  /// get searchDictionaryEntries results with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchDictionaryEntries1()
  {
    // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Compounds"),
      new SearchDictionaryEntriesParams
      {
        Query = "foo",
        Page = 4,
        HitsPerPage = 2,
        Language = Enum.Parse<SupportedLanguage>("Fr"),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchForFacetValues method.
  ///
  /// get searchForFacetValues results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchForFacetValues()
  {
    // >SEPARATOR searchForFacetValues get searchForFacetValues results with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchForFacetValuesAsync("<YOUR_INDEX_NAME>", "facetName");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchForFacetValues method.
  ///
  /// get searchForFacetValues results with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchForFacetValues1()
  {
    // >SEPARATOR searchForFacetValues get searchForFacetValues results with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchForFacetValuesAsync(
      "<YOUR_INDEX_NAME>",
      "facetName",
      new SearchForFacetValuesRequest
      {
        Params = "query=foo&facetFilters=['bar']",
        FacetQuery = "foo",
        MaxFacetHits = 42,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchForFacetValues method.
  ///
  /// facetName and facetQuery
  /// </summary>
  public async Task SnippetForSearchClientSearchForFacetValues2()
  {
    // >SEPARATOR searchForFacetValues facetName and facetQuery
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchForFacetValuesAsync(
      "<YOUR_INDEX_NAME>",
      "author",
      new SearchForFacetValuesRequest { FacetQuery = "stephen king" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchRules method.
  ///
  /// searchRules
  /// </summary>
  public async Task SnippetForSearchClientSearchRules()
  {
    // >SEPARATOR searchRules default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchRulesAsync(
      "<YOUR_INDEX_NAME>",
      new SearchRulesParams { Query = "zorro" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex()
  {
    // >SEPARATOR searchSingleIndex search with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search with special characters in indexName
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex1()
  {
    // >SEPARATOR searchSingleIndex search with special characters in indexName
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search with searchParams
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex2()
  {
    // >SEPARATOR searchSingleIndex search with searchParams
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "myQuery",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("tags:algolia") }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// single search retrieve snippets
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex3()
  {
    // >SEPARATOR searchSingleIndex single search retrieve snippets
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "batman mask of the phantasm",
          AttributesToRetrieve = new List<string> { "*" },
          AttributesToSnippet = new List<string> { "*:20" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex4()
  {
    // >SEPARATOR searchSingleIndex query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "phone" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex5()
  {
    // >SEPARATOR searchSingleIndex filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Filters = "country:US AND price.gross < 2.0" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filters boolean
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex6()
  {
    // >SEPARATOR searchSingleIndex filters boolean
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Filters = "is_available:true" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// distinct
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex7()
  {
    // >SEPARATOR searchSingleIndex distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Distinct = new Distinct(true) })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersNumeric
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex8()
  {
    // >SEPARATOR searchSingleIndex filtersNumeric
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Filters = "price < 10" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersTimestamp
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex9()
  {
    // >SEPARATOR searchSingleIndex filtersTimestamp
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Filters = "NOT date_timestamp:1514764800 TO 1546300799" }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersSumOrFiltersScoresFalse
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex10()
  {
    // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Filters =
            "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
          SumOrFiltersScores = false,
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersSumOrFiltersScoresTrue
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex11()
  {
    // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Filters =
            "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
          SumOrFiltersScores = true,
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersStephenKing
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex12()
  {
    // >SEPARATOR searchSingleIndex filtersStephenKing
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Filters = "author:\"Stephen King\"" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersNotTags
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex13()
  {
    // >SEPARATOR searchSingleIndex filtersNotTags
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Filters = "NOT _tags:non-fiction" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersList
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex14()
  {
    // >SEPARATOR searchSingleIndex facetFiltersList
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          FacetFilters = new FacetFilters(
            new List<FacetFilters>
            {
              new FacetFilters("publisher:Penguin"),
              new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("author:Stephen King"),
                  new FacetFilters("genre:Horror"),
                }
              ),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersBook
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex15()
  {
    // >SEPARATOR searchSingleIndex facetFiltersBook
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("category:Book") }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersAND
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex16()
  {
    // >SEPARATOR searchSingleIndex facetFiltersAND
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          FacetFilters = new FacetFilters(
            new List<FacetFilters>
            {
              new FacetFilters("category:Book"),
              new FacetFilters("author:John Doe"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersOR
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex17()
  {
    // >SEPARATOR searchSingleIndex facetFiltersOR
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          FacetFilters = new FacetFilters(
            new List<FacetFilters>
            {
              new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("category:Book"),
                  new FacetFilters("author:John Doe"),
                }
              ),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersCombined
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex18()
  {
    // >SEPARATOR searchSingleIndex facetFiltersCombined
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          FacetFilters = new FacetFilters(
            new List<FacetFilters>
            {
              new FacetFilters("author:John Doe"),
              new FacetFilters(
                new List<FacetFilters>
                {
                  new FacetFilters("category:Book"),
                  new FacetFilters("category:Movie"),
                }
              ),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersNeg
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex19()
  {
    // >SEPARATOR searchSingleIndex facetFiltersNeg
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { FacetFilters = new FacetFilters("category:-Ebook") }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// filtersAndFacetFilters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex20()
  {
    // >SEPARATOR searchSingleIndex filtersAndFacetFilters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Filters = "(author:\"Stephen King\" OR genre:\"Horror\")",
          FacetFilters = new FacetFilters(
            new List<FacetFilters> { new FacetFilters("publisher:Penguin") }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facet author genre
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex21()
  {
    // >SEPARATOR searchSingleIndex facet author genre
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Facets = new List<string> { "author", "genre" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facet wildcard
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex22()
  {
    // >SEPARATOR searchSingleIndex facet wildcard
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Facets = new List<string> { "*" } })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// maxValuesPerFacet
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex23()
  {
    // >SEPARATOR searchSingleIndex maxValuesPerFacet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { MaxValuesPerFacet = 1000 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// aroundLatLng
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex24()
  {
    // >SEPARATOR searchSingleIndex aroundLatLng
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { AroundLatLng = "40.71, -74.01" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// aroundLatLngViaIP
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex25()
  {
    // >SEPARATOR searchSingleIndex aroundLatLngViaIP
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { AroundLatLngViaIP = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// aroundRadius
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex26()
  {
    // >SEPARATOR searchSingleIndex aroundRadius
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          AroundLatLng = "40.71, -74.01",
          AroundRadius = new AroundRadius(1000000),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// insideBoundingBox
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex27()
  {
    // >SEPARATOR searchSingleIndex insideBoundingBox
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          InsideBoundingBox = new InsideBoundingBox(
            new List<List<Double>>
            {
              new List<Double> { 49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875 },
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// insidePolygon
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex28()
  {
    // >SEPARATOR searchSingleIndex insidePolygon
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          InsidePolygon = new List<List<Double>>
          {
            new List<Double>
            {
              42.01,
              -124.31,
              48.835509470063045,
              -124.40453125000005,
              45.01082951668149,
              -65.95726562500005,
              31.247243545293433,
              -81.06578125000004,
              25.924152577235226,
              -97.68234374999997,
              32.300311895879545,
              -117.54828125,
            },
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// insidePolygon
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex29()
  {
    // >SEPARATOR searchSingleIndex insidePolygon
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          InsidePolygon = new List<List<Double>>
          {
            new List<Double>
            {
              42.01,
              -124.31,
              48.835509470063045,
              -124.40453125000005,
              45.01082951668149,
              -65.95726562500005,
              31.247243545293433,
              -81.06578125000004,
              25.924152577235226,
              -97.68234374999997,
              32.300311895879545,
              -117.54828125,
            },
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// optionalFilters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex30()
  {
    // >SEPARATOR searchSingleIndex optionalFilters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          OptionalFilters = new OptionalFilters(
            new List<OptionalFilters> { new OptionalFilters("can_deliver_quickly:true") }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// optionalFiltersMany
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex31()
  {
    // >SEPARATOR searchSingleIndex optionalFiltersMany
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          OptionalFilters = new OptionalFilters(
            new List<OptionalFilters>
            {
              new OptionalFilters("brand:Apple<score=3>"),
              new OptionalFilters("brand:Samsung<score=2>"),
              new OptionalFilters("brand:-Huawei"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// optionalFiltersSimple
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex32()
  {
    // >SEPARATOR searchSingleIndex optionalFiltersSimple
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          OptionalFilters = new OptionalFilters(
            new List<OptionalFilters>
            {
              new OptionalFilters("brand:Apple<score=2>"),
              new OptionalFilters("type:tablet"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// restrictSearchableAttributes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex33()
  {
    // >SEPARATOR searchSingleIndex restrictSearchableAttributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { RestrictSearchableAttributes = new List<string> { "title_fr" } }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// getRankingInfo
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex34()
  {
    // >SEPARATOR searchSingleIndex getRankingInfo
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { GetRankingInfo = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// clickAnalytics
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex35()
  {
    // >SEPARATOR searchSingleIndex clickAnalytics
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { ClickAnalytics = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// clickAnalyticsUserToken
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex36()
  {
    // >SEPARATOR searchSingleIndex clickAnalyticsUserToken
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { ClickAnalytics = true, UserToken = "user-1" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enablePersonalization
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex37()
  {
    // >SEPARATOR searchSingleIndex enablePersonalization
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { EnablePersonalization = true, UserToken = "user-1" }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// userToken
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex38()
  {
    // >SEPARATOR searchSingleIndex userToken
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { UserToken = "user-1" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// userToken1234
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex39()
  {
    // >SEPARATOR searchSingleIndex userToken1234
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", UserToken = "user-1234" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// analyticsTag
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex40()
  {
    // >SEPARATOR searchSingleIndex analyticsTag
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { AnalyticsTags = new List<string> { "YOUR_ANALYTICS_TAG" } }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facetFiltersUsers
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex41()
  {
    // >SEPARATOR searchSingleIndex facetFiltersUsers
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          FacetFilters = new FacetFilters(
            new List<FacetFilters>
            {
              new FacetFilters("user:user42"),
              new FacetFilters("user:public"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// buildTheQuery
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex42()
  {
    // >SEPARATOR searchSingleIndex buildTheQuery
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Filters = "categoryPageId: Men's Clothing",
          HitsPerPage = 50,
          AnalyticsTags = new List<string> { "mens-clothing" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// attributesToHighlightOverride
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex43()
  {
    // >SEPARATOR searchSingleIndex attributesToHighlightOverride
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AttributesToHighlight = new List<string> { "title", "content" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disableTypoToleranceOnAttributes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex44()
  {
    // >SEPARATOR searchSingleIndex disableTypoToleranceOnAttributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          DisableTypoToleranceOnAttributes = new List<string> { "serial_number" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_a_query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex45()
  {
    // >SEPARATOR searchSingleIndex search_a_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "shirt" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_everything
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex46()
  {
    // >SEPARATOR searchSingleIndex search_everything
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// api_filtering_range_example
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex47()
  {
    // >SEPARATOR searchSingleIndex api_filtering_range_example
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "books", Filters = "price:10 TO 20" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_a_query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex48()
  {
    // >SEPARATOR searchSingleIndex search_a_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "",
          SimilarQuery = "Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen",
          Filters = "year:1991 TO 2001",
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_retrievable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex49()
  {
    // >SEPARATOR searchSingleIndex override_retrievable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AttributesToRetrieve = new List<string> { "title", "content" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// restrict_searchable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex50()
  {
    // >SEPARATOR searchSingleIndex restrict_searchable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          RestrictSearchableAttributes = new List<string> { "title", "author" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_relevancy
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex51()
  {
    // >SEPARATOR searchSingleIndex override_default_relevancy
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", RelevancyStrictness = 70 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex52()
  {
    // >SEPARATOR searchSingleIndex apply_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          Filters = "(category:Book OR category:Ebook) AND _tags:published",
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_all_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex53()
  {
    // >SEPARATOR searchSingleIndex apply_all_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          Filters =
            "available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:\"John Doe\"",
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// escape_spaces
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex54()
  {
    // >SEPARATOR searchSingleIndex escape_spaces
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", Filters = "category:\"Books and Comics\"" }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// escape_keywords
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex55()
  {
    // >SEPARATOR searchSingleIndex escape_keywords
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Filters = "keyword:\"OR\"" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// escape_single_quotes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex56()
  {
    // >SEPARATOR searchSingleIndex escape_single_quotes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", Filters = "content:\"It's a wonderful day\"" }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// escape_double_quotes
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex57()
  {
    // >SEPARATOR searchSingleIndex escape_double_quotes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", Filters = "content:\"She said \"Hello World\"" }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex58()
  {
    // >SEPARATOR searchSingleIndex apply_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          OptionalFilters = new OptionalFilters(
            new List<OptionalFilters>
            {
              new OptionalFilters("category:Book"),
              new OptionalFilters("author:John Doe"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_negative_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex59()
  {
    // >SEPARATOR searchSingleIndex apply_negative_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          OptionalFilters = new OptionalFilters(
            new List<OptionalFilters>
            {
              new OptionalFilters("category:Book"),
              new OptionalFilters("author:-John Doe"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_numeric_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex60()
  {
    // >SEPARATOR searchSingleIndex apply_numeric_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          NumericFilters = new NumericFilters(
            new List<NumericFilters>
            {
              new NumericFilters("price < 1000"),
              new NumericFilters(
                new List<NumericFilters>
                {
                  new NumericFilters("inStock = 1"),
                  new NumericFilters("deliveryDate < 1441755506"),
                }
              ),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_tag_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex61()
  {
    // >SEPARATOR searchSingleIndex apply_tag_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          TagFilters = new TagFilters(
            new List<TagFilters>
            {
              new TagFilters("SciFi"),
              new TagFilters(
                new List<TagFilters> { new TagFilters("Book"), new TagFilters("Movie") }
              ),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// apply_filters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex62()
  {
    // >SEPARATOR searchSingleIndex apply_filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", SumOrFiltersScores = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// facets_all
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex63()
  {
    // >SEPARATOR searchSingleIndex facets_all
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          Facets = new List<string> { "*" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// retrieve_only_some_facets
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex64()
  {
    // >SEPARATOR searchSingleIndex retrieve_only_some_facets
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          Facets = new List<string> { "category", "author" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_max_values_per_facet
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex65()
  {
    // >SEPARATOR searchSingleIndex override_default_max_values_per_facet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", MaxValuesPerFacet = 20 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_faceting_after_distinct
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex66()
  {
    // >SEPARATOR searchSingleIndex enable_faceting_after_distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", FacetingAfterDistinct = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// sort_facet_values_alphabetically
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex67()
  {
    // >SEPARATOR searchSingleIndex sort_facet_values_alphabetically
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", SortFacetValuesBy = "count" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_attributes_to_snippet
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex68()
  {
    // >SEPARATOR searchSingleIndex override_attributes_to_snippet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AttributesToSnippet = new List<string> { "title", "content:80" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_highlight_pre_tag
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex69()
  {
    // >SEPARATOR searchSingleIndex override_default_highlight_pre_tag
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", HighlightPreTag = "<strong>" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_highlight_post_tag
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex70()
  {
    // >SEPARATOR searchSingleIndex override_default_highlight_post_tag
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", HighlightPostTag = "</strong>" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_snippet_ellipsis_text
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex71()
  {
    // >SEPARATOR searchSingleIndex override_default_snippet_ellipsis_text
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", SnippetEllipsisText = "" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_restrict_highlight_and_snippet_arrays
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex72()
  {
    // >SEPARATOR searchSingleIndex enable_restrict_highlight_and_snippet_arrays
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", RestrictHighlightAndSnippetArrays = false }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// access_page
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex73()
  {
    // >SEPARATOR searchSingleIndex access_page
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Page = 0 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_hits_per_page
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex74()
  {
    // >SEPARATOR searchSingleIndex override_default_hits_per_page
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", HitsPerPage = 10 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// get_nth_hit
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex75()
  {
    // >SEPARATOR searchSingleIndex get_nth_hit
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Offset = 4 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// get_n_results
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex76()
  {
    // >SEPARATOR searchSingleIndex get_n_results
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Length = 4 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_min_word_size_for_one_typo
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex77()
  {
    // >SEPARATOR searchSingleIndex override_default_min_word_size_for_one_typo
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", MinWordSizefor1Typo = 2 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_min_word_size_for_two_typos
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex78()
  {
    // >SEPARATOR searchSingleIndex override_default_min_word_size_for_two_typos
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", MinWordSizefor2Typos = 2 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_typo_tolerance_mode
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex79()
  {
    // >SEPARATOR searchSingleIndex override_default_typo_tolerance_mode
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", TypoTolerance = new TypoTolerance(false) }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disable_typos_on_numeric_tokens_at_search_time
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex80()
  {
    // >SEPARATOR searchSingleIndex disable_typos_on_numeric_tokens_at_search_time
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", AllowTyposOnNumericTokens = false }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_around_a_position
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex81()
  {
    // >SEPARATOR searchSingleIndex search_around_a_position
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", AroundLatLng = "40.71, -74.01" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_around_server_ip
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex82()
  {
    // >SEPARATOR searchSingleIndex search_around_server_ip
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", AroundLatLngViaIP = true }),
      new RequestOptionBuilder()
        .AddExtraHeader(
          "x-forwarded-for",
          "94.228.178.246 // should be replaced with the actual IP you would like to search around"
        )
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_around_radius
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex83()
  {
    // >SEPARATOR searchSingleIndex set_around_radius
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", AroundRadius = new AroundRadius(1000) }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disable_automatic_radius
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex84()
  {
    // >SEPARATOR searchSingleIndex disable_automatic_radius
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AroundRadius = new AroundRadius(Enum.Parse<AroundRadiusAll>("All")),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_geo_search_precision
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex85()
  {
    // >SEPARATOR searchSingleIndex set_geo_search_precision
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", AroundPrecision = new AroundPrecision(100) }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_geo_search_precision_non_linear
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex86()
  {
    // >SEPARATOR searchSingleIndex set_geo_search_precision_non_linear
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AroundPrecision = new AroundPrecision(
            new List<Range>
            {
              new Range { From = 0, Value = 25 },
              new Range { From = 2000, Value = 1000 },
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_minimum_geo_search_radius
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex87()
  {
    // >SEPARATOR searchSingleIndex set_minimum_geo_search_radius
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", MinimumAroundRadius = 1000 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_inside_rectangular_area
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex88()
  {
    // >SEPARATOR searchSingleIndex search_inside_rectangular_area
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          InsideBoundingBox = new InsideBoundingBox(
            new List<List<Double>>
            {
              new List<Double> { 46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625 },
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_inside_multiple_rectangular_areas
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex89()
  {
    // >SEPARATOR searchSingleIndex search_inside_multiple_rectangular_areas
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          InsideBoundingBox = new InsideBoundingBox(
            new List<List<Double>>
            {
              new List<Double> { 46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625 },
              new List<Double> { 49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875 },
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_inside_polygon_area
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex90()
  {
    // >SEPARATOR searchSingleIndex search_inside_polygon_area
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          InsidePolygon = new List<List<Double>>
          {
            new List<Double>
            {
              46.650828100116044,
              7.123046875,
              45.17210966999772,
              1.009765625,
              49.62625916704081,
              4.6181640625,
            },
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search_inside_multiple_polygon_areas
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex91()
  {
    // >SEPARATOR searchSingleIndex search_inside_multiple_polygon_areas
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          InsidePolygon = new List<List<Double>>
          {
            new List<Double>
            {
              46.650828100116044,
              7.123046875,
              45.17210966999772,
              1.009765625,
              49.62625916704081,
              4.6181640625,
            },
            new List<Double>
            {
              49.62625916704081,
              4.6181640625,
              47.715070300900194,
              0.482421875,
              45.17210966999772,
              1.009765625,
              50.62626704081,
              4.6181640625,
            },
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_querylanguages_override
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex92()
  {
    // >SEPARATOR searchSingleIndex set_querylanguages_override
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          IgnorePlurals = new IgnorePlurals(
            new List<SupportedLanguage>
            {
              Enum.Parse<SupportedLanguage>("Ca"),
              Enum.Parse<SupportedLanguage>("Es"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_querylanguages_override
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex93()
  {
    // >SEPARATOR searchSingleIndex set_querylanguages_override
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          RemoveStopWords = new RemoveStopWords(
            new List<SupportedLanguage>
            {
              Enum.Parse<SupportedLanguage>("Ca"),
              Enum.Parse<SupportedLanguage>("Es"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_querylanguages_override
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex94()
  {
    // >SEPARATOR searchSingleIndex set_querylanguages_override
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          RemoveStopWords = new RemoveStopWords(
            new List<SupportedLanguage>
            {
              Enum.Parse<SupportedLanguage>("Ca"),
              Enum.Parse<SupportedLanguage>("Es"),
            }
          ),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_querylanguages_with_japanese_query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex95()
  {
    // >SEPARATOR searchSingleIndex set_querylanguages_with_japanese_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          QueryLanguages = new List<SupportedLanguage>
          {
            Enum.Parse<SupportedLanguage>("Ja"),
            Enum.Parse<SupportedLanguage>("En"),
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_natural_languages
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex96()
  {
    // >SEPARATOR searchSingleIndex set_natural_languages
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "",
          NaturalLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_natural_languages_with_query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex97()
  {
    // >SEPARATOR searchSingleIndex override_natural_languages_with_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "",
          NaturalLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
          RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("FirstWords"),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_decompound_query_search_time
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex98()
  {
    // >SEPARATOR searchSingleIndex enable_decompound_query_search_time
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", DecompoundQuery = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_rules_search_time
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex99()
  {
    // >SEPARATOR searchSingleIndex enable_rules_search_time
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", EnableRules = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_rule_contexts
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex100()
  {
    // >SEPARATOR searchSingleIndex set_rule_contexts
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          RuleContexts = new List<string> { "front_end", "website2" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_personalization
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex101()
  {
    // >SEPARATOR searchSingleIndex enable_personalization
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", EnablePersonalization = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_personalization_with_user_token
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex102()
  {
    // >SEPARATOR searchSingleIndex enable_personalization_with_user_token
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          EnablePersonalization = true,
          UserToken = "123456",
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// personalization_impact
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex103()
  {
    // >SEPARATOR searchSingleIndex personalization_impact
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", PersonalizationImpact = 20 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_user_token
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex104()
  {
    // >SEPARATOR searchSingleIndex set_user_token
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", UserToken = "123456" })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_user_token_with_personalization
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex105()
  {
    // >SEPARATOR searchSingleIndex set_user_token_with_personalization
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          EnablePersonalization = true,
          UserToken = "123456",
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_query_type
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex106()
  {
    // >SEPARATOR searchSingleIndex override_default_query_type
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", QueryType = Enum.Parse<QueryType>("PrefixAll") }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_remove_words_if_no_results
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex107()
  {
    // >SEPARATOR searchSingleIndex override_default_remove_words_if_no_results
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("LastWords"),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_advanced_syntax_search_time
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex108()
  {
    // >SEPARATOR searchSingleIndex enable_advanced_syntax_search_time
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", AdvancedSyntax = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// overide_default_optional_words
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex109()
  {
    // >SEPARATOR searchSingleIndex overide_default_optional_words
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          OptionalWords = new OptionalWords(new List<string> { "toyota", "2020 2021" }),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disabling_exact_for_some_attributes_search_time
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex110()
  {
    // >SEPARATOR searchSingleIndex disabling_exact_for_some_attributes_search_time
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          DisableExactOnAttributes = new List<string> { "description" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_exact_single_word_query
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex111()
  {
    // >SEPARATOR searchSingleIndex override_default_exact_single_word_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("None"),
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_aternative_as_exact
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex112()
  {
    // >SEPARATOR searchSingleIndex override_default_aternative_as_exact
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AlternativesAsExact = new List<AlternativesAsExact>
          {
            Enum.Parse<AlternativesAsExact>("MultiWordsSynonym"),
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_advanced_syntax_exact_phrase
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex113()
  {
    // >SEPARATOR searchSingleIndex enable_advanced_syntax_exact_phrase
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AdvancedSyntax = true,
          AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
          {
            Enum.Parse<AdvancedSyntaxFeatures>("ExactPhrase"),
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_advanced_syntax_exclude_words
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex114()
  {
    // >SEPARATOR searchSingleIndex enable_advanced_syntax_exclude_words
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AdvancedSyntax = true,
          AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
          {
            Enum.Parse<AdvancedSyntaxFeatures>("ExcludeWords"),
          },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_distinct
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex115()
  {
    // >SEPARATOR searchSingleIndex override_distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Distinct = new Distinct(0) })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// get_ranking_info
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex116()
  {
    // >SEPARATOR searchSingleIndex get_ranking_info
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", GetRankingInfo = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disable_click_analytics
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex117()
  {
    // >SEPARATOR searchSingleIndex disable_click_analytics
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", ClickAnalytics = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// enable_click_analytics
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex118()
  {
    // >SEPARATOR searchSingleIndex enable_click_analytics
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", ClickAnalytics = true })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disable_analytics
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex119()
  {
    // >SEPARATOR searchSingleIndex disable_analytics
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Analytics = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// add_analytics_tags
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex120()
  {
    // >SEPARATOR searchSingleIndex add_analytics_tags
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          AnalyticsTags = new List<string> { "front_end", "website2" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// disable_synonyms
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex121()
  {
    // >SEPARATOR searchSingleIndex disable_synonyms
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", Synonyms = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_replace_synonyms_in_highlights
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex122()
  {
    // >SEPARATOR searchSingleIndex override_replace_synonyms_in_highlights
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject { Query = "query", ReplaceSynonymsInHighlight = true }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_min_proximity
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex123()
  {
    // >SEPARATOR searchSingleIndex override_min_proximity
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", MinProximity = 2 })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_default_field
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex124()
  {
    // >SEPARATOR searchSingleIndex override_default_field
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(
        new SearchParamsObject
        {
          Query = "query",
          ResponseFields = new List<string> { "hits", "facets" },
        }
      )
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// override_percentile_computation
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex125()
  {
    // >SEPARATOR searchSingleIndex override_percentile_computation
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", PercentileComputation = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_ab_test
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex126()
  {
    // >SEPARATOR searchSingleIndex set_ab_test
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", EnableABTest = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// set_enable_re_ranking
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex127()
  {
    // >SEPARATOR searchSingleIndex set_enable_re_ranking
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query", EnableReRanking = false })
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// with algolia user id
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex128()
  {
    // >SEPARATOR searchSingleIndex with algolia user id
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>(
      "<YOUR_INDEX_NAME>",
      new SearchParams(new SearchParamsObject { Query = "query" }),
      new RequestOptionBuilder().AddExtraHeader("X-Algolia-User-ID", "user1234").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSynonyms method.
  ///
  /// searchSynonyms with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchSynonyms()
  {
    // >SEPARATOR searchSynonyms searchSynonyms with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSynonymsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSynonyms method.
  ///
  /// searchSynonyms with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchSynonyms1()
  {
    // >SEPARATOR searchSynonyms searchSynonyms with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSynonymsAsync(
      "<YOUR_INDEX_NAME>",
      new SearchSynonymsParams
      {
        Query = "myQuery",
        Type = Enum.Parse<SynonymType>("Altcorrection1"),
        Page = 10,
        HitsPerPage = 10,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchUserIds method.
  ///
  /// searchUserIds
  /// </summary>
  public async Task SnippetForSearchClientSearchUserIds()
  {
    // >SEPARATOR searchUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchUserIdsAsync(
      new SearchUserIdsParams
      {
        Query = "test",
        ClusterName = "theClusterName",
        Page = 5,
        HitsPerPage = 10,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForSearchClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetDictionarySettings method.
  ///
  /// get setDictionarySettings results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSetDictionarySettings()
  {
    // >SEPARATOR setDictionarySettings get setDictionarySettings results with minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetDictionarySettingsAsync(
      new DictionarySettingsParams
      {
        DisableStandardEntries = new StandardEntries
        {
          Plurals = new Dictionary<string, Boolean>
          {
            { "fr", false },
            { "en", false },
            { "ru", true },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetDictionarySettings method.
  ///
  /// get setDictionarySettings results with all parameters
  /// </summary>
  public async Task SnippetForSearchClientSetDictionarySettings1()
  {
    // >SEPARATOR setDictionarySettings get setDictionarySettings results with all parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetDictionarySettingsAsync(
      new DictionarySettingsParams
      {
        DisableStandardEntries = new StandardEntries
        {
          Plurals = new Dictionary<string, Boolean>
          {
            { "fr", false },
            { "en", false },
            { "ru", true },
          },
          Stopwords = new Dictionary<string, Boolean> { { "fr", false } },
          Compounds = new Dictionary<string, Boolean> { { "ru", true } },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSetSettings()
  {
    // >SEPARATOR setSettings minimal parameters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { PaginationLimitedTo = 10 },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// boolean typoTolerance
  /// </summary>
  public async Task SnippetForSearchClientSetSettings1()
  {
    // >SEPARATOR setSettings boolean typoTolerance
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { TypoTolerance = new TypoTolerance(true) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enum typoTolerance
  /// </summary>
  public async Task SnippetForSearchClientSetSettings2()
  {
    // >SEPARATOR setSettings enum typoTolerance
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Min")) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// ignorePlurals
  /// </summary>
  public async Task SnippetForSearchClientSetSettings3()
  {
    // >SEPARATOR setSettings ignorePlurals
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { IgnorePlurals = new IgnorePlurals(true) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// list of string ignorePlurals
  /// </summary>
  public async Task SnippetForSearchClientSetSettings4()
  {
    // >SEPARATOR setSettings list of string ignorePlurals
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        IgnorePlurals = new IgnorePlurals(
          new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") }
        ),
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// removeStopWords boolean
  /// </summary>
  public async Task SnippetForSearchClientSetSettings5()
  {
    // >SEPARATOR setSettings removeStopWords boolean
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { RemoveStopWords = new RemoveStopWords(true) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// removeStopWords list of string
  /// </summary>
  public async Task SnippetForSearchClientSetSettings6()
  {
    // >SEPARATOR setSettings removeStopWords list of string
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        RemoveStopWords = new RemoveStopWords(
          new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") }
        ),
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// boolean distinct
  /// </summary>
  public async Task SnippetForSearchClientSetSettings7()
  {
    // >SEPARATOR setSettings boolean distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Distinct = new Distinct(true) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// integer distinct
  /// </summary>
  public async Task SnippetForSearchClientSetSettings8()
  {
    // >SEPARATOR setSettings integer distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Distinct = new Distinct(1) },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// distinct company
  /// </summary>
  public async Task SnippetForSearchClientSetSettings9()
  {
    // >SEPARATOR setSettings distinct company
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributeForDistinct = "company", Distinct = new Distinct(true) }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// distinct design
  /// </summary>
  public async Task SnippetForSearchClientSetSettings10()
  {
    // >SEPARATOR setSettings distinct design
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributeForDistinct = "design", Distinct = new Distinct(true) }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// distinct true
  /// </summary>
  public async Task SnippetForSearchClientSetSettings11()
  {
    // >SEPARATOR setSettings distinct true
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Distinct = new Distinct(true) }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// distinct section
  /// </summary>
  public async Task SnippetForSearchClientSetSettings12()
  {
    // >SEPARATOR setSettings distinct section
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributeForDistinct = "section", Distinct = new Distinct(true) }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting allergens
  /// </summary>
  public async Task SnippetForSearchClientSetSettings13()
  {
    // >SEPARATOR setSettings attributesForFaceting allergens
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesForFaceting = new List<string> { "allergens" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// api_attributes_for_faceting
  /// </summary>
  public async Task SnippetForSearchClientSetSettings14()
  {
    // >SEPARATOR setSettings api_attributes_for_faceting
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string> { "genre", "author" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// api_attributes_for_faceting_searchable
  /// </summary>
  public async Task SnippetForSearchClientSetSettings15()
  {
    // >SEPARATOR setSettings api_attributes_for_faceting_searchable
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string> { "genre", "searchable(author)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// api_attributes_for_filter_only
  /// </summary>
  public async Task SnippetForSearchClientSetSettings16()
  {
    // >SEPARATOR setSettings api_attributes_for_filter_only
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string> { "filterOnly(genre)", "author" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting categoryPageId
  /// </summary>
  public async Task SnippetForSearchClientSetSettings17()
  {
    // >SEPARATOR setSettings attributesForFaceting categoryPageId
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string> { "searchable(categoryPageId)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// unretrievableAttributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings18()
  {
    // >SEPARATOR setSettings unretrievableAttributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { UnretrievableAttributes = new List<string> { "visible_by" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting user restricted data
  /// </summary>
  public async Task SnippetForSearchClientSetSettings19()
  {
    // >SEPARATOR setSettings attributesForFaceting user restricted data
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesForFaceting = new List<string> { "filterOnly(visible_by)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting optional filters
  /// </summary>
  public async Task SnippetForSearchClientSetSettings20()
  {
    // >SEPARATOR setSettings attributesForFaceting optional filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string> { "can_deliver_quickly", "restaurant" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting redirect index
  /// </summary>
  public async Task SnippetForSearchClientSetSettings21()
  {
    // >SEPARATOR setSettings attributesForFaceting redirect index
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesForFaceting = new List<string> { "query_terms" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting multiple consequences
  /// </summary>
  public async Task SnippetForSearchClientSetSettings22()
  {
    // >SEPARATOR setSettings attributesForFaceting multiple consequences
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesForFaceting = new List<string> { "director" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting in-depth optional filters
  /// </summary>
  public async Task SnippetForSearchClientSetSettings23()
  {
    // >SEPARATOR setSettings attributesForFaceting in-depth optional filters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesForFaceting = new List<string> { "filterOnly(brand)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// mode neuralSearch
  /// </summary>
  public async Task SnippetForSearchClientSetSettings24()
  {
    // >SEPARATOR setSettings mode neuralSearch
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Mode = Enum.Parse<Mode>("NeuralSearch") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// mode keywordSearch
  /// </summary>
  public async Task SnippetForSearchClientSetSettings25()
  {
    // >SEPARATOR setSettings mode keywordSearch
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Mode = Enum.Parse<Mode>("KeywordSearch") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributes same priority
  /// </summary>
  public async Task SnippetForSearchClientSetSettings26()
  {
    // >SEPARATOR setSettings searchableAttributes same priority
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "title,comments", "ingredients" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributes higher priority
  /// </summary>
  public async Task SnippetForSearchClientSetSettings27()
  {
    // >SEPARATOR setSettings searchableAttributes higher priority
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "title", "ingredients" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking retweets
  /// </summary>
  public async Task SnippetForSearchClientSetSettings28()
  {
    // >SEPARATOR setSettings customRanking retweets
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "desc(retweets)", "desc(likes)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking boosted
  /// </summary>
  public async Task SnippetForSearchClientSetSettings29()
  {
    // >SEPARATOR setSettings customRanking boosted
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { CustomRanking = new List<string> { "desc(boosted)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking pageviews
  /// </summary>
  public async Task SnippetForSearchClientSetSettings30()
  {
    // >SEPARATOR setSettings customRanking pageviews
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "desc(pageviews)", "desc(comments)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking applying search parameters for a specific query
  /// </summary>
  public async Task SnippetForSearchClientSetSettings31()
  {
    // >SEPARATOR setSettings customRanking applying search parameters for a specific query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "desc(nb_airline_liaisons)" },
        AttributesForFaceting = new List<string> { "city, country" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking rounded pageviews
  /// </summary>
  public async Task SnippetForSearchClientSetSettings32()
  {
    // >SEPARATOR setSettings customRanking rounded pageviews
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "desc(rounded_pageviews)", "desc(comments)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking price
  /// </summary>
  public async Task SnippetForSearchClientSetSettings33()
  {
    // >SEPARATOR setSettings customRanking price
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { CustomRanking = new List<string> { "desc(price)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// ranking exhaustive
  /// </summary>
  public async Task SnippetForSearchClientSetSettings34()
  {
    // >SEPARATOR setSettings ranking exhaustive
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Ranking = new List<string>
        {
          "desc(price)",
          "typo",
          "geo",
          "words",
          "filters",
          "proximity",
          "attribute",
          "exact",
          "custom",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// ranking standard replica
  /// </summary>
  public async Task SnippetForSearchClientSetSettings35()
  {
    // >SEPARATOR setSettings ranking standard replica
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Ranking = new List<string> { "desc(post_date_timestamp)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// ranking virtual replica
  /// </summary>
  public async Task SnippetForSearchClientSetSettings36()
  {
    // >SEPARATOR setSettings ranking virtual replica
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { CustomRanking = new List<string> { "desc(post_date_timestamp)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// customRanking and ranking sort alphabetically
  /// </summary>
  public async Task SnippetForSearchClientSetSettings37()
  {
    // >SEPARATOR setSettings customRanking and ranking sort alphabetically
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "asc(textual_attribute)" },
        Ranking = new List<string>
        {
          "custom",
          "typo",
          "geo",
          "words",
          "filters",
          "proximity",
          "attribute",
          "exact",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// relevancyStrictness
  /// </summary>
  public async Task SnippetForSearchClientSetSettings38()
  {
    // >SEPARATOR setSettings relevancyStrictness
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "asc(textual_attribute)" },
        RelevancyStrictness = 0,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// create replica index
  /// </summary>
  public async Task SnippetForSearchClientSetSettings39()
  {
    // >SEPARATOR setSettings create replica index
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Replicas = new List<string> { "products_price_desc" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// create replica index articles
  /// </summary>
  public async Task SnippetForSearchClientSetSettings40()
  {
    // >SEPARATOR setSettings create replica index articles
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Replicas = new List<string> { "articles_date_desc" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// create virtual replica index
  /// </summary>
  public async Task SnippetForSearchClientSetSettings41()
  {
    // >SEPARATOR setSettings create virtual replica index
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Replicas = new List<string> { "virtual(products_price_desc)" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// unlink replica index
  /// </summary>
  public async Task SnippetForSearchClientSetSettings42()
  {
    // >SEPARATOR setSettings unlink replica index
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Replicas = new List<string> { "" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// forwardToReplicas
  /// </summary>
  public async Task SnippetForSearchClientSetSettings43()
  {
    // >SEPARATOR setSettings forwardToReplicas
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "name", "description" },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// maxValuesPerFacet
  /// </summary>
  public async Task SnippetForSearchClientSetSettings44()
  {
    // >SEPARATOR setSettings maxValuesPerFacet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MaxValuesPerFacet = 1000 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// maxFacetHits
  /// </summary>
  public async Task SnippetForSearchClientSetSettings45()
  {
    // >SEPARATOR setSettings maxFacetHits
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MaxFacetHits = 1000 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesForFaceting complex
  /// </summary>
  public async Task SnippetForSearchClientSetSettings46()
  {
    // >SEPARATOR setSettings attributesForFaceting complex
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string>
        {
          "actor",
          "filterOnly(category)",
          "searchable(publisher)",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// ranking closest dates
  /// </summary>
  public async Task SnippetForSearchClientSetSettings47()
  {
    // >SEPARATOR setSettings ranking closest dates
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Ranking = new List<string>
        {
          "asc(date_timestamp)",
          "typo",
          "geo",
          "words",
          "filters",
          "proximity",
          "attribute",
          "exact",
          "custom",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributes item variation
  /// </summary>
  public async Task SnippetForSearchClientSetSettings48()
  {
    // >SEPARATOR setSettings searchableAttributes item variation
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "design", "type", "color" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributes around location
  /// </summary>
  public async Task SnippetForSearchClientSetSettings49()
  {
    // >SEPARATOR setSettings searchableAttributes around location
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "name", "country", "code", "iata_code" },
        CustomRanking = new List<string> { "desc(links_count)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesToHighlight
  /// </summary>
  public async Task SnippetForSearchClientSetSettings50()
  {
    // >SEPARATOR setSettings attributesToHighlight
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesToHighlight = new List<string> { "author", "title", "content" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// attributesToHighlightStar
  /// </summary>
  public async Task SnippetForSearchClientSetSettings51()
  {
    // >SEPARATOR setSettings attributesToHighlightStar
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesToHighlight = new List<string> { "*" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// everything
  /// </summary>
  public async Task SnippetForSearchClientSetSettings52()
  {
    // >SEPARATOR setSettings everything
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AdvancedSyntax = true,
        AdvancedSyntaxFeatures = new List<AdvancedSyntaxFeatures>
        {
          Enum.Parse<AdvancedSyntaxFeatures>("ExactPhrase"),
        },
        AllowCompressionOfIntegerArray = true,
        AllowTyposOnNumericTokens = true,
        AlternativesAsExact = new List<AlternativesAsExact>
        {
          Enum.Parse<AlternativesAsExact>("SingleWordSynonym"),
        },
        AttributeCriteriaComputedByMinProximity = true,
        AttributeForDistinct = "test",
        AttributesForFaceting = new List<string> { "algolia" },
        AttributesToHighlight = new List<string> { "algolia" },
        AttributesToRetrieve = new List<string> { "algolia" },
        AttributesToSnippet = new List<string> { "algolia" },
        AttributesToTransliterate = new List<string> { "algolia" },
        CamelCaseAttributes = new List<string> { "algolia" },
        CustomNormalization = new Dictionary<string, Dictionary<string, string>>
        {
          {
            "algolia",
            new Dictionary<string, string> { { "aloglia", "aglolia" } }
          },
        },
        CustomRanking = new List<string> { "algolia" },
        DecompoundQuery = false,
        DecompoundedAttributes = new Dictionary<string, string> { { "algolia", "aloglia" } },
        DisableExactOnAttributes = new List<string> { "algolia" },
        DisablePrefixOnAttributes = new List<string> { "algolia" },
        DisableTypoToleranceOnAttributes = new List<string> { "algolia" },
        DisableTypoToleranceOnWords = new List<string> { "algolia" },
        Distinct = new Distinct(3),
        EnablePersonalization = true,
        EnableReRanking = false,
        EnableRules = true,
        ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("Attribute"),
        HighlightPreTag = "<span>",
        HighlightPostTag = "</span>",
        HitsPerPage = 10,
        IgnorePlurals = new IgnorePlurals(false),
        IndexLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
        KeepDiacriticsOnCharacters = "abc",
        MaxFacetHits = 20,
        MaxValuesPerFacet = 30,
        MinProximity = 6,
        MinWordSizefor1Typo = 5,
        MinWordSizefor2Typos = 11,
        Mode = Enum.Parse<Mode>("NeuralSearch"),
        NumericAttributesForFiltering = new List<string> { "algolia" },
        OptionalWords = new OptionalWords(new List<string> { "myspace" }),
        PaginationLimitedTo = 0,
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Fr") },
        QueryType = Enum.Parse<QueryType>("PrefixLast"),
        Ranking = new List<string> { "geo" },
        ReRankingApplyFilter = new ReRankingApplyFilter("mySearch:filters"),
        RelevancyStrictness = 10,
        RemoveStopWords = new RemoveStopWords(false),
        RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("LastWords"),
        RenderingContent = new RenderingContent
        {
          FacetOrdering = new FacetOrdering
          {
            Facets = new Facets
            {
              Order = new List<string> { "a", "b" },
            },
            Values = new Dictionary<string, Value>
            {
              {
                "a",
                new Value
                {
                  Order = new List<string> { "b" },
                  SortRemainingBy = Enum.Parse<SortRemainingBy>("Count"),
                }
              },
            },
          },
        },
        ReplaceSynonymsInHighlight = true,
        Replicas = new List<string> { "" },
        ResponseFields = new List<string> { "algolia" },
        RestrictHighlightAndSnippetArrays = true,
        SearchableAttributes = new List<string> { "foo" },
        SemanticSearch = new SemanticSearch { EventSources = new List<string> { "foo" } },
        SeparatorsToIndex = "bar",
        SnippetEllipsisText = "---",
        SortFacetValuesBy = "date",
        TypoTolerance = new TypoTolerance(false),
        UnretrievableAttributes = new List<string> { "foo" },
        UserData = new Dictionary<string, string> { { "user", "data" } },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesWithCustomRankingsAndAttributesForFaceting
  /// </summary>
  public async Task SnippetForSearchClientSetSettings53()
  {
    // >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string>
        {
          "brand",
          "name",
          "categories",
          "unordered(description)",
        },
        CustomRanking = new List<string> { "desc(popularity)" },
        AttributesForFaceting = new List<string>
        {
          "searchable(brand)",
          "type",
          "categories",
          "price",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesOrdering
  /// </summary>
  public async Task SnippetForSearchClientSetSettings54()
  {
    // >SEPARATOR setSettings searchableAttributesOrdering
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "unordered(title)", "cast" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesProductReferenceSuffixes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings55()
  {
    // >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string>
        {
          "name",
          "product_reference",
          "product_reference_suffixes",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// queryLanguageAndIgnorePlurals
  /// </summary>
  public async Task SnippetForSearchClientSetSettings56()
  {
    // >SEPARATOR setSettings queryLanguageAndIgnorePlurals
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("En") },
        IgnorePlurals = new IgnorePlurals(true),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesInMovies
  /// </summary>
  public async Task SnippetForSearchClientSetSettings57()
  {
    // >SEPARATOR setSettings searchableAttributesInMovies
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "title_eng", "title_fr", "title_es" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disablePrefixOnAttributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings58()
  {
    // >SEPARATOR setSettings disablePrefixOnAttributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { DisablePrefixOnAttributes = new List<string> { "serial_number" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disableTypoToleranceOnAttributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings59()
  {
    // >SEPARATOR setSettings disableTypoToleranceOnAttributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { DisableTypoToleranceOnAttributes = new List<string> { "serial_number" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesSimpleExample
  /// </summary>
  public async Task SnippetForSearchClientSetSettings60()
  {
    // >SEPARATOR setSettings searchableAttributesSimpleExample
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { SearchableAttributes = new List<string> { "serial_number" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// searchableAttributesSimpleExampleAlt
  /// </summary>
  public async Task SnippetForSearchClientSetSettings61()
  {
    // >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string> { "serial_number", "serial_number_suffixes" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_searchable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings62()
  {
    // >SEPARATOR setSettings set_searchable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        SearchableAttributes = new List<string>
        {
          "title,alternative_title",
          "author",
          "unordered(text)",
          "emails.personal",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_searchable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings63()
  {
    // >SEPARATOR setSettings set_searchable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string>
        {
          "author",
          "filterOnly(isbn)",
          "searchable(edition)",
          "afterDistinct(category)",
          "afterDistinct(searchable(publisher))",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// unretrievable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings64()
  {
    // >SEPARATOR setSettings unretrievable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { UnretrievableAttributes = new List<string> { "total_number_of_sales" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_retrievable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings65()
  {
    // >SEPARATOR setSettings set_retrievable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesToRetrieve = new List<string> { "author", "title", "content" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_all_attributes_as_retrievable
  /// </summary>
  public async Task SnippetForSearchClientSetSettings66()
  {
    // >SEPARATOR setSettings set_all_attributes_as_retrievable
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesToRetrieve = new List<string> { "*" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// specify_attributes_not_to_retrieve
  /// </summary>
  public async Task SnippetForSearchClientSetSettings67()
  {
    // >SEPARATOR setSettings specify_attributes_not_to_retrieve
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesToRetrieve = new List<string> { "*", "-SKU", "-internal_desc" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// neural_search
  /// </summary>
  public async Task SnippetForSearchClientSetSettings68()
  {
    // >SEPARATOR setSettings neural_search
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Mode = Enum.Parse<Mode>("NeuralSearch") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// keyword_search
  /// </summary>
  public async Task SnippetForSearchClientSetSettings69()
  {
    // >SEPARATOR setSettings keyword_search
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Mode = Enum.Parse<Mode>("KeywordSearch") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_ranking
  /// </summary>
  public async Task SnippetForSearchClientSetSettings70()
  {
    // >SEPARATOR setSettings set_default_ranking
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Ranking = new List<string>
        {
          "typo",
          "geo",
          "words",
          "filters",
          "attribute",
          "proximity",
          "exact",
          "custom",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_ranking_by_attribute_asc
  /// </summary>
  public async Task SnippetForSearchClientSetSettings71()
  {
    // >SEPARATOR setSettings set_ranking_by_attribute_asc
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Ranking = new List<string>
        {
          "asc(price)",
          "typo",
          "geo",
          "words",
          "filters",
          "proximity",
          "attribute",
          "exact",
          "custom",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_ranking_by_attribute_desc
  /// </summary>
  public async Task SnippetForSearchClientSetSettings72()
  {
    // >SEPARATOR setSettings set_ranking_by_attribute_desc
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Ranking = new List<string>
        {
          "desc(price)",
          "typo",
          "geo",
          "words",
          "filters",
          "proximity",
          "attribute",
          "exact",
          "custom",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// restrict_searchable_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings73()
  {
    // >SEPARATOR setSettings restrict_searchable_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomRanking = new List<string> { "desc(popularity)", "asc(price)" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_relevancy
  /// </summary>
  public async Task SnippetForSearchClientSetSettings74()
  {
    // >SEPARATOR setSettings set_default_relevancy
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { RelevancyStrictness = 90 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_replicas
  /// </summary>
  public async Task SnippetForSearchClientSetSettings75()
  {
    // >SEPARATOR setSettings set_replicas
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        Replicas = new List<string> { "name_of_replica_index1", "name_of_replica_index2" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_max_values_per_facet
  /// </summary>
  public async Task SnippetForSearchClientSetSettings76()
  {
    // >SEPARATOR setSettings set_default_max_values_per_facet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MaxValuesPerFacet = 100 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_sort_facet_values_by
  /// </summary>
  public async Task SnippetForSearchClientSetSettings77()
  {
    // >SEPARATOR setSettings set_default_sort_facet_values_by
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { SortFacetValuesBy = "alpha" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_attributes_to_snippet
  /// </summary>
  public async Task SnippetForSearchClientSetSettings78()
  {
    // >SEPARATOR setSettings set_attributes_to_snippet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesToSnippet = new List<string> { "content:80", "description" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_all_attributes_to_snippet
  /// </summary>
  public async Task SnippetForSearchClientSetSettings79()
  {
    // >SEPARATOR setSettings set_all_attributes_to_snippet
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributesToSnippet = new List<string> { "*:80" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_highlight_pre_tag
  /// </summary>
  public async Task SnippetForSearchClientSetSettings80()
  {
    // >SEPARATOR setSettings set_default_highlight_pre_tag
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { HighlightPreTag = "<em>" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_highlight_post_tag
  /// </summary>
  public async Task SnippetForSearchClientSetSettings81()
  {
    // >SEPARATOR setSettings set_default_highlight_post_tag
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { HighlightPostTag = "</em>" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_snippet_ellipsis_text
  /// </summary>
  public async Task SnippetForSearchClientSetSettings82()
  {
    // >SEPARATOR setSettings set_default_snippet_ellipsis_text
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { SnippetEllipsisText = "…" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_restrict_highlight_and_snippet_arrays_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings83()
  {
    // >SEPARATOR setSettings enable_restrict_highlight_and_snippet_arrays_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { RestrictHighlightAndSnippetArrays = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_hits_per_page
  /// </summary>
  public async Task SnippetForSearchClientSetSettings84()
  {
    // >SEPARATOR setSettings set_default_hits_per_page
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { HitsPerPage = 20 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_pagination_limit
  /// </summary>
  public async Task SnippetForSearchClientSetSettings85()
  {
    // >SEPARATOR setSettings set_pagination_limit
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { PaginationLimitedTo = 1000 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_min_word_size_for_one_typo
  /// </summary>
  public async Task SnippetForSearchClientSetSettings86()
  {
    // >SEPARATOR setSettings set_default_min_word_size_for_one_typo
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MinWordSizefor1Typo = 4 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_min_word_size_for_two_typos
  /// </summary>
  public async Task SnippetForSearchClientSetSettings87()
  {
    // >SEPARATOR setSettings set_default_min_word_size_for_two_typos
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MinWordSizefor2Typos = 4 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_typo_tolerance_mode
  /// </summary>
  public async Task SnippetForSearchClientSetSettings88()
  {
    // >SEPARATOR setSettings set_default_typo_tolerance_mode
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { TypoTolerance = new TypoTolerance(true) }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disable_typos_on_numeric_tokens_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings89()
  {
    // >SEPARATOR setSettings disable_typos_on_numeric_tokens_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AllowTyposOnNumericTokens = false }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disable_typo_tolerance_for_words
  /// </summary>
  public async Task SnippetForSearchClientSetSettings90()
  {
    // >SEPARATOR setSettings disable_typo_tolerance_for_words
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        DisableTypoToleranceOnWords = new List<string> { "wheel", "1X2BCD" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_separators_to_index
  /// </summary>
  public async Task SnippetForSearchClientSetSettings91()
  {
    // >SEPARATOR setSettings set_separators_to_index
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { SeparatorsToIndex = "+#" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_languages_using_querylanguages
  /// </summary>
  public async Task SnippetForSearchClientSetSettings92()
  {
    // >SEPARATOR setSettings set_languages_using_querylanguages
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Es") },
        IgnorePlurals = new IgnorePlurals(true),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_attributes_to_transliterate
  /// </summary>
  public async Task SnippetForSearchClientSetSettings93()
  {
    // >SEPARATOR setSettings set_attributes_to_transliterate
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        IndexLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Ja") },
        AttributesToTransliterate = new List<string> { "name", "description" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_languages_using_querylanguages
  /// </summary>
  public async Task SnippetForSearchClientSetSettings94()
  {
    // >SEPARATOR setSettings set_languages_using_querylanguages
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Es") },
        RemoveStopWords = new RemoveStopWords(true),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_camel_case_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings95()
  {
    // >SEPARATOR setSettings set_camel_case_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { CamelCaseAttributes = new List<string> { "description" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_decompounded_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings96()
  {
    // >SEPARATOR setSettings set_decompounded_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        DecompoundedAttributes = new Dictionary<string, List<string>>
        {
          {
            "de",
            new List<string> { "name" }
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_decompounded_multiple_attributes
  /// </summary>
  public async Task SnippetForSearchClientSetSettings97()
  {
    // >SEPARATOR setSettings set_decompounded_multiple_attributes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        DecompoundedAttributes = new Dictionary<string, List<string>>
        {
          {
            "de",
            new List<string> { "name_de", "description_de" }
          },
          {
            "fi",
            new List<string> { "name_fi", "description_fi" }
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_keep_diacritics_on_characters
  /// </summary>
  public async Task SnippetForSearchClientSetSettings98()
  {
    // >SEPARATOR setSettings set_keep_diacritics_on_characters
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { KeepDiacriticsOnCharacters = "øé" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_custom_normalization
  /// </summary>
  public async Task SnippetForSearchClientSetSettings99()
  {
    // >SEPARATOR setSettings set_custom_normalization
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        CustomNormalization = new Dictionary<string, Dictionary<string, string>>
        {
          {
            "default",
            new Dictionary<string, string> { { "ä", "ae" } }
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_languages_using_querylanguages
  /// </summary>
  public async Task SnippetForSearchClientSetSettings100()
  {
    // >SEPARATOR setSettings set_languages_using_querylanguages
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        QueryLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Es") },
        RemoveStopWords = new RemoveStopWords(true),
        IgnorePlurals = new IgnorePlurals(true),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_indexlanguages
  /// </summary>
  public async Task SnippetForSearchClientSetSettings101()
  {
    // >SEPARATOR setSettings set_indexlanguages
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        IndexLanguages = new List<SupportedLanguage> { Enum.Parse<SupportedLanguage>("Ja") },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_decompound_query_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings102()
  {
    // >SEPARATOR setSettings enable_decompound_query_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { DecompoundQuery = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_rules_syntax_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings103()
  {
    // >SEPARATOR setSettings enable_rules_syntax_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { EnableRules = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_personalization_settings
  /// </summary>
  public async Task SnippetForSearchClientSetSettings104()
  {
    // >SEPARATOR setSettings enable_personalization_settings
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { EnablePersonalization = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_query_type
  /// </summary>
  public async Task SnippetForSearchClientSetSettings105()
  {
    // >SEPARATOR setSettings set_default_query_type
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { QueryType = Enum.Parse<QueryType>("PrefixLast") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_remove_words_if_no_result
  /// </summary>
  public async Task SnippetForSearchClientSetSettings106()
  {
    // >SEPARATOR setSettings set_default_remove_words_if_no_result
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { RemoveWordsIfNoResults = Enum.Parse<RemoveWordsIfNoResults>("None") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_advanced_syntax_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings107()
  {
    // >SEPARATOR setSettings enable_advanced_syntax_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AdvancedSyntax = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_optional_words
  /// </summary>
  public async Task SnippetForSearchClientSetSettings108()
  {
    // >SEPARATOR setSettings set_default_optional_words
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        OptionalWords = new OptionalWords(new List<string> { "blue", "iphone case" }),
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disabling_prefix_search_for_some_attributes_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings109()
  {
    // >SEPARATOR setSettings disabling_prefix_search_for_some_attributes_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { DisablePrefixOnAttributes = new List<string> { "sku" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// disabling_exact_for_some_attributes_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings110()
  {
    // >SEPARATOR setSettings disabling_exact_for_some_attributes_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { DisableExactOnAttributes = new List<string> { "description" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_exact_single_word_query
  /// </summary>
  public async Task SnippetForSearchClientSetSettings111()
  {
    // >SEPARATOR setSettings set_default_exact_single_word_query
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { ExactOnSingleWordQuery = Enum.Parse<ExactOnSingleWordQuery>("Attribute") }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_aternative_as_exact
  /// </summary>
  public async Task SnippetForSearchClientSetSettings112()
  {
    // >SEPARATOR setSettings set_default_aternative_as_exact
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AlternativesAsExact = new List<AlternativesAsExact>
        {
          Enum.Parse<AlternativesAsExact>("IgnorePlurals"),
          Enum.Parse<AlternativesAsExact>("SingleWordSynonym"),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_advanced_syntax_by_default
  /// </summary>
  public async Task SnippetForSearchClientSetSettings113()
  {
    // >SEPARATOR setSettings enable_advanced_syntax_by_default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AdvancedSyntax = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_numeric_attributes_for_filtering
  /// </summary>
  public async Task SnippetForSearchClientSetSettings114()
  {
    // >SEPARATOR setSettings set_numeric_attributes_for_filtering
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        NumericAttributesForFiltering = new List<string> { "quantity", "popularity" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// enable_compression_of_integer_array
  /// </summary>
  public async Task SnippetForSearchClientSetSettings115()
  {
    // >SEPARATOR setSettings enable_compression_of_integer_array
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AllowCompressionOfIntegerArray = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_attributes_for_distinct
  /// </summary>
  public async Task SnippetForSearchClientSetSettings116()
  {
    // >SEPARATOR setSettings set_attributes_for_distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributeForDistinct = "url" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_distinct
  /// </summary>
  public async Task SnippetForSearchClientSetSettings117()
  {
    // >SEPARATOR setSettings set_distinct
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { Distinct = new Distinct(1), AttributeForDistinct = "url" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_replace_synonyms_in_highlights
  /// </summary>
  public async Task SnippetForSearchClientSetSettings118()
  {
    // >SEPARATOR setSettings set_replace_synonyms_in_highlights
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { ReplaceSynonymsInHighlight = false }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_min_proximity
  /// </summary>
  public async Task SnippetForSearchClientSetSettings119()
  {
    // >SEPARATOR setSettings set_min_proximity
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MinProximity = 1 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_default_field
  /// </summary>
  public async Task SnippetForSearchClientSetSettings120()
  {
    // >SEPARATOR setSettings set_default_field
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        ResponseFields = new List<string> { "hits", "hitsPerPage", "nbPages", "page" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_max_facet_hits
  /// </summary>
  public async Task SnippetForSearchClientSetSettings121()
  {
    // >SEPARATOR setSettings set_max_facet_hits
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { MaxFacetHits = 10 }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_attribute_criteria_computed_by_min_proximity
  /// </summary>
  public async Task SnippetForSearchClientSetSettings122()
  {
    // >SEPARATOR setSettings set_attribute_criteria_computed_by_min_proximity
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings { AttributeCriteriaComputedByMinProximity = true }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_user_data
  /// </summary>
  public async Task SnippetForSearchClientSetSettings123()
  {
    // >SEPARATOR setSettings set_user_data
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        UserData = new Dictionary<string, string>
        {
          { "extraData", "This is the custom data that you want to store in your index" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// set_rendering_content
  /// </summary>
  public async Task SnippetForSearchClientSetSettings124()
  {
    // >SEPARATOR setSettings set_rendering_content
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        RenderingContent = new RenderingContent
        {
          FacetOrdering = new FacetOrdering
          {
            Facets = new Facets
            {
              Order = new List<string> { "size", "brand" },
            },
            Values = new Dictionary<string, Value>
            {
              {
                "brand",
                new Value
                {
                  Order = new List<string> { "uniqlo" },
                  Hide = new List<string> { "muji" },
                  SortRemainingBy = Enum.Parse<SortRemainingBy>("Count"),
                }
              },
              {
                "size",
                new Value
                {
                  Order = new List<string> { "S", "M", "L" },
                  SortRemainingBy = Enum.Parse<SortRemainingBy>("Hidden"),
                }
              },
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the UpdateApiKey method.
  ///
  /// updateApiKey
  /// </summary>
  public async Task SnippetForSearchClientUpdateApiKey()
  {
    // >SEPARATOR updateApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.UpdateApiKeyAsync(
      "ALGOLIA_API_KEY",
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key helper - add
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey()
  {
    // >SEPARATOR waitForApiKey wait for api key helper - add
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-add-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Add")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key - update
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey1()
  {
    // >SEPARATOR waitForApiKey wait for api key - update
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-update-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Update"),
      new ApiKey
      {
        Description = "my updated api key",
        Acl = new List<Acl>
        {
          Enum.Parse<Acl>("Search"),
          Enum.Parse<Acl>("AddObject"),
          Enum.Parse<Acl>("DeleteObject"),
        },
        Indexes = new List<string> { "Movies", "Books" },
        Referers = new List<string> { "*google.com", "*algolia.com" },
        Validity = 305,
        MaxQueriesPerIPPerHour = 95,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key - delete
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey2()
  {
    // >SEPARATOR waitForApiKey wait for api key - delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-delete-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Delete")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForAppTask method.
  ///
  /// wait for an application-level task
  /// </summary>
  public async Task SnippetForSearchClientWaitForAppTask()
  {
    // >SEPARATOR waitForAppTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForAppTaskAsync(123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForTask method.
  ///
  /// wait for task
  /// </summary>
  public async Task SnippetForSearchClientWaitForTask()
  {
    // >SEPARATOR waitForTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForTaskAsync("<YOUR_INDEX_NAME>", 123L);
    // >LOG
    // SEPARATOR<
  }
}
