// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Recommend;
// IMPORT<
using Action = Algolia.Search.Models.Ingestion.Action;

public class SnippetRecommendClient
{
  /// <summary>
  /// Snippet for the BatchRecommendRules method.
  ///
  /// batch recommend rules
  /// </summary>
  public async Task SnippetForRecommendClientBatchRecommendRules()
  {
    // >SEPARATOR batchRecommendRules default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.BatchRecommendRulesAsync(
      "<YOUR_INDEX_NAME>",
      Enum.Parse<RecommendModels>("RelatedProducts")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForRecommendClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForRecommendClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteRecommendRule method.
  ///
  /// deleteRecommendRule
  /// </summary>
  public async Task SnippetForRecommendClientDeleteRecommendRule()
  {
    // >SEPARATOR deleteRecommendRule default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.DeleteRecommendRuleAsync(
      "<YOUR_INDEX_NAME>",
      Enum.Parse<RecommendModels>("RelatedProducts"),
      "objectID"
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendRule method.
  ///
  /// getRecommendRule
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendRule()
  {
    // >SEPARATOR getRecommendRule default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendRuleAsync(
      "<YOUR_INDEX_NAME>",
      Enum.Parse<RecommendModels>("RelatedProducts"),
      "objectID"
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendStatus method.
  ///
  /// getRecommendStatus
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendStatus()
  {
    // >SEPARATOR getRecommendStatus default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendStatusAsync(
      "<YOUR_INDEX_NAME>",
      Enum.Parse<RecommendModels>("RelatedProducts"),
      12345L
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get recommendations for recommend model with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations()
  {
    // >SEPARATOR getRecommendations get recommendations for recommend model with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 42.1,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get recommendations with e2e to check oneOf model
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations1()
  {
    // >SEPARATOR getRecommendations get recommendations with e2e to check oneOf model
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "Æon Flux",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 20.0,
              MaxRecommendations = 2,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get recommendations for recommend model with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations2()
  {
    // >SEPARATOR getRecommendations get recommendations for recommend model with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 42.1,
              MaxRecommendations = 10,
              QueryParameters = new RecommendSearchParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("query") }
                ),
              },
              FallbackParameters = new FallbackParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("fallback") }
                ),
              },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get recommendations for trending model with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations3()
  {
    // >SEPARATOR getRecommendations get recommendations for trending model with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new TrendingItemsQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Model = Enum.Parse<TrendingItemsModel>("TrendingItems"),
              Threshold = 42.1,
              FacetName = "facet",
              FacetValue = "value",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get recommendations for trending model with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations4()
  {
    // >SEPARATOR getRecommendations get recommendations for trending model with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new TrendingItemsQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Model = Enum.Parse<TrendingItemsModel>("TrendingItems"),
              Threshold = 42.1,
              MaxRecommendations = 10,
              FacetName = "myFacetName",
              FacetValue = "myFacetValue",
              QueryParameters = new RecommendSearchParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("query") }
                ),
              },
              FallbackParameters = new FallbackParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("fallback") }
                ),
              },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get multiple recommendations with minimal parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations5()
  {
    // >SEPARATOR getRecommendations get multiple recommendations with minimal parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID1",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 21.7,
            }
          ),
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID2",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 21.7,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get multiple recommendations with all parameters
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations6()
  {
    // >SEPARATOR getRecommendations get multiple recommendations with all parameters
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID1",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 21.7,
              MaxRecommendations = 10,
              QueryParameters = new RecommendSearchParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("query1") }
                ),
              },
              FallbackParameters = new FallbackParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("fallback1") }
                ),
              },
            }
          ),
          new RecommendationsRequest(
            new RelatedQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID2",
              Model = Enum.Parse<RelatedModel>("RelatedProducts"),
              Threshold = 21.7,
              MaxRecommendations = 10,
              QueryParameters = new RecommendSearchParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("query2") }
                ),
              },
              FallbackParameters = new FallbackParams
              {
                Query = "myQuery",
                FacetFilters = new FacetFilters(
                  new List<FacetFilters> { new FacetFilters("fallback2") }
                ),
              },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRecommendations method.
  ///
  /// get frequently bought together recommendations
  /// </summary>
  public async Task SnippetForRecommendClientGetRecommendations7()
  {
    // >SEPARATOR getRecommendations get frequently bought together recommendations
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.GetRecommendationsAsync(
      new GetRecommendationsParams
      {
        Requests = new List<RecommendationsRequest>
        {
          new RecommendationsRequest(
            new BoughtTogetherQuery
            {
              IndexName = "<YOUR_INDEX_NAME>",
              ObjectID = "objectID1",
              Model = Enum.Parse<FbtModel>("BoughtTogether"),
              Threshold = 42.7,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchRecommendRules method.
  ///
  /// searchRecommendRules
  /// </summary>
  public async Task SnippetForRecommendClientSearchRecommendRules()
  {
    // >SEPARATOR searchRecommendRules default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    var response = await client.SearchRecommendRulesAsync(
      "<YOUR_INDEX_NAME>",
      Enum.Parse<RecommendModels>("RelatedProducts")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForRecommendClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new RecommendClient(
      new RecommendConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
    );

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }
}
