// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.QuerySuggestions;
// IMPORT<
using Action = Algolia.Search.Models.Ingestion.Action;

public class SnippetQuerySuggestionsClient
{
  /// <summary>
  /// Snippet for the CreateConfig method.
  ///
  /// createConfig
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCreateConfig()
  {
    // >SEPARATOR createConfig default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CreateConfigAsync(
      new ConfigurationWithIndex
      {
        IndexName = "<YOUR_INDEX_NAME>",
        SourceIndices = new List<SourceIndex>
        {
          new SourceIndex
          {
            IndexName = "<YOUR_INDEX_NAME>",
            Facets = new List<Facet> { new Facet { Attribute = "test" } },
            Generate = new List<List<string>>
            {
              new List<string> { "facetA", "facetB" },
              new List<string> { "facetC" },
            },
          },
        },
        Languages = new Languages(new List<string> { "french" }),
        Exclude = new List<string> { "test" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteConfig method.
  ///
  /// deleteConfig
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientDeleteConfig()
  {
    // >SEPARATOR deleteConfig default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.DeleteConfigAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetAllConfigs method.
  ///
  /// getAllConfigs
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientGetAllConfigs()
  {
    // >SEPARATOR getAllConfigs default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetAllConfigsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetConfig method.
  ///
  /// Retrieve QS config e2e
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientGetConfig()
  {
    // >SEPARATOR getConfig default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetConfigAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetConfigStatus method.
  ///
  /// getConfigStatus
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientGetConfigStatus()
  {
    // >SEPARATOR getConfigStatus default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetConfigStatusAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetLogFile method.
  ///
  /// getLogFile
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientGetLogFile()
  {
    // >SEPARATOR getLogFile default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetLogFileAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the UpdateConfig method.
  ///
  /// updateConfig
  /// </summary>
  public async Task SnippetForQuerySuggestionsClientUpdateConfig()
  {
    // >SEPARATOR updateConfig default
    // Initialize the client
    var client = new QuerySuggestionsClient(
      new QuerySuggestionsConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.UpdateConfigAsync(
      "<YOUR_INDEX_NAME>",
      new Configuration
      {
        SourceIndices = new List<SourceIndex>
        {
          new SourceIndex
          {
            IndexName = "<YOUR_INDEX_NAME>",
            Facets = new List<Facet> { new Facet { Attribute = "test" } },
            Generate = new List<List<string>>
            {
              new List<string> { "facetA", "facetB" },
              new List<string> { "facetC" },
            },
          },
        },
        Languages = new Languages(new List<string> { "french" }),
        Exclude = new List<string> { "test" },
      }
    );
    // >LOG
    // SEPARATOR<
  }
}
