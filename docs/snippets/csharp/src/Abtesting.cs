// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Abtesting;
// IMPORT<
using Action = Algolia.Search.Models.Ingestion.Action;

public class SnippetAbtestingClient
{
  /// <summary>
  /// Snippet for the AddABTests method.
  ///
  /// addABTests with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientAddABTests()
  {
    // >SEPARATOR addABTests default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.AddABTestsAsync(
      new AddABTestsRequest
      {
        EndAt = "2022-12-31T00:00:00.000Z",
        Name = "myABTest",
        Variants = new List<AddABTestsVariant>
        {
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 30 }),
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForAbtestingClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForAbtestingClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteABTest method.
  ///
  /// deleteABTest
  /// </summary>
  public async Task SnippetForAbtestingClientDeleteABTest()
  {
    // >SEPARATOR deleteABTest default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.DeleteABTestAsync(42);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the EstimateABTest method.
  ///
  /// estimate AB Test sample size
  /// </summary>
  public async Task SnippetForAbtestingClientEstimateABTest()
  {
    // >SEPARATOR estimateABTest default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.EstimateABTestAsync(
      new EstimateABTestRequest
      {
        Configuration = new EstimateConfiguration
        {
          EmptySearch = new EmptySearch { Exclude = true },
          MinimumDetectableEffect = new MinimumDetectableEffect
          {
            Size = 0.03,
            Metric = Enum.Parse<EffectMetric>("ConversionRate"),
          },
        },
        Variants = new List<AddABTestsVariant>
        {
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 50 }),
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetABTest method.
  ///
  /// getABTest
  /// </summary>
  public async Task SnippetForAbtestingClientGetABTest()
  {
    // >SEPARATOR getABTest default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.GetABTestAsync(42);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListABTests method.
  ///
  /// listABTests with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientListABTests()
  {
    // >SEPARATOR listABTests listABTests with minimal parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.ListABTestsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListABTests method.
  ///
  /// listABTests with parameters
  /// </summary>
  public async Task SnippetForAbtestingClientListABTests1()
  {
    // >SEPARATOR listABTests listABTests with parameters
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.ListABTestsAsync(0, 21, "cts_e2e ab", "t");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ScheduleABTest method.
  ///
  /// scheduleABTest with minimal parameters
  /// </summary>
  public async Task SnippetForAbtestingClientScheduleABTest()
  {
    // >SEPARATOR scheduleABTest default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.ScheduleABTestAsync(
      new ScheduleABTestsRequest
      {
        EndAt = "2022-12-31T00:00:00.000Z",
        ScheduledAt = "2022-11-31T00:00:00.000Z",
        Name = "myABTest",
        Variants = new List<AddABTestsVariant>
        {
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 30 }),
          new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50 }),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForAbtestingClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the StopABTest method.
  ///
  /// stopABTest
  /// </summary>
  public async Task SnippetForAbtestingClientStopABTest()
  {
    // >SEPARATOR stopABTest default
    // Initialize the client
    var client = new AbtestingClient(
      new AbtestingConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION")
    );

    // Call the API
    var response = await client.StopABTestAsync(42);
    // >LOG
    // SEPARATOR<
  }
}
