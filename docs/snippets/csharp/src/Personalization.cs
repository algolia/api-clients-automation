// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Http;
using Algolia.Search.Models.Personalization;
// IMPORT<
using Action = Algolia.Search.Models.Ingestion.Action;

public class SnippetPersonalizationClient
{
  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomDelete()
  {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomDelete1()
  {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomDeleteAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomGet()
  {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomGet1()
  {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters with space" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// requestOptions should be escaped too
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomGet2()
  {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomGetAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "to be overriden" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("query", "parameters with space")
        .AddExtraQueryParameters("and an array", new List<object> { "array", "with spaces" })
        .AddExtraHeader("x-header-1", "spaces are left alone")
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost()
  {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost1()
  {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default query parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost2()
  {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges query parameters with default ones
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost3()
  {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("query2", "myQueryParameter").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions can override default headers
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost4()
  {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions merges headers with default ones
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost5()
  {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraHeader("x-algolia-api-key", "ALGOLIA_API_KEY").Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts booleans
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost6()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("isItWorking", true).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts integers
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost7()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder().AddExtraQueryParameters("myParam", 2).Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of string
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost8()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { "b and c", "d" })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of booleans
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost9()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { true, true, false })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// requestOptions queryParameters accepts list of integers
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPost10()
  {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPostAsync(
      "test/requestOptions",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "facet", "filters" } },
      new RequestOptionBuilder()
        .AddExtraQueryParameters("myParam", new List<object> { 1, 2 })
        .Build()
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPut()
  {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with all parameters
  /// </summary>
  public async Task SnippetForPersonalizationClientCustomPut1()
  {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.CustomPutAsync(
      "test/all",
      new Dictionary<string, object> { { "query", "parameters" } },
      new Dictionary<string, string> { { "body", "parameters" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteUserProfile method.
  ///
  /// delete deleteUserProfile
  /// </summary>
  public async Task SnippetForPersonalizationClientDeleteUserProfile()
  {
    // >SEPARATOR deleteUserProfile default
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.DeleteUserProfileAsync("UserToken");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetPersonalizationStrategy method.
  ///
  /// get getPersonalizationStrategy
  /// </summary>
  public async Task SnippetForPersonalizationClientGetPersonalizationStrategy()
  {
    // >SEPARATOR getPersonalizationStrategy default
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetPersonalizationStrategyAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetUserTokenProfile method.
  ///
  /// get getUserTokenProfile
  /// </summary>
  public async Task SnippetForPersonalizationClientGetUserTokenProfile()
  {
    // >SEPARATOR getUserTokenProfile default
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.GetUserTokenProfileAsync("UserToken");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForPersonalizationClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetPersonalizationStrategy method.
  ///
  /// set setPersonalizationStrategy
  /// </summary>
  public async Task SnippetForPersonalizationClientSetPersonalizationStrategy()
  {
    // >SEPARATOR setPersonalizationStrategy default
    // Initialize the client
    var client = new PersonalizationClient(
      new PersonalizationConfig(
        "ALGOLIA_APPLICATION_ID",
        "ALGOLIA_API_KEY",
        "ALGOLIA_APPLICATION_REGION"
      )
    );

    // Call the API
    var response = await client.SetPersonalizationStrategyAsync(
      new PersonalizationStrategyParams
      {
        EventsScoring = new List<EventsScoring>
        {
          new EventsScoring
          {
            Score = 42,
            EventName = "Algolia",
            EventType = Enum.Parse<EventType>("Click"),
          },
        },
        FacetsScoring = new List<FacetsScoring>
        {
          new FacetsScoring { Score = 42, FacetName = "Event" },
        },
        PersonalizationImpact = 42,
      }
    );
    // >LOG
    // SEPARATOR<
  }
}
