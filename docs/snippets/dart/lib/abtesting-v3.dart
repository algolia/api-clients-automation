// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_local_variable
// >IMPORT
import 'package:algolia_client_abtesting_v3/algolia_client_abtesting_v3.dart';
// IMPORT<

// Snippet for the addABTests method.
//
// addABTests with minimal parameters
void snippetForaddABTests() async {
  // >SEPARATOR addABTests default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.addABTests(
    addABTestsRequest: AddABTestsRequest(
      endAt: "2022-12-31T00:00:00.000Z",
      name: "myABTest",
      metrics: [
        CreateMetric(
          name: "myMetric",
        ),
      ],
      variants: [
        AbTestsVariant(
          index: "AB_TEST_1",
          trafficPercentage: 30,
        ),
        AbTestsVariant(
          index: "AB_TEST_2",
          trafficPercentage: 50,
        ),
      ],
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
void snippetForcustomDelete() async {
  // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customDelete(
    path: "test/minimal",
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with all parameters
void snippetForcustomDelete1() async {
  // >SEPARATOR customDelete allow del method for a custom path with all parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customDelete(
    path: "test/all",
    parameters: {
      'query': "parameters",
    },
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
void snippetForcustomGet() async {
  // >SEPARATOR customGet allow get method for a custom path with minimal parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customGet(
    path: "test/minimal",
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with all parameters
void snippetForcustomGet1() async {
  // >SEPARATOR customGet allow get method for a custom path with all parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customGet(
    path: "test/all",
    parameters: {
      'query': "parameters with space",
    },
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// requestOptions should be escaped too
void snippetForcustomGet2() async {
  // >SEPARATOR customGet requestOptions should be escaped too
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customGet(
    path: "test/all",
    parameters: {
      'query': "to be overridden",
    },
    requestOptions: RequestOptions(
      headers: {
        'x-header-1': 'spaces are left alone',
      },
      urlParameters: {
        'query': "parameters with space",
        'and an array': [
          "array",
          "with spaces",
        ],
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
void snippetForcustomPost() async {
  // >SEPARATOR customPost allow post method for a custom path with minimal parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/minimal",
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with all parameters
void snippetForcustomPost1() async {
  // >SEPARATOR customPost allow post method for a custom path with all parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/all",
    parameters: {
      'query': "parameters",
    },
    body: {
      'body': "parameters",
    },
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default query parameters
void snippetForcustomPost2() async {
  // >SEPARATOR customPost requestOptions can override default query parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'query': "myQueryParameter",
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges query parameters with default ones
void snippetForcustomPost3() async {
  // >SEPARATOR customPost requestOptions merges query parameters with default ones
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'query2': "myQueryParameter",
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default headers
void snippetForcustomPost4() async {
  // >SEPARATOR customPost requestOptions can override default headers
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      headers: {
        'x-algolia-api-key': 'ALGOLIA_API_KEY',
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges headers with default ones
void snippetForcustomPost5() async {
  // >SEPARATOR customPost requestOptions merges headers with default ones
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      headers: {
        'x-algolia-api-key': 'ALGOLIA_API_KEY',
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts booleans
void snippetForcustomPost6() async {
  // >SEPARATOR customPost requestOptions queryParameters accepts booleans
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'isItWorking': true,
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts integers
void snippetForcustomPost7() async {
  // >SEPARATOR customPost requestOptions queryParameters accepts integers
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'myParam': 2,
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of string
void snippetForcustomPost8() async {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of string
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'myParam': [
          "b and c",
          "d",
        ],
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of booleans
void snippetForcustomPost9() async {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'myParam': [
          true,
          true,
          false,
        ],
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of integers
void snippetForcustomPost10() async {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPost(
    path: "test/requestOptions",
    parameters: {
      'query': "parameters",
    },
    body: {
      'facet': "filters",
    },
    requestOptions: RequestOptions(
      urlParameters: {
        'myParam': [
          1,
          2,
        ],
      },
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
void snippetForcustomPut() async {
  // >SEPARATOR customPut allow put method for a custom path with minimal parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPut(
    path: "test/minimal",
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with all parameters
void snippetForcustomPut1() async {
  // >SEPARATOR customPut allow put method for a custom path with all parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.customPut(
    path: "test/all",
    parameters: {
      'query': "parameters",
    },
    body: {
      'body': "parameters",
    },
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the deleteABTest method.
//
// deleteABTest
void snippetFordeleteABTest() async {
  // >SEPARATOR deleteABTest default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.deleteABTest(
    id: 42,
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the estimateABTest method.
//
// estimate AB Test sample size
void snippetForestimateABTest() async {
  // >SEPARATOR estimateABTest default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.estimateABTest(
    estimateABTestRequest: EstimateABTestRequest(
      configuration: EstimateConfiguration(
        minimumDetectableEffect: MinimumDetectableEffect(
          size: 0.03,
          metric: EffectMetric.fromJson("conversionRate"),
        ),
      ),
      variants: [
        AbTestsVariant(
          index: "AB_TEST_1",
          trafficPercentage: 50,
        ),
        AbTestsVariant(
          index: "AB_TEST_2",
          trafficPercentage: 50,
        ),
      ],
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the getABTest method.
//
// getABTest
void snippetForgetABTest() async {
  // >SEPARATOR getABTest default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.getABTest(
    id: 42,
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the getTimeseries method.
//
// getTimeseries
void snippetForgetTimeseries() async {
  // >SEPARATOR getTimeseries default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.getTimeseries(
    id: 42,
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the listABTests method.
//
// listABTests with minimal parameters
void snippetForlistABTests() async {
  // >SEPARATOR listABTests listABTests with minimal parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.listABTests();
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the listABTests method.
//
// listABTests with parameters
void snippetForlistABTests1() async {
  // >SEPARATOR listABTests listABTests with parameters
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.listABTests(
    offset: 0,
    limit: 21,
    indexPrefix: "cts_e2e ab",
    indexSuffix: "t",
    direction: Direction.fromJson("asc"),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the scheduleABTest method.
//
// scheduleABTest with minimal parameters
void snippetForscheduleABTest() async {
  // >SEPARATOR scheduleABTest default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.scheduleABTest(
    scheduleABTestsRequest: ScheduleABTestsRequest(
      endAt: "2022-12-31T00:00:00.000Z",
      scheduledAt: "2022-11-31T00:00:00.000Z",
      name: "myABTest",
      metrics: [
        CreateMetric(
          name: "myMetric",
        ),
      ],
      variants: [
        AbTestsVariant(
          index: "AB_TEST_1",
          trafficPercentage: 30,
        ),
        AbTestsVariant(
          index: "AB_TEST_2",
          trafficPercentage: 50,
        ),
      ],
    ),
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
void snippetForsetClientApiKey() async {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  client.setClientApiKey(
    apiKey: "updated-api-key",
  );
  // >LOG
  // SEPARATOR<
}

// Snippet for the stopABTest method.
//
// stopABTest
void snippetForstopABTest() async {
  // >SEPARATOR stopABTest default
  // Initialize the client
  final client = AbtestingV3Client(
      appId: 'ALGOLIA_APPLICATION_ID',
      apiKey: 'ALGOLIA_API_KEY',
      region: 'ALGOLIA_APPLICATION_REGION');

  // Call the API
  final response = await client.stopABTest(
    id: 42,
  );
  // >LOG
  // print the response
  print(response);
  // SEPARATOR<
}
