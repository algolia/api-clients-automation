<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Snippets;

// >IMPORT
use Algolia\AlgoliaSearch\Api\SearchClient;

// IMPORT<

class SnippetSearchClient
{
    /**
     * Snippet for the AddApiKey method.
     *
     * minimal
     */
    public function snippetForAddApiKey(): void
    {
        // >SEPARATOR addApiKey minimal
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->addApiKey(
            ['acl' => [
                'search',

                'addObject',
            ],
                'description' => 'my new api key',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AddApiKey method.
     *
     * all
     */
    public function snippetForAddApiKey1(): void
    {
        // >SEPARATOR addApiKey all
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->addApiKey(
            ['acl' => [
                'search',

                'addObject',
            ],
                'description' => 'my new api key',
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AddOrUpdateObject method.
     *
     * addOrUpdateObject
     */
    public function snippetForAddOrUpdateObject(): void
    {
        // >SEPARATOR addOrUpdateObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->addOrUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['key' => 'value',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AppendSource method.
     *
     * appendSource
     */
    public function snippetForAppendSource(): void
    {
        // >SEPARATOR appendSource default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->appendSource(
            ['source' => 'theSource',
                'description' => 'theDescription',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AssignUserId method.
     *
     * simple
     */
    public function snippetForAssignUserId(): void
    {
        // >SEPARATOR assignUserId simple
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->assignUserId(
            'user42',
            ['cluster' => 'd4242-eu',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AssignUserId method.
     *
     * it should not encode the userID
     */
    public function snippetForAssignUserId1(): void
    {
        // >SEPARATOR assignUserId it should not encode the userID
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->assignUserId(
            'user id with spaces',
            ['cluster' => 'cluster with spaces',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * addObject
     */
    public function snippetForBatch(): void
    {
        // >SEPARATOR batch addObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'bar',
                        'foo' => '1',
                    ],
                ],

                ['action' => 'addObject',
                    'body' => ['key' => 'baz',
                        'foo' => '2',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * clear
     */
    public function snippetForBatch1(): void
    {
        // >SEPARATOR batch clear
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'clear',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * delete
     */
    public function snippetForBatch2(): void
    {
        // >SEPARATOR batch delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'delete',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * deleteObject
     */
    public function snippetForBatch3(): void
    {
        // >SEPARATOR batch deleteObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'deleteObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * partialUpdateObject
     */
    public function snippetForBatch4(): void
    {
        // >SEPARATOR batch partialUpdateObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * partialUpdateObjectNoCreate
     */
    public function snippetForBatch5(): void
    {
        // >SEPARATOR batch partialUpdateObjectNoCreate
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObjectNoCreate',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * updateObject
     */
    public function snippetForBatch6(): void
    {
        // >SEPARATOR batch updateObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'updateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchAssignUserIds method.
     *
     * batchAssignUserIds
     */
    public function snippetForBatchAssignUserIds(): void
    {
        // >SEPARATOR batchAssignUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchAssignUserIds(
            'userID',
            ['cluster' => 'theCluster',
                'users' => [
                    'user1',

                    'user2',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * replace
     */
    public function snippetForBatchDictionaryEntries(): void
    {
        // >SEPARATOR batchDictionaryEntries replace
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'addEntry',
                        'body' => ['objectID' => '1',
                            'language' => 'en',
                            'word' => 'fancy',
                            'words' => [
                                'believe',

                                'algolia',
                            ],
                            'decomposition' => [
                                'trust',

                                'algolia',
                            ],
                            'state' => 'enabled',
                        ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * delete
     */
    public function snippetForBatchDictionaryEntries1(): void
    {
        // >SEPARATOR batchDictionaryEntries delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'deleteEntry',
                        'body' => ['objectID' => '1',
                        ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * append
     */
    public function snippetForBatchDictionaryEntries2(): void
    {
        // >SEPARATOR batchDictionaryEntries append
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'stopwords',
            ['requests' => [
                ['action' => 'addEntry',
                    'body' => ['objectID' => '1',
                        'language' => 'en',
                        'additional' => 'try me',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Browse method.
     *
     * browse with minimal parameters
     */
    public function snippetForBrowse(): void
    {
        // >SEPARATOR browse browse with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->browse(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Browse method.
     *
     * browse with search parameters
     */
    public function snippetForBrowse1(): void
    {
        // >SEPARATOR browse browse with search parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->browse(
            '<YOUR_INDEX_NAME>',
            ['query' => 'myQuery',
                'facetFilters' => [
                    'tags:algolia',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Browse method.
     *
     * browse allow a cursor in parameters
     */
    public function snippetForBrowse2(): void
    {
        // >SEPARATOR browse browse allow a cursor in parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->browse(
            '<YOUR_INDEX_NAME>',
            ['cursor' => 'test',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearObjects method.
     *
     * clearObjects
     */
    public function snippetForClearObjects(): void
    {
        // >SEPARATOR clearObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearObjects(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearRules method.
     *
     * clearRules
     */
    public function snippetForClearRules(): void
    {
        // >SEPARATOR clearRules default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearRules(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearSynonyms method.
     *
     * clearSynonyms
     */
    public function snippetForClearSynonyms(): void
    {
        // >SEPARATOR clearSynonyms default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearSynonyms(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomDelete method.
     *
     * allow del method for a custom path with minimal parameters
     */
    public function snippetForCustomDelete(): void
    {
        // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customDelete(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomDelete method.
     *
     * allow del method for a custom path with all parameters
     */
    public function snippetForCustomDelete1(): void
    {
        // >SEPARATOR customDelete allow del method for a custom path with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customDelete(
            'test/all',
            ['query' => 'parameters',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomGet method.
     *
     * allow get method for a custom path with minimal parameters
     */
    public function snippetForCustomGet(): void
    {
        // >SEPARATOR customGet allow get method for a custom path with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customGet(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomGet method.
     *
     * allow get method for a custom path with all parameters
     */
    public function snippetForCustomGet1(): void
    {
        // >SEPARATOR customGet allow get method for a custom path with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customGet(
            'test/all',
            ['query' => 'parameters with space',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomGet method.
     *
     * requestOptions should be escaped too
     */
    public function snippetForCustomGet2(): void
    {
        // >SEPARATOR customGet requestOptions should be escaped too
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customGet(
            'test/all',
            ['query' => 'to be overriden',
            ],
            [
                'queryParameters' => [
                    'query' => 'parameters with space',
                    'and an array' => ['array', 'with spaces',
                    ],
                ],
                'headers' => [
                    'x-header-1' => 'spaces are left alone',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * allow post method for a custom path with minimal parameters
     */
    public function snippetForCustomPost(): void
    {
        // >SEPARATOR customPost allow post method for a custom path with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * allow post method for a custom path with all parameters
     */
    public function snippetForCustomPost1(): void
    {
        // >SEPARATOR customPost allow post method for a custom path with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions can override default query parameters
     */
    public function snippetForCustomPost2(): void
    {
        // >SEPARATOR customPost requestOptions can override default query parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query' => 'myQueryParameter',
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions merges query parameters with default ones
     */
    public function snippetForCustomPost3(): void
    {
        // >SEPARATOR customPost requestOptions merges query parameters with default ones
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query2' => 'myQueryParameter',
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions can override default headers
     */
    public function snippetForCustomPost4(): void
    {
        // >SEPARATOR customPost requestOptions can override default headers
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'ALGOLIA_API_KEY',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions merges headers with default ones
     */
    public function snippetForCustomPost5(): void
    {
        // >SEPARATOR customPost requestOptions merges headers with default ones
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'ALGOLIA_API_KEY',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions queryParameters accepts booleans
     */
    public function snippetForCustomPost6(): void
    {
        // >SEPARATOR customPost requestOptions queryParameters accepts booleans
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'isItWorking' => true,
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions queryParameters accepts integers
     */
    public function snippetForCustomPost7(): void
    {
        // >SEPARATOR customPost requestOptions queryParameters accepts integers
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => 2,
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions queryParameters accepts list of string
     */
    public function snippetForCustomPost8(): void
    {
        // >SEPARATOR customPost requestOptions queryParameters accepts list of string
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => ['b and c', 'd',
                    ],
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions queryParameters accepts list of booleans
     */
    public function snippetForCustomPost9(): void
    {
        // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [true, true, false,
                    ],
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * requestOptions queryParameters accepts list of integers
     */
    public function snippetForCustomPost10(): void
    {
        // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [1, 2,
                    ],
                ], ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPut method.
     *
     * allow put method for a custom path with minimal parameters
     */
    public function snippetForCustomPut(): void
    {
        // >SEPARATOR customPut allow put method for a custom path with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPut(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPut method.
     *
     * allow put method for a custom path with all parameters
     */
    public function snippetForCustomPut1(): void
    {
        // >SEPARATOR customPut allow put method for a custom path with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPut(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteApiKey method.
     *
     * deleteApiKey
     */
    public function snippetForDeleteApiKey(): void
    {
        // >SEPARATOR deleteApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteApiKey(
            'myTestApiKey',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteBy method.
     *
     * deleteBy
     */
    public function snippetForDeleteBy(): void
    {
        // >SEPARATOR deleteBy default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteBy(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'brand:brandName',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteIndex method.
     *
     * deleteIndex
     */
    public function snippetForDeleteIndex(): void
    {
        // >SEPARATOR deleteIndex default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteIndex(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteObject method.
     *
     * deleteObject
     */
    public function snippetForDeleteObject(): void
    {
        // >SEPARATOR deleteObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteObjects method.
     *
     * call deleteObjects without error
     */
    public function snippetForDeleteObjects(): void
    {
        // >SEPARATOR deleteObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteObjects(
            '<YOUR_INDEX_NAME>',
            [
                '1',

                '2',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteRule method.
     *
     * delete rule simple case
     */
    public function snippetForDeleteRule(): void
    {
        // >SEPARATOR deleteRule delete rule simple case
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteRule(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteRule method.
     *
     * delete rule with simple characters to encode in objectID
     */
    public function snippetForDeleteRule1(): void
    {
        // >SEPARATOR deleteRule delete rule with simple characters to encode in objectID
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteRule(
            '<YOUR_INDEX_NAME>',
            'test/with/slash',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteSource method.
     *
     * deleteSource
     */
    public function snippetForDeleteSource(): void
    {
        // >SEPARATOR deleteSource default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteSource(
            'theSource',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteSynonym method.
     *
     * deleteSynonym
     */
    public function snippetForDeleteSynonym(): void
    {
        // >SEPARATOR deleteSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * api key basic
     */
    public function snippetForGenerateSecuredApiKey(): void
    {
        // >SEPARATOR generateSecuredApiKey api key basic
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['validUntil' => 2524604400,
                'restrictIndices' => [
                    'Movies',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * with searchParams
     */
    public function snippetForGenerateSecuredApiKey1(): void
    {
        // >SEPARATOR generateSecuredApiKey with searchParams
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['validUntil' => 2524604400,
                'restrictIndices' => [
                    'Movies',

                    'cts_e2e_settings',
                ],
                'restrictSources' => '192.168.1.0/24',
                'filters' => 'category:Book OR category:Ebook AND _tags:published',
                'userToken' => 'user123',
                'searchParams' => ['query' => 'batman',
                    'typoTolerance' => 'strict',
                    'aroundRadius' => 'all',
                    'mode' => 'neuralSearch',
                    'hitsPerPage' => 10,
                    'optionalWords' => [
                        'one',

                        'two',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * with filters
     */
    public function snippetForGenerateSecuredApiKey2(): void
    {
        // >SEPARATOR generateSecuredApiKey with filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['filters' => 'user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * with visible_by filter
     */
    public function snippetForGenerateSecuredApiKey3(): void
    {
        // >SEPARATOR generateSecuredApiKey with visible_by filter
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['filters' => 'visible_by:group/Finance',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * with userID
     */
    public function snippetForGenerateSecuredApiKey4(): void
    {
        // >SEPARATOR generateSecuredApiKey with userID
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['userToken' => 'user42',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetApiKey method.
     *
     * getApiKey
     */
    public function snippetForGetApiKey(): void
    {
        // >SEPARATOR getApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getApiKey(
            'myTestApiKey',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetAppTask method.
     *
     * getAppTask
     */
    public function snippetForGetAppTask(): void
    {
        // >SEPARATOR getAppTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getAppTask(
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetDictionaryLanguages method.
     *
     * get getDictionaryLanguages
     */
    public function snippetForGetDictionaryLanguages(): void
    {
        // >SEPARATOR getDictionaryLanguages default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getDictionaryLanguages();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetDictionarySettings method.
     *
     * get getDictionarySettings results
     */
    public function snippetForGetDictionarySettings(): void
    {
        // >SEPARATOR getDictionarySettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getDictionarySettings();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetLogs method.
     *
     * getLogs with minimal parameters
     */
    public function snippetForGetLogs(): void
    {
        // >SEPARATOR getLogs getLogs with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getLogs();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetLogs method.
     *
     * getLogs with parameters
     */
    public function snippetForGetLogs1(): void
    {
        // >SEPARATOR getLogs getLogs with parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getLogs(
            5,
            10,
            '<YOUR_INDEX_NAME>',
            'all',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObject method.
     *
     * getObject
     */
    public function snippetForGetObject(): void
    {
        // >SEPARATOR getObject getObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            [
                'attr1',

                'attr2',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObject method.
     *
     * search with a real object
     */
    public function snippetForGetObject1(): void
    {
        // >SEPARATOR getObject search with a real object
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObject(
            '<YOUR_INDEX_NAME>',
            'Batman and Robin',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObjects method.
     *
     * by ID
     */
    public function snippetForGetObjects(): void
    {
        // >SEPARATOR getObjects by ID
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObjects(
            ['requests' => [
                ['objectID' => 'uniqueID',
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObjects method.
     *
     * multiple IDs
     */
    public function snippetForGetObjects1(): void
    {
        // >SEPARATOR getObjects multiple IDs
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObjects(
            ['requests' => [
                ['objectID' => 'uniqueID1',
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],

                ['objectID' => 'uniqueID2',
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObjects method.
     *
     * with attributesToRetrieve
     */
    public function snippetForGetObjects2(): void
    {
        // >SEPARATOR getObjects with attributesToRetrieve
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObjects(
            ['requests' => [
                ['attributesToRetrieve' => [
                    'attr1',

                    'attr2',
                ],
                    'objectID' => 'uniqueID',
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetRule method.
     *
     * getRule
     */
    public function snippetForGetRule(): void
    {
        // >SEPARATOR getRule default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getRule(
            '<YOUR_INDEX_NAME>',
            'qr-1725004648916',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSettings method.
     *
     * getSettings
     */
    public function snippetForGetSettings(): void
    {
        // >SEPARATOR getSettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSettings(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSources method.
     *
     * getSources
     */
    public function snippetForGetSources(): void
    {
        // >SEPARATOR getSources default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSources();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSynonym method.
     *
     * getSynonym
     */
    public function snippetForGetSynonym(): void
    {
        // >SEPARATOR getSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetTask method.
     *
     * getTask
     */
    public function snippetForGetTask(): void
    {
        // >SEPARATOR getTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getTask(
            '<YOUR_INDEX_NAME>',
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetTopUserIds method.
     *
     * getTopUserIds
     */
    public function snippetForGetTopUserIds(): void
    {
        // >SEPARATOR getTopUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getTopUserIds();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetUserId method.
     *
     * getUserId
     */
    public function snippetForGetUserId(): void
    {
        // >SEPARATOR getUserId default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getUserId(
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the HasPendingMappings method.
     *
     * hasPendingMappings with minimal parameters
     */
    public function snippetForHasPendingMappings(): void
    {
        // >SEPARATOR hasPendingMappings hasPendingMappings with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->hasPendingMappings();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the HasPendingMappings method.
     *
     * hasPendingMappings with parameters
     */
    public function snippetForHasPendingMappings1(): void
    {
        // >SEPARATOR hasPendingMappings hasPendingMappings with parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->hasPendingMappings(
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexExists
     */
    public function snippetForIndexExists(): void
    {
        // >SEPARATOR indexExists indexExists
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexNotExists
     */
    public function snippetForIndexExists1(): void
    {
        // >SEPARATOR indexExists indexNotExists
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexExistsWithError
     */
    public function snippetForIndexExists2(): void
    {
        // >SEPARATOR indexExists indexExistsWithError
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListApiKeys method.
     *
     * listApiKeys
     */
    public function snippetForListApiKeys(): void
    {
        // >SEPARATOR listApiKeys default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listApiKeys();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListClusters method.
     *
     * listClusters
     */
    public function snippetForListClusters(): void
    {
        // >SEPARATOR listClusters default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listClusters();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListIndices method.
     *
     * listIndices with minimal parameters
     */
    public function snippetForListIndices(): void
    {
        // >SEPARATOR listIndices listIndices with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listIndices();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListIndices method.
     *
     * listIndices with parameters
     */
    public function snippetForListIndices1(): void
    {
        // >SEPARATOR listIndices listIndices with parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listIndices(
            8,
            3,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListUserIds method.
     *
     * listUserIds with minimal parameters
     */
    public function snippetForListUserIds(): void
    {
        // >SEPARATOR listUserIds listUserIds with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listUserIds();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListUserIds method.
     *
     * listUserIds with parameters
     */
    public function snippetForListUserIds1(): void
    {
        // >SEPARATOR listUserIds listUserIds with parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listUserIds(
            8,
            100,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the MultipleBatch method.
     *
     * multipleBatch
     */
    public function snippetForMultipleBatch(): void
    {
        // >SEPARATOR multipleBatch default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->multipleBatch(
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'value',
                    ],
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * scopes
     */
    public function snippetForOperationIndex(): void
    {
        // >SEPARATOR operationIndex scopes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
                'scope' => [
                    'rules',

                    'settings',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * copy
     */
    public function snippetForOperationIndex1(): void
    {
        // >SEPARATOR operationIndex copy
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'copy',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * move
     */
    public function snippetForOperationIndex2(): void
    {
        // >SEPARATOR operationIndex move
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for a string attribute
     */
    public function snippetForPartialUpdateObject(): void
    {
        // >SEPARATOR partialUpdateObject Partial update with a new value for a string attribute
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => 'new value',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for an integer attribute
     */
    public function snippetForPartialUpdateObject1(): void
    {
        // >SEPARATOR partialUpdateObject Partial update with a new value for an integer attribute
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => 1,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for a boolean attribute
     */
    public function snippetForPartialUpdateObject2(): void
    {
        // >SEPARATOR partialUpdateObject Partial update with a new value for a boolean attribute
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for an array attribute
     */
    public function snippetForPartialUpdateObject3(): void
    {
        // >SEPARATOR partialUpdateObject Partial update with a new value for an array attribute
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => [
                'one',

                'two',

                'three',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for an object attribute
     */
    public function snippetForPartialUpdateObject4(): void
    {
        // >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => ['nested' => 'value',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * with visible_by filter
     */
    public function snippetForPartialUpdateObject5(): void
    {
        // >SEPARATOR partialUpdateObject with visible_by filter
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['visible_by' => [
                'Angela',

                'group/Finance',

                'group/Shareholders',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * add men pant
     */
    public function snippetForPartialUpdateObject6(): void
    {
        // >SEPARATOR partialUpdateObject add men pant
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'productId',
            ['categoryPageId' => ['_operation' => 'Add',
                'value' => 'men-clothing-pants',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * remove men pant
     */
    public function snippetForPartialUpdateObject7(): void
    {
        // >SEPARATOR partialUpdateObject remove men pant
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'productId',
            ['categoryPageId' => ['_operation' => 'Remove',
                'value' => 'men-clothing-pants',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObjects method.
     *
     * call partialUpdateObjects with createIfNotExists=true
     */
    public function snippetForPartialUpdateObjects(): void
    {
        // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObjects method.
     *
     * call partialUpdateObjects with createIfNotExists=false
     */
    public function snippetForPartialUpdateObjects1(): void
    {
        // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '3',
                    'name' => 'Cyril',
                ],

                ['objectID' => '4',
                    'name' => 'David',
                ],
            ],
            false,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the RemoveUserId method.
     *
     * removeUserId
     */
    public function snippetForRemoveUserId(): void
    {
        // >SEPARATOR removeUserId default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->removeUserId(
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceAllObjects method.
     *
     * call replaceAllObjects without error
     */
    public function snippetForReplaceAllObjects(): void
    {
        // >SEPARATOR replaceAllObjects call replaceAllObjects without error
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceAllObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],

                ['objectID' => '3',
                    'name' => 'Cyril',
                ],

                ['objectID' => '4',
                    'name' => 'David',
                ],

                ['objectID' => '5',
                    'name' => 'Eva',
                ],

                ['objectID' => '6',
                    'name' => 'Fiona',
                ],

                ['objectID' => '7',
                    'name' => 'Gael',
                ],

                ['objectID' => '8',
                    'name' => 'Hugo',
                ],

                ['objectID' => '9',
                    'name' => 'Igor',
                ],

                ['objectID' => '10',
                    'name' => 'Julia',
                ],
            ],
            3,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceAllObjects method.
     *
     * call replaceAllObjects with partial scopes
     */
    public function snippetForReplaceAllObjects1(): void
    {
        // >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceAllObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
            77,
            [
                'settings',

                'synonyms',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceAllObjects method.
     *
     * replaceAllObjects should cleanup on failure
     */
    public function snippetForReplaceAllObjects2(): void
    {
        // >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceAllObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'fine',
                    'body' => 'small obj',
                ],

                ['objectID' => 'toolarge',
                    'body' => 'something bigger than 10KB',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceSources method.
     *
     * replaceSources
     */
    public function snippetForReplaceSources(): void
    {
        // >SEPARATOR replaceSources default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceSources(
            [
                ['source' => 'theSource',
                    'description' => 'theDescription',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the RestoreApiKey method.
     *
     * restoreApiKey
     */
    public function snippetForRestoreApiKey(): void
    {
        // >SEPARATOR restoreApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->restoreApiKey(
            'ALGOLIA_API_KEY',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObject method.
     *
     * saveObject
     */
    public function snippetForSaveObject(): void
    {
        // >SEPARATOR saveObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObject(
            '<YOUR_INDEX_NAME>',
            ['name' => 'Black T-shirt',
                'color' => '#000000||black',
                'availableIn' => 'https://source.unsplash.com/100x100/?paris||Paris',
                'objectID' => 'myID',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * call saveObjects without error
     */
    public function snippetForSaveObjects(): void
    {
        // >SEPARATOR saveObjects call saveObjects without error
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * saveObjects should report errors
     */
    public function snippetForSaveObjects1(): void
    {
        // >SEPARATOR saveObjects saveObjects should report errors
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * saveObjectsPlaylist
     */
    public function snippetForSaveObjects2(): void
    {
        // >SEPARATOR saveObjects saveObjectsPlaylist
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'visibility' => 'public',
                    'name' => 'Hot 100 Billboard Charts',
                    'playlistId' => 'd3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f',
                    'createdAt' => '1500240452',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * saveObjectsPublicUser
     */
    public function snippetForSaveObjects3(): void
    {
        // >SEPARATOR saveObjects saveObjectsPublicUser
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'visibility' => 'public',
                    'name' => 'Hot 100 Billboard Charts',
                    'playlistId' => 'd3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f',
                    'createdAt' => '1500240452',
                ],
            ],
            false,
            1000,
            [
                'headers' => [
                    'X-Algolia-User-ID' => '*',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * saveRule with minimal parameters
     */
    public function snippetForSaveRule(): void
    {
        // >SEPARATOR saveRule saveRule with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'id1',
            ['objectID' => 'id1',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'brand:xiaomi',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * saveRule with all parameters
     */
    public function snippetForSaveRule1(): void
    {
        // >SEPARATOR saveRule saveRule with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'id1',
            ['objectID' => 'id1',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'contains',
                        'alternatives' => false,
                        'context' => 'search',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'brand:apple',
                    'query' => ['remove' => [
                        'algolia',
                    ],
                        'edits' => [
                            ['type' => 'remove',
                                'delete' => 'abc',
                                'insert' => 'cde',
                            ],

                            ['type' => 'replace',
                                'delete' => 'abc',
                                'insert' => 'cde',
                            ],
                        ],
                    ],
                ],
                    'hide' => [
                        ['objectID' => '321',
                        ],
                    ],
                    'filterPromotes' => false,
                    'userData' => ['algolia' => 'aloglia',
                    ],
                    'promote' => [
                        ['objectID' => 'abc',
                            'position' => 3,
                        ],

                        ['objectIDs' => [
                            'abc',

                            'def',
                        ],
                            'position' => 1,
                        ],
                    ],
                ],
                'description' => 'test',
                'enabled' => true,
                'validity' => [
                    ['from' => 1656670273,
                        'until' => 1656670277,
                    ],
                ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * b2b catalog
     */
    public function snippetForSaveRule2(): void
    {
        // >SEPARATOR saveRule b2b catalog
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'article-rule',
            ['objectID' => 'article-rule',
                'conditions' => [
                    ['pattern' => 'article',
                        'anchoring' => 'startsWith',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['edits' => [
                    ['type' => 'remove',
                        'delete' => 'article',
                    ],
                ],
                ],
                    'restrictSearchableAttributes' => [
                        'title',

                        'book_id',
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * merchandising and promoting
     */
    public function snippetForSaveRule3(): void
    {
        // >SEPARATOR saveRule merchandising and promoting
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'director-rule',
            ['objectID' => 'director-rule',
                'conditions' => [
                    ['pattern' => '{facet:director} director',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['restrictSearchableAttributes' => [
                    'title',

                    'book_id',
                ],
                    'automaticFacetFilters' => [
                        ['facet' => 'director',
                        ],
                    ],
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'director',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * harry potter
     */
    public function snippetForSaveRule4(): void
    {
        // >SEPARATOR saveRule harry potter
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'harry-potter-rule',
            ['objectID' => 'harry-potter-rule',
                'conditions' => [
                    ['pattern' => 'harry potter',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['userData' => ['promo_content' => '20% OFF on all Harry Potter books!',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * merchandising empty query
     */
    public function snippetForSaveRule5(): void
    {
        // >SEPARATOR saveRule merchandising empty query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'clearance-category-filter',
            ['objectID' => 'clearance-category-filter',
                'conditions' => [
                    ['pattern' => '',
                        'anchoring' => 'is',
                        'context' => 'landing',
                    ],
                ],
                'consequence' => ['params' => ['optionalFilters' => 'clearance:true',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * redirect
     */
    public function snippetForSaveRule6(): void
    {
        // >SEPARATOR saveRule redirect
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'redirect-help-rule',
            ['objectID' => 'redirect-help-rule',
                'conditions' => [
                    ['pattern' => 'help',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['userData' => ['redirect' => 'https://www.algolia.com/support',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * promote some results over others
     */
    public function snippetForSaveRule7(): void
    {
        // >SEPARATOR saveRule promote some results over others
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'tomato-fruit',
            ['objectID' => 'tomato-fruit',
                'conditions' => [
                    ['pattern' => 'tomato',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['optionalFilters' => 'food_group:fruit',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * promote several hits
     */
    public function snippetForSaveRule8(): void
    {
        // >SEPARATOR saveRule promote several hits
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'Promote-Apple-Newest',
            ['objectID' => 'Promote-Apple-Newest',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'is',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectIDs' => [
                        'iPhone-12345',

                        'watch-123',
                    ],
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * promote newest release
     */
    public function snippetForSaveRule9(): void
    {
        // >SEPARATOR saveRule promote newest release
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'Promote-iPhone-X',
            ['objectID' => 'Promote-iPhone-X',
                'conditions' => [
                    ['pattern' => 'iPhone',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectID' => 'iPhone-12345',
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * promote single item
     */
    public function snippetForSaveRule10(): void
    {
        // >SEPARATOR saveRule promote single item
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'promote-harry-potter-box-set',
            ['objectID' => 'promote-harry-potter-box-set',
                'conditions' => [
                    ['pattern' => 'Harry Potter',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectID' => 'HP-12345',
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * limit search results
     */
    public function snippetForSaveRule11(): void
    {
        // >SEPARATOR saveRule limit search results
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'article-rule',
            ['objectID' => 'article-rule',
                'conditions' => [
                    ['pattern' => 'article',
                        'anchoring' => 'startsWith',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['edits' => [
                    ['type' => 'remove',
                        'delete' => 'article',
                    ],
                ],
                ],
                    'restrictSearchableAttributes' => [
                        'title',

                        'book_id',
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * query match
     */
    public function snippetForSaveRule12(): void
    {
        // >SEPARATOR saveRule query match
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'tagged-brand-rule',
            ['conditions' => [
                ['pattern' => 'brand: {facet:brand}',
                    'anchoring' => 'contains',
                    'alternatives' => false,
                ],
            ],
                'consequence' => ['params' => ['automaticFacetFilters' => [
                    ['facet' => 'brand',
                    ],
                ],
                    'query' => ['remove' => [
                        'brand:',

                        '{facet:brand}',
                    ],
                    ],
                ],
                ],
                'description' => 'filter on brand: {brand}',
                'objectID' => 'tagged-brand-rule',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * dynamic filtering
     */
    public function snippetForSaveRule13(): void
    {
        // >SEPARATOR saveRule dynamic filtering
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'color-facets',
            ['objectID' => 'color-facets',
                'conditions' => [
                    ['pattern' => '{facet:color}',
                    ],
                ],
                'consequence' => ['params' => ['automaticFacetFilters' => [
                    ['facet' => 'color',
                    ],
                ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * hide hits
     */
    public function snippetForSaveRule14(): void
    {
        // >SEPARATOR saveRule hide hits
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'hide-12345',
            ['objectID' => 'hide-12345',
                'conditions' => [
                    ['pattern' => 'cheap',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['hide' => [
                    ['objectID' => 'to-hide-12345',
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * one rule per facet
     */
    public function snippetForSaveRule15(): void
    {
        // >SEPARATOR saveRule one rule per facet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'red-color',
            ['objectID' => 'red-color',
                'conditions' => [
                    ['pattern' => 'red',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['remove' => [
                    'red',
                ],
                ],
                    'filters' => 'color:red',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * numerical filters
     */
    public function snippetForSaveRule16(): void
    {
        // >SEPARATOR saveRule numerical filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'cheap',
            ['objectID' => 'cheap',
                'conditions' => [
                    ['pattern' => 'cheap',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['remove' => [
                    'cheap',
                ],
                ],
                    'filters' => 'price < 10',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * negative filters
     */
    public function snippetForSaveRule17(): void
    {
        // >SEPARATOR saveRule negative filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'gluten-free-rule',
            ['objectID' => 'gluten-free-rule',
                'conditions' => [
                    ['pattern' => 'gluten-free',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'NOT allergens:gluten',
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'gluten-free',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * positive filters
     */
    public function snippetForSaveRule18(): void
    {
        // >SEPARATOR saveRule positive filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'diet-rule',
            ['objectID' => 'diet-rule',
                'conditions' => [
                    ['pattern' => 'diet',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => "'low-carb' OR 'low-fat'",
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'diet',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * conditionless
     */
    public function snippetForSaveRule19(): void
    {
        // >SEPARATOR saveRule conditionless
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'diet-rule',
            ['objectID' => 'diet-rule',
                'consequence' => ['params' => ['filters' => "'low-carb' OR 'low-fat'",
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'diet',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * contextual
     */
    public function snippetForSaveRule20(): void
    {
        // >SEPARATOR saveRule contextual
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'a-rule-id',
            ['objectID' => 'a-rule-id',
                'conditions' => [
                    ['context' => 'mobile',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'release_date >= 1577836800',
                ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRules method.
     *
     * saveRules with minimal parameters
     */
    public function snippetForSaveRules(): void
    {
        // >SEPARATOR saveRules saveRules with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'a-rule-id',
                    'conditions' => [
                        ['pattern' => 'smartphone',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:apple',
                    ],
                    ],
                ],

                ['objectID' => 'a-second-rule-id',
                    'conditions' => [
                        ['pattern' => 'apple',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:samsung',
                    ],
                    ],
                ],
            ],
            false,
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRules method.
     *
     * saveRules with all parameters
     */
    public function snippetForSaveRules1(): void
    {
        // >SEPARATOR saveRules saveRules with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'id1',
                    'conditions' => [
                        ['pattern' => 'apple',
                            'anchoring' => 'contains',
                            'alternatives' => false,
                            'context' => 'search',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:apple',
                        'query' => ['remove' => [
                            'algolia',
                        ],
                            'edits' => [
                                ['type' => 'remove',
                                    'delete' => 'abc',
                                    'insert' => 'cde',
                                ],

                                ['type' => 'replace',
                                    'delete' => 'abc',
                                    'insert' => 'cde',
                                ],
                            ],
                        ],
                    ],
                        'hide' => [
                            ['objectID' => '321',
                            ],
                        ],
                        'filterPromotes' => false,
                        'userData' => ['algolia' => 'aloglia',
                        ],
                        'promote' => [
                            ['objectID' => 'abc',
                                'position' => 3,
                            ],

                            ['objectIDs' => [
                                'abc',

                                'def',
                            ],
                                'position' => 1,
                            ],
                        ],
                    ],
                    'description' => 'test',
                    'enabled' => true,
                    'validity' => [
                        ['from' => 1656670273,
                            'until' => 1656670277,
                        ],
                    ],
                ],
            ],
            true,
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRules method.
     *
     * dynamic filtering
     */
    public function snippetForSaveRules2(): void
    {
        // >SEPARATOR saveRules dynamic filtering
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'toaster',
                    'conditions' => [
                        ['pattern' => 'toaster',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['query' => ['remove' => [
                        'toaster',
                    ],
                    ],
                        'filters' => 'product_type:toaster',
                    ],
                    ],
                ],

                ['objectID' => 'cheap',
                    'conditions' => [
                        ['pattern' => 'cheap',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['query' => ['remove' => [
                        'cheap',
                    ],
                    ],
                        'filters' => 'price < 15',
                    ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRules method.
     *
     * enhance search results
     */
    public function snippetForSaveRules3(): void
    {
        // >SEPARATOR saveRules enhance search results
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'country',
                    'conditions' => [
                        ['pattern' => '{facet:country}',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['aroundLatLngViaIP' => false,
                    ],
                    ],
                ],

                ['objectID' => 'city',
                    'conditions' => [
                        ['pattern' => '{facet:city}',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['aroundLatLngViaIP' => false,
                    ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveSynonym method.
     *
     * saveSynonym
     */
    public function snippetForSaveSynonym(): void
    {
        // >SEPARATOR saveSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
            ['objectID' => 'id1',
                'type' => 'synonym',
                'synonyms' => [
                    'car',

                    'vehicule',

                    'auto',
                ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveSynonyms method.
     *
     * saveSynonyms
     */
    public function snippetForSaveSynonyms(): void
    {
        // >SEPARATOR saveSynonyms default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveSynonyms(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'id1',
                    'type' => 'synonym',
                    'synonyms' => [
                        'car',

                        'vehicule',

                        'auto',
                    ],
                ],

                ['objectID' => 'id2',
                    'type' => 'onewaysynonym',
                    'input' => 'iphone',
                    'synonyms' => [
                        'ephone',

                        'aphone',

                        'yphone',
                    ],
                ],
            ],
            true,
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * withHitsPerPage
     */
    public function snippetForSearch(): void
    {
        // >SEPARATOR search withHitsPerPage
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'hitsPerPage' => 50,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterOnly
     */
    public function snippetForSearch1(): void
    {
        // >SEPARATOR search filterOnly
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterOr
     */
    public function snippetForSearch2(): void
    {
        // >SEPARATOR search filterOr
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Tom Cruise OR actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterNot
     */
    public function snippetForSearch3(): void
    {
        // >SEPARATOR search filterNot
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'NOT actor:Nicolas Cage',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for a single hits request with minimal parameters
     */
    public function snippetForSearch4(): void
    {
        // >SEPARATOR search search for a single hits request with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search with highlight and snippet results
     */
    public function snippetForSearch5(): void
    {
        // >SEPARATOR search search with highlight and snippet results
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => 'vim',
                    'attributesToSnippet' => [
                        '*:20',
                    ],
                    'attributesToHighlight' => [
                        '*',
                    ],
                    'attributesToRetrieve' => [
                        '*',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * retrieveFacets
     */
    public function snippetForSearch6(): void
    {
        // >SEPARATOR search retrieveFacets
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        'author',

                        'genre',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * retrieveFacetsWildcard
     */
    public function snippetForSearch7(): void
    {
        // >SEPARATOR search retrieveFacetsWildcard
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        '*',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for a single facet request with minimal parameters
     */
    public function snippetForSearch8(): void
    {
        // >SEPARATOR search search for a single facet request with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'type' => 'facet',
                    'facet' => 'editor',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for a single hits request with all parameters
     */
    public function snippetForSearch9(): void
    {
        // >SEPARATOR search search for a single hits request with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => 'myQuery',
                    'hitsPerPage' => 50,
                    'type' => 'default',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for a single facet request with all parameters
     */
    public function snippetForSearch10(): void
    {
        // >SEPARATOR search search for a single facet request with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                    'facetQuery' => 'theFacetQuery',
                    'query' => 'theQuery',
                    'maxFacetHits' => 50,
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for multiple mixed requests in multiple indices with minimal parameters
     */
    public function snippetForSearch11(): void
    {
        // >SEPARATOR search search for multiple mixed requests in multiple indices with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'type' => 'default',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search for multiple mixed requests in multiple indices with all parameters
     */
    public function snippetForSearch12(): void
    {
        // >SEPARATOR search search for multiple mixed requests in multiple indices with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                    'facetQuery' => 'theFacetQuery',
                    'query' => 'theQuery',
                    'maxFacetHits' => 50,
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => 'myQuery',
                    'hitsPerPage' => 50,
                    'type' => 'default',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search filters accept all of the possible shapes
     */
    public function snippetForSearch13(): void
    {
        // >SEPARATOR search search filters accept all of the possible shapes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facetFilters' => 'mySearch:filters',
                    'reRankingApplyFilter' => 'mySearch:filters',
                    'tagFilters' => 'mySearch:filters',
                    'numericFilters' => 'mySearch:filters',
                    'optionalFilters' => 'mySearch:filters',
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facetFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',

                            [
                                'mySearch:filters',
                            ],
                        ],
                    ],
                    'reRankingApplyFilter' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'tagFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'numericFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'optionalFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search filters end to end
     */
    public function snippetForSearch14(): void
    {
        // >SEPARATOR search search filters end to end
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'filters' => "editor:'visual studio' OR editor:neovim",
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        'editor:neovim',
                    ],
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        [
                            'editor:neovim',
                        ],
                    ],
                ],

                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        [
                            'editor:neovim',

                            [
                                'editor:goland',
                            ],
                        ],
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * search with all search parameters
     */
    public function snippetForSearch15(): void
    {
        // >SEPARATOR search search with all search parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['advancedSyntax' => true,
                    'advancedSyntaxFeatures' => [
                        'exactPhrase',
                    ],
                    'allowTyposOnNumericTokens' => true,
                    'alternativesAsExact' => [
                        'multiWordsSynonym',
                    ],
                    'analytics' => true,
                    'analyticsTags' => [
                        '',
                    ],
                    'aroundLatLng' => '',
                    'aroundLatLngViaIP' => true,
                    'aroundPrecision' => 0,
                    'aroundRadius' => 'all',
                    'attributeCriteriaComputedByMinProximity' => true,
                    'attributesToHighlight' => [
                        '',
                    ],
                    'attributesToRetrieve' => [
                        '',
                    ],
                    'attributesToSnippet' => [
                        '',
                    ],
                    'clickAnalytics' => true,
                    'decompoundQuery' => true,
                    'disableExactOnAttributes' => [
                        '',
                    ],
                    'disableTypoToleranceOnAttributes' => [
                        '',
                    ],
                    'distinct' => 0,
                    'enableABTest' => true,
                    'enablePersonalization' => true,
                    'enableReRanking' => true,
                    'enableRules' => true,
                    'exactOnSingleWordQuery' => 'attribute',
                    'facetFilters' => [
                        '',
                    ],
                    'facetingAfterDistinct' => true,
                    'facets' => [
                        '',
                    ],
                    'filters' => '',
                    'getRankingInfo' => true,
                    'highlightPostTag' => '',
                    'highlightPreTag' => '',
                    'hitsPerPage' => 1,
                    'ignorePlurals' => false,
                    'indexName' => '<YOUR_INDEX_NAME>',
                    'insideBoundingBox' => [
                        [
                            47.3165,

                            4.9665,

                            47.3424,

                            5.0201,
                        ],

                        [
                            40.9234,

                            2.1185,

                            38.643,

                            1.9916,
                        ],
                    ],
                    'insidePolygon' => [
                        [
                            47.3165,

                            4.9665,

                            47.3424,

                            5.0201,

                            47.32,

                            4.9,
                        ],

                        [
                            40.9234,

                            2.1185,

                            38.643,

                            1.9916,

                            39.2587,

                            2.0104,
                        ],
                    ],
                    'length' => 1,
                    'maxValuesPerFacet' => 0,
                    'minProximity' => 1,
                    'minWordSizefor1Typo' => 0,
                    'minWordSizefor2Typos' => 0,
                    'minimumAroundRadius' => 1,
                    'naturalLanguages' => [
                        'fr',
                    ],
                    'numericFilters' => [
                        '',
                    ],
                    'offset' => 0,
                    'optionalFilters' => [
                        '',
                    ],
                    'optionalWords' => [
                        '',
                    ],
                    'page' => 0,
                    'percentileComputation' => true,
                    'personalizationImpact' => 0,
                    'query' => '',
                    'queryLanguages' => [
                        'fr',
                    ],
                    'queryType' => 'prefixAll',
                    'ranking' => [
                        '',
                    ],
                    'reRankingApplyFilter' => [
                        '',
                    ],
                    'relevancyStrictness' => 0,
                    'removeStopWords' => true,
                    'removeWordsIfNoResults' => 'allOptional',
                    'renderingContent' => ['facetOrdering' => ['facets' => ['order' => [
                        'a',

                        'b',
                    ],
                    ],
                        'values' => ['a' => ['order' => [
                            'b',
                        ],
                            'sortRemainingBy' => 'count',
                        ],
                        ],
                    ],
                    ],
                    'replaceSynonymsInHighlight' => true,
                    'responseFields' => [
                        '',
                    ],
                    'restrictHighlightAndSnippetArrays' => true,
                    'restrictSearchableAttributes' => [
                        '',
                    ],
                    'ruleContexts' => [
                        '',
                    ],
                    'similarQuery' => '',
                    'snippetEllipsisText' => '',
                    'sortFacetValuesBy' => '',
                    'sumOrFiltersScores' => true,
                    'synonyms' => true,
                    'tagFilters' => [
                        '',
                    ],
                    'type' => 'default',
                    'typoTolerance' => 'min',
                    'userToken' => '',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchDictionaryEntries method.
     *
     * get searchDictionaryEntries results with minimal parameters
     */
    public function snippetForSearchDictionaryEntries(): void
    {
        // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchDictionaryEntries(
            'stopwords',
            ['query' => 'about',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchDictionaryEntries method.
     *
     * get searchDictionaryEntries results with all parameters
     */
    public function snippetForSearchDictionaryEntries1(): void
    {
        // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchDictionaryEntries(
            'compounds',
            ['query' => 'foo',
                'page' => 4,
                'hitsPerPage' => 2,
                'language' => 'fr',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchForFacetValues method.
     *
     * get searchForFacetValues results with minimal parameters
     */
    public function snippetForSearchForFacetValues(): void
    {
        // >SEPARATOR searchForFacetValues get searchForFacetValues results with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchForFacetValues(
            '<YOUR_INDEX_NAME>',
            'facetName',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchForFacetValues method.
     *
     * get searchForFacetValues results with all parameters
     */
    public function snippetForSearchForFacetValues1(): void
    {
        // >SEPARATOR searchForFacetValues get searchForFacetValues results with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchForFacetValues(
            '<YOUR_INDEX_NAME>',
            'facetName',
            ['params' => "query=foo&facetFilters=['bar']",
                'facetQuery' => 'foo',
                'maxFacetHits' => 42,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchForFacetValues method.
     *
     * facetName and facetQuery
     */
    public function snippetForSearchForFacetValues2(): void
    {
        // >SEPARATOR searchForFacetValues facetName and facetQuery
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchForFacetValues(
            '<YOUR_INDEX_NAME>',
            'author',
            ['facetQuery' => 'stephen',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchRules method.
     *
     * searchRules
     */
    public function snippetForSearchRules(): void
    {
        // >SEPARATOR searchRules default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchRules(
            '<YOUR_INDEX_NAME>',
            ['query' => 'zorro',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search with minimal parameters
     */
    public function snippetForSearchSingleIndex(): void
    {
        // >SEPARATOR searchSingleIndex search with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search with special characters in indexName
     */
    public function snippetForSearchSingleIndex1(): void
    {
        // >SEPARATOR searchSingleIndex search with special characters in indexName
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search with searchParams
     */
    public function snippetForSearchSingleIndex2(): void
    {
        // >SEPARATOR searchSingleIndex search with searchParams
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'myQuery',
                'facetFilters' => [
                    'tags:algolia',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * single search retrieve snippets
     */
    public function snippetForSearchSingleIndex3(): void
    {
        // >SEPARATOR searchSingleIndex single search retrieve snippets
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'batman mask of the phantasm',
                'attributesToRetrieve' => [
                    '*',
                ],
                'attributesToSnippet' => [
                    '*:20',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * query
     */
    public function snippetForSearchSingleIndex4(): void
    {
        // >SEPARATOR searchSingleIndex query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'phone',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filters
     */
    public function snippetForSearchSingleIndex5(): void
    {
        // >SEPARATOR searchSingleIndex filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'country:US AND price.gross < 2.0',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filters for stores
     */
    public function snippetForSearchSingleIndex6(): void
    {
        // >SEPARATOR searchSingleIndex filters for stores
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'ben',
                'filters' => 'categories:politics AND store:Gibert Joseph Saint-Michel',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filters boolean
     */
    public function snippetForSearchSingleIndex7(): void
    {
        // >SEPARATOR searchSingleIndex filters boolean
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'is_available:true',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * distinct
     */
    public function snippetForSearchSingleIndex8(): void
    {
        // >SEPARATOR searchSingleIndex distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['distinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersNumeric
     */
    public function snippetForSearchSingleIndex9(): void
    {
        // >SEPARATOR searchSingleIndex filtersNumeric
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'price < 10',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersTimestamp
     */
    public function snippetForSearchSingleIndex10(): void
    {
        // >SEPARATOR searchSingleIndex filtersTimestamp
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'NOT date_timestamp:1514764800 TO 1546300799',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersSumOrFiltersScoresFalse
     */
    public function snippetForSearchSingleIndex11(): void
    {
        // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
                'sumOrFiltersScores' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersSumOrFiltersScoresTrue
     */
    public function snippetForSearchSingleIndex12(): void
    {
        // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
                'sumOrFiltersScores' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersStephenKing
     */
    public function snippetForSearchSingleIndex13(): void
    {
        // >SEPARATOR searchSingleIndex filtersStephenKing
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'author:"Stephen King"',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersNotTags
     */
    public function snippetForSearchSingleIndex14(): void
    {
        // >SEPARATOR searchSingleIndex filtersNotTags
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'harry',
                'filters' => '_tags:non-fiction',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersList
     */
    public function snippetForSearchSingleIndex15(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersList
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['facetFilters' => [
                'publisher:Penguin',

                [
                    'author:Stephen King',

                    'genre:Horror',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersBook
     */
    public function snippetForSearchSingleIndex16(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersBook
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facetFilters' => [
                    'category:Book',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersAND
     */
    public function snippetForSearchSingleIndex17(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersAND
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facetFilters' => [
                    'category:Book',

                    'author:John Doe',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersOR
     */
    public function snippetForSearchSingleIndex18(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersOR
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facetFilters' => [
                    [
                        'category:Book',

                        'author:John Doe',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersCombined
     */
    public function snippetForSearchSingleIndex19(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersCombined
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facetFilters' => [
                    'author:John Doe',

                    [
                        'category:Book',

                        'category:Movie',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersNeg
     */
    public function snippetForSearchSingleIndex20(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersNeg
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['facetFilters' => 'category:-Ebook',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * filtersAndFacetFilters
     */
    public function snippetForSearchSingleIndex21(): void
    {
        // >SEPARATOR searchSingleIndex filtersAndFacetFilters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => '(author:"Stephen King" OR genre:"Horror")',
                'facetFilters' => [
                    'publisher:Penguin',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facet author genre
     */
    public function snippetForSearchSingleIndex22(): void
    {
        // >SEPARATOR searchSingleIndex facet author genre
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['facets' => [
                'author',

                'genre',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facet wildcard
     */
    public function snippetForSearchSingleIndex23(): void
    {
        // >SEPARATOR searchSingleIndex facet wildcard
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['facets' => [
                '*',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * maxValuesPerFacet
     */
    public function snippetForSearchSingleIndex24(): void
    {
        // >SEPARATOR searchSingleIndex maxValuesPerFacet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['maxValuesPerFacet' => 1000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * aroundLatLng
     */
    public function snippetForSearchSingleIndex25(): void
    {
        // >SEPARATOR searchSingleIndex aroundLatLng
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['aroundLatLng' => '40.71, -74.01',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * aroundLatLngViaIP
     */
    public function snippetForSearchSingleIndex26(): void
    {
        // >SEPARATOR searchSingleIndex aroundLatLngViaIP
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['aroundLatLngViaIP' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * aroundRadius
     */
    public function snippetForSearchSingleIndex27(): void
    {
        // >SEPARATOR searchSingleIndex aroundRadius
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['aroundLatLng' => '40.71, -74.01',
                'aroundRadius' => 1000000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * insideBoundingBox
     */
    public function snippetForSearchSingleIndex28(): void
    {
        // >SEPARATOR searchSingleIndex insideBoundingBox
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['insideBoundingBox' => [
                [
                    49.067996905313834,

                    65.73828125,

                    25.905859247243498,

                    128.8046875,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * insidePolygon
     */
    public function snippetForSearchSingleIndex29(): void
    {
        // >SEPARATOR searchSingleIndex insidePolygon
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['insidePolygon' => [
                [
                    42.01,

                    -124.31,

                    48.835509470063045,

                    -124.40453125000005,

                    45.01082951668149,

                    -65.95726562500005,

                    31.247243545293433,

                    -81.06578125000004,

                    25.924152577235226,

                    -97.68234374999997,

                    32.300311895879545,

                    -117.54828125,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * insidePolygon
     */
    public function snippetForSearchSingleIndex30(): void
    {
        // >SEPARATOR searchSingleIndex insidePolygon
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['insidePolygon' => [
                [
                    42.01,

                    -124.31,

                    48.835509470063045,

                    -124.40453125000005,

                    45.01082951668149,

                    -65.95726562500005,

                    31.247243545293433,

                    -81.06578125000004,

                    25.924152577235226,

                    -97.68234374999997,

                    32.300311895879545,

                    -117.54828125,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * optionalFilters
     */
    public function snippetForSearchSingleIndex31(): void
    {
        // >SEPARATOR searchSingleIndex optionalFilters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['optionalFilters' => [
                'can_deliver_quickly:true',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * optionalFiltersMany
     */
    public function snippetForSearchSingleIndex32(): void
    {
        // >SEPARATOR searchSingleIndex optionalFiltersMany
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['optionalFilters' => [
                'brand:Apple<score=3>',

                'brand:Samsung<score=2>',

                'brand:-Huawei',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * optionalFiltersSimple
     */
    public function snippetForSearchSingleIndex33(): void
    {
        // >SEPARATOR searchSingleIndex optionalFiltersSimple
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['optionalFilters' => [
                'brand:Apple<score=2>',

                'type:tablet',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * restrictSearchableAttributes
     */
    public function snippetForSearchSingleIndex34(): void
    {
        // >SEPARATOR searchSingleIndex restrictSearchableAttributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['restrictSearchableAttributes' => [
                'title_fr',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * getRankingInfo
     */
    public function snippetForSearchSingleIndex35(): void
    {
        // >SEPARATOR searchSingleIndex getRankingInfo
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['getRankingInfo' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * clickAnalytics
     */
    public function snippetForSearchSingleIndex36(): void
    {
        // >SEPARATOR searchSingleIndex clickAnalytics
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['clickAnalytics' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * clickAnalyticsUserToken
     */
    public function snippetForSearchSingleIndex37(): void
    {
        // >SEPARATOR searchSingleIndex clickAnalyticsUserToken
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['clickAnalytics' => true,
                'userToken' => 'user-1',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enablePersonalization
     */
    public function snippetForSearchSingleIndex38(): void
    {
        // >SEPARATOR searchSingleIndex enablePersonalization
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['enablePersonalization' => true,
                'userToken' => 'user-1',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * userToken
     */
    public function snippetForSearchSingleIndex39(): void
    {
        // >SEPARATOR searchSingleIndex userToken
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['userToken' => 'user-1',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * userToken1234
     */
    public function snippetForSearchSingleIndex40(): void
    {
        // >SEPARATOR searchSingleIndex userToken1234
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'userToken' => 'user-1234',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * analyticsTag
     */
    public function snippetForSearchSingleIndex41(): void
    {
        // >SEPARATOR searchSingleIndex analyticsTag
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['analyticsTags' => [
                'YOUR_ANALYTICS_TAG',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facetFiltersUsers
     */
    public function snippetForSearchSingleIndex42(): void
    {
        // >SEPARATOR searchSingleIndex facetFiltersUsers
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['facetFilters' => [
                'user:user42',

                'user:public',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * buildTheQuery
     */
    public function snippetForSearchSingleIndex43(): void
    {
        // >SEPARATOR searchSingleIndex buildTheQuery
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['filters' => "categoryPageId: Men's Clothing",
                'hitsPerPage' => 50,
                'analyticsTags' => [
                    'mens-clothing',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * attributesToHighlightOverride
     */
    public function snippetForSearchSingleIndex44(): void
    {
        // >SEPARATOR searchSingleIndex attributesToHighlightOverride
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'attributesToHighlight' => [
                    'title',

                    'content',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disableTypoToleranceOnAttributes
     */
    public function snippetForSearchSingleIndex45(): void
    {
        // >SEPARATOR searchSingleIndex disableTypoToleranceOnAttributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'disableTypoToleranceOnAttributes' => [
                    'serial_number',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_a_query
     */
    public function snippetForSearchSingleIndex46(): void
    {
        // >SEPARATOR searchSingleIndex search_a_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'shirt',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_everything
     */
    public function snippetForSearchSingleIndex47(): void
    {
        // >SEPARATOR searchSingleIndex search_everything
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => '',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * api_filtering_range_example
     */
    public function snippetForSearchSingleIndex48(): void
    {
        // >SEPARATOR searchSingleIndex api_filtering_range_example
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'books',
                'filters' => 'price:10 TO 20',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_a_query
     */
    public function snippetForSearchSingleIndex49(): void
    {
        // >SEPARATOR searchSingleIndex search_a_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => '',
                'similarQuery' => 'Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen',
                'filters' => 'year:1991 TO 2001',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_retrievable_attributes
     */
    public function snippetForSearchSingleIndex50(): void
    {
        // >SEPARATOR searchSingleIndex override_retrievable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'attributesToRetrieve' => [
                    'title',

                    'content',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * restrict_searchable_attributes
     */
    public function snippetForSearchSingleIndex51(): void
    {
        // >SEPARATOR searchSingleIndex restrict_searchable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'restrictSearchableAttributes' => [
                    'title',

                    'author',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_relevancy
     */
    public function snippetForSearchSingleIndex52(): void
    {
        // >SEPARATOR searchSingleIndex override_default_relevancy
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'relevancyStrictness' => 70,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_filters
     */
    public function snippetForSearchSingleIndex53(): void
    {
        // >SEPARATOR searchSingleIndex apply_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => '(category:Book OR category:Ebook) AND _tags:published',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_all_filters
     */
    public function snippetForSearchSingleIndex54(): void
    {
        // >SEPARATOR searchSingleIndex apply_all_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => 'available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:"John Doe"',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * escape_spaces
     */
    public function snippetForSearchSingleIndex55(): void
    {
        // >SEPARATOR searchSingleIndex escape_spaces
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => 'category:"Books and Comics"',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * escape_keywords
     */
    public function snippetForSearchSingleIndex56(): void
    {
        // >SEPARATOR searchSingleIndex escape_keywords
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => 'keyword:"OR"',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * escape_single_quotes
     */
    public function snippetForSearchSingleIndex57(): void
    {
        // >SEPARATOR searchSingleIndex escape_single_quotes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => "content:\"It's a wonderful day\"",
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * escape_double_quotes
     */
    public function snippetForSearchSingleIndex58(): void
    {
        // >SEPARATOR searchSingleIndex escape_double_quotes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'filters' => 'content:"She said "Hello World"',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_filters
     */
    public function snippetForSearchSingleIndex59(): void
    {
        // >SEPARATOR searchSingleIndex apply_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'optionalFilters' => [
                    'category:Book',

                    'author:John Doe',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_negative_filters
     */
    public function snippetForSearchSingleIndex60(): void
    {
        // >SEPARATOR searchSingleIndex apply_negative_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'optionalFilters' => [
                    'category:Book',

                    'author:-John Doe',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_negative_filters_restaurants
     */
    public function snippetForSearchSingleIndex61(): void
    {
        // >SEPARATOR searchSingleIndex apply_negative_filters_restaurants
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'optionalFilters' => [
                    "restaurant:-Bert's Inn",
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_numeric_filters
     */
    public function snippetForSearchSingleIndex62(): void
    {
        // >SEPARATOR searchSingleIndex apply_numeric_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'numericFilters' => [
                    'price < 1000',

                    [
                        'inStock = 1',

                        'deliveryDate < 1441755506',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_tag_filters
     */
    public function snippetForSearchSingleIndex63(): void
    {
        // >SEPARATOR searchSingleIndex apply_tag_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'tagFilters' => [
                    'SciFi',

                    [
                        'Book',

                        'Movie',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * apply_filters
     */
    public function snippetForSearchSingleIndex64(): void
    {
        // >SEPARATOR searchSingleIndex apply_filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'sumOrFiltersScores' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * facets_all
     */
    public function snippetForSearchSingleIndex65(): void
    {
        // >SEPARATOR searchSingleIndex facets_all
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facets' => [
                    '*',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * retrieve_only_some_facets
     */
    public function snippetForSearchSingleIndex66(): void
    {
        // >SEPARATOR searchSingleIndex retrieve_only_some_facets
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facets' => [
                    'category',

                    'author',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_max_values_per_facet
     */
    public function snippetForSearchSingleIndex67(): void
    {
        // >SEPARATOR searchSingleIndex override_default_max_values_per_facet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'maxValuesPerFacet' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_faceting_after_distinct
     */
    public function snippetForSearchSingleIndex68(): void
    {
        // >SEPARATOR searchSingleIndex enable_faceting_after_distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'facetingAfterDistinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * sort_facet_values_alphabetically
     */
    public function snippetForSearchSingleIndex69(): void
    {
        // >SEPARATOR searchSingleIndex sort_facet_values_alphabetically
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'sortFacetValuesBy' => 'count',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_attributes_to_snippet
     */
    public function snippetForSearchSingleIndex70(): void
    {
        // >SEPARATOR searchSingleIndex override_attributes_to_snippet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'attributesToSnippet' => [
                    'title',

                    'content:80',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_highlight_pre_tag
     */
    public function snippetForSearchSingleIndex71(): void
    {
        // >SEPARATOR searchSingleIndex override_default_highlight_pre_tag
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'highlightPreTag' => '<strong>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_highlight_post_tag
     */
    public function snippetForSearchSingleIndex72(): void
    {
        // >SEPARATOR searchSingleIndex override_default_highlight_post_tag
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'highlightPostTag' => '</strong>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_snippet_ellipsis_text
     */
    public function snippetForSearchSingleIndex73(): void
    {
        // >SEPARATOR searchSingleIndex override_default_snippet_ellipsis_text
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'snippetEllipsisText' => '',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_restrict_highlight_and_snippet_arrays
     */
    public function snippetForSearchSingleIndex74(): void
    {
        // >SEPARATOR searchSingleIndex enable_restrict_highlight_and_snippet_arrays
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'restrictHighlightAndSnippetArrays' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * access_page
     */
    public function snippetForSearchSingleIndex75(): void
    {
        // >SEPARATOR searchSingleIndex access_page
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'page' => 0,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_hits_per_page
     */
    public function snippetForSearchSingleIndex76(): void
    {
        // >SEPARATOR searchSingleIndex override_default_hits_per_page
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'hitsPerPage' => 10,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * get_nth_hit
     */
    public function snippetForSearchSingleIndex77(): void
    {
        // >SEPARATOR searchSingleIndex get_nth_hit
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'offset' => 4,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * get_n_results
     */
    public function snippetForSearchSingleIndex78(): void
    {
        // >SEPARATOR searchSingleIndex get_n_results
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'length' => 4,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_min_word_size_for_one_typo
     */
    public function snippetForSearchSingleIndex79(): void
    {
        // >SEPARATOR searchSingleIndex override_default_min_word_size_for_one_typo
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'minWordSizefor1Typo' => 2,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_min_word_size_for_two_typos
     */
    public function snippetForSearchSingleIndex80(): void
    {
        // >SEPARATOR searchSingleIndex override_default_min_word_size_for_two_typos
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'minWordSizefor2Typos' => 2,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_typo_tolerance_mode
     */
    public function snippetForSearchSingleIndex81(): void
    {
        // >SEPARATOR searchSingleIndex override_default_typo_tolerance_mode
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'typoTolerance' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disable_typos_on_numeric_tokens_at_search_time
     */
    public function snippetForSearchSingleIndex82(): void
    {
        // >SEPARATOR searchSingleIndex disable_typos_on_numeric_tokens_at_search_time
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'allowTyposOnNumericTokens' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_around_a_position
     */
    public function snippetForSearchSingleIndex83(): void
    {
        // >SEPARATOR searchSingleIndex search_around_a_position
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundLatLng' => '40.71, -74.01',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_around_server_ip
     */
    public function snippetForSearchSingleIndex84(): void
    {
        // >SEPARATOR searchSingleIndex search_around_server_ip
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundLatLngViaIP' => true,
            ],
            [
                'headers' => [
                    'x-forwarded-for' => '94.228.178.246 // should be replaced with the actual IP you would like to search around',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_around_radius
     */
    public function snippetForSearchSingleIndex85(): void
    {
        // >SEPARATOR searchSingleIndex set_around_radius
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundRadius' => 1000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disable_automatic_radius
     */
    public function snippetForSearchSingleIndex86(): void
    {
        // >SEPARATOR searchSingleIndex disable_automatic_radius
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundRadius' => 'all',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_geo_search_precision
     */
    public function snippetForSearchSingleIndex87(): void
    {
        // >SEPARATOR searchSingleIndex set_geo_search_precision
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundPrecision' => 100,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_geo_search_precision_non_linear
     */
    public function snippetForSearchSingleIndex88(): void
    {
        // >SEPARATOR searchSingleIndex set_geo_search_precision_non_linear
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'aroundPrecision' => [
                    ['from' => 0,
                        'value' => 25,
                    ],

                    ['from' => 2000,
                        'value' => 1000,
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_minimum_geo_search_radius
     */
    public function snippetForSearchSingleIndex89(): void
    {
        // >SEPARATOR searchSingleIndex set_minimum_geo_search_radius
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'minimumAroundRadius' => 1000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_inside_rectangular_area
     */
    public function snippetForSearchSingleIndex90(): void
    {
        // >SEPARATOR searchSingleIndex search_inside_rectangular_area
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'insideBoundingBox' => [
                    [
                        46.650828100116044,

                        7.123046875,

                        45.17210966999772,

                        1.009765625,
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_inside_multiple_rectangular_areas
     */
    public function snippetForSearchSingleIndex91(): void
    {
        // >SEPARATOR searchSingleIndex search_inside_multiple_rectangular_areas
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'insideBoundingBox' => [
                    [
                        46.650828100116044,

                        7.123046875,

                        45.17210966999772,

                        1.009765625,
                    ],

                    [
                        49.62625916704081,

                        4.6181640625,

                        47.715070300900194,

                        0.482421875,
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_inside_polygon_area
     */
    public function snippetForSearchSingleIndex92(): void
    {
        // >SEPARATOR searchSingleIndex search_inside_polygon_area
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'insidePolygon' => [
                    [
                        46.650828100116044,

                        7.123046875,

                        45.17210966999772,

                        1.009765625,

                        49.62625916704081,

                        4.6181640625,
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search_inside_multiple_polygon_areas
     */
    public function snippetForSearchSingleIndex93(): void
    {
        // >SEPARATOR searchSingleIndex search_inside_multiple_polygon_areas
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'insidePolygon' => [
                    [
                        46.650828100116044,

                        7.123046875,

                        45.17210966999772,

                        1.009765625,

                        49.62625916704081,

                        4.6181640625,
                    ],

                    [
                        49.62625916704081,

                        4.6181640625,

                        47.715070300900194,

                        0.482421875,

                        45.17210966999772,

                        1.009765625,

                        50.62626704081,

                        4.6181640625,
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_querylanguages_override
     */
    public function snippetForSearchSingleIndex94(): void
    {
        // >SEPARATOR searchSingleIndex set_querylanguages_override
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'ignorePlurals' => [
                    'ca',

                    'es',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_querylanguages_override
     */
    public function snippetForSearchSingleIndex95(): void
    {
        // >SEPARATOR searchSingleIndex set_querylanguages_override
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'removeStopWords' => [
                    'ca',

                    'es',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_querylanguages_override
     */
    public function snippetForSearchSingleIndex96(): void
    {
        // >SEPARATOR searchSingleIndex set_querylanguages_override
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'removeStopWords' => [
                    'ca',

                    'es',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_querylanguages_with_japanese_query
     */
    public function snippetForSearchSingleIndex97(): void
    {
        // >SEPARATOR searchSingleIndex set_querylanguages_with_japanese_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'queryLanguages' => [
                    'ja',

                    'en',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_natural_languages
     */
    public function snippetForSearchSingleIndex98(): void
    {
        // >SEPARATOR searchSingleIndex set_natural_languages
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => '',
                'naturalLanguages' => [
                    'fr',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_natural_languages_with_query
     */
    public function snippetForSearchSingleIndex99(): void
    {
        // >SEPARATOR searchSingleIndex override_natural_languages_with_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => '',
                'naturalLanguages' => [
                    'fr',
                ],
                'removeWordsIfNoResults' => 'firstWords',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_decompound_query_search_time
     */
    public function snippetForSearchSingleIndex100(): void
    {
        // >SEPARATOR searchSingleIndex enable_decompound_query_search_time
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'decompoundQuery' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_rules_search_time
     */
    public function snippetForSearchSingleIndex101(): void
    {
        // >SEPARATOR searchSingleIndex enable_rules_search_time
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enableRules' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_rule_contexts
     */
    public function snippetForSearchSingleIndex102(): void
    {
        // >SEPARATOR searchSingleIndex set_rule_contexts
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'ruleContexts' => [
                    'front_end',

                    'website2',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_personalization
     */
    public function snippetForSearchSingleIndex103(): void
    {
        // >SEPARATOR searchSingleIndex enable_personalization
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enablePersonalization' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_personalization_with_user_token
     */
    public function snippetForSearchSingleIndex104(): void
    {
        // >SEPARATOR searchSingleIndex enable_personalization_with_user_token
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enablePersonalization' => true,
                'userToken' => '123456',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * personalization_impact
     */
    public function snippetForSearchSingleIndex105(): void
    {
        // >SEPARATOR searchSingleIndex personalization_impact
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'personalizationImpact' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_user_token
     */
    public function snippetForSearchSingleIndex106(): void
    {
        // >SEPARATOR searchSingleIndex set_user_token
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'userToken' => '123456',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_user_token_with_personalization
     */
    public function snippetForSearchSingleIndex107(): void
    {
        // >SEPARATOR searchSingleIndex set_user_token_with_personalization
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enablePersonalization' => true,
                'userToken' => '123456',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_query_type
     */
    public function snippetForSearchSingleIndex108(): void
    {
        // >SEPARATOR searchSingleIndex override_default_query_type
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'queryType' => 'prefixAll',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_remove_words_if_no_results
     */
    public function snippetForSearchSingleIndex109(): void
    {
        // >SEPARATOR searchSingleIndex override_default_remove_words_if_no_results
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'removeWordsIfNoResults' => 'lastWords',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_advanced_syntax_search_time
     */
    public function snippetForSearchSingleIndex110(): void
    {
        // >SEPARATOR searchSingleIndex enable_advanced_syntax_search_time
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'advancedSyntax' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * overide_default_optional_words
     */
    public function snippetForSearchSingleIndex111(): void
    {
        // >SEPARATOR searchSingleIndex overide_default_optional_words
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'optionalWords' => [
                    'toyota',

                    '2020 2021',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disabling_exact_for_some_attributes_search_time
     */
    public function snippetForSearchSingleIndex112(): void
    {
        // >SEPARATOR searchSingleIndex disabling_exact_for_some_attributes_search_time
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'disableExactOnAttributes' => [
                    'description',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_exact_single_word_query
     */
    public function snippetForSearchSingleIndex113(): void
    {
        // >SEPARATOR searchSingleIndex override_default_exact_single_word_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'exactOnSingleWordQuery' => 'none',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_aternative_as_exact
     */
    public function snippetForSearchSingleIndex114(): void
    {
        // >SEPARATOR searchSingleIndex override_default_aternative_as_exact
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'alternativesAsExact' => [
                    'multiWordsSynonym',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_advanced_syntax_exact_phrase
     */
    public function snippetForSearchSingleIndex115(): void
    {
        // >SEPARATOR searchSingleIndex enable_advanced_syntax_exact_phrase
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'advancedSyntax' => true,
                'advancedSyntaxFeatures' => [
                    'exactPhrase',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_advanced_syntax_exclude_words
     */
    public function snippetForSearchSingleIndex116(): void
    {
        // >SEPARATOR searchSingleIndex enable_advanced_syntax_exclude_words
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'advancedSyntax' => true,
                'advancedSyntaxFeatures' => [
                    'excludeWords',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_distinct
     */
    public function snippetForSearchSingleIndex117(): void
    {
        // >SEPARATOR searchSingleIndex override_distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'distinct' => 0,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * get_ranking_info
     */
    public function snippetForSearchSingleIndex118(): void
    {
        // >SEPARATOR searchSingleIndex get_ranking_info
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'getRankingInfo' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disable_click_analytics
     */
    public function snippetForSearchSingleIndex119(): void
    {
        // >SEPARATOR searchSingleIndex disable_click_analytics
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'clickAnalytics' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * enable_click_analytics
     */
    public function snippetForSearchSingleIndex120(): void
    {
        // >SEPARATOR searchSingleIndex enable_click_analytics
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'clickAnalytics' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disable_analytics
     */
    public function snippetForSearchSingleIndex121(): void
    {
        // >SEPARATOR searchSingleIndex disable_analytics
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'analytics' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * add_analytics_tags
     */
    public function snippetForSearchSingleIndex122(): void
    {
        // >SEPARATOR searchSingleIndex add_analytics_tags
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'analyticsTags' => [
                    'front_end',

                    'website2',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * disable_synonyms
     */
    public function snippetForSearchSingleIndex123(): void
    {
        // >SEPARATOR searchSingleIndex disable_synonyms
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'synonyms' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_replace_synonyms_in_highlights
     */
    public function snippetForSearchSingleIndex124(): void
    {
        // >SEPARATOR searchSingleIndex override_replace_synonyms_in_highlights
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'replaceSynonymsInHighlight' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_min_proximity
     */
    public function snippetForSearchSingleIndex125(): void
    {
        // >SEPARATOR searchSingleIndex override_min_proximity
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'minProximity' => 2,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_default_field
     */
    public function snippetForSearchSingleIndex126(): void
    {
        // >SEPARATOR searchSingleIndex override_default_field
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'responseFields' => [
                    'hits',

                    'facets',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * override_percentile_computation
     */
    public function snippetForSearchSingleIndex127(): void
    {
        // >SEPARATOR searchSingleIndex override_percentile_computation
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'percentileComputation' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_ab_test
     */
    public function snippetForSearchSingleIndex128(): void
    {
        // >SEPARATOR searchSingleIndex set_ab_test
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enableABTest' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * set_enable_re_ranking
     */
    public function snippetForSearchSingleIndex129(): void
    {
        // >SEPARATOR searchSingleIndex set_enable_re_ranking
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
                'enableReRanking' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * with algolia user id
     */
    public function snippetForSearchSingleIndex130(): void
    {
        // >SEPARATOR searchSingleIndex with algolia user id
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
            ['query' => 'query',
            ],
            [
                'headers' => [
                    'X-Algolia-User-ID' => 'user1234',
                ],
            ]
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSynonyms method.
     *
     * searchSynonyms with minimal parameters
     */
    public function snippetForSearchSynonyms(): void
    {
        // >SEPARATOR searchSynonyms searchSynonyms with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSynonyms(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSynonyms method.
     *
     * searchSynonyms with all parameters
     */
    public function snippetForSearchSynonyms1(): void
    {
        // >SEPARATOR searchSynonyms searchSynonyms with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSynonyms(
            '<YOUR_INDEX_NAME>',
            ['query' => 'myQuery',
                'type' => 'altcorrection1',
                'page' => 10,
                'hitsPerPage' => 10,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchUserIds method.
     *
     * searchUserIds
     */
    public function snippetForSearchUserIds(): void
    {
        // >SEPARATOR searchUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchUserIds(
            ['query' => 'test',
                'clusterName' => 'theClusterName',
                'page' => 5,
                'hitsPerPage' => 10,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetClientApiKey method.
     *
     * switch API key
     */
    public function snippetForSetClientApiKey(): void
    {
        // >SEPARATOR setClientApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $client->setClientApiKey(
            'updated-api-key',
        );

        // >LOG
        // SEPARATOR<
    }

    /**
     * Snippet for the SetDictionarySettings method.
     *
     * get setDictionarySettings results with minimal parameters
     */
    public function snippetForSetDictionarySettings(): void
    {
        // >SEPARATOR setDictionarySettings get setDictionarySettings results with minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setDictionarySettings(
            ['disableStandardEntries' => ['plurals' => ['fr' => false,
                'en' => false,
                'ru' => true,
            ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetDictionarySettings method.
     *
     * get setDictionarySettings results with all parameters
     */
    public function snippetForSetDictionarySettings1(): void
    {
        // >SEPARATOR setDictionarySettings get setDictionarySettings results with all parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setDictionarySettings(
            ['disableStandardEntries' => ['plurals' => ['fr' => false,
                'en' => false,
                'ru' => true,
            ],
                'stopwords' => ['fr' => false,
                ],
                'compounds' => ['ru' => true,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * minimal parameters
     */
    public function snippetForSetSettings(): void
    {
        // >SEPARATOR setSettings minimal parameters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['paginationLimitedTo' => 10,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * boolean typoTolerance
     */
    public function snippetForSetSettings1(): void
    {
        // >SEPARATOR setSettings boolean typoTolerance
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['typoTolerance' => true,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enum typoTolerance
     */
    public function snippetForSetSettings2(): void
    {
        // >SEPARATOR setSettings enum typoTolerance
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['typoTolerance' => 'min',
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ignorePlurals
     */
    public function snippetForSetSettings3(): void
    {
        // >SEPARATOR setSettings ignorePlurals
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ignorePlurals' => true,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * list of string ignorePlurals
     */
    public function snippetForSetSettings4(): void
    {
        // >SEPARATOR setSettings list of string ignorePlurals
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ignorePlurals' => [
                'fr',
            ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * removeStopWords boolean
     */
    public function snippetForSetSettings5(): void
    {
        // >SEPARATOR setSettings removeStopWords boolean
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['removeStopWords' => true,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * removeStopWords list of string
     */
    public function snippetForSetSettings6(): void
    {
        // >SEPARATOR setSettings removeStopWords list of string
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['removeStopWords' => [
                'fr',
            ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * boolean distinct
     */
    public function snippetForSetSettings7(): void
    {
        // >SEPARATOR setSettings boolean distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['distinct' => true,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * integer distinct
     */
    public function snippetForSetSettings8(): void
    {
        // >SEPARATOR setSettings integer distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['distinct' => 1,
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * distinct company
     */
    public function snippetForSetSettings9(): void
    {
        // >SEPARATOR setSettings distinct company
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributeForDistinct' => 'company',
                'distinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * distinct design
     */
    public function snippetForSetSettings10(): void
    {
        // >SEPARATOR setSettings distinct design
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributeForDistinct' => 'design',
                'distinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * distinct true
     */
    public function snippetForSetSettings11(): void
    {
        // >SEPARATOR setSettings distinct true
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['distinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * distinct section
     */
    public function snippetForSetSettings12(): void
    {
        // >SEPARATOR setSettings distinct section
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributeForDistinct' => 'section',
                'distinct' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting allergens
     */
    public function snippetForSetSettings13(): void
    {
        // >SEPARATOR setSettings attributesForFaceting allergens
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'allergens',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting availableIn
     */
    public function snippetForSetSettings14(): void
    {
        // >SEPARATOR setSettings attributesForFaceting availableIn
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'color',

                'availableIn',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * api_attributes_for_faceting
     */
    public function snippetForSetSettings15(): void
    {
        // >SEPARATOR setSettings api_attributes_for_faceting
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'genre',

                'author',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * api_attributes_for_faceting_searchable
     */
    public function snippetForSetSettings16(): void
    {
        // >SEPARATOR setSettings api_attributes_for_faceting_searchable
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'genre',

                'searchable(author)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * api_attributes_for_filter_only
     */
    public function snippetForSetSettings17(): void
    {
        // >SEPARATOR setSettings api_attributes_for_filter_only
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'filterOnly(genre)',

                'author',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting categoryPageId
     */
    public function snippetForSetSettings18(): void
    {
        // >SEPARATOR setSettings attributesForFaceting categoryPageId
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'searchable(categoryPageId)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * unretrievableAttributes
     */
    public function snippetForSetSettings19(): void
    {
        // >SEPARATOR setSettings unretrievableAttributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['unretrievableAttributes' => [
                'visible_by',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting user restricted data
     */
    public function snippetForSetSettings20(): void
    {
        // >SEPARATOR setSettings attributesForFaceting user restricted data
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'filterOnly(visible_by)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting optional filters
     */
    public function snippetForSetSettings21(): void
    {
        // >SEPARATOR setSettings attributesForFaceting optional filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'can_deliver_quickly',

                'restaurant',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting redirect index
     */
    public function snippetForSetSettings22(): void
    {
        // >SEPARATOR setSettings attributesForFaceting redirect index
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'query_terms',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting multiple consequences
     */
    public function snippetForSetSettings23(): void
    {
        // >SEPARATOR setSettings attributesForFaceting multiple consequences
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'director',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting in-depth optional filters
     */
    public function snippetForSetSettings24(): void
    {
        // >SEPARATOR setSettings attributesForFaceting in-depth optional filters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'filterOnly(brand)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * mode neuralSearch
     */
    public function snippetForSetSettings25(): void
    {
        // >SEPARATOR setSettings mode neuralSearch
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['mode' => 'neuralSearch',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * mode keywordSearch
     */
    public function snippetForSetSettings26(): void
    {
        // >SEPARATOR setSettings mode keywordSearch
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['mode' => 'keywordSearch',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributes same priority
     */
    public function snippetForSetSettings27(): void
    {
        // >SEPARATOR setSettings searchableAttributes same priority
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'title,comments',

                'ingredients',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributes higher priority
     */
    public function snippetForSetSettings28(): void
    {
        // >SEPARATOR setSettings searchableAttributes higher priority
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'title',

                'ingredients',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking retweets
     */
    public function snippetForSetSettings29(): void
    {
        // >SEPARATOR setSettings customRanking retweets
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(retweets)',

                'desc(likes)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking boosted
     */
    public function snippetForSetSettings30(): void
    {
        // >SEPARATOR setSettings customRanking boosted
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(boosted)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking pageviews
     */
    public function snippetForSetSettings31(): void
    {
        // >SEPARATOR setSettings customRanking pageviews
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(pageviews)',

                'desc(comments)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking applying search parameters for a specific query
     */
    public function snippetForSetSettings32(): void
    {
        // >SEPARATOR setSettings customRanking applying search parameters for a specific query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(nb_airline_liaisons)',
            ],
                'attributesForFaceting' => [
                    'city, country',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking rounded pageviews
     */
    public function snippetForSetSettings33(): void
    {
        // >SEPARATOR setSettings customRanking rounded pageviews
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(rounded_pageviews)',

                'desc(comments)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking price
     */
    public function snippetForSetSettings34(): void
    {
        // >SEPARATOR setSettings customRanking price
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(price)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ranking exhaustive (price)
     */
    public function snippetForSetSettings35(): void
    {
        // >SEPARATOR setSettings ranking exhaustive (price)
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'desc(price)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ranking exhaustive (is_popular)
     */
    public function snippetForSetSettings36(): void
    {
        // >SEPARATOR setSettings ranking exhaustive (is_popular)
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'desc(is_popular)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ranking standard replica
     */
    public function snippetForSetSettings37(): void
    {
        // >SEPARATOR setSettings ranking standard replica
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'desc(post_date_timestamp)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ranking virtual replica
     */
    public function snippetForSetSettings38(): void
    {
        // >SEPARATOR setSettings ranking virtual replica
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(post_date_timestamp)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * customRanking and ranking sort alphabetically
     */
    public function snippetForSetSettings39(): void
    {
        // >SEPARATOR setSettings customRanking and ranking sort alphabetically
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'asc(textual_attribute)',
            ],
                'ranking' => [
                    'custom',

                    'typo',

                    'geo',

                    'words',

                    'filters',

                    'proximity',

                    'attribute',

                    'exact',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * relevancyStrictness
     */
    public function snippetForSetSettings40(): void
    {
        // >SEPARATOR setSettings relevancyStrictness
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'asc(textual_attribute)',
            ],
                'relevancyStrictness' => 0,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * create replica index
     */
    public function snippetForSetSettings41(): void
    {
        // >SEPARATOR setSettings create replica index
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replicas' => [
                'products_price_desc',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * create replica index articles
     */
    public function snippetForSetSettings42(): void
    {
        // >SEPARATOR setSettings create replica index articles
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replicas' => [
                'articles_date_desc',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * create virtual replica index
     */
    public function snippetForSetSettings43(): void
    {
        // >SEPARATOR setSettings create virtual replica index
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replicas' => [
                'virtual(products_price_desc)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * unlink replica index
     */
    public function snippetForSetSettings44(): void
    {
        // >SEPARATOR setSettings unlink replica index
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replicas' => [
                '',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * forwardToReplicas
     */
    public function snippetForSetSettings45(): void
    {
        // >SEPARATOR setSettings forwardToReplicas
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'name',

                'description',
            ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * maxValuesPerFacet
     */
    public function snippetForSetSettings46(): void
    {
        // >SEPARATOR setSettings maxValuesPerFacet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['maxValuesPerFacet' => 1000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * maxFacetHits
     */
    public function snippetForSetSettings47(): void
    {
        // >SEPARATOR setSettings maxFacetHits
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['maxFacetHits' => 100,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesForFaceting complex
     */
    public function snippetForSetSettings48(): void
    {
        // >SEPARATOR setSettings attributesForFaceting complex
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'actor',

                'filterOnly(category)',

                'searchable(publisher)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * ranking closest dates
     */
    public function snippetForSetSettings49(): void
    {
        // >SEPARATOR setSettings ranking closest dates
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'asc(date_timestamp)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributes item variation
     */
    public function snippetForSetSettings50(): void
    {
        // >SEPARATOR setSettings searchableAttributes item variation
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'design',

                'type',

                'color',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributes around location
     */
    public function snippetForSetSettings51(): void
    {
        // >SEPARATOR setSettings searchableAttributes around location
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'name',

                'country',

                'city',

                'iata_code',
            ],
                'customRanking' => [
                    'desc(links_count)',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesToHighlight
     */
    public function snippetForSetSettings52(): void
    {
        // >SEPARATOR setSettings attributesToHighlight
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToHighlight' => [
                'author',

                'title',

                'content',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * attributesToHighlightStar
     */
    public function snippetForSetSettings53(): void
    {
        // >SEPARATOR setSettings attributesToHighlightStar
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToHighlight' => [
                '*',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * everything
     */
    public function snippetForSetSettings54(): void
    {
        // >SEPARATOR setSettings everything
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['advancedSyntax' => true,
                'advancedSyntaxFeatures' => [
                    'exactPhrase',
                ],
                'allowCompressionOfIntegerArray' => true,
                'allowTyposOnNumericTokens' => true,
                'alternativesAsExact' => [
                    'singleWordSynonym',
                ],
                'attributeCriteriaComputedByMinProximity' => true,
                'attributeForDistinct' => 'test',
                'attributesForFaceting' => [
                    'algolia',
                ],
                'attributesToHighlight' => [
                    'algolia',
                ],
                'attributesToRetrieve' => [
                    'algolia',
                ],
                'attributesToSnippet' => [
                    'algolia',
                ],
                'attributesToTransliterate' => [
                    'algolia',
                ],
                'camelCaseAttributes' => [
                    'algolia',
                ],
                'customNormalization' => ['algolia' => ['aloglia' => 'aglolia',
                ],
                ],
                'customRanking' => [
                    'algolia',
                ],
                'decompoundQuery' => false,
                'decompoundedAttributes' => ['algolia' => 'aloglia',
                ],
                'disableExactOnAttributes' => [
                    'algolia',
                ],
                'disablePrefixOnAttributes' => [
                    'algolia',
                ],
                'disableTypoToleranceOnAttributes' => [
                    'algolia',
                ],
                'disableTypoToleranceOnWords' => [
                    'algolia',
                ],
                'distinct' => 3,
                'enablePersonalization' => true,
                'enableReRanking' => false,
                'enableRules' => true,
                'exactOnSingleWordQuery' => 'attribute',
                'highlightPreTag' => '<span>',
                'highlightPostTag' => '</span>',
                'hitsPerPage' => 10,
                'ignorePlurals' => false,
                'indexLanguages' => [
                    'fr',
                ],
                'keepDiacriticsOnCharacters' => 'abc',
                'maxFacetHits' => 20,
                'maxValuesPerFacet' => 30,
                'minProximity' => 6,
                'minWordSizefor1Typo' => 5,
                'minWordSizefor2Typos' => 11,
                'mode' => 'neuralSearch',
                'numericAttributesForFiltering' => [
                    'algolia',
                ],
                'optionalWords' => [
                    'myspace',
                ],
                'paginationLimitedTo' => 0,
                'queryLanguages' => [
                    'fr',
                ],
                'queryType' => 'prefixLast',
                'ranking' => [
                    'geo',
                ],
                'reRankingApplyFilter' => 'mySearch:filters',
                'relevancyStrictness' => 10,
                'removeStopWords' => false,
                'removeWordsIfNoResults' => 'lastWords',
                'renderingContent' => ['facetOrdering' => ['facets' => ['order' => [
                    'a',

                    'b',
                ],
                ],
                    'values' => ['a' => ['order' => [
                        'b',
                    ],
                        'sortRemainingBy' => 'count',
                    ],
                    ],
                ],
                ],
                'replaceSynonymsInHighlight' => true,
                'replicas' => [
                    '',
                ],
                'responseFields' => [
                    'algolia',
                ],
                'restrictHighlightAndSnippetArrays' => true,
                'searchableAttributes' => [
                    'foo',
                ],
                'semanticSearch' => ['eventSources' => [
                    'foo',
                ],
                ],
                'separatorsToIndex' => 'bar',
                'snippetEllipsisText' => '---',
                'sortFacetValuesBy' => 'date',
                'typoTolerance' => false,
                'unretrievableAttributes' => [
                    'foo',
                ],
                'userData' => ['user' => 'data',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesWithCustomRankingsAndAttributesForFaceting
     */
    public function snippetForSetSettings55(): void
    {
        // >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'brand',

                'name',

                'categories',

                'unordered(description)',
            ],
                'customRanking' => [
                    'desc(popularity)',
                ],
                'attributesForFaceting' => [
                    'searchable(brand)',

                    'type',

                    'categories',

                    'price',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesOrdering
     */
    public function snippetForSetSettings56(): void
    {
        // >SEPARATOR setSettings searchableAttributesOrdering
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'unordered(title)',

                'cast',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesProductReferenceSuffixes
     */
    public function snippetForSetSettings57(): void
    {
        // >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'name',

                'product_reference',

                'product_reference_suffixes',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * queryLanguageAndIgnorePlurals
     */
    public function snippetForSetSettings58(): void
    {
        // >SEPARATOR setSettings queryLanguageAndIgnorePlurals
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['queryLanguages' => [
                'en',
            ],
                'ignorePlurals' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesInMovies
     */
    public function snippetForSetSettings59(): void
    {
        // >SEPARATOR setSettings searchableAttributesInMovies
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'title_eng',

                'title_fr',

                'title_es',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disablePrefixOnAttributes
     */
    public function snippetForSetSettings60(): void
    {
        // >SEPARATOR setSettings disablePrefixOnAttributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['disablePrefixOnAttributes' => [
                'serial_number',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disableTypoToleranceOnAttributes
     */
    public function snippetForSetSettings61(): void
    {
        // >SEPARATOR setSettings disableTypoToleranceOnAttributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['disableTypoToleranceOnAttributes' => [
                'serial_number',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesSimpleExample
     */
    public function snippetForSetSettings62(): void
    {
        // >SEPARATOR setSettings searchableAttributesSimpleExample
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'serial_number',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * searchableAttributesSimpleExampleAlt
     */
    public function snippetForSetSettings63(): void
    {
        // >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'serial_number',

                'serial_number_suffixes',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_searchable_attributes
     */
    public function snippetForSetSettings64(): void
    {
        // >SEPARATOR setSettings set_searchable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['searchableAttributes' => [
                'title,alternative_title',

                'author',

                'unordered(text)',

                'emails.personal',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_searchable_attributes
     */
    public function snippetForSetSettings65(): void
    {
        // >SEPARATOR setSettings set_searchable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'author',

                'filterOnly(isbn)',

                'searchable(edition)',

                'afterDistinct(category)',

                'afterDistinct(searchable(publisher))',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * unretrievable_attributes
     */
    public function snippetForSetSettings66(): void
    {
        // >SEPARATOR setSettings unretrievable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['unretrievableAttributes' => [
                'total_number_of_sales',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_retrievable_attributes
     */
    public function snippetForSetSettings67(): void
    {
        // >SEPARATOR setSettings set_retrievable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToRetrieve' => [
                'author',

                'title',

                'content',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_all_attributes_as_retrievable
     */
    public function snippetForSetSettings68(): void
    {
        // >SEPARATOR setSettings set_all_attributes_as_retrievable
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToRetrieve' => [
                '*',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * specify_attributes_not_to_retrieve
     */
    public function snippetForSetSettings69(): void
    {
        // >SEPARATOR setSettings specify_attributes_not_to_retrieve
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToRetrieve' => [
                '*',

                '-SKU',

                '-internal_desc',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * neural_search
     */
    public function snippetForSetSettings70(): void
    {
        // >SEPARATOR setSettings neural_search
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['mode' => 'neuralSearch',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * keyword_search
     */
    public function snippetForSetSettings71(): void
    {
        // >SEPARATOR setSettings keyword_search
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['mode' => 'keywordSearch',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_ranking
     */
    public function snippetForSetSettings72(): void
    {
        // >SEPARATOR setSettings set_default_ranking
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'typo',

                'geo',

                'words',

                'filters',

                'attribute',

                'proximity',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_ranking_by_attribute_asc
     */
    public function snippetForSetSettings73(): void
    {
        // >SEPARATOR setSettings set_ranking_by_attribute_asc
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'asc(price)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_ranking_by_attribute_desc
     */
    public function snippetForSetSettings74(): void
    {
        // >SEPARATOR setSettings set_ranking_by_attribute_desc
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['ranking' => [
                'desc(price)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * restrict_searchable_attributes
     */
    public function snippetForSetSettings75(): void
    {
        // >SEPARATOR setSettings restrict_searchable_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customRanking' => [
                'desc(popularity)',

                'asc(price)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_relevancy
     */
    public function snippetForSetSettings76(): void
    {
        // >SEPARATOR setSettings set_default_relevancy
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['relevancyStrictness' => 90,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_replicas
     */
    public function snippetForSetSettings77(): void
    {
        // >SEPARATOR setSettings set_replicas
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replicas' => [
                'name_of_replica_index1',

                'name_of_replica_index2',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_max_values_per_facet
     */
    public function snippetForSetSettings78(): void
    {
        // >SEPARATOR setSettings set_default_max_values_per_facet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['maxValuesPerFacet' => 100,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_sort_facet_values_by
     */
    public function snippetForSetSettings79(): void
    {
        // >SEPARATOR setSettings set_default_sort_facet_values_by
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['sortFacetValuesBy' => 'alpha',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_attributes_to_snippet
     */
    public function snippetForSetSettings80(): void
    {
        // >SEPARATOR setSettings set_attributes_to_snippet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToSnippet' => [
                'content:80',

                'description',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_all_attributes_to_snippet
     */
    public function snippetForSetSettings81(): void
    {
        // >SEPARATOR setSettings set_all_attributes_to_snippet
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesToSnippet' => [
                '*:80',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_highlight_pre_tag
     */
    public function snippetForSetSettings82(): void
    {
        // >SEPARATOR setSettings set_default_highlight_pre_tag
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['highlightPreTag' => '<em>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_highlight_post_tag
     */
    public function snippetForSetSettings83(): void
    {
        // >SEPARATOR setSettings set_default_highlight_post_tag
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['highlightPostTag' => '</em>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_snippet_ellipsis_text
     */
    public function snippetForSetSettings84(): void
    {
        // >SEPARATOR setSettings set_default_snippet_ellipsis_text
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['snippetEllipsisText' => '…',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_restrict_highlight_and_snippet_arrays_by_default
     */
    public function snippetForSetSettings85(): void
    {
        // >SEPARATOR setSettings enable_restrict_highlight_and_snippet_arrays_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['restrictHighlightAndSnippetArrays' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_hits_per_page
     */
    public function snippetForSetSettings86(): void
    {
        // >SEPARATOR setSettings set_default_hits_per_page
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['hitsPerPage' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_pagination_limit
     */
    public function snippetForSetSettings87(): void
    {
        // >SEPARATOR setSettings set_pagination_limit
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['paginationLimitedTo' => 1000,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_min_word_size_for_one_typo
     */
    public function snippetForSetSettings88(): void
    {
        // >SEPARATOR setSettings set_default_min_word_size_for_one_typo
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['minWordSizefor1Typo' => 4,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_min_word_size_for_two_typos
     */
    public function snippetForSetSettings89(): void
    {
        // >SEPARATOR setSettings set_default_min_word_size_for_two_typos
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['minWordSizefor2Typos' => 4,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_typo_tolerance_mode
     */
    public function snippetForSetSettings90(): void
    {
        // >SEPARATOR setSettings set_default_typo_tolerance_mode
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['typoTolerance' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disable_typos_on_numeric_tokens_by_default
     */
    public function snippetForSetSettings91(): void
    {
        // >SEPARATOR setSettings disable_typos_on_numeric_tokens_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['allowTyposOnNumericTokens' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disable_typo_tolerance_for_words
     */
    public function snippetForSetSettings92(): void
    {
        // >SEPARATOR setSettings disable_typo_tolerance_for_words
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['disableTypoToleranceOnWords' => [
                'wheel',

                '1X2BCD',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_separators_to_index
     */
    public function snippetForSetSettings93(): void
    {
        // >SEPARATOR setSettings set_separators_to_index
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['separatorsToIndex' => '+#',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_languages_using_querylanguages
     */
    public function snippetForSetSettings94(): void
    {
        // >SEPARATOR setSettings set_languages_using_querylanguages
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['queryLanguages' => [
                'es',
            ],
                'ignorePlurals' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_attributes_to_transliterate
     */
    public function snippetForSetSettings95(): void
    {
        // >SEPARATOR setSettings set_attributes_to_transliterate
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['indexLanguages' => [
                'ja',
            ],
                'attributesToTransliterate' => [
                    'name',

                    'description',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_languages_using_querylanguages
     */
    public function snippetForSetSettings96(): void
    {
        // >SEPARATOR setSettings set_languages_using_querylanguages
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['queryLanguages' => [
                'es',
            ],
                'removeStopWords' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_camel_case_attributes
     */
    public function snippetForSetSettings97(): void
    {
        // >SEPARATOR setSettings set_camel_case_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['camelCaseAttributes' => [
                'description',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_decompounded_attributes
     */
    public function snippetForSetSettings98(): void
    {
        // >SEPARATOR setSettings set_decompounded_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['decompoundedAttributes' => ['de' => [
                'name',
            ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_decompounded_multiple_attributes
     */
    public function snippetForSetSettings99(): void
    {
        // >SEPARATOR setSettings set_decompounded_multiple_attributes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['decompoundedAttributes' => ['de' => [
                'name_de',

                'description_de',
            ],
                'fi' => [
                    'name_fi',

                    'description_fi',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_keep_diacritics_on_characters
     */
    public function snippetForSetSettings100(): void
    {
        // >SEPARATOR setSettings set_keep_diacritics_on_characters
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['keepDiacriticsOnCharacters' => 'øé',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_custom_normalization
     */
    public function snippetForSetSettings101(): void
    {
        // >SEPARATOR setSettings set_custom_normalization
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['customNormalization' => ['default' => ['ä' => 'ae',
            ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_languages_using_querylanguages
     */
    public function snippetForSetSettings102(): void
    {
        // >SEPARATOR setSettings set_languages_using_querylanguages
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['queryLanguages' => [
                'es',
            ],
                'removeStopWords' => true,
                'ignorePlurals' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_indexlanguages
     */
    public function snippetForSetSettings103(): void
    {
        // >SEPARATOR setSettings set_indexlanguages
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['indexLanguages' => [
                'ja',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_decompound_query_by_default
     */
    public function snippetForSetSettings104(): void
    {
        // >SEPARATOR setSettings enable_decompound_query_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['decompoundQuery' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_rules_syntax_by_default
     */
    public function snippetForSetSettings105(): void
    {
        // >SEPARATOR setSettings enable_rules_syntax_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['enableRules' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_personalization_settings
     */
    public function snippetForSetSettings106(): void
    {
        // >SEPARATOR setSettings enable_personalization_settings
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['enablePersonalization' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_query_type
     */
    public function snippetForSetSettings107(): void
    {
        // >SEPARATOR setSettings set_default_query_type
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['queryType' => 'prefixLast',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_remove_words_if_no_result
     */
    public function snippetForSetSettings108(): void
    {
        // >SEPARATOR setSettings set_default_remove_words_if_no_result
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['removeWordsIfNoResults' => 'none',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_advanced_syntax_by_default
     */
    public function snippetForSetSettings109(): void
    {
        // >SEPARATOR setSettings enable_advanced_syntax_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['advancedSyntax' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_optional_words
     */
    public function snippetForSetSettings110(): void
    {
        // >SEPARATOR setSettings set_default_optional_words
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['optionalWords' => [
                'blue',

                'iphone case',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disabling_prefix_search_for_some_attributes_by_default
     */
    public function snippetForSetSettings111(): void
    {
        // >SEPARATOR setSettings disabling_prefix_search_for_some_attributes_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['disablePrefixOnAttributes' => [
                'sku',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * disabling_exact_for_some_attributes_by_default
     */
    public function snippetForSetSettings112(): void
    {
        // >SEPARATOR setSettings disabling_exact_for_some_attributes_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['disableExactOnAttributes' => [
                'description',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_exact_single_word_query
     */
    public function snippetForSetSettings113(): void
    {
        // >SEPARATOR setSettings set_default_exact_single_word_query
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['exactOnSingleWordQuery' => 'attribute',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_aternative_as_exact
     */
    public function snippetForSetSettings114(): void
    {
        // >SEPARATOR setSettings set_default_aternative_as_exact
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['alternativesAsExact' => [
                'ignorePlurals',

                'singleWordSynonym',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_advanced_syntax_by_default
     */
    public function snippetForSetSettings115(): void
    {
        // >SEPARATOR setSettings enable_advanced_syntax_by_default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['advancedSyntax' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_numeric_attributes_for_filtering
     */
    public function snippetForSetSettings116(): void
    {
        // >SEPARATOR setSettings set_numeric_attributes_for_filtering
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['numericAttributesForFiltering' => [
                'quantity',

                'popularity',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * enable_compression_of_integer_array
     */
    public function snippetForSetSettings117(): void
    {
        // >SEPARATOR setSettings enable_compression_of_integer_array
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['allowCompressionOfIntegerArray' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_attributes_for_distinct
     */
    public function snippetForSetSettings118(): void
    {
        // >SEPARATOR setSettings set_attributes_for_distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributeForDistinct' => 'url',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_distinct
     */
    public function snippetForSetSettings119(): void
    {
        // >SEPARATOR setSettings set_distinct
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['distinct' => 1,
                'attributeForDistinct' => 'url',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_replace_synonyms_in_highlights
     */
    public function snippetForSetSettings120(): void
    {
        // >SEPARATOR setSettings set_replace_synonyms_in_highlights
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['replaceSynonymsInHighlight' => false,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_min_proximity
     */
    public function snippetForSetSettings121(): void
    {
        // >SEPARATOR setSettings set_min_proximity
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['minProximity' => 1,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_default_field
     */
    public function snippetForSetSettings122(): void
    {
        // >SEPARATOR setSettings set_default_field
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['responseFields' => [
                'hits',

                'hitsPerPage',

                'nbPages',

                'page',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_max_facet_hits
     */
    public function snippetForSetSettings123(): void
    {
        // >SEPARATOR setSettings set_max_facet_hits
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['maxFacetHits' => 10,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_attribute_criteria_computed_by_min_proximity
     */
    public function snippetForSetSettings124(): void
    {
        // >SEPARATOR setSettings set_attribute_criteria_computed_by_min_proximity
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributeCriteriaComputedByMinProximity' => true,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_user_data
     */
    public function snippetForSetSettings125(): void
    {
        // >SEPARATOR setSettings set_user_data
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['userData' => ['extraData' => 'This is the custom data that you want to store in your index',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * set_rendering_content
     */
    public function snippetForSetSettings126(): void
    {
        // >SEPARATOR setSettings set_rendering_content
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['renderingContent' => ['facetOrdering' => ['facets' => ['order' => [
                'size',

                'brand',
            ],
            ],
                'values' => ['brand' => ['order' => [
                    'uniqlo',
                ],
                    'hide' => [
                        'muji',
                    ],
                    'sortRemainingBy' => 'count',
                ],
                    'size' => ['order' => [
                        'S',

                        'M',

                        'L',
                    ],
                        'sortRemainingBy' => 'hidden',
                    ],
                ],
            ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the UpdateApiKey method.
     *
     * updateApiKey
     */
    public function snippetForUpdateApiKey(): void
    {
        // >SEPARATOR updateApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->updateApiKey(
            'ALGOLIA_API_KEY',
            ['acl' => [
                'search',

                'addObject',
            ],
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key helper - add
     */
    public function snippetForWaitForApiKey(): void
    {
        // >SEPARATOR waitForApiKey wait for api key helper - add
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-add-operation-test-php',
            'add',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key - update
     */
    public function snippetForWaitForApiKey1(): void
    {
        // >SEPARATOR waitForApiKey wait for api key - update
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-update-operation-test-php',
            'update',
            ['description' => 'my updated api key',
                'acl' => [
                    'search',

                    'addObject',

                    'deleteObject',
                ],
                'indexes' => [
                    'Movies',

                    'Books',
                ],
                'referers' => [
                    '*google.com',

                    '*algolia.com',
                ],
                'validity' => 305,
                'maxQueriesPerIPPerHour' => 95,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key - delete
     */
    public function snippetForWaitForApiKey2(): void
    {
        // >SEPARATOR waitForApiKey wait for api key - delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-delete-operation-test-php',
            'delete',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForAppTask method.
     *
     * wait for an application-level task
     */
    public function snippetForWaitForAppTask(): void
    {
        // >SEPARATOR waitForAppTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForAppTask(
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForTask method.
     *
     * wait for task
     */
    public function snippetForWaitForTask(): void
    {
        // >SEPARATOR waitForTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForTask(
            '<YOUR_INDEX_NAME>',
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }
}
