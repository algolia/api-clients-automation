# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.composition.client import CompositionClientSync
from json import loads
# IMPORT<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_composition():
    """
    Snippet for the deleteComposition method.

    deleteComposition
    """
    # >SEPARATOR deleteComposition default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_composition(
        composition_id="1234",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_composition_rule():
    """
    Snippet for the deleteCompositionRule method.

    deleteCompositionRule
    """
    # >SEPARATOR deleteCompositionRule default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_composition_rule(
        composition_id="1234",
        object_id="5678",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_composition():
    """
    Snippet for the getComposition method.

    getComposition
    """
    # >SEPARATOR getComposition default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_composition(
        composition_id="foo",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_rule():
    """
    Snippet for the getRule method.

    getRule
    """
    # >SEPARATOR getRule default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_rule(
        composition_id="foo",
        object_id="123",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_task():
    """
    Snippet for the getTask method.

    getTask
    """
    # >SEPARATOR getTask default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_task(
        composition_id="foo",
        task_id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_compositions():
    """
    Snippet for the listCompositions method.

    listCompositions
    """
    # >SEPARATOR listCompositions listCompositions
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_compositions()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_compositions1():
    """
    Snippet for the listCompositions method.

    listCompositions
    """
    # >SEPARATOR listCompositions listCompositions
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_compositions()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_multiple_batch():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch multipleBatch
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "foo",
                        "name": "my first composition",
                        "behavior": {
                            "injection": {
                                "main": {
                                    "source": {
                                        "search": {
                                            "index": "bar",
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
                {
                    "action": "delete",
                    "body": {
                        "objectID": "baz",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_multiple_batch1():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch multipleBatch
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "my-external-injection-compo",
                        "name": "my first composition",
                        "behavior": {
                            "injection": {
                                "main": {
                                    "source": {
                                        "search": {
                                            "index": "foo",
                                        },
                                    },
                                },
                                "injectedItems": [
                                    {
                                        "key": "injectedItem1",
                                        "source": {
                                            "external": {
                                                "index": "foo",
                                                "ordering": "userDefined",
                                                "params": {
                                                    "filters": "brand:adidas",
                                                },
                                            },
                                        },
                                        "position": 2,
                                        "length": 1,
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_multiple_batch2():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch multipleBatch
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "my-metadata-compo",
                        "name": "my composition",
                        "behavior": {
                            "injection": {
                                "main": {
                                    "source": {
                                        "search": {
                                            "index": "foo",
                                            "params": {
                                                "filters": "brand:adidas",
                                            },
                                        },
                                    },
                                },
                                "injectedItems": [
                                    {
                                        "key": "injectedItem1",
                                        "source": {
                                            "search": {
                                                "index": "foo",
                                                "params": {
                                                    "filters": "brand:adidas",
                                                },
                                            },
                                        },
                                        "position": 2,
                                        "length": 1,
                                        "metadata": {
                                            "hits": {
                                                "addItemKey": True,
                                                "extra": {
                                                    "my-string": "string",
                                                    "my-bool": True,
                                                    "my-number": 42,
                                                    "my-object": {
                                                        "sub-key": "sub-value"
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    {
                                        "key": "externalItem",
                                        "source": {
                                            "search": {
                                                "index": "foo",
                                                "params": {
                                                    "filters": "brand:puma",
                                                },
                                            },
                                        },
                                        "position": 5,
                                        "length": 5,
                                        "metadata": {
                                            "hits": {
                                                "addItemKey": True,
                                                "extra": {
                                                    "my-string": "string",
                                                    "my-bool": True,
                                                    "my-number": 42,
                                                    "my-object": {
                                                        "sub-key": "sub-value"
                                                    },
                                                },
                                            },
                                        },
                                    },
                                ],
                            },
                        },
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition():
    """
    Snippet for the putComposition method.

    putComposition
    """
    # >SEPARATOR putComposition putComposition
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition(
        composition_id="1234",
        composition={
            "objectID": "1234",
            "name": "my first composition",
            "behavior": {
                "injection": {
                    "main": {
                        "source": {
                            "search": {
                                "index": "foo",
                            },
                        },
                    },
                    "injectedItems": [
                        {
                            "key": "injectedItem1",
                            "source": {
                                "search": {
                                    "index": "foo",
                                },
                            },
                            "position": 2,
                            "length": 1,
                        },
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition1():
    """
    Snippet for the putComposition method.

    putComposition
    """
    # >SEPARATOR putComposition putComposition
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition(
        composition_id="my-external-injection-compo",
        composition={
            "objectID": "my-external-injection-compo",
            "name": "my first composition",
            "behavior": {
                "injection": {
                    "main": {
                        "source": {
                            "search": {
                                "index": "foo",
                            },
                        },
                    },
                    "injectedItems": [
                        {
                            "key": "injectedItem1",
                            "source": {
                                "external": {
                                    "index": "foo",
                                    "ordering": "userDefined",
                                    "params": {
                                        "filters": "brand:adidas",
                                    },
                                },
                            },
                            "position": 2,
                            "length": 1,
                        },
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition2():
    """
    Snippet for the putComposition method.

    putComposition
    """
    # >SEPARATOR putComposition putComposition
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition(
        composition_id="my-metadata-compo",
        composition={
            "objectID": "my-metadata-compo",
            "name": "my composition",
            "behavior": {
                "injection": {
                    "main": {
                        "source": {
                            "search": {
                                "index": "foo",
                                "params": {
                                    "filters": "brand:adidas",
                                },
                            },
                        },
                    },
                    "injectedItems": [
                        {
                            "key": "injectedItem1",
                            "source": {
                                "search": {
                                    "index": "foo",
                                    "params": {
                                        "filters": "brand:adidas",
                                    },
                                },
                            },
                            "position": 2,
                            "length": 1,
                            "metadata": {
                                "hits": {
                                    "addItemKey": True,
                                    "extra": {
                                        "my-string": "string",
                                        "my-bool": True,
                                        "my-number": 42,
                                        "my-object": {"sub-key": "sub-value"},
                                    },
                                },
                            },
                        },
                        {
                            "key": "externalItem",
                            "source": {
                                "search": {
                                    "index": "foo",
                                    "params": {
                                        "filters": "brand:puma",
                                    },
                                },
                            },
                            "position": 5,
                            "length": 5,
                            "metadata": {
                                "hits": {
                                    "addItemKey": True,
                                    "extra": {
                                        "my-string": "string",
                                        "my-bool": True,
                                        "my-number": 42,
                                        "my-object": {"sub-key": "sub-value"},
                                    },
                                },
                            },
                        },
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition_rule():
    """
    Snippet for the putCompositionRule method.

    putCompositionRule
    """
    # >SEPARATOR putCompositionRule putCompositionRule
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition_rule(
        composition_id="compositionID",
        object_id="ruleID",
        composition_rule={
            "objectID": "ruleID",
            "conditions": [
                {
                    "anchoring": "is",
                    "pattern": "test",
                },
            ],
            "consequence": {
                "behavior": {
                    "injection": {
                        "main": {
                            "source": {
                                "search": {
                                    "index": "foo",
                                },
                            },
                        },
                        "injectedItems": [
                            {
                                "key": "injectedItem1",
                                "source": {
                                    "search": {
                                        "index": "foo",
                                    },
                                },
                                "position": 2,
                                "length": 1,
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition_rule1():
    """
    Snippet for the putCompositionRule method.

    putCompositionRule
    """
    # >SEPARATOR putCompositionRule putCompositionRule
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition_rule(
        composition_id="compositionID",
        object_id="rule-with-metadata",
        composition_rule={
            "objectID": "rule-with-metadata",
            "conditions": [
                {
                    "anchoring": "is",
                    "pattern": "test",
                },
            ],
            "consequence": {
                "behavior": {
                    "injection": {
                        "main": {
                            "source": {
                                "search": {
                                    "index": "foo",
                                },
                            },
                        },
                        "injectedItems": [
                            {
                                "key": "injectedItem1",
                                "source": {
                                    "search": {
                                        "index": "foo",
                                        "params": {
                                            "filters": "brand:adidas",
                                        },
                                    },
                                },
                                "position": 2,
                                "length": 1,
                                "metadata": {
                                    "hits": {
                                        "addItemKey": True,
                                        "extra": {
                                            "my-string": "string",
                                            "my-bool": True,
                                            "my-number": 42,
                                            "my-object": {"sub-key": "sub-value"},
                                        },
                                    },
                                },
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_put_composition_rule2():
    """
    Snippet for the putCompositionRule method.

    putCompositionRule
    """
    # >SEPARATOR putCompositionRule putCompositionRule
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.put_composition_rule(
        composition_id="compositionID",
        object_id="rule-with-exernal-source",
        composition_rule={
            "objectID": "rule-with-exernal-source",
            "description": "my description",
            "tags": [
                "tag1",
                "tag2",
            ],
            "enabled": True,
            "validity": [
                {
                    "from": 1704063600,
                    "until": 1704083600,
                },
            ],
            "conditions": [
                {
                    "anchoring": "contains",
                    "pattern": "harry",
                },
                {
                    "anchoring": "contains",
                    "pattern": "potter",
                },
            ],
            "consequence": {
                "behavior": {
                    "injection": {
                        "main": {
                            "source": {
                                "search": {
                                    "index": "my-index",
                                    "params": {
                                        "filters": "brand:adidas",
                                    },
                                },
                            },
                        },
                        "injectedItems": [
                            {
                                "key": "injectedItem",
                                "source": {
                                    "external": {
                                        "index": "my-index",
                                        "params": {
                                            "filters": "brand:adidas",
                                        },
                                        "ordering": "userDefined",
                                    },
                                },
                                "position": 0,
                                "length": 3,
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules():
    """
    Snippet for the saveRules method.

    saveRules
    """
    # >SEPARATOR saveRules saveRules
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        composition_id="foo",
        rules={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "123",
                        "conditions": [
                            {
                                "pattern": "a",
                            },
                        ],
                        "consequence": {
                            "behavior": {
                                "injection": {
                                    "main": {
                                        "source": {
                                            "search": {
                                                "index": "<YOUR_INDEX_NAME>",
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules1():
    """
    Snippet for the saveRules method.

    saveRules
    """
    # >SEPARATOR saveRules saveRules
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        composition_id="rule-with-metadata",
        rules={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "rule-with-metadata",
                        "conditions": [
                            {
                                "anchoring": "is",
                                "pattern": "test",
                            },
                        ],
                        "consequence": {
                            "behavior": {
                                "injection": {
                                    "main": {
                                        "source": {
                                            "search": {
                                                "index": "foo",
                                            },
                                        },
                                    },
                                    "injectedItems": [
                                        {
                                            "key": "injectedItem1",
                                            "source": {
                                                "search": {
                                                    "index": "foo",
                                                    "params": {
                                                        "filters": "brand:adidas",
                                                    },
                                                },
                                            },
                                            "position": 2,
                                            "length": 1,
                                            "metadata": {
                                                "hits": {
                                                    "addItemKey": True,
                                                    "extra": {
                                                        "my-string": "string",
                                                        "my-bool": True,
                                                        "my-number": 42,
                                                        "my-object": {
                                                            "sub-key": "sub-value"
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    ],
                                },
                            },
                        },
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules2():
    """
    Snippet for the saveRules method.

    saveRules
    """
    # >SEPARATOR saveRules saveRules
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        composition_id="rule-with-exernal-source",
        rules={
            "requests": [
                {
                    "action": "upsert",
                    "body": {
                        "objectID": "rule-with-exernal-source",
                        "description": "my description",
                        "tags": [
                            "tag1",
                            "tag2",
                        ],
                        "enabled": True,
                        "validity": [
                            {
                                "from": 1704063600,
                                "until": 1704083600,
                            },
                        ],
                        "conditions": [
                            {
                                "anchoring": "contains",
                                "pattern": "harry",
                            },
                            {
                                "anchoring": "contains",
                                "pattern": "potter",
                            },
                        ],
                        "consequence": {
                            "behavior": {
                                "injection": {
                                    "main": {
                                        "source": {
                                            "search": {
                                                "index": "my-index",
                                                "params": {
                                                    "filters": "brand:adidas",
                                                },
                                            },
                                        },
                                    },
                                    "injectedItems": [
                                        {
                                            "key": "injectedItem",
                                            "source": {
                                                "external": {
                                                    "index": "my-index",
                                                    "params": {
                                                        "filters": "brand:adidas",
                                                    },
                                                    "ordering": "userDefined",
                                                },
                                            },
                                            "position": 0,
                                            "length": 3,
                                        },
                                    ],
                                },
                            },
                        },
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search():
    """
    Snippet for the search method.

    search
    """
    # >SEPARATOR search search
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        composition_id="foo",
        request_body={
            "params": {
                "query": "batman",
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search1():
    """
    Snippet for the search method.

    search
    """
    # >SEPARATOR search search
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        composition_id="foo",
        request_body={
            "params": {
                "query": "batman",
                "injectedItems": {
                    "injectedItem1": {
                        "items": [
                            {
                                "objectID": "my-object-1",
                            },
                            {
                                "objectID": "my-object-2",
                                "metadata": {
                                    "my-string": "string",
                                    "my-bool": True,
                                    "my-number": 42,
                                    "my-object": {"sub-key": "sub-value"},
                                },
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_composition_rules():
    """
    Snippet for the searchCompositionRules method.

    searchCompositionRules
    """
    # >SEPARATOR searchCompositionRules default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_composition_rules(
        composition_id="foo",
        search_composition_rules_params={
            "query": "batman",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_for_facet_values():
    """
    Snippet for the searchForFacetValues method.

    searchForFacetValues
    """
    # >SEPARATOR searchForFacetValues default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_for_facet_values(
        composition_id="foo",
        facet_name="brand",
        search_for_facet_values_request={
            "params": {
                "maxFacetHits": 10,
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use CompositionClient instead, which exposes the exact same methods.
    client = CompositionClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<
