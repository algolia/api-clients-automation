# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.monitoring.client import MonitoringClientSync
from json import loads
# IMPORT<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_cluster_incidents():
    """
    Snippet for the getClusterIncidents method.

    getClusterIncidents
    """
    # >SEPARATOR getClusterIncidents default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_cluster_incidents(
        clusters="c1-de",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_cluster_status():
    """
    Snippet for the getClusterStatus method.

    getClusterStatus
    """
    # >SEPARATOR getClusterStatus default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_cluster_status(
        clusters="c1-de",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_incidents():
    """
    Snippet for the getIncidents method.

    getIncidents
    """
    # >SEPARATOR getIncidents default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_incidents()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_indexing_time():
    """
    Snippet for the getIndexingTime method.

    getIndexingTime
    """
    # >SEPARATOR getIndexingTime default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_indexing_time(
        clusters="c1-de",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_latency():
    """
    Snippet for the getLatency method.

    getLatency
    """
    # >SEPARATOR getLatency default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_latency(
        clusters="c1-de",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_metrics():
    """
    Snippet for the getMetrics method.

    getMetrics
    """
    # >SEPARATOR getMetrics default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_metrics(
        metric="avg_build_time",
        period="minute",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_reachability():
    """
    Snippet for the getReachability method.

    getReachability
    """
    # >SEPARATOR getReachability default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_reachability(
        clusters="c1-de",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_servers():
    """
    Snippet for the getServers method.

    getInventory
    """
    # >SEPARATOR getServers default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_servers()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_status():
    """
    Snippet for the getStatus method.

    getStatus
    """
    # >SEPARATOR getStatus default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_status()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.
    client = MonitoringClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<
