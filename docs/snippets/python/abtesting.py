# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.abtesting.client import AbtestingClientSync
# IMPORT<


def snippet_for_add_ab_tests():
    """
    Snippet for the addABTests method.

    addABTests with minimal parameters
    """
    # >SEPARATOR addABTests default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.add_ab_tests(
        add_ab_tests_request={
            "endAt": "2022-12-31T00:00:00.000Z",
            "name": "myABTest",
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 30,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_ab_test():
    """
    Snippet for the deleteABTest method.

    deleteABTest
    """
    # >SEPARATOR deleteABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.delete_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_ab_test():
    """
    Snippet for the getABTest method.

    getABTest
    """
    # >SEPARATOR getABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_ab_tests():
    """
    Snippet for the listABTests method.

    listABTests with minimal parameters
    """
    # >SEPARATOR listABTests default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.list_ab_tests()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_schedule_ab_test():
    """
    Snippet for the scheduleABTest method.

    scheduleABTest with minimal parameters
    """
    # >SEPARATOR scheduleABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.schedule_ab_test(
        schedule_ab_tests_request={
            "endAt": "2022-12-31T00:00:00.000Z",
            "scheduledAt": "2022-11-31T00:00:00.000Z",
            "name": "myABTest",
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 30,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<


def snippet_for_stop_ab_test():
    """
    Snippet for the stopABTest method.

    stopABTest
    """
    # >SEPARATOR stopABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.stop_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<
