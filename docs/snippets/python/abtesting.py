# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.abtesting.client import AbtestingClientSync
from json import loads
# IMPORT<


def snippet_for_add_ab_tests():
    """
    Snippet for the addABTests method.

    addABTests with minimal parameters
    """
    # >SEPARATOR addABTests default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.add_ab_tests(
        add_ab_tests_request={
            "endAt": "2022-12-31T00:00:00.000Z",
            "name": "myABTest",
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 30,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_ab_test():
    """
    Snippet for the deleteABTest method.

    deleteABTest
    """
    # >SEPARATOR deleteABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.delete_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_estimate_ab_test():
    """
    Snippet for the estimateABTest method.

    estimate AB Test sample size
    """
    # >SEPARATOR estimateABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.estimate_ab_test(
        estimate_ab_test_request={
            "configuration": {
                "emptySearch": {
                    "exclude": True,
                },
                "minimumDetectableEffect": {
                    "size": 0.03,
                    "metric": "conversionRate",
                },
            },
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 50,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_ab_test():
    """
    Snippet for the getABTest method.

    getABTest
    """
    # >SEPARATOR getABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_ab_tests():
    """
    Snippet for the listABTests method.

    listABTests with minimal parameters
    """
    # >SEPARATOR listABTests listABTests with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.list_ab_tests()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_ab_tests1():
    """
    Snippet for the listABTests method.

    listABTests with parameters
    """
    # >SEPARATOR listABTests listABTests with parameters
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.list_ab_tests(
        offset=0,
        limit=21,
        index_prefix="cts_e2e ab",
        index_suffix="t",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_schedule_ab_test():
    """
    Snippet for the scheduleABTest method.

    scheduleABTest with minimal parameters
    """
    # >SEPARATOR scheduleABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.schedule_ab_test(
        schedule_ab_tests_request={
            "endAt": "2022-12-31T00:00:00.000Z",
            "scheduledAt": "2022-11-31T00:00:00.000Z",
            "name": "myABTest",
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 30,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<


def snippet_for_stop_ab_test():
    """
    Snippet for the stopABTest method.

    stopABTest
    """
    # >SEPARATOR stopABTest default
    # Initialize the client
    # In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.
    client = AbtestingClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.stop_ab_test(
        id=42,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<
