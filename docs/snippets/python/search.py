# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.search.client import SearchClientSync
# IMPORT<


def snippet_for_add_api_key():
    """
    Snippet for the addApiKey method.

    addApiKey
    """
    # >SEPARATOR addApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.add_api_key(
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "description": "my new api key",
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_add_or_update_object():
    """
    Snippet for the addOrUpdateObject method.

    addOrUpdateObject
    """
    # >SEPARATOR addOrUpdateObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.add_or_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        body={
            "key": "value",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_append_source():
    """
    Snippet for the appendSource method.

    appendSource
    """
    # >SEPARATOR appendSource default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.append_source(
        source={
            "source": "theSource",
            "description": "theDescription",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_assign_user_id():
    """
    Snippet for the assignUserId method.

    simple
    """
    # >SEPARATOR assignUserId default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.assign_user_id(
        x_algolia_user_id="user42",
        assign_user_id_params={
            "cluster": "d4242-eu",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch():
    """
    Snippet for the batch method.

    addObject
    """
    # >SEPARATOR batch addObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "bar",
                        "foo": "1",
                    },
                },
                {
                    "action": "addObject",
                    "body": {
                        "key": "baz",
                        "foo": "2",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch1():
    """
    Snippet for the batch method.

    clear
    """
    # >SEPARATOR batch clear
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "clear",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch2():
    """
    Snippet for the batch method.

    delete
    """
    # >SEPARATOR batch delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "delete",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch3():
    """
    Snippet for the batch method.

    deleteObject
    """
    # >SEPARATOR batch deleteObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "deleteObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch4():
    """
    Snippet for the batch method.

    partialUpdateObject
    """
    # >SEPARATOR batch partialUpdateObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch5():
    """
    Snippet for the batch method.

    partialUpdateObjectNoCreate
    """
    # >SEPARATOR batch partialUpdateObjectNoCreate
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObjectNoCreate",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch6():
    """
    Snippet for the batch method.

    updateObject
    """
    # >SEPARATOR batch updateObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "updateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_assign_user_ids():
    """
    Snippet for the batchAssignUserIds method.

    batchAssignUserIds
    """
    # >SEPARATOR batchAssignUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_assign_user_ids(
        x_algolia_user_id="userID",
        batch_assign_user_ids_params={
            "cluster": "theCluster",
            "users": [
                "user1",
                "user2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries():
    """
    Snippet for the batchDictionaryEntries method.

    replace
    """
    # >SEPARATOR batchDictionaryEntries replace
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "word": "fancy",
                        "words": [
                            "believe",
                            "algolia",
                        ],
                        "decomposition": [
                            "trust",
                            "algolia",
                        ],
                        "state": "enabled",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries1():
    """
    Snippet for the batchDictionaryEntries method.

    delete
    """
    # >SEPARATOR batchDictionaryEntries delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "deleteEntry",
                    "body": {
                        "objectID": "1",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries2():
    """
    Snippet for the batchDictionaryEntries method.

    append
    """
    # >SEPARATOR batchDictionaryEntries append
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="stopwords",
        batch_dictionary_entries_params={
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "additional": "try me",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_browse():
    """
    Snippet for the browse method.

    browse with minimal parameters
    """
    # >SEPARATOR browse default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.browse(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_objects():
    """
    Snippet for the clearObjects method.

    clearObjects
    """
    # >SEPARATOR clearObjects default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_objects(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_rules():
    """
    Snippet for the clearRules method.

    clearRules
    """
    # >SEPARATOR clearRules default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_rules(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_synonyms():
    """
    Snippet for the clearSynonyms method.

    clearSynonyms
    """
    # >SEPARATOR clearSynonyms default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_api_key():
    """
    Snippet for the deleteApiKey method.

    deleteApiKey
    """
    # >SEPARATOR deleteApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_by():
    """
    Snippet for the deleteBy method.

    deleteBy
    """
    # >SEPARATOR deleteBy default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_by(
        index_name="<YOUR_INDEX_NAME>",
        delete_by_params={
            "filters": "brand:brandName",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_index():
    """
    Snippet for the deleteIndex method.

    deleteIndex
    """
    # >SEPARATOR deleteIndex default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_object():
    """
    Snippet for the deleteObject method.

    deleteObject
    """
    # >SEPARATOR deleteObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_objects():
    """
    Snippet for the deleteObjects method.

    call deleteObjects without error
    """
    # >SEPARATOR deleteObjects default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_objects(
        index_name="<YOUR_INDEX_NAME>",
        object_ids=[
            "1",
            "2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_rule():
    """
    Snippet for the deleteRule method.

    delete rule simple case
    """
    # >SEPARATOR deleteRule default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_source():
    """
    Snippet for the deleteSource method.

    deleteSource
    """
    # >SEPARATOR deleteSource default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_source(
        source="theSource",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_synonym():
    """
    Snippet for the deleteSynonym method.

    deleteSynonym
    """
    # >SEPARATOR deleteSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key():
    """
    Snippet for the generateSecuredApiKey method.

    api key basic
    """
    # >SEPARATOR generateSecuredApiKey api key basic
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key1():
    """
    Snippet for the generateSecuredApiKey method.

    with searchParams
    """
    # >SEPARATOR generateSecuredApiKey with searchParams
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
                "cts_e2e_settings",
            ],
            "restrictSources": "192.168.1.0/24",
            "filters": "category:Book OR category:Ebook AND _tags:published",
            "userToken": "user123",
            "searchParams": {
                "query": "batman",
                "typoTolerance": "strict",
                "aroundRadius": "all",
                "mode": "neuralSearch",
                "hitsPerPage": 10,
                "optionalWords": [
                    "one",
                    "two",
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key2():
    """
    Snippet for the generateSecuredApiKey method.

    with filters
    """
    # >SEPARATOR generateSecuredApiKey with filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "filters": "user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key3():
    """
    Snippet for the generateSecuredApiKey method.

    with visible_by filter
    """
    # >SEPARATOR generateSecuredApiKey with visible_by filter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "filters": "visible_by:group/Finance",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key4():
    """
    Snippet for the generateSecuredApiKey method.

    with userID
    """
    # >SEPARATOR generateSecuredApiKey with userID
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "userToken": "user42",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_api_key():
    """
    Snippet for the getApiKey method.

    getApiKey
    """
    # >SEPARATOR getApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_app_task():
    """
    Snippet for the getAppTask method.

    getAppTask
    """
    # >SEPARATOR getAppTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_dictionary_languages():
    """
    Snippet for the getDictionaryLanguages method.

    get getDictionaryLanguages
    """
    # >SEPARATOR getDictionaryLanguages default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_dictionary_languages()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_dictionary_settings():
    """
    Snippet for the getDictionarySettings method.

    get getDictionarySettings results
    """
    # >SEPARATOR getDictionarySettings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_dictionary_settings()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_logs():
    """
    Snippet for the getLogs method.

    getLogs with minimal parameters
    """
    # >SEPARATOR getLogs default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_logs()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_object():
    """
    Snippet for the getObject method.

    getObject
    """
    # >SEPARATOR getObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_retrieve=[
            "attr1",
            "attr2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_objects():
    """
    Snippet for the getObjects method.

    getObjects
    """
    # >SEPARATOR getObjects default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_objects(
        get_objects_params={
            "requests": [
                {
                    "attributesToRetrieve": [
                        "attr1",
                        "attr2",
                    ],
                    "objectID": "uniqueID",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_rule():
    """
    Snippet for the getRule method.

    getRule
    """
    # >SEPARATOR getRule default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="qr-1725004648916",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_settings():
    """
    Snippet for the getSettings method.

    getSettings
    """
    # >SEPARATOR getSettings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_settings(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_sources():
    """
    Snippet for the getSources method.

    getSources
    """
    # >SEPARATOR getSources default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_sources()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_synonym():
    """
    Snippet for the getSynonym method.

    getSynonym
    """
    # >SEPARATOR getSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_task():
    """
    Snippet for the getTask method.

    getTask
    """
    # >SEPARATOR getTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_user_ids():
    """
    Snippet for the getTopUserIds method.

    getTopUserIds
    """
    # >SEPARATOR getTopUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_top_user_ids()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_user_id():
    """
    Snippet for the getUserId method.

    getUserId
    """
    # >SEPARATOR getUserId default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_has_pending_mappings():
    """
    Snippet for the hasPendingMappings method.

    hasPendingMappings with minimal parameters
    """
    # >SEPARATOR hasPendingMappings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.has_pending_mappings()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists():
    """
    Snippet for the indexExists method.

    indexExists
    """
    # >SEPARATOR indexExists indexExists
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists1():
    """
    Snippet for the indexExists method.

    indexNotExists
    """
    # >SEPARATOR indexExists indexNotExists
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists2():
    """
    Snippet for the indexExists method.

    indexExistsWithError
    """
    # >SEPARATOR indexExists indexExistsWithError
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_api_keys():
    """
    Snippet for the listApiKeys method.

    listApiKeys
    """
    # >SEPARATOR listApiKeys default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_api_keys()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_clusters():
    """
    Snippet for the listClusters method.

    listClusters
    """
    # >SEPARATOR listClusters default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_clusters()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_indices():
    """
    Snippet for the listIndices method.

    listIndices with minimal parameters
    """
    # >SEPARATOR listIndices default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_indices()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_user_ids():
    """
    Snippet for the listUserIds method.

    listUserIds with minimal parameters
    """
    # >SEPARATOR listUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_user_ids()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_multiple_batch():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "value",
                    },
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index():
    """
    Snippet for the operationIndex method.

    scopes
    """
    # >SEPARATOR operationIndex scopes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
            "scope": [
                "rules",
                "settings",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index1():
    """
    Snippet for the operationIndex method.

    copy
    """
    # >SEPARATOR operationIndex copy
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "copy",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index2():
    """
    Snippet for the operationIndex method.

    move
    """
    # >SEPARATOR operationIndex move
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for an object attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": {
                "nested": "value",
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object1():
    """
    Snippet for the partialUpdateObject method.

    with visible_by filter
    """
    # >SEPARATOR partialUpdateObject with visible_by filter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "visible_by": [
                "Angela",
                "group/Finance",
                "group/Shareholders",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_objects():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=true
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
        create_if_not_exists=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_objects1():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=false
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
        ],
        create_if_not_exists=False,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_remove_user_id():
    """
    Snippet for the removeUserId method.

    removeUserId
    """
    # >SEPARATOR removeUserId default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.remove_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects():
    """
    Snippet for the replaceAllObjects method.

    call replaceAllObjects without error
    """
    # >SEPARATOR replaceAllObjects call replaceAllObjects without error
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
            {
                "objectID": "5",
                "name": "Eva",
            },
            {
                "objectID": "6",
                "name": "Fiona",
            },
            {
                "objectID": "7",
                "name": "Gael",
            },
            {
                "objectID": "8",
                "name": "Hugo",
            },
            {
                "objectID": "9",
                "name": "Igor",
            },
            {
                "objectID": "10",
                "name": "Julia",
            },
        ],
        batch_size=3,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects1():
    """
    Snippet for the replaceAllObjects method.

    call replaceAllObjects with partial scopes
    """
    # >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
        batch_size=77,
        scopes=[
            "settings",
            "synonyms",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects2():
    """
    Snippet for the replaceAllObjects method.

    replaceAllObjects should cleanup on failure
    """
    # >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "fine",
                "body": "small obj",
            },
            {
                "objectID": "toolarge",
                "body": "something bigger than 10KB",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_sources():
    """
    Snippet for the replaceSources method.

    replaceSources
    """
    # >SEPARATOR replaceSources default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_sources(
        source=[
            {
                "source": "theSource",
                "description": "theDescription",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_restore_api_key():
    """
    Snippet for the restoreApiKey method.

    restoreApiKey
    """
    # >SEPARATOR restoreApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.restore_api_key(
        key="ALGOLIA_API_KEY",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_object():
    """
    Snippet for the saveObject method.

    saveObject
    """
    # >SEPARATOR saveObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_object(
        index_name="<YOUR_INDEX_NAME>",
        body={
            "objectID": "id",
            "test": "val",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects():
    """
    Snippet for the saveObjects method.

    call saveObjects without error
    """
    # >SEPARATOR saveObjects call saveObjects without error
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects1():
    """
    Snippet for the saveObjects method.

    saveObjects should report errors
    """
    # >SEPARATOR saveObjects saveObjects should report errors
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects2():
    """
    Snippet for the saveObjects method.

    saveObjectsPlaylist
    """
    # >SEPARATOR saveObjects saveObjectsPlaylist
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "visibility": "public",
                "name": "Hot 100 Billboard Charts",
                "playlistId": "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
                "createdAt": "1500240452",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects3():
    """
    Snippet for the saveObjects method.

    saveObjectsPublicUser
    """
    # >SEPARATOR saveObjects saveObjectsPublicUser
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "visibility": "public",
                "name": "Hot 100 Billboard Charts",
                "playlistId": "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
                "createdAt": "1500240452",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule():
    """
    Snippet for the saveRule method.

    b2b catalog
    """
    # >SEPARATOR saveRule b2b catalog
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="article-rule",
        rule={
            "objectID": "article-rule",
            "conditions": [
                {
                    "pattern": "article",
                    "anchoring": "startsWith",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "article",
                            },
                        ],
                    },
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule1():
    """
    Snippet for the saveRule method.

    merchandising and promoting
    """
    # >SEPARATOR saveRule merchandising and promoting
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="director-rule",
        rule={
            "objectID": "director-rule",
            "conditions": [
                {
                    "pattern": "{facet:director} director",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                    "automaticFacetFilters": [
                        {
                            "facet": "director",
                        },
                    ],
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "director",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule2():
    """
    Snippet for the saveRule method.

    harry potter
    """
    # >SEPARATOR saveRule harry potter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="harry-potter-rule",
        rule={
            "objectID": "harry-potter-rule",
            "conditions": [
                {
                    "pattern": "harry potter",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "userData": {"promo_content": "20% OFF on all Harry Potter books!"},
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule3():
    """
    Snippet for the saveRule method.

    merchandising empty query
    """
    # >SEPARATOR saveRule merchandising empty query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="clearance-category-filter",
        rule={
            "objectID": "clearance-category-filter",
            "conditions": [
                {
                    "pattern": "",
                    "anchoring": "is",
                    "context": "landing",
                },
            ],
            "consequence": {
                "params": {
                    "optionalFilters": "clearance:true",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule4():
    """
    Snippet for the saveRule method.

    redirect
    """
    # >SEPARATOR saveRule redirect
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="redirect-help-rule",
        rule={
            "objectID": "redirect-help-rule",
            "conditions": [
                {
                    "pattern": "help",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "userData": {"redirect": "https://www.algolia.com/support"},
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule5():
    """
    Snippet for the saveRule method.

    promote some results over others
    """
    # >SEPARATOR saveRule promote some results over others
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="tomato-fruit",
        rule={
            "objectID": "tomato-fruit",
            "conditions": [
                {
                    "pattern": "tomato",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "optionalFilters": "food_group:fruit",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule6():
    """
    Snippet for the saveRule method.

    promote several hits
    """
    # >SEPARATOR saveRule promote several hits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="Promote-Apple-Newest",
        rule={
            "objectID": "Promote-Apple-Newest",
            "conditions": [
                {
                    "pattern": "apple",
                    "anchoring": "is",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectIDs": [
                            "iPhone-12345",
                            "watch-123",
                        ],
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule7():
    """
    Snippet for the saveRule method.

    promote newest release
    """
    # >SEPARATOR saveRule promote newest release
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="Promote-iPhone-X",
        rule={
            "objectID": "Promote-iPhone-X",
            "conditions": [
                {
                    "pattern": "iPhone",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectID": "iPhone-12345",
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule8():
    """
    Snippet for the saveRule method.

    promote single item
    """
    # >SEPARATOR saveRule promote single item
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="promote-harry-potter-box-set",
        rule={
            "objectID": "promote-harry-potter-box-set",
            "conditions": [
                {
                    "pattern": "Harry Potter",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectID": "HP-12345",
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule9():
    """
    Snippet for the saveRule method.

    limit search results
    """
    # >SEPARATOR saveRule limit search results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="article-rule",
        rule={
            "objectID": "article-rule",
            "conditions": [
                {
                    "pattern": "article",
                    "anchoring": "startsWith",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "article",
                            },
                        ],
                    },
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule10():
    """
    Snippet for the saveRule method.

    query match
    """
    # >SEPARATOR saveRule query match
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="tagged-brand-rule",
        rule={
            "conditions": [
                {
                    "pattern": "brand: {facet:brand}",
                    "anchoring": "contains",
                    "alternatives": False,
                },
            ],
            "consequence": {
                "params": {
                    "automaticFacetFilters": [
                        {
                            "facet": "brand",
                        },
                    ],
                    "query": {
                        "remove": [
                            "brand:",
                            "{facet:brand}",
                        ],
                    },
                },
            },
            "description": "filter on brand: {brand}",
            "objectID": "tagged-brand-rule",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule11():
    """
    Snippet for the saveRule method.

    dynamic filtering
    """
    # >SEPARATOR saveRule dynamic filtering
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="color-facets",
        rule={
            "objectID": "color-facets",
            "conditions": [
                {
                    "pattern": "{facet:color}",
                },
            ],
            "consequence": {
                "params": {
                    "automaticFacetFilters": [
                        {
                            "facet": "color",
                        },
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule12():
    """
    Snippet for the saveRule method.

    hide hits
    """
    # >SEPARATOR saveRule hide hits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="hide-12345",
        rule={
            "objectID": "hide-12345",
            "conditions": [
                {
                    "pattern": "cheap",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "hide": [
                    {
                        "objectID": "to-hide-12345",
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule13():
    """
    Snippet for the saveRule method.

    one rule per facet
    """
    # >SEPARATOR saveRule one rule per facet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="red-color",
        rule={
            "objectID": "red-color",
            "conditions": [
                {
                    "pattern": "red",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "remove": [
                            "red",
                        ],
                    },
                    "filters": "color:red",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule14():
    """
    Snippet for the saveRule method.

    numerical filters
    """
    # >SEPARATOR saveRule numerical filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="cheap",
        rule={
            "objectID": "cheap",
            "conditions": [
                {
                    "pattern": "cheap",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "remove": [
                            "cheap",
                        ],
                    },
                    "filters": "price < 10",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule15():
    """
    Snippet for the saveRule method.

    negative filters
    """
    # >SEPARATOR saveRule negative filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="gluten-free-rule",
        rule={
            "objectID": "gluten-free-rule",
            "conditions": [
                {
                    "pattern": "gluten-free",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "NOT allergens:gluten",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "gluten-free",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule16():
    """
    Snippet for the saveRule method.

    positive filters
    """
    # >SEPARATOR saveRule positive filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="diet-rule",
        rule={
            "objectID": "diet-rule",
            "conditions": [
                {
                    "pattern": "diet",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "'low-carb' OR 'low-fat'",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "diet",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule17():
    """
    Snippet for the saveRule method.

    conditionless
    """
    # >SEPARATOR saveRule conditionless
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="diet-rule",
        rule={
            "objectID": "diet-rule",
            "consequence": {
                "params": {
                    "filters": "'low-carb' OR 'low-fat'",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "diet",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules():
    """
    Snippet for the saveRules method.

    saveRules with minimal parameters
    """
    # >SEPARATOR saveRules default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "a-rule-id",
                "conditions": [
                    {
                        "pattern": "smartphone",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:apple",
                    },
                },
            },
            {
                "objectID": "a-second-rule-id",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:samsung",
                    },
                },
            },
        ],
        forward_to_replicas=False,
        clear_existing_rules=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_synonym():
    """
    Snippet for the saveSynonym method.

    saveSynonym
    """
    # >SEPARATOR saveSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        synonym_hit={
            "objectID": "id1",
            "type": "synonym",
            "synonyms": [
                "car",
                "vehicule",
                "auto",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_synonyms():
    """
    Snippet for the saveSynonyms method.

    saveSynonyms
    """
    # >SEPARATOR saveSynonyms default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_synonyms(
        index_name="<YOUR_INDEX_NAME>",
        synonym_hit=[
            {
                "objectID": "id1",
                "type": "synonym",
                "synonyms": [
                    "car",
                    "vehicule",
                    "auto",
                ],
            },
            {
                "objectID": "id2",
                "type": "onewaysynonym",
                "input": "iphone",
                "synonyms": [
                    "ephone",
                    "aphone",
                    "yphone",
                ],
            },
        ],
        forward_to_replicas=True,
        replace_existing_synonyms=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search():
    """
    Snippet for the search method.

    withHitsPerPage
    """
    # >SEPARATOR search withHitsPerPage
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "hitsPerPage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search1():
    """
    Snippet for the search method.

    filterOnly
    """
    # >SEPARATOR search filterOnly
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search2():
    """
    Snippet for the search method.

    filterOr
    """
    # >SEPARATOR search filterOr
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Tom Cruise OR actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search3():
    """
    Snippet for the search method.

    filterNot
    """
    # >SEPARATOR search filterNot
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "NOT actor:Nicolas Cage",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search4():
    """
    Snippet for the search method.

    retrieveFacets
    """
    # >SEPARATOR search retrieveFacets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "author",
                        "genre",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search5():
    """
    Snippet for the search method.

    retrieveFacetsWildcard
    """
    # >SEPARATOR search retrieveFacetsWildcard
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "*",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_dictionary_entries():
    """
    Snippet for the searchDictionaryEntries method.

    get searchDictionaryEntries results with minimal parameters
    """
    # >SEPARATOR searchDictionaryEntries default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_dictionary_entries(
        dictionary_name="stopwords",
        search_dictionary_entries_params={
            "query": "about",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_for_facet_values():
    """
    Snippet for the searchForFacetValues method.

    get searchForFacetValues results with minimal parameters
    """
    # >SEPARATOR searchForFacetValues default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_for_facet_values(
        index_name="<YOUR_INDEX_NAME>",
        facet_name="facetName",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_rules():
    """
    Snippet for the searchRules method.

    searchRules
    """
    # >SEPARATOR searchRules default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_rules(
        index_name="<YOUR_INDEX_NAME>",
        search_rules_params={
            "query": "zorro",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index():
    """
    Snippet for the searchSingleIndex method.

    search with searchParams
    """
    # >SEPARATOR searchSingleIndex search with searchParams
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "myQuery",
            "facetFilters": [
                "tags:algolia",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index1():
    """
    Snippet for the searchSingleIndex method.

    query
    """
    # >SEPARATOR searchSingleIndex query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "phone",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index2():
    """
    Snippet for the searchSingleIndex method.

    filters
    """
    # >SEPARATOR searchSingleIndex filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "country:US AND price.gross < 2.0",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index3():
    """
    Snippet for the searchSingleIndex method.

    distinct
    """
    # >SEPARATOR searchSingleIndex distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index4():
    """
    Snippet for the searchSingleIndex method.

    filtersNumeric
    """
    # >SEPARATOR searchSingleIndex filtersNumeric
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "price < 10",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index5():
    """
    Snippet for the searchSingleIndex method.

    filtersTimestamp
    """
    # >SEPARATOR searchSingleIndex filtersTimestamp
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "NOT date_timestamp:1514764800 TO 1546300799",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index6():
    """
    Snippet for the searchSingleIndex method.

    filtersSumOrFiltersScoresFalse
    """
    # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            "sumOrFiltersScores": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index7():
    """
    Snippet for the searchSingleIndex method.

    filtersSumOrFiltersScoresTrue
    """
    # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            "sumOrFiltersScores": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index8():
    """
    Snippet for the searchSingleIndex method.

    filtersStephenKing
    """
    # >SEPARATOR searchSingleIndex filtersStephenKing
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": 'author:"Stephen King"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index9():
    """
    Snippet for the searchSingleIndex method.

    filtersNotTags
    """
    # >SEPARATOR searchSingleIndex filtersNotTags
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "NOT _tags:non-fiction",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index10():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersList
    """
    # >SEPARATOR searchSingleIndex facetFiltersList
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": [
                "publisher:Penguin",
                [
                    "author:Stephen King",
                    "genre:Horror",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index11():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersNeg
    """
    # >SEPARATOR searchSingleIndex facetFiltersNeg
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": "category:-Ebook",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index12():
    """
    Snippet for the searchSingleIndex method.

    filtersAndFacetFilters
    """
    # >SEPARATOR searchSingleIndex filtersAndFacetFilters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": '(author:"Stephen King" OR genre:"Horror")',
            "facetFilters": [
                "publisher:Penguin",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index13():
    """
    Snippet for the searchSingleIndex method.

    aroundLatLng
    """
    # >SEPARATOR searchSingleIndex aroundLatLng
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLng": "40.71, -74.01",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index14():
    """
    Snippet for the searchSingleIndex method.

    aroundLatLngViaIP
    """
    # >SEPARATOR searchSingleIndex aroundLatLngViaIP
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLngViaIP": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index15():
    """
    Snippet for the searchSingleIndex method.

    aroundRadius
    """
    # >SEPARATOR searchSingleIndex aroundRadius
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLng": "40.71, -74.01",
            "aroundRadius": 1000000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index16():
    """
    Snippet for the searchSingleIndex method.

    insideBoundingBox
    """
    # >SEPARATOR searchSingleIndex insideBoundingBox
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insideBoundingBox": [
                [
                    49.067996905313834,
                    65.73828125,
                    25.905859247243498,
                    128.8046875,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index17():
    """
    Snippet for the searchSingleIndex method.

    insidePolygon
    """
    # >SEPARATOR searchSingleIndex insidePolygon
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insidePolygon": [
                [
                    42.01,
                    -124.31,
                    48.835509470063045,
                    -124.40453125000005,
                    45.01082951668149,
                    -65.95726562500005,
                    31.247243545293433,
                    -81.06578125000004,
                    25.924152577235226,
                    -97.68234374999997,
                    32.300311895879545,
                    -117.54828125,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index18():
    """
    Snippet for the searchSingleIndex method.

    insidePolygon
    """
    # >SEPARATOR searchSingleIndex insidePolygon
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insidePolygon": [
                [
                    42.01,
                    -124.31,
                    48.835509470063045,
                    -124.40453125000005,
                    45.01082951668149,
                    -65.95726562500005,
                    31.247243545293433,
                    -81.06578125000004,
                    25.924152577235226,
                    -97.68234374999997,
                    32.300311895879545,
                    -117.54828125,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index19():
    """
    Snippet for the searchSingleIndex method.

    optionalFilters
    """
    # >SEPARATOR searchSingleIndex optionalFilters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "can_deliver_quickly:true",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index20():
    """
    Snippet for the searchSingleIndex method.

    optionalFiltersMany
    """
    # >SEPARATOR searchSingleIndex optionalFiltersMany
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "brand:Apple<score=3>",
                "brand:Samsung<score=2>",
                "brand:-Huawei",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index21():
    """
    Snippet for the searchSingleIndex method.

    optionalFiltersSimple
    """
    # >SEPARATOR searchSingleIndex optionalFiltersSimple
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "brand:Apple<score=2>",
                "type:tablet",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index22():
    """
    Snippet for the searchSingleIndex method.

    restrictSearchableAttributes
    """
    # >SEPARATOR searchSingleIndex restrictSearchableAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "restrictSearchableAttributes": [
                "title_fr",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index23():
    """
    Snippet for the searchSingleIndex method.

    getRankingInfo
    """
    # >SEPARATOR searchSingleIndex getRankingInfo
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "getRankingInfo": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index24():
    """
    Snippet for the searchSingleIndex method.

    clickAnalytics
    """
    # >SEPARATOR searchSingleIndex clickAnalytics
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "clickAnalytics": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index25():
    """
    Snippet for the searchSingleIndex method.

    clickAnalyticsUserToken
    """
    # >SEPARATOR searchSingleIndex clickAnalyticsUserToken
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "clickAnalytics": True,
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index26():
    """
    Snippet for the searchSingleIndex method.

    enablePersonalization
    """
    # >SEPARATOR searchSingleIndex enablePersonalization
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "enablePersonalization": True,
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index27():
    """
    Snippet for the searchSingleIndex method.

    userToken
    """
    # >SEPARATOR searchSingleIndex userToken
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index28():
    """
    Snippet for the searchSingleIndex method.

    analyticsTag
    """
    # >SEPARATOR searchSingleIndex analyticsTag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "analyticsTags": [
                "YOUR_ANALYTICS_TAG",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index29():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersUsers
    """
    # >SEPARATOR searchSingleIndex facetFiltersUsers
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": [
                "user:user42",
                "user:public",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index30():
    """
    Snippet for the searchSingleIndex method.

    buildTheQuery
    """
    # >SEPARATOR searchSingleIndex buildTheQuery
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "categoryPageId: Men's Clothing",
            "hitsPerPage": 50,
            "analyticsTags": [
                "mens-clothing",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_synonyms():
    """
    Snippet for the searchSynonyms method.

    searchSynonyms with minimal parameters
    """
    # >SEPARATOR searchSynonyms default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_user_ids():
    """
    Snippet for the searchUserIds method.

    searchUserIds
    """
    # >SEPARATOR searchUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_user_ids(
        search_user_ids_params={
            "query": "test",
            "clusterName": "theClusterName",
            "page": 5,
            "hitsPerPage": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<


def snippet_for_set_dictionary_settings():
    """
    Snippet for the setDictionarySettings method.

    get setDictionarySettings results with minimal parameters
    """
    # >SEPARATOR setDictionarySettings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_dictionary_settings(
        dictionary_settings_params={
            "disableStandardEntries": {
                "plurals": {
                    "fr": False,
                    "en": False,
                    "ru": True,
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings():
    """
    Snippet for the setSettings method.

    removeStopWords boolean
    """
    # >SEPARATOR setSettings removeStopWords boolean
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "removeStopWords": True,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings1():
    """
    Snippet for the setSettings method.

    removeStopWords list of string
    """
    # >SEPARATOR setSettings removeStopWords list of string
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "removeStopWords": [
                "fr",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings2():
    """
    Snippet for the setSettings method.

    distinct company
    """
    # >SEPARATOR setSettings distinct company
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "company",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings3():
    """
    Snippet for the setSettings method.

    distinct design
    """
    # >SEPARATOR setSettings distinct design
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "design",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings4():
    """
    Snippet for the setSettings method.

    distinct true
    """
    # >SEPARATOR setSettings distinct true
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings5():
    """
    Snippet for the setSettings method.

    distinct section
    """
    # >SEPARATOR setSettings distinct section
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "section",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings6():
    """
    Snippet for the setSettings method.

    attributesForFaceting allergens
    """
    # >SEPARATOR setSettings attributesForFaceting allergens
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "allergens",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings7():
    """
    Snippet for the setSettings method.

    attributesForFaceting categoryPageId
    """
    # >SEPARATOR setSettings attributesForFaceting categoryPageId
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "searchable(categoryPageId)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings8():
    """
    Snippet for the setSettings method.

    unretrievableAttributes
    """
    # >SEPARATOR setSettings unretrievableAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "unretrievableAttributes": [
                "visible_by",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings9():
    """
    Snippet for the setSettings method.

    attributesForFaceting user restricted data
    """
    # >SEPARATOR setSettings attributesForFaceting user restricted data
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "filterOnly(visible_by)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings10():
    """
    Snippet for the setSettings method.

    attributesForFaceting optional filters
    """
    # >SEPARATOR setSettings attributesForFaceting optional filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "can_deliver_quickly",
                "restaurant",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings11():
    """
    Snippet for the setSettings method.

    attributesForFaceting redirect index
    """
    # >SEPARATOR setSettings attributesForFaceting redirect index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "query_terms",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings12():
    """
    Snippet for the setSettings method.

    attributesForFaceting multiple consequences
    """
    # >SEPARATOR setSettings attributesForFaceting multiple consequences
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "director",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings13():
    """
    Snippet for the setSettings method.

    attributesForFaceting in-depth optional filters
    """
    # >SEPARATOR setSettings attributesForFaceting in-depth optional filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "filterOnly(brand)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings14():
    """
    Snippet for the setSettings method.

    mode neuralSearch
    """
    # >SEPARATOR setSettings mode neuralSearch
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "neuralSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings15():
    """
    Snippet for the setSettings method.

    mode keywordSearch
    """
    # >SEPARATOR setSettings mode keywordSearch
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "keywordSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings16():
    """
    Snippet for the setSettings method.

    searchableAttributes same priority
    """
    # >SEPARATOR setSettings searchableAttributes same priority
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title,comments",
                "ingredients",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings17():
    """
    Snippet for the setSettings method.

    searchableAttributes higher priority
    """
    # >SEPARATOR setSettings searchableAttributes higher priority
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title",
                "ingredients",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings18():
    """
    Snippet for the setSettings method.

    customRanking retweets
    """
    # >SEPARATOR setSettings customRanking retweets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(retweets)",
                "desc(likes)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings19():
    """
    Snippet for the setSettings method.

    customRanking boosted
    """
    # >SEPARATOR setSettings customRanking boosted
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(boosted)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings20():
    """
    Snippet for the setSettings method.

    customRanking pageviews
    """
    # >SEPARATOR setSettings customRanking pageviews
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(pageviews)",
                "desc(comments)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings21():
    """
    Snippet for the setSettings method.

    customRanking applying search parameters for a specific query
    """
    # >SEPARATOR setSettings customRanking applying search parameters for a specific query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(nb_airline_liaisons)",
            ],
            "attributesForFaceting": [
                "city, country",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings22():
    """
    Snippet for the setSettings method.

    customRanking rounded pageviews
    """
    # >SEPARATOR setSettings customRanking rounded pageviews
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(rounded_pageviews)",
                "desc(comments)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings23():
    """
    Snippet for the setSettings method.

    customRanking price
    """
    # >SEPARATOR setSettings customRanking price
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(price)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings24():
    """
    Snippet for the setSettings method.

    ranking exhaustive
    """
    # >SEPARATOR setSettings ranking exhaustive
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "desc(price)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings25():
    """
    Snippet for the setSettings method.

    ranking standard replica
    """
    # >SEPARATOR setSettings ranking standard replica
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "desc(post_date_timestamp)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings26():
    """
    Snippet for the setSettings method.

    ranking virtual replica
    """
    # >SEPARATOR setSettings ranking virtual replica
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(post_date_timestamp)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings27():
    """
    Snippet for the setSettings method.

    customRanking and ranking sort alphabetically
    """
    # >SEPARATOR setSettings customRanking and ranking sort alphabetically
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "asc(textual_attribute)",
            ],
            "ranking": [
                "custom",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings28():
    """
    Snippet for the setSettings method.

    relevancyStrictness
    """
    # >SEPARATOR setSettings relevancyStrictness
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "asc(textual_attribute)",
            ],
            "relevancyStrictness": 0,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings29():
    """
    Snippet for the setSettings method.

    create replica index
    """
    # >SEPARATOR setSettings create replica index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "products_price_desc",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings30():
    """
    Snippet for the setSettings method.

    unlink replica index
    """
    # >SEPARATOR setSettings unlink replica index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings31():
    """
    Snippet for the setSettings method.

    forwardToReplicas
    """
    # >SEPARATOR setSettings forwardToReplicas
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "description",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings32():
    """
    Snippet for the setSettings method.

    maxValuesPerFacet
    """
    # >SEPARATOR setSettings maxValuesPerFacet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxValuesPerFacet": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings33():
    """
    Snippet for the setSettings method.

    maxFacetHits
    """
    # >SEPARATOR setSettings maxFacetHits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxFacetHits": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings34():
    """
    Snippet for the setSettings method.

    attributesForFaceting complex
    """
    # >SEPARATOR setSettings attributesForFaceting complex
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "actor",
                "filterOnly(category)",
                "searchable(publisher)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings35():
    """
    Snippet for the setSettings method.

    ranking closest dates
    """
    # >SEPARATOR setSettings ranking closest dates
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "asc(date_timestamp)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings36():
    """
    Snippet for the setSettings method.

    searchableAttributes item variation
    """
    # >SEPARATOR setSettings searchableAttributes item variation
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "design",
                "type",
                "color",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings37():
    """
    Snippet for the setSettings method.

    searchableAttributes around location
    """
    # >SEPARATOR setSettings searchableAttributes around location
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "country",
                "code",
                "iata_code",
            ],
            "customRanking": [
                "desc(links_count)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings38():
    """
    Snippet for the setSettings method.

    searchableAttributes around location
    """
    # >SEPARATOR setSettings searchableAttributes around location
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "country",
                "code",
                "iata_code",
            ],
            "customRanking": [
                "desc(links_count)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings39():
    """
    Snippet for the setSettings method.

    disableTypoToleranceOnAttributes
    """
    # >SEPARATOR setSettings disableTypoToleranceOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disableTypoToleranceOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings40():
    """
    Snippet for the setSettings method.

    searchableAttributesWithCustomRankingsAndAttributesForFaceting
    """
    # >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "brand",
                "name",
                "categories",
                "unordered(description)",
            ],
            "customRanking": [
                "desc(popularity)",
            ],
            "attributesForFaceting": [
                "searchable(brand)",
                "type",
                "categories",
                "price",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings41():
    """
    Snippet for the setSettings method.

    searchableAttributesProductReferenceSuffixes
    """
    # >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "product_reference",
                "product_reference_suffixes",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings42():
    """
    Snippet for the setSettings method.

    queryLanguageAndIgnorePlurals
    """
    # >SEPARATOR setSettings queryLanguageAndIgnorePlurals
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryLanguages": [
                "en",
            ],
            "ignorePlurals": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings43():
    """
    Snippet for the setSettings method.

    searchableAttributesInMovies
    """
    # >SEPARATOR setSettings searchableAttributesInMovies
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title_eng",
                "title_fr",
                "title_es",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings44():
    """
    Snippet for the setSettings method.

    disablePrefixOnAttributes
    """
    # >SEPARATOR setSettings disablePrefixOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disablePrefixOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings45():
    """
    Snippet for the setSettings method.

    disableTypoToleranceOnAttributes
    """
    # >SEPARATOR setSettings disableTypoToleranceOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disableTypoToleranceOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings46():
    """
    Snippet for the setSettings method.

    searchableAttributesSimpleExample
    """
    # >SEPARATOR setSettings searchableAttributesSimpleExample
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings47():
    """
    Snippet for the setSettings method.

    searchableAttributesSimpleExampleAlt
    """
    # >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "serial_number",
                "serial_number_suffixes",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_update_api_key():
    """
    Snippet for the updateApiKey method.

    updateApiKey
    """
    # >SEPARATOR updateApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.update_api_key(
        key="ALGOLIA_API_KEY",
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key():
    """
    Snippet for the waitForApiKey method.

    wait for api key helper - add
    """
    # >SEPARATOR waitForApiKey wait for api key helper - add
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-add-operation-test-python",
        operation="add",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key1():
    """
    Snippet for the waitForApiKey method.

    wait for api key - update
    """
    # >SEPARATOR waitForApiKey wait for api key - update
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-update-operation-test-python",
        operation="update",
        api_key={
            "description": "my updated api key",
            "acl": [
                "search",
                "addObject",
                "deleteObject",
            ],
            "indexes": [
                "Movies",
                "Books",
            ],
            "referers": [
                "*google.com",
                "*algolia.com",
            ],
            "validity": 305,
            "maxQueriesPerIPPerHour": 95,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key2():
    """
    Snippet for the waitForApiKey method.

    wait for api key - delete
    """
    # >SEPARATOR waitForApiKey wait for api key - delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-delete-operation-test-python",
        operation="delete",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_app_task():
    """
    Snippet for the waitForAppTask method.

    wait for an application-level task
    """
    # >SEPARATOR waitForAppTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_task():
    """
    Snippet for the waitForTask method.

    wait for task
    """
    # >SEPARATOR waitForTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<
