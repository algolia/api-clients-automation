# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.search.client import SearchClientSync
from json import loads
# IMPORT<


def snippet_for_add_api_key():
    """
    Snippet for the addApiKey method.

    minimal
    """
    # >SEPARATOR addApiKey minimal
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.add_api_key(
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "description": "my new api key",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_add_api_key1():
    """
    Snippet for the addApiKey method.

    all
    """
    # >SEPARATOR addApiKey all
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.add_api_key(
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "description": "my new api key",
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_add_or_update_object():
    """
    Snippet for the addOrUpdateObject method.

    addOrUpdateObject
    """
    # >SEPARATOR addOrUpdateObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.add_or_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        body={
            "key": "value",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_append_source():
    """
    Snippet for the appendSource method.

    appendSource
    """
    # >SEPARATOR appendSource default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.append_source(
        source={
            "source": "theSource",
            "description": "theDescription",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_assign_user_id():
    """
    Snippet for the assignUserId method.

    simple
    """
    # >SEPARATOR assignUserId simple
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.assign_user_id(
        x_algolia_user_id="user42",
        assign_user_id_params={
            "cluster": "d4242-eu",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_assign_user_id1():
    """
    Snippet for the assignUserId method.

    it should not encode the userID
    """
    # >SEPARATOR assignUserId it should not encode the userID
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.assign_user_id(
        x_algolia_user_id="user id with spaces",
        assign_user_id_params={
            "cluster": "cluster with spaces",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch():
    """
    Snippet for the batch method.

    addObject
    """
    # >SEPARATOR batch addObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "bar",
                        "foo": "1",
                    },
                },
                {
                    "action": "addObject",
                    "body": {
                        "key": "baz",
                        "foo": "2",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch1():
    """
    Snippet for the batch method.

    clear
    """
    # >SEPARATOR batch clear
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "clear",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch2():
    """
    Snippet for the batch method.

    delete
    """
    # >SEPARATOR batch delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "delete",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch3():
    """
    Snippet for the batch method.

    deleteObject
    """
    # >SEPARATOR batch deleteObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "deleteObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch4():
    """
    Snippet for the batch method.

    partialUpdateObject
    """
    # >SEPARATOR batch partialUpdateObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch5():
    """
    Snippet for the batch method.

    partialUpdateObjectNoCreate
    """
    # >SEPARATOR batch partialUpdateObjectNoCreate
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObjectNoCreate",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch6():
    """
    Snippet for the batch method.

    updateObject
    """
    # >SEPARATOR batch updateObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "updateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_assign_user_ids():
    """
    Snippet for the batchAssignUserIds method.

    batchAssignUserIds
    """
    # >SEPARATOR batchAssignUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_assign_user_ids(
        x_algolia_user_id="userID",
        batch_assign_user_ids_params={
            "cluster": "theCluster",
            "users": [
                "user1",
                "user2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries():
    """
    Snippet for the batchDictionaryEntries method.

    replace
    """
    # >SEPARATOR batchDictionaryEntries replace
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "word": "fancy",
                        "words": [
                            "believe",
                            "algolia",
                        ],
                        "decomposition": [
                            "trust",
                            "algolia",
                        ],
                        "state": "enabled",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries1():
    """
    Snippet for the batchDictionaryEntries method.

    delete
    """
    # >SEPARATOR batchDictionaryEntries delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "deleteEntry",
                    "body": {
                        "objectID": "1",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_batch_dictionary_entries2():
    """
    Snippet for the batchDictionaryEntries method.

    append
    """
    # >SEPARATOR batchDictionaryEntries append
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_dictionary_entries(
        dictionary_name="stopwords",
        batch_dictionary_entries_params={
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "additional": "try me",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_browse():
    """
    Snippet for the browse method.

    browse with minimal parameters
    """
    # >SEPARATOR browse browse with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.browse(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_browse1():
    """
    Snippet for the browse method.

    browse with search parameters
    """
    # >SEPARATOR browse browse with search parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.browse(
        index_name="<YOUR_INDEX_NAME>",
        browse_params={
            "query": "myQuery",
            "facetFilters": [
                "tags:algolia",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_browse2():
    """
    Snippet for the browse method.

    browse allow a cursor in parameters
    """
    # >SEPARATOR browse browse allow a cursor in parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.browse(
        index_name="<YOUR_INDEX_NAME>",
        browse_params={
            "cursor": "test",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_objects():
    """
    Snippet for the clearObjects method.

    clearObjects
    """
    # >SEPARATOR clearObjects default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_objects(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_rules():
    """
    Snippet for the clearRules method.

    clearRules
    """
    # >SEPARATOR clearRules default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_rules(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_clear_synonyms():
    """
    Snippet for the clearSynonyms method.

    clearSynonyms
    """
    # >SEPARATOR clearSynonyms default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.clear_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_api_key():
    """
    Snippet for the deleteApiKey method.

    deleteApiKey
    """
    # >SEPARATOR deleteApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_by():
    """
    Snippet for the deleteBy method.

    deleteBy
    """
    # >SEPARATOR deleteBy default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_by(
        index_name="<YOUR_INDEX_NAME>",
        delete_by_params={
            "filters": "brand:brandName",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_index():
    """
    Snippet for the deleteIndex method.

    deleteIndex
    """
    # >SEPARATOR deleteIndex default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_object():
    """
    Snippet for the deleteObject method.

    deleteObject
    """
    # >SEPARATOR deleteObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_objects():
    """
    Snippet for the deleteObjects method.

    call deleteObjects without error
    """
    # >SEPARATOR deleteObjects default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_objects(
        index_name="<YOUR_INDEX_NAME>",
        object_ids=[
            "1",
            "2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_rule():
    """
    Snippet for the deleteRule method.

    delete rule simple case
    """
    # >SEPARATOR deleteRule delete rule simple case
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_rule1():
    """
    Snippet for the deleteRule method.

    delete rule with simple characters to encode in objectID
    """
    # >SEPARATOR deleteRule delete rule with simple characters to encode in objectID
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="test/with/slash",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_source():
    """
    Snippet for the deleteSource method.

    deleteSource
    """
    # >SEPARATOR deleteSource default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_source(
        source="theSource",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_synonym():
    """
    Snippet for the deleteSynonym method.

    deleteSynonym
    """
    # >SEPARATOR deleteSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key():
    """
    Snippet for the generateSecuredApiKey method.

    api key basic
    """
    # >SEPARATOR generateSecuredApiKey api key basic
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key1():
    """
    Snippet for the generateSecuredApiKey method.

    with searchParams
    """
    # >SEPARATOR generateSecuredApiKey with searchParams
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
                "cts_e2e_settings",
            ],
            "restrictSources": "192.168.1.0/24",
            "filters": "category:Book OR category:Ebook AND _tags:published",
            "userToken": "user123",
            "searchParams": {
                "query": "batman",
                "typoTolerance": "strict",
                "aroundRadius": "all",
                "mode": "neuralSearch",
                "hitsPerPage": 10,
                "optionalWords": [
                    "one",
                    "two",
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key2():
    """
    Snippet for the generateSecuredApiKey method.

    with filters
    """
    # >SEPARATOR generateSecuredApiKey with filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "filters": "user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key3():
    """
    Snippet for the generateSecuredApiKey method.

    with visible_by filter
    """
    # >SEPARATOR generateSecuredApiKey with visible_by filter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "filters": "visible_by:group/Finance",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_generate_secured_api_key4():
    """
    Snippet for the generateSecuredApiKey method.

    with userID
    """
    # >SEPARATOR generateSecuredApiKey with userID
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "userToken": "user42",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_api_key():
    """
    Snippet for the getApiKey method.

    getApiKey
    """
    # >SEPARATOR getApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_app_task():
    """
    Snippet for the getAppTask method.

    getAppTask
    """
    # >SEPARATOR getAppTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_dictionary_languages():
    """
    Snippet for the getDictionaryLanguages method.

    get getDictionaryLanguages
    """
    # >SEPARATOR getDictionaryLanguages default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_dictionary_languages()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_dictionary_settings():
    """
    Snippet for the getDictionarySettings method.

    get getDictionarySettings results
    """
    # >SEPARATOR getDictionarySettings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_dictionary_settings()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_logs():
    """
    Snippet for the getLogs method.

    getLogs with minimal parameters
    """
    # >SEPARATOR getLogs getLogs with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_logs()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_logs1():
    """
    Snippet for the getLogs method.

    getLogs with parameters
    """
    # >SEPARATOR getLogs getLogs with parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_logs(
        offset=5,
        length=10,
        index_name="<YOUR_INDEX_NAME>",
        type="all",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_object():
    """
    Snippet for the getObject method.

    getObject
    """
    # >SEPARATOR getObject getObject
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_retrieve=[
            "attr1",
            "attr2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_object1():
    """
    Snippet for the getObject method.

    search with a real object
    """
    # >SEPARATOR getObject search with a real object
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="Batman and Robin",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_objects():
    """
    Snippet for the getObjects method.

    by ID
    """
    # >SEPARATOR getObjects by ID
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_objects(
        get_objects_params={
            "requests": [
                {
                    "objectID": "uniqueID",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_objects1():
    """
    Snippet for the getObjects method.

    multiple IDs
    """
    # >SEPARATOR getObjects multiple IDs
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_objects(
        get_objects_params={
            "requests": [
                {
                    "objectID": "uniqueID1",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
                {
                    "objectID": "uniqueID2",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_objects2():
    """
    Snippet for the getObjects method.

    with attributesToRetrieve
    """
    # >SEPARATOR getObjects with attributesToRetrieve
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_objects(
        get_objects_params={
            "requests": [
                {
                    "attributesToRetrieve": [
                        "attr1",
                        "attr2",
                    ],
                    "objectID": "uniqueID",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_rule():
    """
    Snippet for the getRule method.

    getRule
    """
    # >SEPARATOR getRule default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="qr-1725004648916",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_settings():
    """
    Snippet for the getSettings method.

    getSettings
    """
    # >SEPARATOR getSettings default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_settings(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_sources():
    """
    Snippet for the getSources method.

    getSources
    """
    # >SEPARATOR getSources default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_sources()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_synonym():
    """
    Snippet for the getSynonym method.

    getSynonym
    """
    # >SEPARATOR getSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_task():
    """
    Snippet for the getTask method.

    getTask
    """
    # >SEPARATOR getTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_user_ids():
    """
    Snippet for the getTopUserIds method.

    getTopUserIds
    """
    # >SEPARATOR getTopUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_top_user_ids()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_user_id():
    """
    Snippet for the getUserId method.

    getUserId
    """
    # >SEPARATOR getUserId default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_has_pending_mappings():
    """
    Snippet for the hasPendingMappings method.

    hasPendingMappings with minimal parameters
    """
    # >SEPARATOR hasPendingMappings hasPendingMappings with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.has_pending_mappings()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_has_pending_mappings1():
    """
    Snippet for the hasPendingMappings method.

    hasPendingMappings with parameters
    """
    # >SEPARATOR hasPendingMappings hasPendingMappings with parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.has_pending_mappings(
        get_clusters=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists():
    """
    Snippet for the indexExists method.

    indexExists
    """
    # >SEPARATOR indexExists indexExists
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists1():
    """
    Snippet for the indexExists method.

    indexNotExists
    """
    # >SEPARATOR indexExists indexNotExists
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_index_exists2():
    """
    Snippet for the indexExists method.

    indexExistsWithError
    """
    # >SEPARATOR indexExists indexExistsWithError
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_api_keys():
    """
    Snippet for the listApiKeys method.

    listApiKeys
    """
    # >SEPARATOR listApiKeys default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_api_keys()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_clusters():
    """
    Snippet for the listClusters method.

    listClusters
    """
    # >SEPARATOR listClusters default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_clusters()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_indices():
    """
    Snippet for the listIndices method.

    listIndices with minimal parameters
    """
    # >SEPARATOR listIndices listIndices with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_indices()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_indices1():
    """
    Snippet for the listIndices method.

    listIndices with parameters
    """
    # >SEPARATOR listIndices listIndices with parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_indices(
        page=8,
        hits_per_page=3,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_user_ids():
    """
    Snippet for the listUserIds method.

    listUserIds with minimal parameters
    """
    # >SEPARATOR listUserIds listUserIds with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_user_ids()

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_list_user_ids1():
    """
    Snippet for the listUserIds method.

    listUserIds with parameters
    """
    # >SEPARATOR listUserIds listUserIds with parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.list_user_ids(
        page=8,
        hits_per_page=100,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_multiple_batch():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "value",
                    },
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index():
    """
    Snippet for the operationIndex method.

    scopes
    """
    # >SEPARATOR operationIndex scopes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
            "scope": [
                "rules",
                "settings",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index1():
    """
    Snippet for the operationIndex method.

    copy
    """
    # >SEPARATOR operationIndex copy
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "copy",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_operation_index2():
    """
    Snippet for the operationIndex method.

    move
    """
    # >SEPARATOR operationIndex move
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for a string attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for a string attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": "new value",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object1():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for an integer attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for an integer attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": 1,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object2():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for a boolean attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for a boolean attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object3():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for an array attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for an array attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": [
                "one",
                "two",
                "three",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object4():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for an object attribute
    """
    # >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": {
                "nested": "value",
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_object5():
    """
    Snippet for the partialUpdateObject method.

    with visible_by filter
    """
    # >SEPARATOR partialUpdateObject with visible_by filter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "visible_by": [
                "Angela",
                "group/Finance",
                "group/Shareholders",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_objects():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=true
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
        create_if_not_exists=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_partial_update_objects1():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=false
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
        ],
        create_if_not_exists=False,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_remove_user_id():
    """
    Snippet for the removeUserId method.

    removeUserId
    """
    # >SEPARATOR removeUserId default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.remove_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects():
    """
    Snippet for the replaceAllObjects method.

    call replaceAllObjects without error
    """
    # >SEPARATOR replaceAllObjects call replaceAllObjects without error
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
            {
                "objectID": "5",
                "name": "Eva",
            },
            {
                "objectID": "6",
                "name": "Fiona",
            },
            {
                "objectID": "7",
                "name": "Gael",
            },
            {
                "objectID": "8",
                "name": "Hugo",
            },
            {
                "objectID": "9",
                "name": "Igor",
            },
            {
                "objectID": "10",
                "name": "Julia",
            },
        ],
        batch_size=3,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects1():
    """
    Snippet for the replaceAllObjects method.

    call replaceAllObjects with partial scopes
    """
    # >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
        batch_size=77,
        scopes=[
            "settings",
            "synonyms",
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_all_objects2():
    """
    Snippet for the replaceAllObjects method.

    replaceAllObjects should cleanup on failure
    """
    # >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "fine",
                "body": "small obj",
            },
            {
                "objectID": "toolarge",
                "body": "something bigger than 10KB",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_replace_sources():
    """
    Snippet for the replaceSources method.

    replaceSources
    """
    # >SEPARATOR replaceSources default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.replace_sources(
        source=[
            {
                "source": "theSource",
                "description": "theDescription",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_restore_api_key():
    """
    Snippet for the restoreApiKey method.

    restoreApiKey
    """
    # >SEPARATOR restoreApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.restore_api_key(
        key="ALGOLIA_API_KEY",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_object():
    """
    Snippet for the saveObject method.

    saveObject
    """
    # >SEPARATOR saveObject default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_object(
        index_name="<YOUR_INDEX_NAME>",
        body={
            "objectID": "id",
            "test": "val",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects():
    """
    Snippet for the saveObjects method.

    call saveObjects without error
    """
    # >SEPARATOR saveObjects call saveObjects without error
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects1():
    """
    Snippet for the saveObjects method.

    saveObjects should report errors
    """
    # >SEPARATOR saveObjects saveObjects should report errors
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects2():
    """
    Snippet for the saveObjects method.

    saveObjectsPlaylist
    """
    # >SEPARATOR saveObjects saveObjectsPlaylist
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "visibility": "public",
                "name": "Hot 100 Billboard Charts",
                "playlistId": "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
                "createdAt": "1500240452",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_objects3():
    """
    Snippet for the saveObjects method.

    saveObjectsPublicUser
    """
    # >SEPARATOR saveObjects saveObjectsPublicUser
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "visibility": "public",
                "name": "Hot 100 Billboard Charts",
                "playlistId": "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
                "createdAt": "1500240452",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule():
    """
    Snippet for the saveRule method.

    saveRule with minimal parameters
    """
    # >SEPARATOR saveRule saveRule with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        rule={
            "objectID": "id1",
            "conditions": [
                {
                    "pattern": "apple",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "brand:xiaomi",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule1():
    """
    Snippet for the saveRule method.

    saveRule with all parameters
    """
    # >SEPARATOR saveRule saveRule with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        rule={
            "objectID": "id1",
            "conditions": [
                {
                    "pattern": "apple",
                    "anchoring": "contains",
                    "alternatives": False,
                    "context": "search",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "brand:apple",
                    "query": {
                        "remove": [
                            "algolia",
                        ],
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "abc",
                                "insert": "cde",
                            },
                            {
                                "type": "replace",
                                "delete": "abc",
                                "insert": "cde",
                            },
                        ],
                    },
                },
                "hide": [
                    {
                        "objectID": "321",
                    },
                ],
                "filterPromotes": False,
                "userData": {
                    "algolia": "aloglia",
                },
                "promote": [
                    {
                        "objectID": "abc",
                        "position": 3,
                    },
                    {
                        "objectIDs": [
                            "abc",
                            "def",
                        ],
                        "position": 1,
                    },
                ],
            },
            "description": "test",
            "enabled": True,
            "validity": [
                {
                    "from": 1656670273,
                    "until": 1656670277,
                },
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule2():
    """
    Snippet for the saveRule method.

    b2b catalog
    """
    # >SEPARATOR saveRule b2b catalog
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="article-rule",
        rule={
            "objectID": "article-rule",
            "conditions": [
                {
                    "pattern": "article",
                    "anchoring": "startsWith",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "article",
                            },
                        ],
                    },
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule3():
    """
    Snippet for the saveRule method.

    merchandising and promoting
    """
    # >SEPARATOR saveRule merchandising and promoting
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="director-rule",
        rule={
            "objectID": "director-rule",
            "conditions": [
                {
                    "pattern": "{facet:director} director",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                    "automaticFacetFilters": [
                        {
                            "facet": "director",
                        },
                    ],
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "director",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule4():
    """
    Snippet for the saveRule method.

    harry potter
    """
    # >SEPARATOR saveRule harry potter
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="harry-potter-rule",
        rule={
            "objectID": "harry-potter-rule",
            "conditions": [
                {
                    "pattern": "harry potter",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "userData": {
                    "promo_content": "20% OFF on all Harry Potter books!",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule5():
    """
    Snippet for the saveRule method.

    merchandising empty query
    """
    # >SEPARATOR saveRule merchandising empty query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="clearance-category-filter",
        rule={
            "objectID": "clearance-category-filter",
            "conditions": [
                {
                    "pattern": "",
                    "anchoring": "is",
                    "context": "landing",
                },
            ],
            "consequence": {
                "params": {
                    "optionalFilters": "clearance:true",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule6():
    """
    Snippet for the saveRule method.

    redirect
    """
    # >SEPARATOR saveRule redirect
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="redirect-help-rule",
        rule={
            "objectID": "redirect-help-rule",
            "conditions": [
                {
                    "pattern": "help",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "userData": {
                    "redirect": "https://www.algolia.com/support",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule7():
    """
    Snippet for the saveRule method.

    promote some results over others
    """
    # >SEPARATOR saveRule promote some results over others
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="tomato-fruit",
        rule={
            "objectID": "tomato-fruit",
            "conditions": [
                {
                    "pattern": "tomato",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "optionalFilters": "food_group:fruit",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule8():
    """
    Snippet for the saveRule method.

    promote several hits
    """
    # >SEPARATOR saveRule promote several hits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="Promote-Apple-Newest",
        rule={
            "objectID": "Promote-Apple-Newest",
            "conditions": [
                {
                    "pattern": "apple",
                    "anchoring": "is",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectIDs": [
                            "iPhone-12345",
                            "watch-123",
                        ],
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule9():
    """
    Snippet for the saveRule method.

    promote newest release
    """
    # >SEPARATOR saveRule promote newest release
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="Promote-iPhone-X",
        rule={
            "objectID": "Promote-iPhone-X",
            "conditions": [
                {
                    "pattern": "iPhone",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectID": "iPhone-12345",
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule10():
    """
    Snippet for the saveRule method.

    promote single item
    """
    # >SEPARATOR saveRule promote single item
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="promote-harry-potter-box-set",
        rule={
            "objectID": "promote-harry-potter-box-set",
            "conditions": [
                {
                    "pattern": "Harry Potter",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "promote": [
                    {
                        "objectID": "HP-12345",
                        "position": 0,
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule11():
    """
    Snippet for the saveRule method.

    limit search results
    """
    # >SEPARATOR saveRule limit search results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="article-rule",
        rule={
            "objectID": "article-rule",
            "conditions": [
                {
                    "pattern": "article",
                    "anchoring": "startsWith",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "article",
                            },
                        ],
                    },
                    "restrictSearchableAttributes": [
                        "title",
                        "book_id",
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule12():
    """
    Snippet for the saveRule method.

    query match
    """
    # >SEPARATOR saveRule query match
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="tagged-brand-rule",
        rule={
            "conditions": [
                {
                    "pattern": "brand: {facet:brand}",
                    "anchoring": "contains",
                    "alternatives": False,
                },
            ],
            "consequence": {
                "params": {
                    "automaticFacetFilters": [
                        {
                            "facet": "brand",
                        },
                    ],
                    "query": {
                        "remove": [
                            "brand:",
                            "{facet:brand}",
                        ],
                    },
                },
            },
            "description": "filter on brand: {brand}",
            "objectID": "tagged-brand-rule",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule13():
    """
    Snippet for the saveRule method.

    dynamic filtering
    """
    # >SEPARATOR saveRule dynamic filtering
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="color-facets",
        rule={
            "objectID": "color-facets",
            "conditions": [
                {
                    "pattern": "{facet:color}",
                },
            ],
            "consequence": {
                "params": {
                    "automaticFacetFilters": [
                        {
                            "facet": "color",
                        },
                    ],
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule14():
    """
    Snippet for the saveRule method.

    hide hits
    """
    # >SEPARATOR saveRule hide hits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="hide-12345",
        rule={
            "objectID": "hide-12345",
            "conditions": [
                {
                    "pattern": "cheap",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "hide": [
                    {
                        "objectID": "to-hide-12345",
                    },
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule15():
    """
    Snippet for the saveRule method.

    one rule per facet
    """
    # >SEPARATOR saveRule one rule per facet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="red-color",
        rule={
            "objectID": "red-color",
            "conditions": [
                {
                    "pattern": "red",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "remove": [
                            "red",
                        ],
                    },
                    "filters": "color:red",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule16():
    """
    Snippet for the saveRule method.

    numerical filters
    """
    # >SEPARATOR saveRule numerical filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="cheap",
        rule={
            "objectID": "cheap",
            "conditions": [
                {
                    "pattern": "cheap",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "query": {
                        "remove": [
                            "cheap",
                        ],
                    },
                    "filters": "price < 10",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule17():
    """
    Snippet for the saveRule method.

    negative filters
    """
    # >SEPARATOR saveRule negative filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="gluten-free-rule",
        rule={
            "objectID": "gluten-free-rule",
            "conditions": [
                {
                    "pattern": "gluten-free",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "NOT allergens:gluten",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "gluten-free",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule18():
    """
    Snippet for the saveRule method.

    positive filters
    """
    # >SEPARATOR saveRule positive filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="diet-rule",
        rule={
            "objectID": "diet-rule",
            "conditions": [
                {
                    "pattern": "diet",
                    "anchoring": "contains",
                },
            ],
            "consequence": {
                "params": {
                    "filters": "'low-carb' OR 'low-fat'",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "diet",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rule19():
    """
    Snippet for the saveRule method.

    conditionless
    """
    # >SEPARATOR saveRule conditionless
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="diet-rule",
        rule={
            "objectID": "diet-rule",
            "consequence": {
                "params": {
                    "filters": "'low-carb' OR 'low-fat'",
                    "query": {
                        "edits": [
                            {
                                "type": "remove",
                                "delete": "diet",
                            },
                        ],
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules():
    """
    Snippet for the saveRules method.

    saveRules with minimal parameters
    """
    # >SEPARATOR saveRules saveRules with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "a-rule-id",
                "conditions": [
                    {
                        "pattern": "smartphone",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:apple",
                    },
                },
            },
            {
                "objectID": "a-second-rule-id",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:samsung",
                    },
                },
            },
        ],
        forward_to_replicas=False,
        clear_existing_rules=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules1():
    """
    Snippet for the saveRules method.

    saveRules with all parameters
    """
    # >SEPARATOR saveRules saveRules with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "id1",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                        "alternatives": False,
                        "context": "search",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:apple",
                        "query": {
                            "remove": [
                                "algolia",
                            ],
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                                {
                                    "type": "replace",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                            ],
                        },
                    },
                    "hide": [
                        {
                            "objectID": "321",
                        },
                    ],
                    "filterPromotes": False,
                    "userData": {
                        "algolia": "aloglia",
                    },
                    "promote": [
                        {
                            "objectID": "abc",
                            "position": 3,
                        },
                        {
                            "objectIDs": [
                                "abc",
                                "def",
                            ],
                            "position": 1,
                        },
                    ],
                },
                "description": "test",
                "enabled": True,
                "validity": [
                    {
                        "from": 1656670273,
                        "until": 1656670277,
                    },
                ],
            },
        ],
        forward_to_replicas=True,
        clear_existing_rules=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules2():
    """
    Snippet for the saveRules method.

    dynamic filtering
    """
    # >SEPARATOR saveRules dynamic filtering
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "toaster",
                "conditions": [
                    {
                        "pattern": "toaster",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "toaster",
                            ],
                        },
                        "filters": "product_type:toaster",
                    },
                },
            },
            {
                "objectID": "cheap",
                "conditions": [
                    {
                        "pattern": "cheap",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "cheap",
                            ],
                        },
                        "filters": "price < 15",
                    },
                },
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_rules3():
    """
    Snippet for the saveRules method.

    enhance search results
    """
    # >SEPARATOR saveRules enhance search results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "country",
                "conditions": [
                    {
                        "pattern": "{facet:country}",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "aroundLatLngViaIP": False,
                    },
                },
            },
            {
                "objectID": "city",
                "conditions": [
                    {
                        "pattern": "{facet:city}",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "aroundLatLngViaIP": False,
                    },
                },
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_synonym():
    """
    Snippet for the saveSynonym method.

    saveSynonym
    """
    # >SEPARATOR saveSynonym default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        synonym_hit={
            "objectID": "id1",
            "type": "synonym",
            "synonyms": [
                "car",
                "vehicule",
                "auto",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_save_synonyms():
    """
    Snippet for the saveSynonyms method.

    saveSynonyms
    """
    # >SEPARATOR saveSynonyms default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.save_synonyms(
        index_name="<YOUR_INDEX_NAME>",
        synonym_hit=[
            {
                "objectID": "id1",
                "type": "synonym",
                "synonyms": [
                    "car",
                    "vehicule",
                    "auto",
                ],
            },
            {
                "objectID": "id2",
                "type": "onewaysynonym",
                "input": "iphone",
                "synonyms": [
                    "ephone",
                    "aphone",
                    "yphone",
                ],
            },
        ],
        forward_to_replicas=True,
        replace_existing_synonyms=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search():
    """
    Snippet for the search method.

    withHitsPerPage
    """
    # >SEPARATOR search withHitsPerPage
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "hitsPerPage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search1():
    """
    Snippet for the search method.

    filterOnly
    """
    # >SEPARATOR search filterOnly
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search2():
    """
    Snippet for the search method.

    filterOr
    """
    # >SEPARATOR search filterOr
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Tom Cruise OR actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search3():
    """
    Snippet for the search method.

    filterNot
    """
    # >SEPARATOR search filterNot
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "NOT actor:Nicolas Cage",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search4():
    """
    Snippet for the search method.

    search for a single hits request with minimal parameters
    """
    # >SEPARATOR search search for a single hits request with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search5():
    """
    Snippet for the search method.

    search with highlight and snippet results
    """
    # >SEPARATOR search search with highlight and snippet results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "vim",
                    "attributesToSnippet": [
                        "*:20",
                    ],
                    "attributesToHighlight": [
                        "*",
                    ],
                    "attributesToRetrieve": [
                        "*",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search6():
    """
    Snippet for the search method.

    retrieveFacets
    """
    # >SEPARATOR search retrieveFacets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "author",
                        "genre",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search7():
    """
    Snippet for the search method.

    retrieveFacetsWildcard
    """
    # >SEPARATOR search retrieveFacetsWildcard
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "*",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search8():
    """
    Snippet for the search method.

    search for a single facet request with minimal parameters
    """
    # >SEPARATOR search search for a single facet request with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "type": "facet",
                    "facet": "editor",
                },
            ],
            "strategy": "stopIfEnoughMatches",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search9():
    """
    Snippet for the search method.

    search for a single hits request with all parameters
    """
    # >SEPARATOR search search for a single hits request with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "myQuery",
                    "hitsPerPage": 50,
                    "type": "default",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search10():
    """
    Snippet for the search method.

    search for a single facet request with all parameters
    """
    # >SEPARATOR search search for a single facet request with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "type": "facet",
                    "facet": "theFacet",
                    "facetQuery": "theFacetQuery",
                    "query": "theQuery",
                    "maxFacetHits": 50,
                },
            ],
            "strategy": "stopIfEnoughMatches",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search11():
    """
    Snippet for the search method.

    search for multiple mixed requests in multiple indices with minimal parameters
    """
    # >SEPARATOR search search for multiple mixed requests in multiple indices with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "type": "facet",
                    "facet": "theFacet",
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "type": "default",
                },
            ],
            "strategy": "stopIfEnoughMatches",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search12():
    """
    Snippet for the search method.

    search for multiple mixed requests in multiple indices with all parameters
    """
    # >SEPARATOR search search for multiple mixed requests in multiple indices with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "type": "facet",
                    "facet": "theFacet",
                    "facetQuery": "theFacetQuery",
                    "query": "theQuery",
                    "maxFacetHits": 50,
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "myQuery",
                    "hitsPerPage": 50,
                    "type": "default",
                },
            ],
            "strategy": "stopIfEnoughMatches",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search13():
    """
    Snippet for the search method.

    search filters accept all of the possible shapes
    """
    # >SEPARATOR search search filters accept all of the possible shapes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "facetFilters": "mySearch:filters",
                    "reRankingApplyFilter": "mySearch:filters",
                    "tagFilters": "mySearch:filters",
                    "numericFilters": "mySearch:filters",
                    "optionalFilters": "mySearch:filters",
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "facetFilters": [
                        "mySearch:filters",
                        [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                    ],
                    "reRankingApplyFilter": [
                        "mySearch:filters",
                        [
                            "mySearch:filters",
                        ],
                    ],
                    "tagFilters": [
                        "mySearch:filters",
                        [
                            "mySearch:filters",
                        ],
                    ],
                    "numericFilters": [
                        "mySearch:filters",
                        [
                            "mySearch:filters",
                        ],
                    ],
                    "optionalFilters": [
                        "mySearch:filters",
                        [
                            "mySearch:filters",
                        ],
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search14():
    """
    Snippet for the search method.

    search filters end to end
    """
    # >SEPARATOR search search filters end to end
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "filters": "editor:'visual studio' OR editor:neovim",
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "facetFilters": [
                        "editor:'visual studio'",
                        "editor:neovim",
                    ],
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "facetFilters": [
                        "editor:'visual studio'",
                        [
                            "editor:neovim",
                        ],
                    ],
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "facetFilters": [
                        "editor:'visual studio'",
                        [
                            "editor:neovim",
                            [
                                "editor:goland",
                            ],
                        ],
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search15():
    """
    Snippet for the search method.

    search with all search parameters
    """
    # >SEPARATOR search search with all search parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search(
        search_method_params={
            "requests": [
                {
                    "advancedSyntax": True,
                    "advancedSyntaxFeatures": [
                        "exactPhrase",
                    ],
                    "allowTyposOnNumericTokens": True,
                    "alternativesAsExact": [
                        "multiWordsSynonym",
                    ],
                    "analytics": True,
                    "analyticsTags": [
                        "",
                    ],
                    "aroundLatLng": "",
                    "aroundLatLngViaIP": True,
                    "aroundPrecision": 0,
                    "aroundRadius": "all",
                    "attributeCriteriaComputedByMinProximity": True,
                    "attributesToHighlight": [
                        "",
                    ],
                    "attributesToRetrieve": [
                        "",
                    ],
                    "attributesToSnippet": [
                        "",
                    ],
                    "clickAnalytics": True,
                    "decompoundQuery": True,
                    "disableExactOnAttributes": [
                        "",
                    ],
                    "disableTypoToleranceOnAttributes": [
                        "",
                    ],
                    "distinct": 0,
                    "enableABTest": True,
                    "enablePersonalization": True,
                    "enableReRanking": True,
                    "enableRules": True,
                    "exactOnSingleWordQuery": "attribute",
                    "facetFilters": [
                        "",
                    ],
                    "facetingAfterDistinct": True,
                    "facets": [
                        "",
                    ],
                    "filters": "",
                    "getRankingInfo": True,
                    "highlightPostTag": "",
                    "highlightPreTag": "",
                    "hitsPerPage": 1,
                    "ignorePlurals": False,
                    "indexName": "<YOUR_INDEX_NAME>",
                    "insideBoundingBox": [
                        [
                            47.3165,
                            4.9665,
                            47.3424,
                            5.0201,
                        ],
                        [
                            40.9234,
                            2.1185,
                            38.643,
                            1.9916,
                        ],
                    ],
                    "insidePolygon": [
                        [
                            47.3165,
                            4.9665,
                            47.3424,
                            5.0201,
                            47.32,
                            4.9,
                        ],
                        [
                            40.9234,
                            2.1185,
                            38.643,
                            1.9916,
                            39.2587,
                            2.0104,
                        ],
                    ],
                    "length": 1,
                    "maxValuesPerFacet": 0,
                    "minProximity": 1,
                    "minWordSizefor1Typo": 0,
                    "minWordSizefor2Typos": 0,
                    "minimumAroundRadius": 1,
                    "naturalLanguages": [
                        "fr",
                    ],
                    "numericFilters": [
                        "",
                    ],
                    "offset": 0,
                    "optionalFilters": [
                        "",
                    ],
                    "optionalWords": [
                        "",
                    ],
                    "page": 0,
                    "percentileComputation": True,
                    "personalizationImpact": 0,
                    "query": "",
                    "queryLanguages": [
                        "fr",
                    ],
                    "queryType": "prefixAll",
                    "ranking": [
                        "",
                    ],
                    "reRankingApplyFilter": [
                        "",
                    ],
                    "relevancyStrictness": 0,
                    "removeStopWords": True,
                    "removeWordsIfNoResults": "allOptional",
                    "renderingContent": {
                        "facetOrdering": {
                            "facets": {
                                "order": [
                                    "a",
                                    "b",
                                ],
                            },
                            "values": {
                                "a": {
                                    "order": [
                                        "b",
                                    ],
                                    "sortRemainingBy": "count",
                                },
                            },
                        },
                    },
                    "replaceSynonymsInHighlight": True,
                    "responseFields": [
                        "",
                    ],
                    "restrictHighlightAndSnippetArrays": True,
                    "restrictSearchableAttributes": [
                        "",
                    ],
                    "ruleContexts": [
                        "",
                    ],
                    "similarQuery": "",
                    "snippetEllipsisText": "",
                    "sortFacetValuesBy": "",
                    "sumOrFiltersScores": True,
                    "synonyms": True,
                    "tagFilters": [
                        "",
                    ],
                    "type": "default",
                    "typoTolerance": "min",
                    "userToken": "",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_dictionary_entries():
    """
    Snippet for the searchDictionaryEntries method.

    get searchDictionaryEntries results with minimal parameters
    """
    # >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_dictionary_entries(
        dictionary_name="stopwords",
        search_dictionary_entries_params={
            "query": "about",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_dictionary_entries1():
    """
    Snippet for the searchDictionaryEntries method.

    get searchDictionaryEntries results with all parameters
    """
    # >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_dictionary_entries(
        dictionary_name="compounds",
        search_dictionary_entries_params={
            "query": "foo",
            "page": 4,
            "hitsPerPage": 2,
            "language": "fr",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_for_facet_values():
    """
    Snippet for the searchForFacetValues method.

    get searchForFacetValues results with minimal parameters
    """
    # >SEPARATOR searchForFacetValues get searchForFacetValues results with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_for_facet_values(
        index_name="<YOUR_INDEX_NAME>",
        facet_name="facetName",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_for_facet_values1():
    """
    Snippet for the searchForFacetValues method.

    get searchForFacetValues results with all parameters
    """
    # >SEPARATOR searchForFacetValues get searchForFacetValues results with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_for_facet_values(
        index_name="<YOUR_INDEX_NAME>",
        facet_name="facetName",
        search_for_facet_values_request={
            "params": "query=foo&facetFilters=['bar']",
            "facetQuery": "foo",
            "maxFacetHits": 42,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_for_facet_values2():
    """
    Snippet for the searchForFacetValues method.

    facetName and facetQuery
    """
    # >SEPARATOR searchForFacetValues facetName and facetQuery
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_for_facet_values(
        index_name="<YOUR_INDEX_NAME>",
        facet_name="author",
        search_for_facet_values_request={
            "facetQuery": "stephen king",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_rules():
    """
    Snippet for the searchRules method.

    searchRules
    """
    # >SEPARATOR searchRules default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_rules(
        index_name="<YOUR_INDEX_NAME>",
        search_rules_params={
            "query": "zorro",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index():
    """
    Snippet for the searchSingleIndex method.

    search with minimal parameters
    """
    # >SEPARATOR searchSingleIndex search with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index1():
    """
    Snippet for the searchSingleIndex method.

    search with special characters in indexName
    """
    # >SEPARATOR searchSingleIndex search with special characters in indexName
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index2():
    """
    Snippet for the searchSingleIndex method.

    search with searchParams
    """
    # >SEPARATOR searchSingleIndex search with searchParams
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "myQuery",
            "facetFilters": [
                "tags:algolia",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index3():
    """
    Snippet for the searchSingleIndex method.

    single search retrieve snippets
    """
    # >SEPARATOR searchSingleIndex single search retrieve snippets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "batman mask of the phantasm",
            "attributesToRetrieve": [
                "*",
            ],
            "attributesToSnippet": [
                "*:20",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index4():
    """
    Snippet for the searchSingleIndex method.

    query
    """
    # >SEPARATOR searchSingleIndex query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "phone",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index5():
    """
    Snippet for the searchSingleIndex method.

    filters
    """
    # >SEPARATOR searchSingleIndex filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "country:US AND price.gross < 2.0",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index6():
    """
    Snippet for the searchSingleIndex method.

    filters boolean
    """
    # >SEPARATOR searchSingleIndex filters boolean
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "is_available:true",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index7():
    """
    Snippet for the searchSingleIndex method.

    distinct
    """
    # >SEPARATOR searchSingleIndex distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index8():
    """
    Snippet for the searchSingleIndex method.

    filtersNumeric
    """
    # >SEPARATOR searchSingleIndex filtersNumeric
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "price < 10",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index9():
    """
    Snippet for the searchSingleIndex method.

    filtersTimestamp
    """
    # >SEPARATOR searchSingleIndex filtersTimestamp
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "NOT date_timestamp:1514764800 TO 1546300799",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index10():
    """
    Snippet for the searchSingleIndex method.

    filtersSumOrFiltersScoresFalse
    """
    # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            "sumOrFiltersScores": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index11():
    """
    Snippet for the searchSingleIndex method.

    filtersSumOrFiltersScoresTrue
    """
    # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            "sumOrFiltersScores": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index12():
    """
    Snippet for the searchSingleIndex method.

    filtersStephenKing
    """
    # >SEPARATOR searchSingleIndex filtersStephenKing
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": 'author:"Stephen King"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index13():
    """
    Snippet for the searchSingleIndex method.

    filtersNotTags
    """
    # >SEPARATOR searchSingleIndex filtersNotTags
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "NOT _tags:non-fiction",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index14():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersList
    """
    # >SEPARATOR searchSingleIndex facetFiltersList
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": [
                "publisher:Penguin",
                [
                    "author:Stephen King",
                    "genre:Horror",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index15():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersBook
    """
    # >SEPARATOR searchSingleIndex facetFiltersBook
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facetFilters": [
                "category:Book",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index16():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersAND
    """
    # >SEPARATOR searchSingleIndex facetFiltersAND
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facetFilters": [
                "category:Book",
                "author:John Doe",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index17():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersOR
    """
    # >SEPARATOR searchSingleIndex facetFiltersOR
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facetFilters": [
                [
                    "category:Book",
                    "author:John Doe",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index18():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersCombined
    """
    # >SEPARATOR searchSingleIndex facetFiltersCombined
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facetFilters": [
                "author:John Doe",
                [
                    "category:Book",
                    "category:Movie",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index19():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersNeg
    """
    # >SEPARATOR searchSingleIndex facetFiltersNeg
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": "category:-Ebook",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index20():
    """
    Snippet for the searchSingleIndex method.

    filtersAndFacetFilters
    """
    # >SEPARATOR searchSingleIndex filtersAndFacetFilters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": '(author:"Stephen King" OR genre:"Horror")',
            "facetFilters": [
                "publisher:Penguin",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index21():
    """
    Snippet for the searchSingleIndex method.

    facet author genre
    """
    # >SEPARATOR searchSingleIndex facet author genre
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facets": [
                "author",
                "genre",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index22():
    """
    Snippet for the searchSingleIndex method.

    facet wildcard
    """
    # >SEPARATOR searchSingleIndex facet wildcard
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facets": [
                "*",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index23():
    """
    Snippet for the searchSingleIndex method.

    maxValuesPerFacet
    """
    # >SEPARATOR searchSingleIndex maxValuesPerFacet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "maxValuesPerFacet": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index24():
    """
    Snippet for the searchSingleIndex method.

    aroundLatLng
    """
    # >SEPARATOR searchSingleIndex aroundLatLng
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLng": "40.71, -74.01",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index25():
    """
    Snippet for the searchSingleIndex method.

    aroundLatLngViaIP
    """
    # >SEPARATOR searchSingleIndex aroundLatLngViaIP
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLngViaIP": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index26():
    """
    Snippet for the searchSingleIndex method.

    aroundRadius
    """
    # >SEPARATOR searchSingleIndex aroundRadius
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "aroundLatLng": "40.71, -74.01",
            "aroundRadius": 1000000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index27():
    """
    Snippet for the searchSingleIndex method.

    insideBoundingBox
    """
    # >SEPARATOR searchSingleIndex insideBoundingBox
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insideBoundingBox": [
                [
                    49.067996905313834,
                    65.73828125,
                    25.905859247243498,
                    128.8046875,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index28():
    """
    Snippet for the searchSingleIndex method.

    insidePolygon
    """
    # >SEPARATOR searchSingleIndex insidePolygon
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insidePolygon": [
                [
                    42.01,
                    -124.31,
                    48.835509470063045,
                    -124.40453125000005,
                    45.01082951668149,
                    -65.95726562500005,
                    31.247243545293433,
                    -81.06578125000004,
                    25.924152577235226,
                    -97.68234374999997,
                    32.300311895879545,
                    -117.54828125,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index29():
    """
    Snippet for the searchSingleIndex method.

    insidePolygon
    """
    # >SEPARATOR searchSingleIndex insidePolygon
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "insidePolygon": [
                [
                    42.01,
                    -124.31,
                    48.835509470063045,
                    -124.40453125000005,
                    45.01082951668149,
                    -65.95726562500005,
                    31.247243545293433,
                    -81.06578125000004,
                    25.924152577235226,
                    -97.68234374999997,
                    32.300311895879545,
                    -117.54828125,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index30():
    """
    Snippet for the searchSingleIndex method.

    optionalFilters
    """
    # >SEPARATOR searchSingleIndex optionalFilters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "can_deliver_quickly:true",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index31():
    """
    Snippet for the searchSingleIndex method.

    optionalFiltersMany
    """
    # >SEPARATOR searchSingleIndex optionalFiltersMany
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "brand:Apple<score=3>",
                "brand:Samsung<score=2>",
                "brand:-Huawei",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index32():
    """
    Snippet for the searchSingleIndex method.

    optionalFiltersSimple
    """
    # >SEPARATOR searchSingleIndex optionalFiltersSimple
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "optionalFilters": [
                "brand:Apple<score=2>",
                "type:tablet",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index33():
    """
    Snippet for the searchSingleIndex method.

    restrictSearchableAttributes
    """
    # >SEPARATOR searchSingleIndex restrictSearchableAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "restrictSearchableAttributes": [
                "title_fr",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index34():
    """
    Snippet for the searchSingleIndex method.

    getRankingInfo
    """
    # >SEPARATOR searchSingleIndex getRankingInfo
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "getRankingInfo": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index35():
    """
    Snippet for the searchSingleIndex method.

    clickAnalytics
    """
    # >SEPARATOR searchSingleIndex clickAnalytics
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "clickAnalytics": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index36():
    """
    Snippet for the searchSingleIndex method.

    clickAnalyticsUserToken
    """
    # >SEPARATOR searchSingleIndex clickAnalyticsUserToken
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "clickAnalytics": True,
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index37():
    """
    Snippet for the searchSingleIndex method.

    enablePersonalization
    """
    # >SEPARATOR searchSingleIndex enablePersonalization
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "enablePersonalization": True,
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index38():
    """
    Snippet for the searchSingleIndex method.

    userToken
    """
    # >SEPARATOR searchSingleIndex userToken
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "userToken": "user-1",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index39():
    """
    Snippet for the searchSingleIndex method.

    userToken1234
    """
    # >SEPARATOR searchSingleIndex userToken1234
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "userToken": "user-1234",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index40():
    """
    Snippet for the searchSingleIndex method.

    analyticsTag
    """
    # >SEPARATOR searchSingleIndex analyticsTag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "analyticsTags": [
                "YOUR_ANALYTICS_TAG",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index41():
    """
    Snippet for the searchSingleIndex method.

    facetFiltersUsers
    """
    # >SEPARATOR searchSingleIndex facetFiltersUsers
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "facetFilters": [
                "user:user42",
                "user:public",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index42():
    """
    Snippet for the searchSingleIndex method.

    buildTheQuery
    """
    # >SEPARATOR searchSingleIndex buildTheQuery
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "filters": "categoryPageId: Men's Clothing",
            "hitsPerPage": 50,
            "analyticsTags": [
                "mens-clothing",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index43():
    """
    Snippet for the searchSingleIndex method.

    attributesToHighlightOverride
    """
    # >SEPARATOR searchSingleIndex attributesToHighlightOverride
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "attributesToHighlight": [
                "title",
                "content",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index44():
    """
    Snippet for the searchSingleIndex method.

    disableTypoToleranceOnAttributes
    """
    # >SEPARATOR searchSingleIndex disableTypoToleranceOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "disableTypoToleranceOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index45():
    """
    Snippet for the searchSingleIndex method.

    search_a_query
    """
    # >SEPARATOR searchSingleIndex search_a_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "shirt",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index46():
    """
    Snippet for the searchSingleIndex method.

    search_everything
    """
    # >SEPARATOR searchSingleIndex search_everything
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index47():
    """
    Snippet for the searchSingleIndex method.

    api_filtering_range_example
    """
    # >SEPARATOR searchSingleIndex api_filtering_range_example
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "books",
            "filters": "price:10 TO 20",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index48():
    """
    Snippet for the searchSingleIndex method.

    search_a_query
    """
    # >SEPARATOR searchSingleIndex search_a_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "",
            "similarQuery": "Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen",
            "filters": "year:1991 TO 2001",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index49():
    """
    Snippet for the searchSingleIndex method.

    override_retrievable_attributes
    """
    # >SEPARATOR searchSingleIndex override_retrievable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "attributesToRetrieve": [
                "title",
                "content",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index50():
    """
    Snippet for the searchSingleIndex method.

    restrict_searchable_attributes
    """
    # >SEPARATOR searchSingleIndex restrict_searchable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "restrictSearchableAttributes": [
                "title",
                "author",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index51():
    """
    Snippet for the searchSingleIndex method.

    override_default_relevancy
    """
    # >SEPARATOR searchSingleIndex override_default_relevancy
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "relevancyStrictness": 70,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index52():
    """
    Snippet for the searchSingleIndex method.

    apply_filters
    """
    # >SEPARATOR searchSingleIndex apply_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": "(category:Book OR category:Ebook) AND _tags:published",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index53():
    """
    Snippet for the searchSingleIndex method.

    apply_all_filters
    """
    # >SEPARATOR searchSingleIndex apply_all_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": 'available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:"John Doe"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index54():
    """
    Snippet for the searchSingleIndex method.

    escape_spaces
    """
    # >SEPARATOR searchSingleIndex escape_spaces
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": 'category:"Books and Comics"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index55():
    """
    Snippet for the searchSingleIndex method.

    escape_keywords
    """
    # >SEPARATOR searchSingleIndex escape_keywords
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": 'keyword:"OR"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index56():
    """
    Snippet for the searchSingleIndex method.

    escape_single_quotes
    """
    # >SEPARATOR searchSingleIndex escape_single_quotes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": 'content:"It\'s a wonderful day"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index57():
    """
    Snippet for the searchSingleIndex method.

    escape_double_quotes
    """
    # >SEPARATOR searchSingleIndex escape_double_quotes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "filters": 'content:"She said "Hello World"',
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index58():
    """
    Snippet for the searchSingleIndex method.

    apply_filters
    """
    # >SEPARATOR searchSingleIndex apply_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "optionalFilters": [
                "category:Book",
                "author:John Doe",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index59():
    """
    Snippet for the searchSingleIndex method.

    apply_negative_filters
    """
    # >SEPARATOR searchSingleIndex apply_negative_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "optionalFilters": [
                "category:Book",
                "author:-John Doe",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index60():
    """
    Snippet for the searchSingleIndex method.

    apply_numeric_filters
    """
    # >SEPARATOR searchSingleIndex apply_numeric_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "numericFilters": [
                "price < 1000",
                [
                    "inStock = 1",
                    "deliveryDate < 1441755506",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index61():
    """
    Snippet for the searchSingleIndex method.

    apply_tag_filters
    """
    # >SEPARATOR searchSingleIndex apply_tag_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "tagFilters": [
                "SciFi",
                [
                    "Book",
                    "Movie",
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index62():
    """
    Snippet for the searchSingleIndex method.

    apply_filters
    """
    # >SEPARATOR searchSingleIndex apply_filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "sumOrFiltersScores": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index63():
    """
    Snippet for the searchSingleIndex method.

    facets_all
    """
    # >SEPARATOR searchSingleIndex facets_all
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facets": [
                "*",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index64():
    """
    Snippet for the searchSingleIndex method.

    retrieve_only_some_facets
    """
    # >SEPARATOR searchSingleIndex retrieve_only_some_facets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facets": [
                "category",
                "author",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index65():
    """
    Snippet for the searchSingleIndex method.

    override_default_max_values_per_facet
    """
    # >SEPARATOR searchSingleIndex override_default_max_values_per_facet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "maxValuesPerFacet": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index66():
    """
    Snippet for the searchSingleIndex method.

    enable_faceting_after_distinct
    """
    # >SEPARATOR searchSingleIndex enable_faceting_after_distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "facetingAfterDistinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index67():
    """
    Snippet for the searchSingleIndex method.

    sort_facet_values_alphabetically
    """
    # >SEPARATOR searchSingleIndex sort_facet_values_alphabetically
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "sortFacetValuesBy": "count",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index68():
    """
    Snippet for the searchSingleIndex method.

    override_attributes_to_snippet
    """
    # >SEPARATOR searchSingleIndex override_attributes_to_snippet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "attributesToSnippet": [
                "title",
                "content:80",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index69():
    """
    Snippet for the searchSingleIndex method.

    override_default_highlight_pre_tag
    """
    # >SEPARATOR searchSingleIndex override_default_highlight_pre_tag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "highlightPreTag": "<strong>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index70():
    """
    Snippet for the searchSingleIndex method.

    override_default_highlight_post_tag
    """
    # >SEPARATOR searchSingleIndex override_default_highlight_post_tag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "highlightPostTag": "</strong>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index71():
    """
    Snippet for the searchSingleIndex method.

    override_default_snippet_ellipsis_text
    """
    # >SEPARATOR searchSingleIndex override_default_snippet_ellipsis_text
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "snippetEllipsisText": "",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index72():
    """
    Snippet for the searchSingleIndex method.

    enable_restrict_highlight_and_snippet_arrays
    """
    # >SEPARATOR searchSingleIndex enable_restrict_highlight_and_snippet_arrays
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "restrictHighlightAndSnippetArrays": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index73():
    """
    Snippet for the searchSingleIndex method.

    access_page
    """
    # >SEPARATOR searchSingleIndex access_page
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "page": 0,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index74():
    """
    Snippet for the searchSingleIndex method.

    override_default_hits_per_page
    """
    # >SEPARATOR searchSingleIndex override_default_hits_per_page
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "hitsPerPage": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index75():
    """
    Snippet for the searchSingleIndex method.

    get_nth_hit
    """
    # >SEPARATOR searchSingleIndex get_nth_hit
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "offset": 4,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index76():
    """
    Snippet for the searchSingleIndex method.

    get_n_results
    """
    # >SEPARATOR searchSingleIndex get_n_results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "length": 4,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index77():
    """
    Snippet for the searchSingleIndex method.

    override_default_min_word_size_for_one_typo
    """
    # >SEPARATOR searchSingleIndex override_default_min_word_size_for_one_typo
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "minWordSizefor1Typo": 2,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index78():
    """
    Snippet for the searchSingleIndex method.

    override_default_min_word_size_for_two_typos
    """
    # >SEPARATOR searchSingleIndex override_default_min_word_size_for_two_typos
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "minWordSizefor2Typos": 2,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index79():
    """
    Snippet for the searchSingleIndex method.

    override_default_typo_tolerance_mode
    """
    # >SEPARATOR searchSingleIndex override_default_typo_tolerance_mode
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "typoTolerance": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index80():
    """
    Snippet for the searchSingleIndex method.

    disable_typos_on_numeric_tokens_at_search_time
    """
    # >SEPARATOR searchSingleIndex disable_typos_on_numeric_tokens_at_search_time
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "allowTyposOnNumericTokens": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index81():
    """
    Snippet for the searchSingleIndex method.

    search_around_a_position
    """
    # >SEPARATOR searchSingleIndex search_around_a_position
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundLatLng": "40.71, -74.01",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index82():
    """
    Snippet for the searchSingleIndex method.

    search_around_server_ip
    """
    # >SEPARATOR searchSingleIndex search_around_server_ip
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundLatLngViaIP": True,
        },
        request_options={
            "headers": loads(
                """{"x-forwarded-for":"94.228.178.246 // should be replaced with the actual IP you would like to search around"}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index83():
    """
    Snippet for the searchSingleIndex method.

    set_around_radius
    """
    # >SEPARATOR searchSingleIndex set_around_radius
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundRadius": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index84():
    """
    Snippet for the searchSingleIndex method.

    disable_automatic_radius
    """
    # >SEPARATOR searchSingleIndex disable_automatic_radius
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundRadius": "all",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index85():
    """
    Snippet for the searchSingleIndex method.

    set_geo_search_precision
    """
    # >SEPARATOR searchSingleIndex set_geo_search_precision
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundPrecision": 100,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index86():
    """
    Snippet for the searchSingleIndex method.

    set_geo_search_precision_non_linear
    """
    # >SEPARATOR searchSingleIndex set_geo_search_precision_non_linear
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "aroundPrecision": [
                {
                    "from": 0,
                    "value": 25,
                },
                {
                    "from": 2000,
                    "value": 1000,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index87():
    """
    Snippet for the searchSingleIndex method.

    set_minimum_geo_search_radius
    """
    # >SEPARATOR searchSingleIndex set_minimum_geo_search_radius
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "minimumAroundRadius": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index88():
    """
    Snippet for the searchSingleIndex method.

    search_inside_rectangular_area
    """
    # >SEPARATOR searchSingleIndex search_inside_rectangular_area
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "insideBoundingBox": [
                [
                    46.650828100116044,
                    7.123046875,
                    45.17210966999772,
                    1.009765625,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index89():
    """
    Snippet for the searchSingleIndex method.

    search_inside_multiple_rectangular_areas
    """
    # >SEPARATOR searchSingleIndex search_inside_multiple_rectangular_areas
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "insideBoundingBox": [
                [
                    46.650828100116044,
                    7.123046875,
                    45.17210966999772,
                    1.009765625,
                ],
                [
                    49.62625916704081,
                    4.6181640625,
                    47.715070300900194,
                    0.482421875,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index90():
    """
    Snippet for the searchSingleIndex method.

    search_inside_polygon_area
    """
    # >SEPARATOR searchSingleIndex search_inside_polygon_area
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "insidePolygon": [
                [
                    46.650828100116044,
                    7.123046875,
                    45.17210966999772,
                    1.009765625,
                    49.62625916704081,
                    4.6181640625,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index91():
    """
    Snippet for the searchSingleIndex method.

    search_inside_multiple_polygon_areas
    """
    # >SEPARATOR searchSingleIndex search_inside_multiple_polygon_areas
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "insidePolygon": [
                [
                    46.650828100116044,
                    7.123046875,
                    45.17210966999772,
                    1.009765625,
                    49.62625916704081,
                    4.6181640625,
                ],
                [
                    49.62625916704081,
                    4.6181640625,
                    47.715070300900194,
                    0.482421875,
                    45.17210966999772,
                    1.009765625,
                    50.62626704081,
                    4.6181640625,
                ],
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index92():
    """
    Snippet for the searchSingleIndex method.

    set_querylanguages_override
    """
    # >SEPARATOR searchSingleIndex set_querylanguages_override
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "ignorePlurals": [
                "ca",
                "es",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index93():
    """
    Snippet for the searchSingleIndex method.

    set_querylanguages_override
    """
    # >SEPARATOR searchSingleIndex set_querylanguages_override
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "removeStopWords": [
                "ca",
                "es",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index94():
    """
    Snippet for the searchSingleIndex method.

    set_querylanguages_override
    """
    # >SEPARATOR searchSingleIndex set_querylanguages_override
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "removeStopWords": [
                "ca",
                "es",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index95():
    """
    Snippet for the searchSingleIndex method.

    set_querylanguages_with_japanese_query
    """
    # >SEPARATOR searchSingleIndex set_querylanguages_with_japanese_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "queryLanguages": [
                "ja",
                "en",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index96():
    """
    Snippet for the searchSingleIndex method.

    set_natural_languages
    """
    # >SEPARATOR searchSingleIndex set_natural_languages
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "",
            "naturalLanguages": [
                "fr",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index97():
    """
    Snippet for the searchSingleIndex method.

    override_natural_languages_with_query
    """
    # >SEPARATOR searchSingleIndex override_natural_languages_with_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "",
            "naturalLanguages": [
                "fr",
            ],
            "removeWordsIfNoResults": "firstWords",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index98():
    """
    Snippet for the searchSingleIndex method.

    enable_decompound_query_search_time
    """
    # >SEPARATOR searchSingleIndex enable_decompound_query_search_time
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "decompoundQuery": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index99():
    """
    Snippet for the searchSingleIndex method.

    enable_rules_search_time
    """
    # >SEPARATOR searchSingleIndex enable_rules_search_time
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enableRules": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index100():
    """
    Snippet for the searchSingleIndex method.

    set_rule_contexts
    """
    # >SEPARATOR searchSingleIndex set_rule_contexts
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "ruleContexts": [
                "front_end",
                "website2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index101():
    """
    Snippet for the searchSingleIndex method.

    enable_personalization
    """
    # >SEPARATOR searchSingleIndex enable_personalization
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enablePersonalization": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index102():
    """
    Snippet for the searchSingleIndex method.

    enable_personalization_with_user_token
    """
    # >SEPARATOR searchSingleIndex enable_personalization_with_user_token
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enablePersonalization": True,
            "userToken": "123456",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index103():
    """
    Snippet for the searchSingleIndex method.

    personalization_impact
    """
    # >SEPARATOR searchSingleIndex personalization_impact
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "personalizationImpact": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index104():
    """
    Snippet for the searchSingleIndex method.

    set_user_token
    """
    # >SEPARATOR searchSingleIndex set_user_token
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "userToken": "123456",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index105():
    """
    Snippet for the searchSingleIndex method.

    set_user_token_with_personalization
    """
    # >SEPARATOR searchSingleIndex set_user_token_with_personalization
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enablePersonalization": True,
            "userToken": "123456",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index106():
    """
    Snippet for the searchSingleIndex method.

    override_default_query_type
    """
    # >SEPARATOR searchSingleIndex override_default_query_type
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "queryType": "prefixAll",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index107():
    """
    Snippet for the searchSingleIndex method.

    override_default_remove_words_if_no_results
    """
    # >SEPARATOR searchSingleIndex override_default_remove_words_if_no_results
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "removeWordsIfNoResults": "lastWords",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index108():
    """
    Snippet for the searchSingleIndex method.

    enable_advanced_syntax_search_time
    """
    # >SEPARATOR searchSingleIndex enable_advanced_syntax_search_time
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "advancedSyntax": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index109():
    """
    Snippet for the searchSingleIndex method.

    overide_default_optional_words
    """
    # >SEPARATOR searchSingleIndex overide_default_optional_words
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "optionalWords": [
                "toyota",
                "2020 2021",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index110():
    """
    Snippet for the searchSingleIndex method.

    disabling_exact_for_some_attributes_search_time
    """
    # >SEPARATOR searchSingleIndex disabling_exact_for_some_attributes_search_time
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "disableExactOnAttributes": [
                "description",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index111():
    """
    Snippet for the searchSingleIndex method.

    override_default_exact_single_word_query
    """
    # >SEPARATOR searchSingleIndex override_default_exact_single_word_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "exactOnSingleWordQuery": "none",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index112():
    """
    Snippet for the searchSingleIndex method.

    override_default_aternative_as_exact
    """
    # >SEPARATOR searchSingleIndex override_default_aternative_as_exact
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "alternativesAsExact": [
                "multiWordsSynonym",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index113():
    """
    Snippet for the searchSingleIndex method.

    enable_advanced_syntax_exact_phrase
    """
    # >SEPARATOR searchSingleIndex enable_advanced_syntax_exact_phrase
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "advancedSyntax": True,
            "advancedSyntaxFeatures": [
                "exactPhrase",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index114():
    """
    Snippet for the searchSingleIndex method.

    enable_advanced_syntax_exclude_words
    """
    # >SEPARATOR searchSingleIndex enable_advanced_syntax_exclude_words
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "advancedSyntax": True,
            "advancedSyntaxFeatures": [
                "excludeWords",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index115():
    """
    Snippet for the searchSingleIndex method.

    override_distinct
    """
    # >SEPARATOR searchSingleIndex override_distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "distinct": 0,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index116():
    """
    Snippet for the searchSingleIndex method.

    get_ranking_info
    """
    # >SEPARATOR searchSingleIndex get_ranking_info
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "getRankingInfo": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index117():
    """
    Snippet for the searchSingleIndex method.

    disable_click_analytics
    """
    # >SEPARATOR searchSingleIndex disable_click_analytics
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "clickAnalytics": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index118():
    """
    Snippet for the searchSingleIndex method.

    enable_click_analytics
    """
    # >SEPARATOR searchSingleIndex enable_click_analytics
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "clickAnalytics": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index119():
    """
    Snippet for the searchSingleIndex method.

    disable_analytics
    """
    # >SEPARATOR searchSingleIndex disable_analytics
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "analytics": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index120():
    """
    Snippet for the searchSingleIndex method.

    add_analytics_tags
    """
    # >SEPARATOR searchSingleIndex add_analytics_tags
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "analyticsTags": [
                "front_end",
                "website2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index121():
    """
    Snippet for the searchSingleIndex method.

    disable_synonyms
    """
    # >SEPARATOR searchSingleIndex disable_synonyms
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "synonyms": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index122():
    """
    Snippet for the searchSingleIndex method.

    override_replace_synonyms_in_highlights
    """
    # >SEPARATOR searchSingleIndex override_replace_synonyms_in_highlights
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "replaceSynonymsInHighlight": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index123():
    """
    Snippet for the searchSingleIndex method.

    override_min_proximity
    """
    # >SEPARATOR searchSingleIndex override_min_proximity
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "minProximity": 2,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index124():
    """
    Snippet for the searchSingleIndex method.

    override_default_field
    """
    # >SEPARATOR searchSingleIndex override_default_field
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "responseFields": [
                "hits",
                "facets",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index125():
    """
    Snippet for the searchSingleIndex method.

    override_percentile_computation
    """
    # >SEPARATOR searchSingleIndex override_percentile_computation
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "percentileComputation": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index126():
    """
    Snippet for the searchSingleIndex method.

    set_ab_test
    """
    # >SEPARATOR searchSingleIndex set_ab_test
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enableABTest": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index127():
    """
    Snippet for the searchSingleIndex method.

    set_enable_re_ranking
    """
    # >SEPARATOR searchSingleIndex set_enable_re_ranking
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
            "enableReRanking": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_single_index128():
    """
    Snippet for the searchSingleIndex method.

    with algolia user id
    """
    # >SEPARATOR searchSingleIndex with algolia user id
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
        search_params={
            "query": "query",
        },
        request_options={
            "headers": loads("""{"X-Algolia-User-ID":"user1234"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_synonyms():
    """
    Snippet for the searchSynonyms method.

    searchSynonyms with minimal parameters
    """
    # >SEPARATOR searchSynonyms searchSynonyms with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_synonyms1():
    """
    Snippet for the searchSynonyms method.

    searchSynonyms with all parameters
    """
    # >SEPARATOR searchSynonyms searchSynonyms with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_synonyms(
        index_name="<YOUR_INDEX_NAME>",
        search_synonyms_params={
            "query": "myQuery",
            "type": "altcorrection1",
            "page": 10,
            "hitsPerPage": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_user_ids():
    """
    Snippet for the searchUserIds method.

    searchUserIds
    """
    # >SEPARATOR searchUserIds default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_user_ids(
        search_user_ids_params={
            "query": "test",
            "clusterName": "theClusterName",
            "page": 5,
            "hitsPerPage": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<


def snippet_for_set_dictionary_settings():
    """
    Snippet for the setDictionarySettings method.

    get setDictionarySettings results with minimal parameters
    """
    # >SEPARATOR setDictionarySettings get setDictionarySettings results with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_dictionary_settings(
        dictionary_settings_params={
            "disableStandardEntries": {
                "plurals": {
                    "fr": False,
                    "en": False,
                    "ru": True,
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_dictionary_settings1():
    """
    Snippet for the setDictionarySettings method.

    get setDictionarySettings results with all parameters
    """
    # >SEPARATOR setDictionarySettings get setDictionarySettings results with all parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_dictionary_settings(
        dictionary_settings_params={
            "disableStandardEntries": {
                "plurals": {
                    "fr": False,
                    "en": False,
                    "ru": True,
                },
                "stopwords": {
                    "fr": False,
                },
                "compounds": {
                    "ru": True,
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings():
    """
    Snippet for the setSettings method.

    minimal parameters
    """
    # >SEPARATOR setSettings minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "paginationLimitedTo": 10,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings1():
    """
    Snippet for the setSettings method.

    boolean typoTolerance
    """
    # >SEPARATOR setSettings boolean typoTolerance
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "typoTolerance": True,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings2():
    """
    Snippet for the setSettings method.

    enum typoTolerance
    """
    # >SEPARATOR setSettings enum typoTolerance
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "typoTolerance": "min",
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings3():
    """
    Snippet for the setSettings method.

    ignorePlurals
    """
    # >SEPARATOR setSettings ignorePlurals
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ignorePlurals": True,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings4():
    """
    Snippet for the setSettings method.

    list of string ignorePlurals
    """
    # >SEPARATOR setSettings list of string ignorePlurals
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ignorePlurals": [
                "fr",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings5():
    """
    Snippet for the setSettings method.

    removeStopWords boolean
    """
    # >SEPARATOR setSettings removeStopWords boolean
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "removeStopWords": True,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings6():
    """
    Snippet for the setSettings method.

    removeStopWords list of string
    """
    # >SEPARATOR setSettings removeStopWords list of string
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "removeStopWords": [
                "fr",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings7():
    """
    Snippet for the setSettings method.

    boolean distinct
    """
    # >SEPARATOR setSettings boolean distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "distinct": True,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings8():
    """
    Snippet for the setSettings method.

    integer distinct
    """
    # >SEPARATOR setSettings integer distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "distinct": 1,
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings9():
    """
    Snippet for the setSettings method.

    distinct company
    """
    # >SEPARATOR setSettings distinct company
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "company",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings10():
    """
    Snippet for the setSettings method.

    distinct design
    """
    # >SEPARATOR setSettings distinct design
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "design",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings11():
    """
    Snippet for the setSettings method.

    distinct true
    """
    # >SEPARATOR setSettings distinct true
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings12():
    """
    Snippet for the setSettings method.

    distinct section
    """
    # >SEPARATOR setSettings distinct section
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "section",
            "distinct": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings13():
    """
    Snippet for the setSettings method.

    attributesForFaceting allergens
    """
    # >SEPARATOR setSettings attributesForFaceting allergens
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "allergens",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings14():
    """
    Snippet for the setSettings method.

    api_attributes_for_faceting
    """
    # >SEPARATOR setSettings api_attributes_for_faceting
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "genre",
                "author",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings15():
    """
    Snippet for the setSettings method.

    api_attributes_for_faceting_searchable
    """
    # >SEPARATOR setSettings api_attributes_for_faceting_searchable
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "genre",
                "searchable(author)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings16():
    """
    Snippet for the setSettings method.

    api_attributes_for_filter_only
    """
    # >SEPARATOR setSettings api_attributes_for_filter_only
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "filterOnly(genre)",
                "author",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings17():
    """
    Snippet for the setSettings method.

    attributesForFaceting categoryPageId
    """
    # >SEPARATOR setSettings attributesForFaceting categoryPageId
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "searchable(categoryPageId)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings18():
    """
    Snippet for the setSettings method.

    unretrievableAttributes
    """
    # >SEPARATOR setSettings unretrievableAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "unretrievableAttributes": [
                "visible_by",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings19():
    """
    Snippet for the setSettings method.

    attributesForFaceting user restricted data
    """
    # >SEPARATOR setSettings attributesForFaceting user restricted data
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "filterOnly(visible_by)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings20():
    """
    Snippet for the setSettings method.

    attributesForFaceting optional filters
    """
    # >SEPARATOR setSettings attributesForFaceting optional filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "can_deliver_quickly",
                "restaurant",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings21():
    """
    Snippet for the setSettings method.

    attributesForFaceting redirect index
    """
    # >SEPARATOR setSettings attributesForFaceting redirect index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "query_terms",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings22():
    """
    Snippet for the setSettings method.

    attributesForFaceting multiple consequences
    """
    # >SEPARATOR setSettings attributesForFaceting multiple consequences
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "director",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings23():
    """
    Snippet for the setSettings method.

    attributesForFaceting in-depth optional filters
    """
    # >SEPARATOR setSettings attributesForFaceting in-depth optional filters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "filterOnly(brand)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings24():
    """
    Snippet for the setSettings method.

    mode neuralSearch
    """
    # >SEPARATOR setSettings mode neuralSearch
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "neuralSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings25():
    """
    Snippet for the setSettings method.

    mode keywordSearch
    """
    # >SEPARATOR setSettings mode keywordSearch
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "keywordSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings26():
    """
    Snippet for the setSettings method.

    searchableAttributes same priority
    """
    # >SEPARATOR setSettings searchableAttributes same priority
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title,comments",
                "ingredients",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings27():
    """
    Snippet for the setSettings method.

    searchableAttributes higher priority
    """
    # >SEPARATOR setSettings searchableAttributes higher priority
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title",
                "ingredients",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings28():
    """
    Snippet for the setSettings method.

    customRanking retweets
    """
    # >SEPARATOR setSettings customRanking retweets
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(retweets)",
                "desc(likes)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings29():
    """
    Snippet for the setSettings method.

    customRanking boosted
    """
    # >SEPARATOR setSettings customRanking boosted
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(boosted)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings30():
    """
    Snippet for the setSettings method.

    customRanking pageviews
    """
    # >SEPARATOR setSettings customRanking pageviews
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(pageviews)",
                "desc(comments)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings31():
    """
    Snippet for the setSettings method.

    customRanking applying search parameters for a specific query
    """
    # >SEPARATOR setSettings customRanking applying search parameters for a specific query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(nb_airline_liaisons)",
            ],
            "attributesForFaceting": [
                "city, country",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings32():
    """
    Snippet for the setSettings method.

    customRanking rounded pageviews
    """
    # >SEPARATOR setSettings customRanking rounded pageviews
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(rounded_pageviews)",
                "desc(comments)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings33():
    """
    Snippet for the setSettings method.

    customRanking price
    """
    # >SEPARATOR setSettings customRanking price
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(price)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings34():
    """
    Snippet for the setSettings method.

    ranking exhaustive
    """
    # >SEPARATOR setSettings ranking exhaustive
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "desc(price)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings35():
    """
    Snippet for the setSettings method.

    ranking standard replica
    """
    # >SEPARATOR setSettings ranking standard replica
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "desc(post_date_timestamp)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings36():
    """
    Snippet for the setSettings method.

    ranking virtual replica
    """
    # >SEPARATOR setSettings ranking virtual replica
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(post_date_timestamp)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings37():
    """
    Snippet for the setSettings method.

    customRanking and ranking sort alphabetically
    """
    # >SEPARATOR setSettings customRanking and ranking sort alphabetically
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "asc(textual_attribute)",
            ],
            "ranking": [
                "custom",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings38():
    """
    Snippet for the setSettings method.

    relevancyStrictness
    """
    # >SEPARATOR setSettings relevancyStrictness
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "asc(textual_attribute)",
            ],
            "relevancyStrictness": 0,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings39():
    """
    Snippet for the setSettings method.

    create replica index
    """
    # >SEPARATOR setSettings create replica index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "products_price_desc",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings40():
    """
    Snippet for the setSettings method.

    create replica index articles
    """
    # >SEPARATOR setSettings create replica index articles
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "articles_date_desc",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings41():
    """
    Snippet for the setSettings method.

    create virtual replica index
    """
    # >SEPARATOR setSettings create virtual replica index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "virtual(products_price_desc)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings42():
    """
    Snippet for the setSettings method.

    unlink replica index
    """
    # >SEPARATOR setSettings unlink replica index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings43():
    """
    Snippet for the setSettings method.

    forwardToReplicas
    """
    # >SEPARATOR setSettings forwardToReplicas
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "description",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings44():
    """
    Snippet for the setSettings method.

    maxValuesPerFacet
    """
    # >SEPARATOR setSettings maxValuesPerFacet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxValuesPerFacet": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings45():
    """
    Snippet for the setSettings method.

    maxFacetHits
    """
    # >SEPARATOR setSettings maxFacetHits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxFacetHits": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings46():
    """
    Snippet for the setSettings method.

    attributesForFaceting complex
    """
    # >SEPARATOR setSettings attributesForFaceting complex
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "actor",
                "filterOnly(category)",
                "searchable(publisher)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings47():
    """
    Snippet for the setSettings method.

    ranking closest dates
    """
    # >SEPARATOR setSettings ranking closest dates
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "asc(date_timestamp)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings48():
    """
    Snippet for the setSettings method.

    searchableAttributes item variation
    """
    # >SEPARATOR setSettings searchableAttributes item variation
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "design",
                "type",
                "color",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings49():
    """
    Snippet for the setSettings method.

    searchableAttributes around location
    """
    # >SEPARATOR setSettings searchableAttributes around location
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "country",
                "code",
                "iata_code",
            ],
            "customRanking": [
                "desc(links_count)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings50():
    """
    Snippet for the setSettings method.

    attributesToHighlight
    """
    # >SEPARATOR setSettings attributesToHighlight
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToHighlight": [
                "author",
                "title",
                "content",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings51():
    """
    Snippet for the setSettings method.

    attributesToHighlightStar
    """
    # >SEPARATOR setSettings attributesToHighlightStar
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToHighlight": [
                "*",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings52():
    """
    Snippet for the setSettings method.

    everything
    """
    # >SEPARATOR setSettings everything
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "advancedSyntax": True,
            "advancedSyntaxFeatures": [
                "exactPhrase",
            ],
            "allowCompressionOfIntegerArray": True,
            "allowTyposOnNumericTokens": True,
            "alternativesAsExact": [
                "singleWordSynonym",
            ],
            "attributeCriteriaComputedByMinProximity": True,
            "attributeForDistinct": "test",
            "attributesForFaceting": [
                "algolia",
            ],
            "attributesToHighlight": [
                "algolia",
            ],
            "attributesToRetrieve": [
                "algolia",
            ],
            "attributesToSnippet": [
                "algolia",
            ],
            "attributesToTransliterate": [
                "algolia",
            ],
            "camelCaseAttributes": [
                "algolia",
            ],
            "customNormalization": {
                "algolia": {
                    "aloglia": "aglolia",
                },
            },
            "customRanking": [
                "algolia",
            ],
            "decompoundQuery": False,
            "decompoundedAttributes": {
                "algolia": "aloglia",
            },
            "disableExactOnAttributes": [
                "algolia",
            ],
            "disablePrefixOnAttributes": [
                "algolia",
            ],
            "disableTypoToleranceOnAttributes": [
                "algolia",
            ],
            "disableTypoToleranceOnWords": [
                "algolia",
            ],
            "distinct": 3,
            "enablePersonalization": True,
            "enableReRanking": False,
            "enableRules": True,
            "exactOnSingleWordQuery": "attribute",
            "highlightPreTag": "<span>",
            "highlightPostTag": "</span>",
            "hitsPerPage": 10,
            "ignorePlurals": False,
            "indexLanguages": [
                "fr",
            ],
            "keepDiacriticsOnCharacters": "abc",
            "maxFacetHits": 20,
            "maxValuesPerFacet": 30,
            "minProximity": 6,
            "minWordSizefor1Typo": 5,
            "minWordSizefor2Typos": 11,
            "mode": "neuralSearch",
            "numericAttributesForFiltering": [
                "algolia",
            ],
            "optionalWords": [
                "myspace",
            ],
            "paginationLimitedTo": 0,
            "queryLanguages": [
                "fr",
            ],
            "queryType": "prefixLast",
            "ranking": [
                "geo",
            ],
            "reRankingApplyFilter": "mySearch:filters",
            "relevancyStrictness": 10,
            "removeStopWords": False,
            "removeWordsIfNoResults": "lastWords",
            "renderingContent": {
                "facetOrdering": {
                    "facets": {
                        "order": [
                            "a",
                            "b",
                        ],
                    },
                    "values": {
                        "a": {
                            "order": [
                                "b",
                            ],
                            "sortRemainingBy": "count",
                        },
                    },
                },
            },
            "replaceSynonymsInHighlight": True,
            "replicas": [
                "",
            ],
            "responseFields": [
                "algolia",
            ],
            "restrictHighlightAndSnippetArrays": True,
            "searchableAttributes": [
                "foo",
            ],
            "semanticSearch": {
                "eventSources": [
                    "foo",
                ],
            },
            "separatorsToIndex": "bar",
            "snippetEllipsisText": "---",
            "sortFacetValuesBy": "date",
            "typoTolerance": False,
            "unretrievableAttributes": [
                "foo",
            ],
            "userData": {
                "user": "data",
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings53():
    """
    Snippet for the setSettings method.

    searchableAttributesWithCustomRankingsAndAttributesForFaceting
    """
    # >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "brand",
                "name",
                "categories",
                "unordered(description)",
            ],
            "customRanking": [
                "desc(popularity)",
            ],
            "attributesForFaceting": [
                "searchable(brand)",
                "type",
                "categories",
                "price",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings54():
    """
    Snippet for the setSettings method.

    searchableAttributesOrdering
    """
    # >SEPARATOR setSettings searchableAttributesOrdering
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "unordered(title)",
                "cast",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings55():
    """
    Snippet for the setSettings method.

    searchableAttributesProductReferenceSuffixes
    """
    # >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "name",
                "product_reference",
                "product_reference_suffixes",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings56():
    """
    Snippet for the setSettings method.

    queryLanguageAndIgnorePlurals
    """
    # >SEPARATOR setSettings queryLanguageAndIgnorePlurals
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryLanguages": [
                "en",
            ],
            "ignorePlurals": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings57():
    """
    Snippet for the setSettings method.

    searchableAttributesInMovies
    """
    # >SEPARATOR setSettings searchableAttributesInMovies
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title_eng",
                "title_fr",
                "title_es",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings58():
    """
    Snippet for the setSettings method.

    disablePrefixOnAttributes
    """
    # >SEPARATOR setSettings disablePrefixOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disablePrefixOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings59():
    """
    Snippet for the setSettings method.

    disableTypoToleranceOnAttributes
    """
    # >SEPARATOR setSettings disableTypoToleranceOnAttributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disableTypoToleranceOnAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings60():
    """
    Snippet for the setSettings method.

    searchableAttributesSimpleExample
    """
    # >SEPARATOR setSettings searchableAttributesSimpleExample
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "serial_number",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings61():
    """
    Snippet for the setSettings method.

    searchableAttributesSimpleExampleAlt
    """
    # >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "serial_number",
                "serial_number_suffixes",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings62():
    """
    Snippet for the setSettings method.

    set_searchable_attributes
    """
    # >SEPARATOR setSettings set_searchable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "searchableAttributes": [
                "title,alternative_title",
                "author",
                "unordered(text)",
                "emails.personal",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings63():
    """
    Snippet for the setSettings method.

    set_searchable_attributes
    """
    # >SEPARATOR setSettings set_searchable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "author",
                "filterOnly(isbn)",
                "searchable(edition)",
                "afterDistinct(category)",
                "afterDistinct(searchable(publisher))",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings64():
    """
    Snippet for the setSettings method.

    unretrievable_attributes
    """
    # >SEPARATOR setSettings unretrievable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "unretrievableAttributes": [
                "total_number_of_sales",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings65():
    """
    Snippet for the setSettings method.

    set_retrievable_attributes
    """
    # >SEPARATOR setSettings set_retrievable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToRetrieve": [
                "author",
                "title",
                "content",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings66():
    """
    Snippet for the setSettings method.

    set_all_attributes_as_retrievable
    """
    # >SEPARATOR setSettings set_all_attributes_as_retrievable
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToRetrieve": [
                "*",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings67():
    """
    Snippet for the setSettings method.

    specify_attributes_not_to_retrieve
    """
    # >SEPARATOR setSettings specify_attributes_not_to_retrieve
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToRetrieve": [
                "*",
                "-SKU",
                "-internal_desc",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings68():
    """
    Snippet for the setSettings method.

    neural_search
    """
    # >SEPARATOR setSettings neural_search
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "neuralSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings69():
    """
    Snippet for the setSettings method.

    keyword_search
    """
    # >SEPARATOR setSettings keyword_search
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "mode": "keywordSearch",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings70():
    """
    Snippet for the setSettings method.

    set_default_ranking
    """
    # >SEPARATOR setSettings set_default_ranking
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "typo",
                "geo",
                "words",
                "filters",
                "attribute",
                "proximity",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings71():
    """
    Snippet for the setSettings method.

    set_ranking_by_attribute_asc
    """
    # >SEPARATOR setSettings set_ranking_by_attribute_asc
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "asc(price)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings72():
    """
    Snippet for the setSettings method.

    set_ranking_by_attribute_desc
    """
    # >SEPARATOR setSettings set_ranking_by_attribute_desc
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "ranking": [
                "desc(price)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings73():
    """
    Snippet for the setSettings method.

    restrict_searchable_attributes
    """
    # >SEPARATOR setSettings restrict_searchable_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customRanking": [
                "desc(popularity)",
                "asc(price)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings74():
    """
    Snippet for the setSettings method.

    set_default_relevancy
    """
    # >SEPARATOR setSettings set_default_relevancy
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "relevancyStrictness": 90,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings75():
    """
    Snippet for the setSettings method.

    set_replicas
    """
    # >SEPARATOR setSettings set_replicas
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replicas": [
                "name_of_replica_index1",
                "name_of_replica_index2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings76():
    """
    Snippet for the setSettings method.

    set_default_max_values_per_facet
    """
    # >SEPARATOR setSettings set_default_max_values_per_facet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxValuesPerFacet": 100,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings77():
    """
    Snippet for the setSettings method.

    set_default_sort_facet_values_by
    """
    # >SEPARATOR setSettings set_default_sort_facet_values_by
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "sortFacetValuesBy": "alpha",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings78():
    """
    Snippet for the setSettings method.

    set_attributes_to_snippet
    """
    # >SEPARATOR setSettings set_attributes_to_snippet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToSnippet": [
                "content:80",
                "description",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings79():
    """
    Snippet for the setSettings method.

    set_all_attributes_to_snippet
    """
    # >SEPARATOR setSettings set_all_attributes_to_snippet
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesToSnippet": [
                "*:80",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings80():
    """
    Snippet for the setSettings method.

    set_default_highlight_pre_tag
    """
    # >SEPARATOR setSettings set_default_highlight_pre_tag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "highlightPreTag": "<em>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings81():
    """
    Snippet for the setSettings method.

    set_default_highlight_post_tag
    """
    # >SEPARATOR setSettings set_default_highlight_post_tag
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "highlightPostTag": "</em>",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings82():
    """
    Snippet for the setSettings method.

    set_default_snippet_ellipsis_text
    """
    # >SEPARATOR setSettings set_default_snippet_ellipsis_text
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "snippetEllipsisText": "…",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings83():
    """
    Snippet for the setSettings method.

    enable_restrict_highlight_and_snippet_arrays_by_default
    """
    # >SEPARATOR setSettings enable_restrict_highlight_and_snippet_arrays_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "restrictHighlightAndSnippetArrays": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings84():
    """
    Snippet for the setSettings method.

    set_default_hits_per_page
    """
    # >SEPARATOR setSettings set_default_hits_per_page
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "hitsPerPage": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings85():
    """
    Snippet for the setSettings method.

    set_pagination_limit
    """
    # >SEPARATOR setSettings set_pagination_limit
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "paginationLimitedTo": 1000,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings86():
    """
    Snippet for the setSettings method.

    set_default_min_word_size_for_one_typo
    """
    # >SEPARATOR setSettings set_default_min_word_size_for_one_typo
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "minWordSizefor1Typo": 4,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings87():
    """
    Snippet for the setSettings method.

    set_default_min_word_size_for_two_typos
    """
    # >SEPARATOR setSettings set_default_min_word_size_for_two_typos
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "minWordSizefor2Typos": 4,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings88():
    """
    Snippet for the setSettings method.

    set_default_typo_tolerance_mode
    """
    # >SEPARATOR setSettings set_default_typo_tolerance_mode
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "typoTolerance": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings89():
    """
    Snippet for the setSettings method.

    disable_typos_on_numeric_tokens_by_default
    """
    # >SEPARATOR setSettings disable_typos_on_numeric_tokens_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "allowTyposOnNumericTokens": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings90():
    """
    Snippet for the setSettings method.

    disable_typo_tolerance_for_words
    """
    # >SEPARATOR setSettings disable_typo_tolerance_for_words
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disableTypoToleranceOnWords": [
                "wheel",
                "1X2BCD",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings91():
    """
    Snippet for the setSettings method.

    set_separators_to_index
    """
    # >SEPARATOR setSettings set_separators_to_index
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "separatorsToIndex": "+#",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings92():
    """
    Snippet for the setSettings method.

    set_languages_using_querylanguages
    """
    # >SEPARATOR setSettings set_languages_using_querylanguages
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryLanguages": [
                "es",
            ],
            "ignorePlurals": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings93():
    """
    Snippet for the setSettings method.

    set_attributes_to_transliterate
    """
    # >SEPARATOR setSettings set_attributes_to_transliterate
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "indexLanguages": [
                "ja",
            ],
            "attributesToTransliterate": [
                "name",
                "description",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings94():
    """
    Snippet for the setSettings method.

    set_languages_using_querylanguages
    """
    # >SEPARATOR setSettings set_languages_using_querylanguages
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryLanguages": [
                "es",
            ],
            "removeStopWords": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings95():
    """
    Snippet for the setSettings method.

    set_camel_case_attributes
    """
    # >SEPARATOR setSettings set_camel_case_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "camelCaseAttributes": [
                "description",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings96():
    """
    Snippet for the setSettings method.

    set_decompounded_attributes
    """
    # >SEPARATOR setSettings set_decompounded_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "decompoundedAttributes": {
                "de": [
                    "name",
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings97():
    """
    Snippet for the setSettings method.

    set_decompounded_multiple_attributes
    """
    # >SEPARATOR setSettings set_decompounded_multiple_attributes
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "decompoundedAttributes": {
                "de": [
                    "name_de",
                    "description_de",
                ],
                "fi": [
                    "name_fi",
                    "description_fi",
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings98():
    """
    Snippet for the setSettings method.

    set_keep_diacritics_on_characters
    """
    # >SEPARATOR setSettings set_keep_diacritics_on_characters
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "keepDiacriticsOnCharacters": "øé",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings99():
    """
    Snippet for the setSettings method.

    set_custom_normalization
    """
    # >SEPARATOR setSettings set_custom_normalization
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "customNormalization": {
                "default": {
                    "ä": "ae",
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings100():
    """
    Snippet for the setSettings method.

    set_languages_using_querylanguages
    """
    # >SEPARATOR setSettings set_languages_using_querylanguages
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryLanguages": [
                "es",
            ],
            "removeStopWords": True,
            "ignorePlurals": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings101():
    """
    Snippet for the setSettings method.

    set_indexlanguages
    """
    # >SEPARATOR setSettings set_indexlanguages
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "indexLanguages": [
                "ja",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings102():
    """
    Snippet for the setSettings method.

    enable_decompound_query_by_default
    """
    # >SEPARATOR setSettings enable_decompound_query_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "decompoundQuery": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings103():
    """
    Snippet for the setSettings method.

    enable_rules_syntax_by_default
    """
    # >SEPARATOR setSettings enable_rules_syntax_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "enableRules": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings104():
    """
    Snippet for the setSettings method.

    enable_personalization_settings
    """
    # >SEPARATOR setSettings enable_personalization_settings
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "enablePersonalization": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings105():
    """
    Snippet for the setSettings method.

    set_default_query_type
    """
    # >SEPARATOR setSettings set_default_query_type
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "queryType": "prefixLast",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings106():
    """
    Snippet for the setSettings method.

    set_default_remove_words_if_no_result
    """
    # >SEPARATOR setSettings set_default_remove_words_if_no_result
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "removeWordsIfNoResults": "none",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings107():
    """
    Snippet for the setSettings method.

    enable_advanced_syntax_by_default
    """
    # >SEPARATOR setSettings enable_advanced_syntax_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "advancedSyntax": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings108():
    """
    Snippet for the setSettings method.

    set_default_optional_words
    """
    # >SEPARATOR setSettings set_default_optional_words
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "optionalWords": [
                "blue",
                "iphone case",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings109():
    """
    Snippet for the setSettings method.

    disabling_prefix_search_for_some_attributes_by_default
    """
    # >SEPARATOR setSettings disabling_prefix_search_for_some_attributes_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disablePrefixOnAttributes": [
                "sku",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings110():
    """
    Snippet for the setSettings method.

    disabling_exact_for_some_attributes_by_default
    """
    # >SEPARATOR setSettings disabling_exact_for_some_attributes_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "disableExactOnAttributes": [
                "description",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings111():
    """
    Snippet for the setSettings method.

    set_default_exact_single_word_query
    """
    # >SEPARATOR setSettings set_default_exact_single_word_query
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "exactOnSingleWordQuery": "attribute",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings112():
    """
    Snippet for the setSettings method.

    set_default_aternative_as_exact
    """
    # >SEPARATOR setSettings set_default_aternative_as_exact
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "alternativesAsExact": [
                "ignorePlurals",
                "singleWordSynonym",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings113():
    """
    Snippet for the setSettings method.

    enable_advanced_syntax_by_default
    """
    # >SEPARATOR setSettings enable_advanced_syntax_by_default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "advancedSyntax": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings114():
    """
    Snippet for the setSettings method.

    set_numeric_attributes_for_filtering
    """
    # >SEPARATOR setSettings set_numeric_attributes_for_filtering
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "numericAttributesForFiltering": [
                "quantity",
                "popularity",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings115():
    """
    Snippet for the setSettings method.

    enable_compression_of_integer_array
    """
    # >SEPARATOR setSettings enable_compression_of_integer_array
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "allowCompressionOfIntegerArray": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings116():
    """
    Snippet for the setSettings method.

    set_attributes_for_distinct
    """
    # >SEPARATOR setSettings set_attributes_for_distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeForDistinct": "url",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings117():
    """
    Snippet for the setSettings method.

    set_distinct
    """
    # >SEPARATOR setSettings set_distinct
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "distinct": 1,
            "attributeForDistinct": "url",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings118():
    """
    Snippet for the setSettings method.

    set_replace_synonyms_in_highlights
    """
    # >SEPARATOR setSettings set_replace_synonyms_in_highlights
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "replaceSynonymsInHighlight": False,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings119():
    """
    Snippet for the setSettings method.

    set_min_proximity
    """
    # >SEPARATOR setSettings set_min_proximity
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "minProximity": 1,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings120():
    """
    Snippet for the setSettings method.

    set_default_field
    """
    # >SEPARATOR setSettings set_default_field
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "responseFields": [
                "hits",
                "hitsPerPage",
                "nbPages",
                "page",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings121():
    """
    Snippet for the setSettings method.

    set_max_facet_hits
    """
    # >SEPARATOR setSettings set_max_facet_hits
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "maxFacetHits": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings122():
    """
    Snippet for the setSettings method.

    set_attribute_criteria_computed_by_min_proximity
    """
    # >SEPARATOR setSettings set_attribute_criteria_computed_by_min_proximity
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributeCriteriaComputedByMinProximity": True,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings123():
    """
    Snippet for the setSettings method.

    set_user_data
    """
    # >SEPARATOR setSettings set_user_data
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "userData": {
                "extraData": "This is the custom data that you want to store in your index",
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_settings124():
    """
    Snippet for the setSettings method.

    set_rendering_content
    """
    # >SEPARATOR setSettings set_rendering_content
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "renderingContent": {
                "facetOrdering": {
                    "facets": {
                        "order": [
                            "size",
                            "brand",
                        ],
                    },
                    "values": {
                        "brand": {
                            "order": [
                                "uniqlo",
                            ],
                            "hide": [
                                "muji",
                            ],
                            "sortRemainingBy": "count",
                        },
                        "size": {
                            "order": [
                                "S",
                                "M",
                                "L",
                            ],
                            "sortRemainingBy": "hidden",
                        },
                    },
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_update_api_key():
    """
    Snippet for the updateApiKey method.

    updateApiKey
    """
    # >SEPARATOR updateApiKey default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.update_api_key(
        key="ALGOLIA_API_KEY",
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key():
    """
    Snippet for the waitForApiKey method.

    wait for api key helper - add
    """
    # >SEPARATOR waitForApiKey wait for api key helper - add
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-add-operation-test-python",
        operation="add",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key1():
    """
    Snippet for the waitForApiKey method.

    wait for api key - update
    """
    # >SEPARATOR waitForApiKey wait for api key - update
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-update-operation-test-python",
        operation="update",
        api_key={
            "description": "my updated api key",
            "acl": [
                "search",
                "addObject",
                "deleteObject",
            ],
            "indexes": [
                "Movies",
                "Books",
            ],
            "referers": [
                "*google.com",
                "*algolia.com",
            ],
            "validity": 305,
            "maxQueriesPerIPPerHour": 95,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_api_key2():
    """
    Snippet for the waitForApiKey method.

    wait for api key - delete
    """
    # >SEPARATOR waitForApiKey wait for api key - delete
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_api_key(
        key="api-key-delete-operation-test-python",
        operation="delete",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_app_task():
    """
    Snippet for the waitForAppTask method.

    wait for an application-level task
    """
    # >SEPARATOR waitForAppTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_wait_for_task():
    """
    Snippet for the waitForTask method.

    wait for task
    """
    # >SEPARATOR waitForTask default
    # Initialize the client
    # In an asynchronous context, you can use SearchClient instead, which exposes the exact same methods.
    client = SearchClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.wait_for_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<
