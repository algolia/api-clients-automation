# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.analytics.client import AnalyticsClientSync
from json import loads
# IMPORT<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_add_to_cart_rate():
    """
    Snippet for the getAddToCartRate method.

    get getAddToCartRate with minimal parameters
    """
    # >SEPARATOR getAddToCartRate get getAddToCartRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_add_to_cart_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_add_to_cart_rate1():
    """
    Snippet for the getAddToCartRate method.

    get getAddToCartRate with all parameters
    """
    # >SEPARATOR getAddToCartRate get getAddToCartRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_add_to_cart_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_average_click_position():
    """
    Snippet for the getAverageClickPosition method.

    get getAverageClickPosition with minimal parameters
    """
    # >SEPARATOR getAverageClickPosition get getAverageClickPosition with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_average_click_position(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_average_click_position1():
    """
    Snippet for the getAverageClickPosition method.

    get getAverageClickPosition with all parameters
    """
    # >SEPARATOR getAverageClickPosition get getAverageClickPosition with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_average_click_position(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_click_positions():
    """
    Snippet for the getClickPositions method.

    get getClickPositions with minimal parameters
    """
    # >SEPARATOR getClickPositions get getClickPositions with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_click_positions(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_click_positions1():
    """
    Snippet for the getClickPositions method.

    get getClickPositions with all parameters
    """
    # >SEPARATOR getClickPositions get getClickPositions with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_click_positions(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_click_through_rate():
    """
    Snippet for the getClickThroughRate method.

    get getClickThroughRate with minimal parameters
    """
    # >SEPARATOR getClickThroughRate get getClickThroughRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_click_through_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_click_through_rate1():
    """
    Snippet for the getClickThroughRate method.

    get getClickThroughRate with all parameters
    """
    # >SEPARATOR getClickThroughRate get getClickThroughRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_click_through_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_conversion_rate():
    """
    Snippet for the getConversionRate method.

    get getConversationRate with minimal parameters
    """
    # >SEPARATOR getConversionRate get getConversationRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_conversion_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_conversion_rate1():
    """
    Snippet for the getConversionRate method.

    get getConversationRate with all parameters
    """
    # >SEPARATOR getConversionRate get getConversationRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_conversion_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_no_click_rate():
    """
    Snippet for the getNoClickRate method.

    get getNoClickRate with minimal parameters
    """
    # >SEPARATOR getNoClickRate get getNoClickRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_no_click_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_no_click_rate1():
    """
    Snippet for the getNoClickRate method.

    get getNoClickRate with all parameters
    """
    # >SEPARATOR getNoClickRate get getNoClickRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_no_click_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_no_results_rate():
    """
    Snippet for the getNoResultsRate method.

    get getNoResultsRate with minimal parameters
    """
    # >SEPARATOR getNoResultsRate get getNoResultsRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_no_results_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_no_results_rate1():
    """
    Snippet for the getNoResultsRate method.

    get getNoResultsRate with all parameters
    """
    # >SEPARATOR getNoResultsRate get getNoResultsRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_no_results_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_purchase_rate():
    """
    Snippet for the getPurchaseRate method.

    get getPurchaseRate with minimal parameters
    """
    # >SEPARATOR getPurchaseRate get getPurchaseRate with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_purchase_rate(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_purchase_rate1():
    """
    Snippet for the getPurchaseRate method.

    get getPurchaseRate with all parameters
    """
    # >SEPARATOR getPurchaseRate get getPurchaseRate with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_purchase_rate(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_revenue():
    """
    Snippet for the getRevenue method.

    get getRevenue with minimal parameters
    """
    # >SEPARATOR getRevenue get getRevenue with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_revenue(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_revenue1():
    """
    Snippet for the getRevenue method.

    get getRevenue with all parameters
    """
    # >SEPARATOR getRevenue get getRevenue with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_revenue(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_count():
    """
    Snippet for the getSearchesCount method.

    get getSearchesCount with minimal parameters
    """
    # >SEPARATOR getSearchesCount get getSearchesCount with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_count(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_count1():
    """
    Snippet for the getSearchesCount method.

    get getSearchesCount with all parameters
    """
    # >SEPARATOR getSearchesCount get getSearchesCount with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_count(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_no_clicks():
    """
    Snippet for the getSearchesNoClicks method.

    get getSearchesNoClicks with minimal parameters
    """
    # >SEPARATOR getSearchesNoClicks get getSearchesNoClicks with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_no_clicks(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_no_clicks1():
    """
    Snippet for the getSearchesNoClicks method.

    get getSearchesNoClicks with all parameters
    """
    # >SEPARATOR getSearchesNoClicks get getSearchesNoClicks with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_no_clicks(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_no_results():
    """
    Snippet for the getSearchesNoResults method.

    get getSearchesNoResults with minimal parameters
    """
    # >SEPARATOR getSearchesNoResults get getSearchesNoResults with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_no_results(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_searches_no_results1():
    """
    Snippet for the getSearchesNoResults method.

    get getSearchesNoResults with all parameters
    """
    # >SEPARATOR getSearchesNoResults get getSearchesNoResults with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_searches_no_results(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_status():
    """
    Snippet for the getStatus method.

    get getStatus with minimal parameters
    """
    # >SEPARATOR getStatus default
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_status(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_countries():
    """
    Snippet for the getTopCountries method.

    get getTopCountries with minimal parameters
    """
    # >SEPARATOR getTopCountries get getTopCountries with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_countries(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_countries1():
    """
    Snippet for the getTopCountries method.

    get getTopCountries with all parameters
    """
    # >SEPARATOR getTopCountries get getTopCountries with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_countries(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_attributes():
    """
    Snippet for the getTopFilterAttributes method.

    get getTopFilterAttributes with minimal parameters
    """
    # >SEPARATOR getTopFilterAttributes get getTopFilterAttributes with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_attributes(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_attributes1():
    """
    Snippet for the getTopFilterAttributes method.

    get getTopFilterAttributes with all parameters
    """
    # >SEPARATOR getTopFilterAttributes get getTopFilterAttributes with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_attributes(
        index="index",
        search="mySearch",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_for_attribute():
    """
    Snippet for the getTopFilterForAttribute method.

    get getTopFilterForAttribute with minimal parameters
    """
    # >SEPARATOR getTopFilterForAttribute get getTopFilterForAttribute with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_for_attribute(
        attribute="myAttribute",
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_for_attribute1():
    """
    Snippet for the getTopFilterForAttribute method.

    get getTopFilterForAttribute with minimal parameters and multiple attributes
    """
    # >SEPARATOR getTopFilterForAttribute get getTopFilterForAttribute with minimal parameters and multiple attributes
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_for_attribute(
        attribute="myAttribute1,myAttribute2",
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_for_attribute2():
    """
    Snippet for the getTopFilterForAttribute method.

    get getTopFilterForAttribute with all parameters
    """
    # >SEPARATOR getTopFilterForAttribute get getTopFilterForAttribute with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_for_attribute(
        attribute="myAttribute",
        index="index",
        search="mySearch",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filter_for_attribute3():
    """
    Snippet for the getTopFilterForAttribute method.

    get getTopFilterForAttribute with all parameters and multiple attributes
    """
    # >SEPARATOR getTopFilterForAttribute get getTopFilterForAttribute with all parameters and multiple attributes
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filter_for_attribute(
        attribute="myAttribute1,myAttribute2",
        index="index",
        search="mySearch",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filters_no_results():
    """
    Snippet for the getTopFiltersNoResults method.

    get getTopFiltersNoResults with minimal parameters
    """
    # >SEPARATOR getTopFiltersNoResults get getTopFiltersNoResults with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filters_no_results(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_filters_no_results1():
    """
    Snippet for the getTopFiltersNoResults method.

    get getTopFiltersNoResults with all parameters
    """
    # >SEPARATOR getTopFiltersNoResults get getTopFiltersNoResults with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_filters_no_results(
        index="index",
        search="mySearch",
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_hits():
    """
    Snippet for the getTopHits method.

    get getTopHits with minimal parameters
    """
    # >SEPARATOR getTopHits get getTopHits with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_hits(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_hits1():
    """
    Snippet for the getTopHits method.

    get getTopHits with all parameters
    """
    # >SEPARATOR getTopHits get getTopHits with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_hits(
        index="index",
        search="mySearch",
        click_analytics=True,
        revenue_analytics=True,
        start_date="1999-09-19",
        end_date="2001-01-01",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_searches():
    """
    Snippet for the getTopSearches method.

    get getTopSearches with minimal parameters
    """
    # >SEPARATOR getTopSearches get getTopSearches with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_searches(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_top_searches1():
    """
    Snippet for the getTopSearches method.

    get getTopSearches with all parameters
    """
    # >SEPARATOR getTopSearches get getTopSearches with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_top_searches(
        index="index",
        click_analytics=True,
        revenue_analytics=True,
        start_date="1999-09-19",
        end_date="2001-01-01",
        order_by="searchCount",
        direction="asc",
        limit=21,
        offset=42,
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_users_count():
    """
    Snippet for the getUsersCount method.

    get getUsersCount with minimal parameters
    """
    # >SEPARATOR getUsersCount get getUsersCount with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_users_count(
        index="index",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_users_count1():
    """
    Snippet for the getUsersCount method.

    get getUsersCount with all parameters
    """
    # >SEPARATOR getUsersCount get getUsersCount with all parameters
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    response = client.get_users_count(
        index="index",
        start_date="1999-09-19",
        end_date="2001-01-01",
        tags="tag",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use AnalyticsClient instead, which exposes the exact same methods.
    client = AnalyticsClientSync(
        "ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", "ALGOLIA_APPLICATION_REGION"
    )

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<
