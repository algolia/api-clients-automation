# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.recommend.client import RecommendClientSync
from json import loads
# IMPORT<


def snippet_for_batch_recommend_rules():
    """
    Snippet for the batchRecommendRules method.

    batch recommend rules
    """
    # >SEPARATOR batchRecommendRules default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.batch_recommend_rules(
        index_name="<YOUR_INDEX_NAME>",
        model="related-products",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_delete1():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with all parameters
    """
    # >SEPARATOR customDelete allow del method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_delete(
        path="test/all",
        parameters={
            "query": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get1():
    """
    Snippet for the customGet method.

    allow get method for a custom path with all parameters
    """
    # >SEPARATOR customGet allow get method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "parameters with space",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_get2():
    """
    Snippet for the customGet method.

    requestOptions should be escaped too
    """
    # >SEPARATOR customGet requestOptions should be escaped too
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_get(
        path="test/all",
        parameters={
            "query": "to be overriden",
        },
        request_options={
            "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
            "query_parameters": loads(
                """{"query":"parameters with space","and an array":["array","with spaces"]}"""
            ),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post1():
    """
    Snippet for the customPost method.

    allow post method for a custom path with all parameters
    """
    # >SEPARATOR customPost allow post method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post2():
    """
    Snippet for the customPost method.

    requestOptions can override default query parameters
    """
    # >SEPARATOR customPost requestOptions can override default query parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post3():
    """
    Snippet for the customPost method.

    requestOptions merges query parameters with default ones
    """
    # >SEPARATOR customPost requestOptions merges query parameters with default ones
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post4():
    """
    Snippet for the customPost method.

    requestOptions can override default headers
    """
    # >SEPARATOR customPost requestOptions can override default headers
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post5():
    """
    Snippet for the customPost method.

    requestOptions merges headers with default ones
    """
    # >SEPARATOR customPost requestOptions merges headers with default ones
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post6():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts booleans
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"isItWorking":true}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post7():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts integers
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":2}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post8():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of string
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of string
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post9():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of booleans
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[true,true,false]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_post10():
    """
    Snippet for the customPost method.

    requestOptions queryParameters accepts list of integers
    """
    # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_post(
        path="test/requestOptions",
        parameters={
            "query": "parameters",
        },
        body={
            "facet": "filters",
        },
        request_options={
            "query_parameters": loads("""{"myParam":[1,2]}"""),
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_custom_put1():
    """
    Snippet for the customPut method.

    allow put method for a custom path with all parameters
    """
    # >SEPARATOR customPut allow put method for a custom path with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.custom_put(
        path="test/all",
        parameters={
            "query": "parameters",
        },
        body={
            "body": "parameters",
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_delete_recommend_rule():
    """
    Snippet for the deleteRecommendRule method.

    deleteRecommendRule
    """
    # >SEPARATOR deleteRecommendRule default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.delete_recommend_rule(
        index_name="<YOUR_INDEX_NAME>",
        model="related-products",
        object_id="objectID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommend_rule():
    """
    Snippet for the getRecommendRule method.

    getRecommendRule
    """
    # >SEPARATOR getRecommendRule default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommend_rule(
        index_name="<YOUR_INDEX_NAME>",
        model="related-products",
        object_id="objectID",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommend_status():
    """
    Snippet for the getRecommendStatus method.

    getRecommendStatus
    """
    # >SEPARATOR getRecommendStatus default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommend_status(
        index_name="<YOUR_INDEX_NAME>",
        model="related-products",
        task_id=12345,
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations():
    """
    Snippet for the getRecommendations method.

    get recommendations for recommend model with minimal parameters
    """
    # >SEPARATOR getRecommendations get recommendations for recommend model with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID",
                    "model": "related-products",
                    "threshold": 42.1,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations1():
    """
    Snippet for the getRecommendations method.

    get recommendations with e2e to check oneOf model
    """
    # >SEPARATOR getRecommendations get recommendations with e2e to check oneOf model
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "Æon Flux",
                    "model": "related-products",
                    "threshold": 20.0,
                    "maxRecommendations": 2,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations2():
    """
    Snippet for the getRecommendations method.

    get recommendations for recommend model with all parameters
    """
    # >SEPARATOR getRecommendations get recommendations for recommend model with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID",
                    "model": "related-products",
                    "threshold": 42.1,
                    "maxRecommendations": 10,
                    "queryParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "query",
                        ],
                    },
                    "fallbackParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "fallback",
                        ],
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations3():
    """
    Snippet for the getRecommendations method.

    get recommendations for trending model with minimal parameters
    """
    # >SEPARATOR getRecommendations get recommendations for trending model with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "model": "trending-items",
                    "threshold": 42.1,
                    "facetName": "facet",
                    "facetValue": "value",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations4():
    """
    Snippet for the getRecommendations method.

    get recommendations for trending model with all parameters
    """
    # >SEPARATOR getRecommendations get recommendations for trending model with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "model": "trending-items",
                    "threshold": 42.1,
                    "maxRecommendations": 10,
                    "facetName": "myFacetName",
                    "facetValue": "myFacetValue",
                    "queryParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "query",
                        ],
                    },
                    "fallbackParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "fallback",
                        ],
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations5():
    """
    Snippet for the getRecommendations method.

    get multiple recommendations with minimal parameters
    """
    # >SEPARATOR getRecommendations get multiple recommendations with minimal parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID1",
                    "model": "related-products",
                    "threshold": 21.7,
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID2",
                    "model": "related-products",
                    "threshold": 21.7,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations6():
    """
    Snippet for the getRecommendations method.

    get multiple recommendations with all parameters
    """
    # >SEPARATOR getRecommendations get multiple recommendations with all parameters
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID1",
                    "model": "related-products",
                    "threshold": 21.7,
                    "maxRecommendations": 10,
                    "queryParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "query1",
                        ],
                    },
                    "fallbackParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "fallback1",
                        ],
                    },
                },
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID2",
                    "model": "related-products",
                    "threshold": 21.7,
                    "maxRecommendations": 10,
                    "queryParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "query2",
                        ],
                    },
                    "fallbackParameters": {
                        "query": "myQuery",
                        "facetFilters": [
                            "fallback2",
                        ],
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_get_recommendations7():
    """
    Snippet for the getRecommendations method.

    get frequently bought together recommendations
    """
    # >SEPARATOR getRecommendations get frequently bought together recommendations
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.get_recommendations(
        get_recommendations_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "objectID": "objectID1",
                    "model": "bought-together",
                    "threshold": 42.7,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_search_recommend_rules():
    """
    Snippet for the searchRecommendRules method.

    searchRecommendRules
    """
    # >SEPARATOR searchRecommendRules default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    response = client.search_recommend_rules(
        index_name="<YOUR_INDEX_NAME>",
        model="related-products",
    )

    # >LOG
    # use the class directly
    print(response)
    # SEPARATOR<


def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    # In an asynchronous context, you can use RecommendClient instead, which exposes the exact same methods.
    client = RecommendClientSync("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

    # Call the API
    client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<
