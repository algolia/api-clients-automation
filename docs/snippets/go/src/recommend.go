package snippets

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import (
	"context"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/next/recommend"
)

// IMPORT<

func SnippetForBatchRecommendRulesOfRecommend() {
	/*
	   Snippet for the batchRecommendRules method.

	   batch recommend rules
	*/

	// >SEPARATOR batchRecommendRules default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.BatchRecommendRules(context.Background(), "<YOUR_INDEX_NAME>", recommend.RECOMMEND_MODELS_RELATED_PRODUCTS, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfRecommend() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with minimal parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfRecommend1() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with all parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/all", map[string]any{"query": "parameters"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfRecommend() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with minimal parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfRecommend1() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with all parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/all", map[string]any{"query": "parameters with space"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfRecommend2() {
	/*
	   Snippet for the customGet method.

	   requestOptions should be escaped too
	*/

	// >SEPARATOR customGet requestOptions should be escaped too
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(
		context.Background(),
		"test/all",
		map[string]any{"query": "to be overridden"},
		recommend.WithQueryParam("query", "parameters with space"),
		recommend.WithQueryParam("and an array",
			[]string{"array", "with spaces"}),
		recommend.WithHeaderParam("x-header-1", "spaces are left alone"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend1() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with all parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/all",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend2() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default query parameters
	*/

	// >SEPARATOR customPost requestOptions can override default query parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("query", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend3() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges query parameters with default ones
	*/

	// >SEPARATOR customPost requestOptions merges query parameters with default ones
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("query2", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend4() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default headers
	*/

	// >SEPARATOR customPost requestOptions can override default headers
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend5() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges headers with default ones
	*/

	// >SEPARATOR customPost requestOptions merges headers with default ones
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend6() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts booleans
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("isItWorking", true),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend7() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts integers
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("myParam", 2),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend8() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of string
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of string
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("myParam",
			[]string{"b and c", "d"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend9() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("myParam",
			[]bool{true, true, false}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfRecommend10() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of integers
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		recommend.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		recommend.WithQueryParam("myParam",
			[]int{1, 2}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfRecommend() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfRecommend1() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with all parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(
		context.Background(),
		"test/all",
		recommend.NewCustomPutOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteRecommendRuleOfRecommend() {
	/*
	   Snippet for the deleteRecommendRule method.

	   deleteRecommendRule
	*/

	// >SEPARATOR deleteRecommendRule default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteRecommendRule(context.Background(), "<YOUR_INDEX_NAME>", recommend.RECOMMEND_MODELS_RELATED_PRODUCTS, "objectID")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendRuleOfRecommend() {
	/*
	   Snippet for the getRecommendRule method.

	   getRecommendRule
	*/

	// >SEPARATOR getRecommendRule default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendRule(context.Background(), "<YOUR_INDEX_NAME>", recommend.RECOMMEND_MODELS_RELATED_PRODUCTS, "objectID")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendStatusOfRecommend() {
	/*
	   Snippet for the getRecommendStatus method.

	   getRecommendStatus
	*/

	// >SEPARATOR getRecommendStatus default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendStatus(context.Background(), "<YOUR_INDEX_NAME>", recommend.RECOMMEND_MODELS_RELATED_PRODUCTS, 12345)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend() {
	/*
	   Snippet for the getRecommendations method.

	   get recommendations for recommend model with minimal parameters
	*/

	// >SEPARATOR getRecommendations get recommendations for recommend model with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(42.1))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend1() {
	/*
	   Snippet for the getRecommendations method.

	   get recommendations with e2e to check oneOf model
	*/

	// >SEPARATOR getRecommendations get recommendations with e2e to check oneOf model
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("Æon Flux").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(20.0).SetMaxRecommendations(2))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend2() {
	/*
	   Snippet for the getRecommendations method.

	   get recommendations for recommend model with all parameters
	*/

	// >SEPARATOR getRecommendations get recommendations for recommend model with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(42.1).SetMaxRecommendations(10).SetQueryParameters(
				recommend.NewEmptyRecommendSearchParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("query")}))).SetFallbackParameters(
				recommend.NewEmptyFallbackParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("fallback")}))))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend3() {
	/*
	   Snippet for the getRecommendations method.

	   get recommendations for trending model with minimal parameters
	*/

	// >SEPARATOR getRecommendations get recommendations for trending model with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.TrendingItemsQueryAsRecommendationsRequest(
			recommend.NewEmptyTrendingItemsQuery().SetIndexName("<YOUR_INDEX_NAME>").SetModel(recommend.TRENDING_ITEMS_MODEL_TRENDING_ITEMS).SetThreshold(42.1).SetFacetName("facet").SetFacetValue("value"))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend4() {
	/*
	   Snippet for the getRecommendations method.

	   get recommendations for trending model with all parameters
	*/

	// >SEPARATOR getRecommendations get recommendations for trending model with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.TrendingItemsQueryAsRecommendationsRequest(
			recommend.NewEmptyTrendingItemsQuery().SetIndexName("<YOUR_INDEX_NAME>").SetModel(recommend.TRENDING_ITEMS_MODEL_TRENDING_ITEMS).SetThreshold(42.1).SetMaxRecommendations(10).SetFacetName("myFacetName").SetFacetValue("myFacetValue").SetQueryParameters(
				recommend.NewEmptyRecommendSearchParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("query")}))).SetFallbackParameters(
				recommend.NewEmptyFallbackParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("fallback")}))))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend5() {
	/*
	   Snippet for the getRecommendations method.

	   get multiple recommendations with minimal parameters
	*/

	// >SEPARATOR getRecommendations get multiple recommendations with minimal parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID1").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(21.7)), *recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID2").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(21.7))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend6() {
	/*
	   Snippet for the getRecommendations method.

	   get multiple recommendations with all parameters
	*/

	// >SEPARATOR getRecommendations get multiple recommendations with all parameters
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID1").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(21.7).SetMaxRecommendations(10).SetQueryParameters(
				recommend.NewEmptyRecommendSearchParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("query1")}))).SetFallbackParameters(
				recommend.NewEmptyFallbackParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("fallback1")})))), *recommend.RelatedQueryAsRecommendationsRequest(
			recommend.NewEmptyRelatedQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID2").SetModel(recommend.RELATED_MODEL_RELATED_PRODUCTS).SetThreshold(21.7).SetMaxRecommendations(10).SetQueryParameters(
				recommend.NewEmptyRecommendSearchParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("query2")}))).SetFallbackParameters(
				recommend.NewEmptyFallbackParams().SetQuery("myQuery").SetFacetFilters(recommend.ArrayOfFacetFiltersAsFacetFilters(
					[]recommend.FacetFilters{*recommend.StringAsFacetFilters("fallback2")}))))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRecommendationsOfRecommend7() {
	/*
	   Snippet for the getRecommendations method.

	   get frequently bought together recommendations
	*/

	// >SEPARATOR getRecommendations get frequently bought together recommendations
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRecommendations(context.Background(),
		[]recommend.RecommendationsRequest{*recommend.BoughtTogetherQueryAsRecommendationsRequest(
			recommend.NewEmptyBoughtTogetherQuery().SetIndexName("<YOUR_INDEX_NAME>").SetObjectID("objectID1").SetModel(recommend.FBT_MODEL_BOUGHT_TOGETHER).SetThreshold(42.7))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchRecommendRulesOfRecommend() {
	/*
	   Snippet for the searchRecommendRules method.

	   searchRecommendRules
	*/

	// >SEPARATOR searchRecommendRules default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchRecommendRules(context.Background(), "<YOUR_INDEX_NAME>", recommend.RECOMMEND_MODELS_RELATED_PRODUCTS, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSetClientApiKeyOfRecommend() {
	/*
	   Snippet for the setClientApiKey method.

	   switch API key
	*/

	// >SEPARATOR setClientApiKey default
	// Initialize the client
	client, err := recommend.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	err = client.SetClientApiKey("updated-api-key")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// SEPARATOR<
}
