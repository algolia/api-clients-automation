package snippets

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import (
	"context"

	abtestingV3 "github.com/algolia/algoliasearch-client-go/v4/algolia/next/abtesting-v3"
)

// IMPORT<

func SnippetForAddABTestsOfAbtestingV3() {
	/*
	   Snippet for the addABTests method.

	   addABTests with minimal parameters
	*/

	// >SEPARATOR addABTests default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.AddABTests(context.Background(), "myABTest",
		[]abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(30)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))},
		[]abtestingV3.CreateMetric{*abtestingV3.NewEmptyCreateMetric().SetName("myMetric")}, "2022-12-31T00:00:00.000Z", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfAbtestingV3() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with minimal parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfAbtestingV31() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with all parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with all parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/all", map[string]any{"query": "parameters"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfAbtestingV3() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with minimal parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfAbtestingV31() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with all parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with all parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/all", map[string]any{"query": "parameters with space"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfAbtestingV32() {
	/*
	   Snippet for the customGet method.

	   requestOptions should be escaped too
	*/

	// >SEPARATOR customGet requestOptions should be escaped too
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(
		context.Background(),
		"test/all",
		map[string]any{"query": "to be overridden"},
		abtestingV3.WithQueryParam("query", "parameters with space"),
		abtestingV3.WithQueryParam("and an array",
			[]string{"array", "with spaces"}),
		abtestingV3.WithHeaderParam("x-header-1", "spaces are left alone"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV3() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV31() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with all parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with all parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/all",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV32() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default query parameters
	*/

	// >SEPARATOR customPost requestOptions can override default query parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("query", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV33() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges query parameters with default ones
	*/

	// >SEPARATOR customPost requestOptions merges query parameters with default ones
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("query2", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV34() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default headers
	*/

	// >SEPARATOR customPost requestOptions can override default headers
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV35() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges headers with default ones
	*/

	// >SEPARATOR customPost requestOptions merges headers with default ones
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV36() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts booleans
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("isItWorking", true),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV37() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts integers
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("myParam", 2),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV38() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of string
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of string
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("myParam",
			[]string{"b and c", "d"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV39() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("myParam",
			[]bool{true, true, false}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfAbtestingV310() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of integers
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		abtestingV3.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		abtestingV3.WithQueryParam("myParam",
			[]int{1, 2}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfAbtestingV3() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfAbtestingV31() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with all parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with all parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(
		context.Background(),
		"test/all",
		abtestingV3.NewCustomPutOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteABTestOfAbtestingV3() {
	/*
	   Snippet for the deleteABTest method.

	   deleteABTest
	*/

	// >SEPARATOR deleteABTest default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteABTest(context.Background(), 42)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForEstimateABTestOfAbtestingV3() {
	/*
	   Snippet for the estimateABTest method.

	   estimate AB Test sample size
	*/

	// >SEPARATOR estimateABTest default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.EstimateABTest(context.Background(),
		abtestingV3.NewEmptyEstimateConfiguration().SetMinimumDetectableEffect(
			abtestingV3.NewEmptyMinimumDetectableEffect().SetSize(0.03).SetMetric(abtestingV3.EFFECT_METRIC_CONVERSION_RATE)),
		[]abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(50)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetABTestOfAbtestingV3() {
	/*
	   Snippet for the getABTest method.

	   getABTest
	*/

	// >SEPARATOR getABTest default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetABTest(context.Background(), 42)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetTimeseriesOfAbtestingV3() {
	/*
	   Snippet for the getTimeseries method.

	   getTimeseries
	*/

	// >SEPARATOR getTimeseries default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTimeseries(context.Background(), 42, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListABTestsOfAbtestingV3() {
	/*
	   Snippet for the listABTests method.

	   listABTests with minimal parameters
	*/

	// >SEPARATOR listABTests listABTests with minimal parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListABTests(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListABTestsOfAbtestingV31() {
	/*
	   Snippet for the listABTests method.

	   listABTests with parameters
	*/

	// >SEPARATOR listABTests listABTests with parameters
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListABTests(
		context.Background(),
		abtestingV3.NewListABTestsOptions().
			WithOffset(0).
			WithLimit(21).
			WithIndexPrefix("cts_e2e ab").
			WithIndexSuffix("t").
			WithDirection(abtestingV3.DIRECTION_ASC),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForScheduleABTestOfAbtestingV3() {
	/*
	   Snippet for the scheduleABTest method.

	   scheduleABTest with minimal parameters
	*/

	// >SEPARATOR scheduleABTest default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ScheduleABTest(
		context.Background(),
		"myABTest",
		[]abtestingV3.AddABTestsVariant{*abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(30)), *abtestingV3.AbTestsVariantAsAddABTestsVariant(
			abtestingV3.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))},
		[]abtestingV3.CreateMetric{
			*abtestingV3.NewEmptyCreateMetric().SetName("myMetric"),
		},
		"2022-11-31T00:00:00.000Z",
		"2022-12-31T00:00:00.000Z",
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSetClientApiKeyOfAbtestingV3() {
	/*
	   Snippet for the setClientApiKey method.

	   switch API key
	*/

	// >SEPARATOR setClientApiKey default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	err = client.SetClientApiKey("updated-api-key")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// SEPARATOR<
}

func SnippetForStopABTestOfAbtestingV3() {
	/*
	   Snippet for the stopABTest method.

	   stopABTest
	*/

	// >SEPARATOR stopABTest default
	// Initialize the client with your application region, eg. abtestingV3.ALGOLIA_APPLICATION_REGION
	client, err := abtestingV3.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", abtestingV3.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.StopABTest(context.Background(), 42)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
