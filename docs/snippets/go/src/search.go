// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package snippets

// >IMPORT
import "github.com/algolia/algoliasearch-client-go/v4/algolia/search"

// IMPORT<

func SnippetForAddApiKeyOfSearch() {
	/*
	   Snippet for the addApiKey method.

	   addApiKey
	*/

	// >SEPARATOR addApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.AddApiKey(client.NewApiAddApiKeyRequest(

		search.NewEmptyApiKey().SetAcl(
			[]search.Acl{search.Acl("search"), search.Acl("addObject")}).SetDescription("my new api key").SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForAddOrUpdateObjectOfSearch() {
	/*
	   Snippet for the addOrUpdateObject method.

	   addOrUpdateObject
	*/

	// >SEPARATOR addOrUpdateObject default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.AddOrUpdateObject(client.NewApiAddOrUpdateObjectRequest(
		"<YOUR_INDEX_NAME>", "uniqueID", map[string]any{"key": "value"},
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForAppendSourceOfSearch() {
	/*
	   Snippet for the appendSource method.

	   appendSource
	*/

	// >SEPARATOR appendSource default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.AppendSource(client.NewApiAppendSourceRequest(

		search.NewEmptySource().SetSource("theSource").SetDescription("theDescription"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForAssignUserIdOfSearch() {
	/*
	   Snippet for the assignUserId method.

	   assignUserId
	*/

	// >SEPARATOR assignUserId default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.AssignUserId(client.NewApiAssignUserIdRequest(
		"userID",
		search.NewEmptyAssignUserIdParams().SetCluster("theCluster"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch() {
	/*
	   Snippet for the batch method.

	   addObject
	*/

	// >SEPARATOR batch addObject
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "bar", "foo": "1"}), *search.NewEmptyBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "baz", "foo": "2"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch1() {
	/*
	   Snippet for the batch method.

	   clear
	*/

	// >SEPARATOR batch clear
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("clear")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch2() {
	/*
	   Snippet for the batch method.

	   delete
	*/

	// >SEPARATOR batch delete
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("delete")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch3() {
	/*
	   Snippet for the batch method.

	   deleteObject
	*/

	// >SEPARATOR batch deleteObject
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("deleteObject")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch4() {
	/*
	   Snippet for the batch method.

	   partialUpdateObject
	*/

	// >SEPARATOR batch partialUpdateObject
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("partialUpdateObject")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch5() {
	/*
	   Snippet for the batch method.

	   partialUpdateObjectNoCreate
	*/

	// >SEPARATOR batch partialUpdateObjectNoCreate
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("partialUpdateObjectNoCreate")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchOfSearch6() {
	/*
	   Snippet for the batch method.

	   updateObject
	*/

	// >SEPARATOR batch updateObject
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Batch(client.NewApiBatchRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyBatchWriteParams().SetRequests(
			[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("updateObject")).SetBody(map[string]any{"key": "value"})}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchAssignUserIdsOfSearch() {
	/*
	   Snippet for the batchAssignUserIds method.

	   batchAssignUserIds
	*/

	// >SEPARATOR batchAssignUserIds default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.BatchAssignUserIds(client.NewApiBatchAssignUserIdsRequest(
		"userID",
		search.NewEmptyBatchAssignUserIdsParams().SetCluster("theCluster").SetUsers(
			[]string{"user1", "user2"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchDictionaryEntriesOfSearch() {
	/*
	   Snippet for the batchDictionaryEntries method.

	   replace
	*/

	// >SEPARATOR batchDictionaryEntries replace
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
		search.DictionaryType("plurals"),
		search.NewEmptyBatchDictionaryEntriesParams().SetClearExistingDictionaryEntries(true).SetRequests(
			[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("addEntry")).SetBody(
				search.NewEmptyDictionaryEntry().SetObjectID("1").SetLanguage(search.SupportedLanguage("en")).SetWord("fancy").SetWords(
					[]string{"believe", "algolia"}).SetDecomposition(
					[]string{"trust", "algolia"}).SetState(search.DictionaryEntryState("enabled")))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchDictionaryEntriesOfSearch1() {
	/*
	   Snippet for the batchDictionaryEntries method.

	   delete
	*/

	// >SEPARATOR batchDictionaryEntries delete
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
		search.DictionaryType("plurals"),
		search.NewEmptyBatchDictionaryEntriesParams().SetClearExistingDictionaryEntries(true).SetRequests(
			[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("deleteEntry")).SetBody(
				search.NewEmptyDictionaryEntry().SetObjectID("1"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBatchDictionaryEntriesOfSearch2() {
	/*
	   Snippet for the batchDictionaryEntries method.

	   append
	*/

	// >SEPARATOR batchDictionaryEntries append
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
		search.DictionaryType("stopwords"),
		search.NewEmptyBatchDictionaryEntriesParams().SetRequests(
			[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("addEntry")).SetBody(
				search.NewEmptyDictionaryEntry().SetObjectID("1").SetLanguage(search.SupportedLanguage("en")).SetAdditionalProperty("additional", "try me"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForBrowseOfSearch() {
	/*
	   Snippet for the browse method.

	   browse with minimal parameters
	*/

	// >SEPARATOR browse default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Browse(client.NewApiBrowseRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForClearObjectsOfSearch() {
	/*
	   Snippet for the clearObjects method.

	   clearObjects
	*/

	// >SEPARATOR clearObjects default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ClearObjects(client.NewApiClearObjectsRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForClearRulesOfSearch() {
	/*
	   Snippet for the clearRules method.

	   clearRules
	*/

	// >SEPARATOR clearRules default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ClearRules(client.NewApiClearRulesRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForClearSynonymsOfSearch() {
	/*
	   Snippet for the clearSynonyms method.

	   clearSynonyms
	*/

	// >SEPARATOR clearSynonyms default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ClearSynonyms(client.NewApiClearSynonymsRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomDeleteOfSearch() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with minimal parameters
	*/

	// >SEPARATOR customDelete default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomGetOfSearch() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with minimal parameters
	*/

	// >SEPARATOR customGet default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(client.NewApiCustomGetRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomPostOfSearch() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPost default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(client.NewApiCustomPostRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomPutOfSearch() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPut default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(client.NewApiCustomPutRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteApiKeyOfSearch() {
	/*
	   Snippet for the deleteApiKey method.

	   deleteApiKey
	*/

	// >SEPARATOR deleteApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteApiKey(client.NewApiDeleteApiKeyRequest(
		"myTestApiKey",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteByOfSearch() {
	/*
	   Snippet for the deleteBy method.

	   deleteBy
	*/

	// >SEPARATOR deleteBy default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteBy(client.NewApiDeleteByRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyDeleteByParams().SetFilters("brand:brandName"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteIndexOfSearch() {
	/*
	   Snippet for the deleteIndex method.

	   deleteIndex
	*/

	// >SEPARATOR deleteIndex default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteIndex(client.NewApiDeleteIndexRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteObjectOfSearch() {
	/*
	   Snippet for the deleteObject method.

	   deleteObject
	*/

	// >SEPARATOR deleteObject default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteObject(client.NewApiDeleteObjectRequest(
		"<YOUR_INDEX_NAME>", "uniqueID",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteObjectsOfSearch() {
	/*
	   Snippet for the deleteObjects method.

	   call deleteObjects without error
	*/

	// >SEPARATOR deleteObjects default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteObjects(
		"<YOUR_INDEX_NAME>",
		[]string{"1", "2"},
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteRuleOfSearch() {
	/*
	   Snippet for the deleteRule method.

	   delete rule simple case
	*/

	// >SEPARATOR deleteRule default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteRule(client.NewApiDeleteRuleRequest(
		"<YOUR_INDEX_NAME>", "id1",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteSourceOfSearch() {
	/*
	   Snippet for the deleteSource method.

	   deleteSource
	*/

	// >SEPARATOR deleteSource default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteSource(client.NewApiDeleteSourceRequest(
		"theSource",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteSynonymOfSearch() {
	/*
	   Snippet for the deleteSynonym method.

	   deleteSynonym
	*/

	// >SEPARATOR deleteSynonym default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteSynonym(client.NewApiDeleteSynonymRequest(
		"<YOUR_INDEX_NAME>", "id1",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGenerateSecuredApiKeyOfSearch() {
	/*
	   Snippet for the generateSecuredApiKey method.

	   generate secured api key basic
	*/

	// >SEPARATOR generateSecuredApiKey generate secured api key basic
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GenerateSecuredApiKey(
		"2640659426d5107b6e47d75db9cbaef8",
		search.NewEmptySecuredApiKeyRestrictions().SetValidUntil(2524604400).SetRestrictIndices(
			[]string{"Movies"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGenerateSecuredApiKeyOfSearch1() {
	/*
	   Snippet for the generateSecuredApiKey method.

	   generate secured api key with searchParams
	*/

	// >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GenerateSecuredApiKey(
		"2640659426d5107b6e47d75db9cbaef8",
		search.NewEmptySecuredApiKeyRestrictions().SetValidUntil(2524604400).SetRestrictIndices(
			[]string{"Movies", "cts_e2e_settings"}).SetRestrictSources("192.168.1.0/24").SetFilters("category:Book OR category:Ebook AND _tags:published").SetUserToken("user123").SetSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("batman").SetTypoTolerance(search.TypoToleranceEnumAsTypoTolerance(search.TypoToleranceEnum("strict"))).SetAroundRadius(search.AroundRadiusAllAsAroundRadius(search.AroundRadiusAll("all"))).SetMode(search.Mode("neuralSearch")).SetHitsPerPage(10).SetOptionalWords(
				[]string{"one", "two"})),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetApiKeyOfSearch() {
	/*
	   Snippet for the getApiKey method.

	   getApiKey
	*/

	// >SEPARATOR getApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetApiKey(client.NewApiGetApiKeyRequest(
		"myTestApiKey",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetAppTaskOfSearch() {
	/*
	   Snippet for the getAppTask method.

	   getAppTask
	*/

	// >SEPARATOR getAppTask default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetAppTask(client.NewApiGetAppTaskRequest(
		123,
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetDictionaryLanguagesOfSearch() {
	/*
	   Snippet for the getDictionaryLanguages method.

	   get getDictionaryLanguages
	*/

	// >SEPARATOR getDictionaryLanguages default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetDictionaryLanguages()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetDictionarySettingsOfSearch() {
	/*
	   Snippet for the getDictionarySettings method.

	   get getDictionarySettings results
	*/

	// >SEPARATOR getDictionarySettings default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetDictionarySettings()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetLogsOfSearch() {
	/*
	   Snippet for the getLogs method.

	   getLogs with minimal parameters
	*/

	// >SEPARATOR getLogs default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetLogs(client.NewApiGetLogsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetObjectOfSearch() {
	/*
	   Snippet for the getObject method.

	   getObject
	*/

	// >SEPARATOR getObject default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetObject(client.NewApiGetObjectRequest(
		"<YOUR_INDEX_NAME>", "uniqueID",
	).WithAttributesToRetrieve(
		[]string{"attr1", "attr2"}))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetObjectsOfSearch() {
	/*
	   Snippet for the getObjects method.

	   getObjects
	*/

	// >SEPARATOR getObjects default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetObjects(client.NewApiGetObjectsRequest(

		search.NewEmptyGetObjectsParams().SetRequests(
			[]search.GetObjectsRequest{*search.NewEmptyGetObjectsRequest().SetAttributesToRetrieve(
				[]string{"attr1", "attr2"}).SetObjectID("uniqueID").SetIndexName("<YOUR_INDEX_NAME>")}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetRuleOfSearch() {
	/*
	   Snippet for the getRule method.

	   getRule
	*/

	// >SEPARATOR getRule default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRule(client.NewApiGetRuleRequest(
		"<YOUR_INDEX_NAME>", "qr-1725004648916",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetSettingsOfSearch() {
	/*
	   Snippet for the getSettings method.

	   getSettings
	*/

	// >SEPARATOR getSettings default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetSettings(client.NewApiGetSettingsRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetSourcesOfSearch() {
	/*
	   Snippet for the getSources method.

	   getSources
	*/

	// >SEPARATOR getSources default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetSources()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetSynonymOfSearch() {
	/*
	   Snippet for the getSynonym method.

	   getSynonym
	*/

	// >SEPARATOR getSynonym default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetSynonym(client.NewApiGetSynonymRequest(
		"<YOUR_INDEX_NAME>", "id1",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetTaskOfSearch() {
	/*
	   Snippet for the getTask method.

	   getTask
	*/

	// >SEPARATOR getTask default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTask(client.NewApiGetTaskRequest(
		"<YOUR_INDEX_NAME>", 123,
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetTopUserIdsOfSearch() {
	/*
	   Snippet for the getTopUserIds method.

	   getTopUserIds
	*/

	// >SEPARATOR getTopUserIds default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTopUserIds()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetUserIdOfSearch() {
	/*
	   Snippet for the getUserId method.

	   getUserId
	*/

	// >SEPARATOR getUserId default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetUserId(client.NewApiGetUserIdRequest(
		"uniqueID",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForHasPendingMappingsOfSearch() {
	/*
	   Snippet for the hasPendingMappings method.

	   hasPendingMappings with minimal parameters
	*/

	// >SEPARATOR hasPendingMappings default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.HasPendingMappings(client.NewApiHasPendingMappingsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForIndexExistsOfSearch() {
	/*
	   Snippet for the indexExists method.

	   indexExists
	*/

	// >SEPARATOR indexExists indexExists
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.IndexExists(
		"<YOUR_INDEX_NAME>",
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForIndexExistsOfSearch1() {
	/*
	   Snippet for the indexExists method.

	   indexNotExists
	*/

	// >SEPARATOR indexExists indexNotExists
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.IndexExists(
		"<YOUR_INDEX_NAME>",
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForIndexExistsOfSearch2() {
	/*
	   Snippet for the indexExists method.

	   indexExistsWithError
	*/

	// >SEPARATOR indexExists indexExistsWithError
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.IndexExists(
		"<YOUR_INDEX_NAME>",
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListApiKeysOfSearch() {
	/*
	   Snippet for the listApiKeys method.

	   listApiKeys
	*/

	// >SEPARATOR listApiKeys default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListApiKeys()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListClustersOfSearch() {
	/*
	   Snippet for the listClusters method.

	   listClusters
	*/

	// >SEPARATOR listClusters default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListClusters()
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListIndicesOfSearch() {
	/*
	   Snippet for the listIndices method.

	   listIndices with minimal parameters
	*/

	// >SEPARATOR listIndices default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListIndices(client.NewApiListIndicesRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListUserIdsOfSearch() {
	/*
	   Snippet for the listUserIds method.

	   listUserIds with minimal parameters
	*/

	// >SEPARATOR listUserIds default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListUserIds(client.NewApiListUserIdsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForMultipleBatchOfSearch() {
	/*
	   Snippet for the multipleBatch method.

	   multipleBatch
	*/

	// >SEPARATOR multipleBatch default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

		search.NewEmptyBatchParams().SetRequests(
			[]search.MultipleBatchRequest{*search.NewEmptyMultipleBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "value"}).SetIndexName("<YOUR_INDEX_NAME>")}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForOperationIndexOfSearch() {
	/*
	   Snippet for the operationIndex method.

	   scopes
	*/

	// >SEPARATOR operationIndex scopes
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.OperationIndex(client.NewApiOperationIndexRequest(
		"<SOURCE_INDEX_NAME>",
		search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("move")).SetDestination("<DESTINATION_INDEX_NAME>").SetScope(
			[]search.ScopeType{search.ScopeType("rules"), search.ScopeType("settings")}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForOperationIndexOfSearch1() {
	/*
	   Snippet for the operationIndex method.

	   copy
	*/

	// >SEPARATOR operationIndex copy
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.OperationIndex(client.NewApiOperationIndexRequest(
		"<SOURCE_INDEX_NAME>",
		search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("copy")).SetDestination("<DESTINATION_INDEX_NAME>"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForOperationIndexOfSearch2() {
	/*
	   Snippet for the operationIndex method.

	   move
	*/

	// >SEPARATOR operationIndex move
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.OperationIndex(client.NewApiOperationIndexRequest(
		"<SOURCE_INDEX_NAME>",
		search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("move")).SetDestination("<DESTINATION_INDEX_NAME>"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForPartialUpdateObjectOfSearch() {
	/*
	   Snippet for the partialUpdateObject method.

	   Partial update with a new value for a string attribute
	*/

	// >SEPARATOR partialUpdateObject default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
		"<YOUR_INDEX_NAME>", "uniqueID", map[string]any{"attributeId": "new value"},
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForPartialUpdateObjectsOfSearch() {
	/*
	   Snippet for the partialUpdateObjects method.

	   call partialUpdateObjects with createIfNotExists=true
	*/

	// >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PartialUpdateObjects(
		"<YOUR_INDEX_NAME>",
		[]map[string]any{map[string]any{"objectID": "1", "name": "Adam"}, map[string]any{"objectID": "2", "name": "Benoit"}},
		search.WithCreateIfNotExists(true))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForPartialUpdateObjectsOfSearch1() {
	/*
	   Snippet for the partialUpdateObjects method.

	   call partialUpdateObjects with createIfNotExists=false
	*/

	// >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PartialUpdateObjects(
		"<YOUR_INDEX_NAME>",
		[]map[string]any{map[string]any{"objectID": "3", "name": "Cyril"}, map[string]any{"objectID": "4", "name": "David"}},
		search.WithCreateIfNotExists(false))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForRemoveUserIdOfSearch() {
	/*
	   Snippet for the removeUserId method.

	   removeUserId
	*/

	// >SEPARATOR removeUserId default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RemoveUserId(client.NewApiRemoveUserIdRequest(
		"uniqueID",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForReplaceAllObjectsOfSearch() {
	/*
	   Snippet for the replaceAllObjects method.

	   call replaceAllObjects without error
	*/

	// >SEPARATOR replaceAllObjects default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ReplaceAllObjects(
		"<YOUR_INDEX_NAME>",
		[]map[string]any{map[string]any{"objectID": "1", "name": "Adam"}, map[string]any{"objectID": "2", "name": "Benoit"}, map[string]any{"objectID": "3", "name": "Cyril"}, map[string]any{"objectID": "4", "name": "David"}, map[string]any{"objectID": "5", "name": "Eva"}, map[string]any{"objectID": "6", "name": "Fiona"}, map[string]any{"objectID": "7", "name": "Gael"}, map[string]any{"objectID": "8", "name": "Hugo"}, map[string]any{"objectID": "9", "name": "Igor"}, map[string]any{"objectID": "10", "name": "Julia"}},
		search.WithBatchSize(3))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForReplaceSourcesOfSearch() {
	/*
	   Snippet for the replaceSources method.

	   replaceSources
	*/

	// >SEPARATOR replaceSources default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ReplaceSources(client.NewApiReplaceSourcesRequest(

		[]search.Source{*search.NewEmptySource().SetSource("theSource").SetDescription("theDescription")},
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForRestoreApiKeyOfSearch() {
	/*
	   Snippet for the restoreApiKey method.

	   restoreApiKey
	*/

	// >SEPARATOR restoreApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RestoreApiKey(client.NewApiRestoreApiKeyRequest(
		"ALGOLIA_API_KEY",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveObjectOfSearch() {
	/*
	   Snippet for the saveObject method.

	   saveObject
	*/

	// >SEPARATOR saveObject default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveObject(client.NewApiSaveObjectRequest(
		"<YOUR_INDEX_NAME>", map[string]any{"objectID": "id", "test": "val"},
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveObjectsOfSearch() {
	/*
	   Snippet for the saveObjects method.

	   call saveObjects without error
	*/

	// >SEPARATOR saveObjects call saveObjects without error
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveObjects(
		"<YOUR_INDEX_NAME>",
		[]map[string]any{map[string]any{"objectID": "1", "name": "Adam"}, map[string]any{"objectID": "2", "name": "Benoit"}},
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveObjectsOfSearch1() {
	/*
	   Snippet for the saveObjects method.

	   saveObjects should report errors
	*/

	// >SEPARATOR saveObjects saveObjects should report errors
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveObjects(
		"<YOUR_INDEX_NAME>",
		[]map[string]any{map[string]any{"objectID": "1", "name": "Adam"}, map[string]any{"objectID": "2", "name": "Benoit"}},
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveRuleOfSearch() {
	/*
	   Snippet for the saveRule method.

	   saveRule with minimal parameters
	*/

	// >SEPARATOR saveRule default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveRule(client.NewApiSaveRuleRequest(
		"<YOUR_INDEX_NAME>", "id1",
		search.NewEmptyRule().SetObjectID("id1").SetConditions(
			[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveRulesOfSearch() {
	/*
	   Snippet for the saveRules method.

	   saveRules with minimal parameters
	*/

	// >SEPARATOR saveRules default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveRules(client.NewApiSaveRulesRequest(
		"<YOUR_INDEX_NAME>",
		[]search.Rule{*search.NewEmptyRule().SetObjectID("a-rule-id").SetConditions(
			[]search.Condition{*search.NewEmptyCondition().SetPattern("smartphone").SetAnchoring(search.Anchoring("contains"))}), *search.NewEmptyRule().SetObjectID("a-second-rule-id").SetConditions(
			[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains"))})},
	).WithForwardToReplicas(false).WithClearExistingRules(true))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveSynonymOfSearch() {
	/*
	   Snippet for the saveSynonym method.

	   saveSynonym
	*/

	// >SEPARATOR saveSynonym default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveSynonym(client.NewApiSaveSynonymRequest(
		"<YOUR_INDEX_NAME>", "id1",
		search.NewEmptySynonymHit().SetObjectID("id1").SetType(search.SynonymType("synonym")).SetSynonyms(
			[]string{"car", "vehicule", "auto"}),
	).WithForwardToReplicas(true))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSaveSynonymsOfSearch() {
	/*
	   Snippet for the saveSynonyms method.

	   saveSynonyms
	*/

	// >SEPARATOR saveSynonyms default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SaveSynonyms(client.NewApiSaveSynonymsRequest(
		"<YOUR_INDEX_NAME>",
		[]search.SynonymHit{*search.NewEmptySynonymHit().SetObjectID("id1").SetType(search.SynonymType("synonym")).SetSynonyms(
			[]string{"car", "vehicule", "auto"}), *search.NewEmptySynonymHit().SetObjectID("id2").SetType(search.SynonymType("onewaysynonym")).SetInput("iphone").SetSynonyms(
			[]string{"ephone", "aphone", "yphone"})},
	).WithForwardToReplicas(true).WithReplaceExistingSynonyms(true))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch() {
	/*
	   Snippet for the search method.

	   withHitsPerPage
	*/

	// >SEPARATOR search withHitsPerPage
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetHitsPerPage(50))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch1() {
	/*
	   Snippet for the search method.

	   filterOnly
	*/

	// >SEPARATOR search filterOnly
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("actor:Scarlett Johansson"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch2() {
	/*
	   Snippet for the search method.

	   filterOr
	*/

	// >SEPARATOR search filterOr
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("actor:Tom Cruise OR actor:Scarlett Johansson"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch3() {
	/*
	   Snippet for the search method.

	   filterNot
	*/

	// >SEPARATOR search filterNot
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("NOT actor:Nicolas Cage"))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch4() {
	/*
	   Snippet for the search method.

	   retrieveFacets
	*/

	// >SEPARATOR search retrieveFacets
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFacets(
					[]string{"author", "genre"}))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchOfSearch5() {
	/*
	   Snippet for the search method.

	   retrieveFacetsWildcard
	*/

	// >SEPARATOR search retrieveFacetsWildcard
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Search(client.NewApiSearchRequest(

		search.NewEmptySearchMethodParams().SetRequests(
			[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
				search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFacets(
					[]string{"*"}))}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchDictionaryEntriesOfSearch() {
	/*
	   Snippet for the searchDictionaryEntries method.

	   get searchDictionaryEntries results with minimal parameters
	*/

	// >SEPARATOR searchDictionaryEntries default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchDictionaryEntries(client.NewApiSearchDictionaryEntriesRequest(
		search.DictionaryType("stopwords"),
		search.NewEmptySearchDictionaryEntriesParams().SetQuery("about"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchForFacetValuesOfSearch() {
	/*
	   Snippet for the searchForFacetValues method.

	   get searchForFacetValues results with minimal parameters
	*/

	// >SEPARATOR searchForFacetValues default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
		"<YOUR_INDEX_NAME>", "facetName",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchRulesOfSearch() {
	/*
	   Snippet for the searchRules method.

	   searchRules
	*/

	// >SEPARATOR searchRules default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchRules(client.NewApiSearchRulesRequest(
		"<YOUR_INDEX_NAME>",
	).WithSearchRulesParams(
		search.NewEmptySearchRulesParams().SetQuery("zorro")))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchSingleIndexOfSearch() {
	/*
	   Snippet for the searchSingleIndex method.

	   search with minimal parameters
	*/

	// >SEPARATOR searchSingleIndex default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchSynonymsOfSearch() {
	/*
	   Snippet for the searchSynonyms method.

	   searchSynonyms with minimal parameters
	*/

	// >SEPARATOR searchSynonyms default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchSynonyms(client.NewApiSearchSynonymsRequest(
		"<YOUR_INDEX_NAME>",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchUserIdsOfSearch() {
	/*
	   Snippet for the searchUserIds method.

	   searchUserIds
	*/

	// >SEPARATOR searchUserIds default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchUserIds(client.NewApiSearchUserIdsRequest(

		search.NewEmptySearchUserIdsParams().SetQuery("test").SetClusterName("theClusterName").SetPage(5).SetHitsPerPage(10),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSetClientApiKeyOfSearch() {
	/*
	   Snippet for the setClientApiKey method.

	   switch API key
	*/

	// >SEPARATOR setClientApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	err = client.SetClientApiKey(
		"updated-api-key",
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// SEPARATOR<
}
func SnippetForSetDictionarySettingsOfSearch() {
	/*
	   Snippet for the setDictionarySettings method.

	   get setDictionarySettings results with minimal parameters
	*/

	// >SEPARATOR setDictionarySettings default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SetDictionarySettings(client.NewApiSetDictionarySettingsRequest(

		search.NewEmptyDictionarySettingsParams().SetDisableStandardEntries(
			search.NewEmptyStandardEntries().SetPlurals(map[string]bool{"fr": false, "en": false, "ru": true})),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSetSettingsOfSearch() {
	/*
	   Snippet for the setSettings method.

	   setSettingsAttributesForFaceting
	*/

	// >SEPARATOR setSettings default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SetSettings(client.NewApiSetSettingsRequest(
		"<YOUR_INDEX_NAME>",
		search.NewEmptyIndexSettings().SetAttributesForFaceting(
			[]string{"actor", "filterOnly(category)", "searchable(publisher)"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateApiKeyOfSearch() {
	/*
	   Snippet for the updateApiKey method.

	   updateApiKey
	*/

	// >SEPARATOR updateApiKey default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateApiKey(client.NewApiUpdateApiKeyRequest(
		"ALGOLIA_API_KEY",
		search.NewEmptyApiKey().SetAcl(
			[]search.Acl{search.Acl("search"), search.Acl("addObject")}).SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForWaitForApiKeyOfSearch() {
	/*
	   Snippet for the waitForApiKey method.

	   wait for api key helper - add
	*/

	// >SEPARATOR waitForApiKey wait for api key helper - add
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.WaitForApiKey(
		"api-key-add-operation-test-go", search.ApiKeyOperation("add"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForWaitForApiKeyOfSearch1() {
	/*
	   Snippet for the waitForApiKey method.

	   wait for api key - update
	*/

	// >SEPARATOR waitForApiKey wait for api key - update
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.WaitForApiKey(
		"api-key-update-operation-test-go", search.ApiKeyOperation("update"),
		search.WithApiKey(
			search.NewEmptyApiKey().SetDescription("my updated api key").SetAcl(
				[]search.Acl{search.Acl("search"), search.Acl("addObject"), search.Acl("deleteObject")}).SetIndexes(
				[]string{"Movies", "Books"}).SetReferers(
				[]string{"*google.com", "*algolia.com"}).SetValidity(305).SetMaxQueriesPerIPPerHour(95).SetMaxHitsPerQuery(20)))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForWaitForApiKeyOfSearch2() {
	/*
	   Snippet for the waitForApiKey method.

	   wait for api key - delete
	*/

	// >SEPARATOR waitForApiKey wait for api key - delete
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.WaitForApiKey(
		"api-key-delete-operation-test-go", search.ApiKeyOperation("delete"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForWaitForAppTaskOfSearch() {
	/*
	   Snippet for the waitForAppTask method.

	   wait for an application-level task
	*/

	// >SEPARATOR waitForAppTask default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.WaitForAppTask(
		123,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForWaitForTaskOfSearch() {
	/*
	   Snippet for the waitForTask method.

	   wait for task
	*/

	// >SEPARATOR waitForTask default
	// Initialize the client
	client, err := search.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.WaitForTask(
		"<YOUR_INDEX_NAME>", 123,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
