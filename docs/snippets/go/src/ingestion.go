package snippets

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import (
	"context"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/next/ingestion"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

// IMPORT<

func SnippetForCreateAuthenticationOfIngestion() {
	/*
	   Snippet for the createAuthentication method.

	   createAuthenticationOAuth
	*/

	// >SEPARATOR createAuthentication createAuthenticationOAuth
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateAuthentication(
		context.Background(),
		ingestion.AUTHENTICATION_TYPE_OAUTH,
		"authName",
		ingestion.AuthOAuthAsAuthInput(
			ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret")),
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateAuthenticationOfIngestion1() {
	/*
	   Snippet for the createAuthentication method.

	   createAuthenticationAlgolia
	*/

	// >SEPARATOR createAuthentication createAuthenticationAlgolia
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateAuthentication(
		context.Background(),
		ingestion.AUTHENTICATION_TYPE_ALGOLIA,
		"authName",
		ingestion.AuthAlgoliaAsAuthInput(
			ingestion.NewEmptyAuthAlgolia().SetAppID("ALGOLIA_APPLICATION_ID").SetApiKey("ALGOLIA_API_KEY")),
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateDestinationOfIngestion() {
	/*
	   Snippet for the createDestination method.

	   createDestination
	*/

	// >SEPARATOR createDestination createDestination
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateDestination(
		context.Background(),
		ingestion.DESTINATION_TYPE_SEARCH,
		"destinationName",
		ingestion.NewEmptyDestinationInput().
			SetIndexName("<YOUR_INDEX_NAME>"),
		ingestion.NewCreateDestinationOptions().WithAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateDestinationOfIngestion1() {
	/*
	   Snippet for the createDestination method.

	   with transformationIDs
	*/

	// >SEPARATOR createDestination with transformationIDs
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateDestination(context.Background(), ingestion.DESTINATION_TYPE_SEARCH, "destinationName",
		ingestion.NewEmptyDestinationInput().SetIndexName("<YOUR_INDEX_NAME>"), ingestion.NewCreateDestinationOptions().WithTransformationIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateSourceOfIngestion() {
	/*
	   Snippet for the createSource method.

	   createSource
	*/

	// >SEPARATOR createSource createSource
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateSource(
		context.Background(),
		ingestion.SOURCE_TYPE_COMMERCETOOLS,
		"sourceName",
		ingestion.NewCreateSourceOptions().WithInput(ingestion.SourceCommercetoolsAsSourceInput(
			ingestion.NewEmptySourceCommercetools().SetStoreKeys(
				[]string{"myStore"}).SetLocales(
				[]string{
					"de",
				}).
				SetUrl("http://commercetools.com").
				SetProjectKey("keyID").
				SetProductQueryPredicate("masterVariant(attributes(name=\"Brand\" and value=\"Algolia\"))"),
		)).WithAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateSourceOfIngestion1() {
	/*
	   Snippet for the createSource method.

	   push
	*/

	// >SEPARATOR createSource push
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateSource(context.Background(), ingestion.SOURCE_TYPE_PUSH, "pushezpourentrer", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskOfIngestion() {
	/*
	   Snippet for the createTask method.

	   task without cron
	*/

	// >SEPARATOR createTask task without cron
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTask(context.Background(), "search", "destinationID", ingestion.ACTION_TYPE_REPLACE, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskOfIngestion1() {
	/*
	   Snippet for the createTask method.

	   task with cron
	*/

	// >SEPARATOR createTask task with cron
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTask(
		context.Background(),
		"search",
		"destinationID",
		ingestion.ACTION_TYPE_REPLACE,
		ingestion.NewCreateTaskOptions().WithCron("* * * * *").WithNotifications(
			ingestion.NewEmptyNotifications().SetEmail(
				ingestion.NewEmptyEmailNotifications().SetEnabled(true))).WithPolicies(
			ingestion.NewEmptyPolicies().SetCriticalThreshold(8)),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskOfIngestion2() {
	/*
	   Snippet for the createTask method.

	   task shopify
	*/

	// >SEPARATOR createTask task shopify
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTask(
		context.Background(),
		"search",
		"destinationID",
		ingestion.ACTION_TYPE_REPLACE,
		ingestion.NewCreateTaskOptions().WithCron("* * * * *").WithInput(ingestion.DockerStreamsInputAsTaskInput(
			ingestion.NewEmptyDockerStreamsInput().SetStreams(
				[]ingestion.DockerStreams{
					*ingestion.NewEmptyDockerStreams().SetName("foo").SetSyncMode(ingestion.DOCKER_STREAMS_SYNC_MODE_INCREMENTAL),
				}),
		)),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskV1OfIngestion() {
	/*
	   Snippet for the createTaskV1 method.

	   createTaskOnDemand
	*/

	// >SEPARATOR createTaskV1 createTaskOnDemand
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTaskV1(context.Background(), "search", "destinationName", ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
		ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.ON_DEMAND_TRIGGER_TYPE_ON_DEMAND)), ingestion.ACTION_TYPE_REPLACE, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskV1OfIngestion1() {
	/*
	   Snippet for the createTaskV1 method.

	   createTaskSchedule
	*/

	// >SEPARATOR createTaskV1 createTaskSchedule
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTaskV1(context.Background(), "search", "destinationName", ingestion.ScheduleTriggerInputAsTaskCreateTrigger(
		ingestion.NewEmptyScheduleTriggerInput().
			SetType(ingestion.SCHEDULE_TRIGGER_TYPE_SCHEDULE).
			SetCron("* * * * *"),
	), ingestion.ACTION_TYPE_REPLACE, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskV1OfIngestion2() {
	/*
	   Snippet for the createTaskV1 method.

	   createTaskSubscription
	*/

	// >SEPARATOR createTaskV1 createTaskSubscription
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTaskV1(context.Background(), "search", "destinationName", ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
		ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.ON_DEMAND_TRIGGER_TYPE_ON_DEMAND)), ingestion.ACTION_TYPE_REPLACE, nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTaskV1OfIngestion3() {
	/*
	   Snippet for the createTaskV1 method.

	   task shopify
	*/

	// >SEPARATOR createTaskV1 task shopify
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTaskV1(context.Background(), "search", "destinationName", ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
		ingestion.NewEmptyOnDemandTriggerInput().
			SetType(ingestion.ON_DEMAND_TRIGGER_TYPE_ON_DEMAND),
	), ingestion.ACTION_TYPE_REPLACE, ingestion.NewCreateTaskV1Options().WithInput(ingestion.DockerStreamsInputAsTaskInput(
		ingestion.NewEmptyDockerStreamsInput().SetStreams(
			[]ingestion.DockerStreams{
				*ingestion.NewEmptyDockerStreams().SetName("foo").SetSyncMode(ingestion.DOCKER_STREAMS_SYNC_MODE_INCREMENTAL),
			}),
	)))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCreateTransformationOfIngestion() {
	/*
	   Snippet for the createTransformation method.

	   createTransformation
	*/

	// >SEPARATOR createTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTransformation(
		context.Background(),
		"bar",
		ingestion.NewCreateTransformationOptions().WithInput(ingestion.TransformationCodeAsTransformationInput(
			ingestion.NewEmptyTransformationCode().SetCode("foo"))).WithType(ingestion.TRANSFORMATION_TYPE_CODE).WithDescription("baz"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfIngestion() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with minimal parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomDeleteOfIngestion1() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with all parameters
	*/

	// >SEPARATOR customDelete allow del method for a custom path with all parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(context.Background(), "test/all", map[string]any{"query": "parameters"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfIngestion() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with minimal parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfIngestion1() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with all parameters
	*/

	// >SEPARATOR customGet allow get method for a custom path with all parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(context.Background(), "test/all", map[string]any{"query": "parameters with space"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomGetOfIngestion2() {
	/*
	   Snippet for the customGet method.

	   requestOptions should be escaped too
	*/

	// >SEPARATOR customGet requestOptions should be escaped too
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(
		context.Background(),
		"test/all",
		map[string]any{"query": "to be overridden"},
		ingestion.WithQueryParam("query", "parameters with space"),
		ingestion.WithQueryParam("and an array",
			[]string{"array", "with spaces"}),
		ingestion.WithHeaderParam("x-header-1", "spaces are left alone"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion1() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with all parameters
	*/

	// >SEPARATOR customPost allow post method for a custom path with all parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/all",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion2() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default query parameters
	*/

	// >SEPARATOR customPost requestOptions can override default query parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("query", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion3() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges query parameters with default ones
	*/

	// >SEPARATOR customPost requestOptions merges query parameters with default ones
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("query2", "myQueryParameter"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion4() {
	/*
	   Snippet for the customPost method.

	   requestOptions can override default headers
	*/

	// >SEPARATOR customPost requestOptions can override default headers
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion5() {
	/*
	   Snippet for the customPost method.

	   requestOptions merges headers with default ones
	*/

	// >SEPARATOR customPost requestOptions merges headers with default ones
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion6() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts booleans
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("isItWorking", true),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion7() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts integers
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("myParam", 2),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion8() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of string
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of string
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("myParam",
			[]string{"b and c", "d"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion9() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of booleans
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("myParam",
			[]bool{true, true, false}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPostOfIngestion10() {
	/*
	   Snippet for the customPost method.

	   requestOptions queryParameters accepts list of integers
	*/

	// >SEPARATOR customPost requestOptions queryParameters accepts list of integers
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(
		context.Background(),
		"test/requestOptions",
		ingestion.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
		ingestion.WithQueryParam("myParam",
			[]int{1, 2}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfIngestion() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with minimal parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(context.Background(), "test/minimal", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForCustomPutOfIngestion1() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with all parameters
	*/

	// >SEPARATOR customPut allow put method for a custom path with all parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(
		context.Background(),
		"test/all",
		ingestion.NewCustomPutOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteAuthenticationOfIngestion() {
	/*
	   Snippet for the deleteAuthentication method.

	   deleteAuthentication
	*/

	// >SEPARATOR deleteAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteAuthentication(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteDestinationOfIngestion() {
	/*
	   Snippet for the deleteDestination method.

	   deleteDestination
	*/

	// >SEPARATOR deleteDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteDestination(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteSourceOfIngestion() {
	/*
	   Snippet for the deleteSource method.

	   deleteSource
	*/

	// >SEPARATOR deleteSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteSource(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteTaskOfIngestion() {
	/*
	   Snippet for the deleteTask method.

	   deleteTask
	*/

	// >SEPARATOR deleteTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTask(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteTaskV1OfIngestion() {
	/*
	   Snippet for the deleteTaskV1 method.

	   deleteTaskV1
	*/

	// >SEPARATOR deleteTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTaskV1(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDeleteTransformationOfIngestion() {
	/*
	   Snippet for the deleteTransformation method.

	   deleteTransformation
	*/

	// >SEPARATOR deleteTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTransformation(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDisableTaskOfIngestion() {
	/*
	   Snippet for the disableTask method.

	   disableTask
	*/

	// >SEPARATOR disableTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DisableTask(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForDisableTaskV1OfIngestion() {
	/*
	   Snippet for the disableTaskV1 method.

	   disableTaskV1
	*/

	// >SEPARATOR disableTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DisableTaskV1(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForEnableTaskOfIngestion() {
	/*
	   Snippet for the enableTask method.

	   enableTask
	*/

	// >SEPARATOR enableTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.EnableTask(context.Background(), "76ab4c2a-ce17-496f-b7a6-506dc59ee498")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForEnableTaskV1OfIngestion() {
	/*
	   Snippet for the enableTaskV1 method.

	   enableTaskV1
	*/

	// >SEPARATOR enableTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.EnableTaskV1(context.Background(), "76ab4c2a-ce17-496f-b7a6-506dc59ee498")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetAuthenticationOfIngestion() {
	/*
	   Snippet for the getAuthentication method.

	   getAuthentication
	*/

	// >SEPARATOR getAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetAuthentication(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetDestinationOfIngestion() {
	/*
	   Snippet for the getDestination method.

	   getDestination
	*/

	// >SEPARATOR getDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetDestination(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetEventOfIngestion() {
	/*
	   Snippet for the getEvent method.

	   getEvent
	*/

	// >SEPARATOR getEvent default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetEvent(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "6c02aeb1-775e-418e-870b-1faccd4b2c0c")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetRunOfIngestion() {
	/*
	   Snippet for the getRun method.

	   getRun
	*/

	// >SEPARATOR getRun default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRun(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetSourceOfIngestion() {
	/*
	   Snippet for the getSource method.

	   getSource
	*/

	// >SEPARATOR getSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetSource(context.Background(), "75eeb306-51d3-4e5e-a279-3c92bd8893ac")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetTaskOfIngestion() {
	/*
	   Snippet for the getTask method.

	   getTask
	*/

	// >SEPARATOR getTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTask(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetTaskV1OfIngestion() {
	/*
	   Snippet for the getTaskV1 method.

	   getTaskV1
	*/

	// >SEPARATOR getTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTaskV1(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForGetTransformationOfIngestion() {
	/*
	   Snippet for the getTransformation method.

	   getTransformation
	*/

	// >SEPARATOR getTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTransformation(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListAuthenticationsOfIngestion() {
	/*
	   Snippet for the listAuthentications method.

	   getAuthentications
	*/

	// >SEPARATOR listAuthentications getAuthentications
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListAuthentications(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListAuthenticationsOfIngestion1() {
	/*
	   Snippet for the listAuthentications method.

	   getAuthentications with query params
	*/

	// >SEPARATOR listAuthentications getAuthentications with query params
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListAuthentications(
		context.Background(),
		ingestion.NewListAuthenticationsOptions().WithItemsPerPage(2).WithPage(1).WithType(
			[]ingestion.AuthenticationType{ingestion.AUTHENTICATION_TYPE_BASIC, ingestion.AUTHENTICATION_TYPE_ALGOLIA}).WithPlatform(
			[]ingestion.PlatformWithNone{
				*ingestion.PlatformNoneAsPlatformWithNone(ingestion.PLATFORM_NONE_NONE),
			}).
			WithSort(ingestion.AUTHENTICATION_SORT_KEYS_CREATED_AT).WithOrder(ingestion.ORDER_KEYS_ASC),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListDestinationsOfIngestion() {
	/*
	   Snippet for the listDestinations method.

	   getDestinations
	*/

	// >SEPARATOR listDestinations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListDestinations(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListEventsOfIngestion() {
	/*
	   Snippet for the listEvents method.

	   getEvents
	*/

	// >SEPARATOR listEvents default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListEvents(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListRunsOfIngestion() {
	/*
	   Snippet for the listRuns method.

	   listRuns
	*/

	// >SEPARATOR listRuns default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListRuns(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListSourcesOfIngestion() {
	/*
	   Snippet for the listSources method.

	   listSources
	*/

	// >SEPARATOR listSources default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListSources(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListTasksOfIngestion() {
	/*
	   Snippet for the listTasks method.

	   listTasks
	*/

	// >SEPARATOR listTasks default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTasks(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListTasksV1OfIngestion() {
	/*
	   Snippet for the listTasksV1 method.

	   listTasksV1
	*/

	// >SEPARATOR listTasksV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTasksV1(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListTransformationsOfIngestion() {
	/*
	   Snippet for the listTransformations method.

	   listTransformations
	*/

	// >SEPARATOR listTransformations listTransformations
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTransformations(context.Background(), nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForListTransformationsOfIngestion1() {
	/*
	   Snippet for the listTransformations method.

	   list with every parameters
	*/

	// >SEPARATOR listTransformations list with every parameters
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTransformations(
		context.Background(),
		ingestion.NewListTransformationsOptions().
			WithItemsPerPage(2).
			WithPage(1).
			WithSort(ingestion.TRANSFORMATION_SORT_KEYS_CREATED_AT).
			WithOrder(ingestion.ORDER_KEYS_ASC).
			WithType(ingestion.TRANSFORMATION_TYPE_NO_CODE),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForPushOfIngestion() {
	/*
	   Snippet for the push method.

	   global push
	*/

	// >SEPARATOR push global push
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Push(
		context.Background(),
		"<YOUR_INDEX_NAME>",
		ingestion.ACTION_ADD_OBJECT,
		[]ingestion.PushTaskRecords{
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
		},
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForPushOfIngestion1() {
	/*
	   Snippet for the push method.

	   global push with watch mode
	*/

	// >SEPARATOR push global push with watch mode
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.Push(
		context.Background(),
		"<YOUR_INDEX_NAME>",
		ingestion.ACTION_ADD_OBJECT,
		[]ingestion.PushTaskRecords{
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
		},
		ingestion.NewPushOptions().WithWatch(true).WithReferenceIndexName("foo"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForPushTaskOfIngestion() {
	/*
	   Snippet for the pushTask method.

	   pushTask
	*/

	// >SEPARATOR pushTask pushTask
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PushTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.ACTION_ADD_OBJECT,
		[]ingestion.PushTaskRecords{
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
		},
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForPushTaskOfIngestion1() {
	/*
	   Snippet for the pushTask method.

	   allows for watch query parameter
	*/

	// >SEPARATOR pushTask allows for watch query parameter
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PushTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.ACTION_ADD_OBJECT,
		[]ingestion.PushTaskRecords{
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"),
			*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k"),
		},
		utils.ToPtr(true),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForReplaceTaskOfIngestion() {
	/*
	   Snippet for the replaceTask method.

	   fully replace task without cron
	*/

	// >SEPARATOR replaceTask fully replace task without cron
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ReplaceTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		"destinationID",
		ingestion.ACTION_TYPE_REPLACE,
		nil,
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForReplaceTaskOfIngestion1() {
	/*
	   Snippet for the replaceTask method.

	   fully replace task with cron
	*/

	// >SEPARATOR replaceTask fully replace task with cron
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ReplaceTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		"destinationID",
		ingestion.ACTION_TYPE_REPLACE,
		ingestion.NewReplaceTaskOptions().WithCron("* * * * *").WithNotifications(
			ingestion.NewEmptyNotifications().SetEmail(
				ingestion.NewEmptyEmailNotifications().SetEnabled(true))).WithPolicies(
			ingestion.NewEmptyPolicies().SetCriticalThreshold(8)),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForReplaceTaskOfIngestion2() {
	/*
	   Snippet for the replaceTask method.

	   fully replace task shopify
	*/

	// >SEPARATOR replaceTask fully replace task shopify
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ReplaceTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		"destinationID",
		ingestion.ACTION_TYPE_REPLACE,
		ingestion.NewReplaceTaskOptions().WithCron("* * * * *").WithInput(ingestion.DockerStreamsInputAsTaskInput(
			ingestion.NewEmptyDockerStreamsInput().SetStreams(
				[]ingestion.DockerStreams{
					*ingestion.NewEmptyDockerStreams().SetName("foo").SetSyncMode(ingestion.DOCKER_STREAMS_SYNC_MODE_INCREMENTAL),
				}),
		)),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForRunSourceOfIngestion() {
	/*
	   Snippet for the runSource method.

	   runSource
	*/

	// >SEPARATOR runSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunSource(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewRunSourceOptions().WithIndexToInclude(
			[]string{"products_us", "products eu"}).WithEntityIDs(
			[]string{"1234", "5678"}).WithEntityType(ingestion.ENTITY_TYPE_PRODUCT),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForRunTaskOfIngestion() {
	/*
	   Snippet for the runTask method.

	   runTask
	*/

	// >SEPARATOR runTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunTask(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForRunTaskV1OfIngestion() {
	/*
	   Snippet for the runTaskV1 method.

	   runTaskV1
	*/

	// >SEPARATOR runTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunTaskV1(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f", nil)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchAuthenticationsOfIngestion() {
	/*
	   Snippet for the searchAuthentications method.

	   searchAuthentications
	*/

	// >SEPARATOR searchAuthentications default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchAuthentications(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchDestinationsOfIngestion() {
	/*
	   Snippet for the searchDestinations method.

	   searchDestinations
	*/

	// >SEPARATOR searchDestinations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchDestinations(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchSourcesOfIngestion() {
	/*
	   Snippet for the searchSources method.

	   searchSources
	*/

	// >SEPARATOR searchSources default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchSources(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchTasksOfIngestion() {
	/*
	   Snippet for the searchTasks method.

	   searchTasks
	*/

	// >SEPARATOR searchTasks default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTasks(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchTasksV1OfIngestion() {
	/*
	   Snippet for the searchTasksV1 method.

	   searchTasksV1
	*/

	// >SEPARATOR searchTasksV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTasksV1(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSearchTransformationsOfIngestion() {
	/*
	   Snippet for the searchTransformations method.

	   searchTransformations
	*/

	// >SEPARATOR searchTransformations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTransformations(context.Background(),
		[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"})
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForSetClientApiKeyOfIngestion() {
	/*
	   Snippet for the setClientApiKey method.

	   switch API key
	*/

	// >SEPARATOR setClientApiKey default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	err = client.SetClientApiKey("updated-api-key")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// SEPARATOR<
}

func SnippetForTriggerDockerSourceDiscoverOfIngestion() {
	/*
	   Snippet for the triggerDockerSourceDiscover method.

	   triggerDockerSourceDiscover
	*/

	// >SEPARATOR triggerDockerSourceDiscover default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TriggerDockerSourceDiscover(context.Background(), "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForTryTransformationOfIngestion() {
	/*
	   Snippet for the tryTransformation method.

	   tryTransformation
	*/

	// >SEPARATOR tryTransformation tryTransformation
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformation(
		context.Background(),
		map[string]any{"bar": "baz"},
		ingestion.NewTryTransformationOptions().
			WithType(ingestion.TRANSFORMATION_TYPE_CODE).
			WithInput(ingestion.TransformationCodeAsTransformationInput(
				ingestion.NewEmptyTransformationCode().SetCode("foo"))),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForTryTransformationOfIngestion1() {
	/*
	   Snippet for the tryTransformation method.

	   with authentications
	*/

	// >SEPARATOR tryTransformation with authentications
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformation(
		context.Background(),
		map[string]any{"bar": "baz"},
		ingestion.NewTryTransformationOptions().
			WithType(ingestion.TRANSFORMATION_TYPE_CODE).
			WithInput(ingestion.TransformationCodeAsTransformationInput(
				ingestion.NewEmptyTransformationCode().SetCode("foo"))).
			WithAuthentications(
				[]ingestion.AuthenticationCreate{
					*ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AUTHENTICATION_TYPE_OAUTH).SetName("authName").SetInput(ingestion.AuthOAuthAsAuthInput(
						ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret"))),
				}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForTryTransformationBeforeUpdateOfIngestion() {
	/*
	   Snippet for the tryTransformationBeforeUpdate method.

	   tryTransformationBeforeUpdate
	*/

	// >SEPARATOR tryTransformationBeforeUpdate tryTransformationBeforeUpdate
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformationBeforeUpdate(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		map[string]any{"bar": "baz"},
		ingestion.NewTryTransformationBeforeUpdateOptions().
			WithType(ingestion.TRANSFORMATION_TYPE_CODE).
			WithInput(ingestion.TransformationCodeAsTransformationInput(
				ingestion.NewEmptyTransformationCode().SetCode("foo"))),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForTryTransformationBeforeUpdateOfIngestion1() {
	/*
	   Snippet for the tryTransformationBeforeUpdate method.

	   existing with authentications
	*/

	// >SEPARATOR tryTransformationBeforeUpdate existing with authentications
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformationBeforeUpdate(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		map[string]any{"bar": "baz"},
		ingestion.NewTryTransformationBeforeUpdateOptions().
			WithType(ingestion.TRANSFORMATION_TYPE_CODE).
			WithInput(ingestion.TransformationCodeAsTransformationInput(
				ingestion.NewEmptyTransformationCode().SetCode("foo"))).
			WithAuthentications(
				[]ingestion.AuthenticationCreate{
					*ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AUTHENTICATION_TYPE_OAUTH).SetName("authName").SetInput(ingestion.AuthOAuthAsAuthInput(
						ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret"))),
				}),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateAuthenticationOfIngestion() {
	/*
	   Snippet for the updateAuthentication method.

	   updateAuthentication
	*/

	// >SEPARATOR updateAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateAuthentication(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewUpdateAuthenticationOptions().WithName("newName"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateDestinationOfIngestion() {
	/*
	   Snippet for the updateDestination method.

	   updateDestination
	*/

	// >SEPARATOR updateDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateDestination(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewUpdateDestinationOptions().WithName("newName"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateSourceOfIngestion() {
	/*
	   Snippet for the updateSource method.

	   updateSource
	*/

	// >SEPARATOR updateSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateSource(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewUpdateSourceOptions().WithName("newName"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateTaskOfIngestion() {
	/*
	   Snippet for the updateTask method.

	   updateTask
	*/

	// >SEPARATOR updateTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTask(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewUpdateTaskOptions().WithEnabled(false).WithCron("* * * * *"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateTaskV1OfIngestion() {
	/*
	   Snippet for the updateTaskV1 method.

	   updateTaskV1
	*/

	// >SEPARATOR updateTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTaskV1(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewUpdateTaskV1Options().WithEnabled(false),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForUpdateTransformationOfIngestion() {
	/*
	   Snippet for the updateTransformation method.

	   updateTransformation
	*/

	// >SEPARATOR updateTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTransformation(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		"bar",
		ingestion.NewUpdateTransformationOptions().WithInput(ingestion.TransformationCodeAsTransformationInput(
			ingestion.NewEmptyTransformationCode().SetCode("foo"))).WithType(ingestion.TRANSFORMATION_TYPE_CODE).WithDescription("baz"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForValidateSourceOfIngestion() {
	/*
	   Snippet for the validateSource method.

	   validateSource
	*/

	// >SEPARATOR validateSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ValidateSource(
		context.Background(),
		ingestion.SOURCE_TYPE_COMMERCETOOLS,
		"sourceName",
		ingestion.NewValidateSourceOptions().WithInput(ingestion.SourceCommercetoolsAsSourceInput(
			ingestion.NewEmptySourceCommercetools().SetStoreKeys(
				[]string{"myStore"}).SetLocales(
				[]string{
					"de",
				}).
				SetUrl("http://commercetools.com").SetProjectKey("keyID"))).WithAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}

func SnippetForValidateSourceBeforeUpdateOfIngestion() {
	/*
	   Snippet for the validateSourceBeforeUpdate method.

	   validateSourceBeforeUpdate
	*/

	// >SEPARATOR validateSourceBeforeUpdate default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ValidateSourceBeforeUpdate(
		context.Background(),
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewValidateSourceBeforeUpdateOptions().WithName("newName"),
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
