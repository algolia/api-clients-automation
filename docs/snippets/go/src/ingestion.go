// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package snippets

// >IMPORT
import "github.com/algolia/algoliasearch-client-go/v4/algolia/ingestion"

// IMPORT<

func SnippetForCreateAuthenticationOfIngestion() {
	/*
	   Snippet for the createAuthentication method.

	   createAuthenticationOAuth
	*/

	// >SEPARATOR createAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateAuthentication(client.NewApiCreateAuthenticationRequest(

		ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType("oauth")).SetName("authName").SetInput(ingestion.AuthOAuthAsAuthInput(
			ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret"))),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCreateDestinationOfIngestion() {
	/*
	   Snippet for the createDestination method.

	   createDestination
	*/

	// >SEPARATOR createDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateDestination(client.NewApiCreateDestinationRequest(

		ingestion.NewEmptyDestinationCreate().SetType(ingestion.DestinationType("search")).SetName("destinationName").SetInput(ingestion.DestinationIndexNameAsDestinationInput(
			ingestion.NewEmptyDestinationIndexName().SetIndexName("<YOUR_INDEX_NAME>"))).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCreateSourceOfIngestion() {
	/*
	   Snippet for the createSource method.

	   createSource
	*/

	// >SEPARATOR createSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateSource(client.NewApiCreateSourceRequest(

		ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType("commercetools")).SetName("sourceName").SetInput(ingestion.SourceCommercetoolsAsSourceInput(
			ingestion.NewEmptySourceCommercetools().SetStoreKeys(
				[]string{"myStore"}).SetLocales(
				[]string{"de"}).SetUrl("http://commercetools.com").SetProjectKey("keyID"))).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCreateTaskOfIngestion() {
	/*
	   Snippet for the createTask method.

	   task without cron
	*/

	// >SEPARATOR createTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTask(client.NewApiCreateTaskRequest(

		ingestion.NewEmptyTaskCreate().SetSourceID("search").SetDestinationID("destinationName").SetAction(ingestion.ActionType("replace")),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCreateTaskV1OfIngestion() {
	/*
	   Snippet for the createTaskV1 method.

	   createTaskOnDemand
	*/

	// >SEPARATOR createTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTaskV1(client.NewApiCreateTaskV1Request(

		ingestion.NewEmptyTaskCreateV1().SetSourceID("search").SetDestinationID("destinationName").SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
			ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType("onDemand")))).SetAction(ingestion.ActionType("replace")),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCreateTransformationOfIngestion() {
	/*
	   Snippet for the createTransformation method.

	   createTransformation
	*/

	// >SEPARATOR createTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CreateTransformation(client.NewApiCreateTransformationRequest(

		ingestion.NewEmptyTransformationCreate().SetCode("foo").SetName("bar").SetDescription("baz"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomDeleteOfIngestion() {
	/*
	   Snippet for the customDelete method.

	   allow del method for a custom path with minimal parameters
	*/

	// >SEPARATOR customDelete default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomGetOfIngestion() {
	/*
	   Snippet for the customGet method.

	   allow get method for a custom path with minimal parameters
	*/

	// >SEPARATOR customGet default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomGet(client.NewApiCustomGetRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomPostOfIngestion() {
	/*
	   Snippet for the customPost method.

	   allow post method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPost default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPost(client.NewApiCustomPostRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForCustomPutOfIngestion() {
	/*
	   Snippet for the customPut method.

	   allow put method for a custom path with minimal parameters
	*/

	// >SEPARATOR customPut default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.CustomPut(client.NewApiCustomPutRequest(
		"test/minimal",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteAuthenticationOfIngestion() {
	/*
	   Snippet for the deleteAuthentication method.

	   deleteAuthentication
	*/

	// >SEPARATOR deleteAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteAuthentication(client.NewApiDeleteAuthenticationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteDestinationOfIngestion() {
	/*
	   Snippet for the deleteDestination method.

	   deleteDestination
	*/

	// >SEPARATOR deleteDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteDestination(client.NewApiDeleteDestinationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteSourceOfIngestion() {
	/*
	   Snippet for the deleteSource method.

	   deleteSource
	*/

	// >SEPARATOR deleteSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteSource(client.NewApiDeleteSourceRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteTaskOfIngestion() {
	/*
	   Snippet for the deleteTask method.

	   deleteTask
	*/

	// >SEPARATOR deleteTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTask(client.NewApiDeleteTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteTaskV1OfIngestion() {
	/*
	   Snippet for the deleteTaskV1 method.

	   deleteTaskV1
	*/

	// >SEPARATOR deleteTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTaskV1(client.NewApiDeleteTaskV1Request(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDeleteTransformationOfIngestion() {
	/*
	   Snippet for the deleteTransformation method.

	   deleteTransformation
	*/

	// >SEPARATOR deleteTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DeleteTransformation(client.NewApiDeleteTransformationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDisableTaskOfIngestion() {
	/*
	   Snippet for the disableTask method.

	   disableTask
	*/

	// >SEPARATOR disableTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DisableTask(client.NewApiDisableTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForDisableTaskV1OfIngestion() {
	/*
	   Snippet for the disableTaskV1 method.

	   disableTaskV1
	*/

	// >SEPARATOR disableTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.DisableTaskV1(client.NewApiDisableTaskV1Request(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForEnableTaskOfIngestion() {
	/*
	   Snippet for the enableTask method.

	   enableTask
	*/

	// >SEPARATOR enableTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.EnableTask(client.NewApiEnableTaskRequest(
		"76ab4c2a-ce17-496f-b7a6-506dc59ee498",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForEnableTaskV1OfIngestion() {
	/*
	   Snippet for the enableTaskV1 method.

	   enableTaskV1
	*/

	// >SEPARATOR enableTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.EnableTaskV1(client.NewApiEnableTaskV1Request(
		"76ab4c2a-ce17-496f-b7a6-506dc59ee498",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetAuthenticationOfIngestion() {
	/*
	   Snippet for the getAuthentication method.

	   getAuthentication
	*/

	// >SEPARATOR getAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetAuthentication(client.NewApiGetAuthenticationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetDestinationOfIngestion() {
	/*
	   Snippet for the getDestination method.

	   getDestination
	*/

	// >SEPARATOR getDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetDestination(client.NewApiGetDestinationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetEventOfIngestion() {
	/*
	   Snippet for the getEvent method.

	   getEvent
	*/

	// >SEPARATOR getEvent default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetEvent(client.NewApiGetEventRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "6c02aeb1-775e-418e-870b-1faccd4b2c0c",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetRunOfIngestion() {
	/*
	   Snippet for the getRun method.

	   getRun
	*/

	// >SEPARATOR getRun default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetRun(client.NewApiGetRunRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetSourceOfIngestion() {
	/*
	   Snippet for the getSource method.

	   getSource
	*/

	// >SEPARATOR getSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetSource(client.NewApiGetSourceRequest(
		"75eeb306-51d3-4e5e-a279-3c92bd8893ac",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetTaskOfIngestion() {
	/*
	   Snippet for the getTask method.

	   getTask
	*/

	// >SEPARATOR getTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTask(client.NewApiGetTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetTaskV1OfIngestion() {
	/*
	   Snippet for the getTaskV1 method.

	   getTaskV1
	*/

	// >SEPARATOR getTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTaskV1(client.NewApiGetTaskV1Request(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForGetTransformationOfIngestion() {
	/*
	   Snippet for the getTransformation method.

	   getTransformation
	*/

	// >SEPARATOR getTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.GetTransformation(client.NewApiGetTransformationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListAuthenticationsOfIngestion() {
	/*
	   Snippet for the listAuthentications method.

	   getAuthentications
	*/

	// >SEPARATOR listAuthentications default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListAuthentications(client.NewApiListAuthenticationsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListDestinationsOfIngestion() {
	/*
	   Snippet for the listDestinations method.

	   getDestinations
	*/

	// >SEPARATOR listDestinations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListDestinations(client.NewApiListDestinationsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListEventsOfIngestion() {
	/*
	   Snippet for the listEvents method.

	   getEvents
	*/

	// >SEPARATOR listEvents default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListEvents(client.NewApiListEventsRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListRunsOfIngestion() {
	/*
	   Snippet for the listRuns method.

	   listRuns
	*/

	// >SEPARATOR listRuns default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListRuns(client.NewApiListRunsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListSourcesOfIngestion() {
	/*
	   Snippet for the listSources method.

	   listSources
	*/

	// >SEPARATOR listSources default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListSources(client.NewApiListSourcesRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListTasksOfIngestion() {
	/*
	   Snippet for the listTasks method.

	   listTasks
	*/

	// >SEPARATOR listTasks default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTasks(client.NewApiListTasksRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListTasksV1OfIngestion() {
	/*
	   Snippet for the listTasksV1 method.

	   listTasksV1
	*/

	// >SEPARATOR listTasksV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTasksV1(client.NewApiListTasksV1Request())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForListTransformationsOfIngestion() {
	/*
	   Snippet for the listTransformations method.

	   listTransformations
	*/

	// >SEPARATOR listTransformations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ListTransformations(client.NewApiListTransformationsRequest())
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForPushTaskOfIngestion() {
	/*
	   Snippet for the pushTask method.

	   pushTask
	*/

	// >SEPARATOR pushTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.PushTask(client.NewApiPushTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyPushTaskPayload().SetAction(ingestion.Action("addObject")).SetRecords(
			[]ingestion.PushTaskRecords{*ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "bar").SetAdditionalProperty("foo", "1").SetObjectID("o"), *ingestion.NewEmptyPushTaskRecords().SetAdditionalProperty("key", "baz").SetAdditionalProperty("foo", "2").SetObjectID("k")}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForRunSourceOfIngestion() {
	/*
	   Snippet for the runSource method.

	   runSource
	*/

	// >SEPARATOR runSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunSource(client.NewApiRunSourceRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	).WithRunSourcePayload(
		ingestion.NewEmptyRunSourcePayload().SetIndexToInclude(
			[]string{"products_us", "products eu"}).SetEntityIDs(
			[]string{"1234", "5678"}).SetEntityType(ingestion.EntityType("product"))))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForRunTaskOfIngestion() {
	/*
	   Snippet for the runTask method.

	   runTask
	*/

	// >SEPARATOR runTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunTask(client.NewApiRunTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForRunTaskV1OfIngestion() {
	/*
	   Snippet for the runTaskV1 method.

	   runTaskV1
	*/

	// >SEPARATOR runTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.RunTaskV1(client.NewApiRunTaskV1Request(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchAuthenticationsOfIngestion() {
	/*
	   Snippet for the searchAuthentications method.

	   searchAuthentications
	*/

	// >SEPARATOR searchAuthentications default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchAuthentications(client.NewApiSearchAuthenticationsRequest(

		ingestion.NewEmptyAuthenticationSearch().SetAuthenticationIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchDestinationsOfIngestion() {
	/*
	   Snippet for the searchDestinations method.

	   searchDestinations
	*/

	// >SEPARATOR searchDestinations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchDestinations(client.NewApiSearchDestinationsRequest(

		ingestion.NewEmptyDestinationSearch().SetDestinationIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchSourcesOfIngestion() {
	/*
	   Snippet for the searchSources method.

	   searchSources
	*/

	// >SEPARATOR searchSources default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchSources(client.NewApiSearchSourcesRequest(

		ingestion.NewEmptySourceSearch().SetSourceIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchTasksOfIngestion() {
	/*
	   Snippet for the searchTasks method.

	   searchTasks
	*/

	// >SEPARATOR searchTasks default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTasks(client.NewApiSearchTasksRequest(

		ingestion.NewEmptyTaskSearch().SetTaskIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchTasksV1OfIngestion() {
	/*
	   Snippet for the searchTasksV1 method.

	   searchTasksV1
	*/

	// >SEPARATOR searchTasksV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTasksV1(client.NewApiSearchTasksV1Request(

		ingestion.NewEmptyTaskSearch().SetTaskIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSearchTransformationsOfIngestion() {
	/*
	   Snippet for the searchTransformations method.

	   searchTransformations
	*/

	// >SEPARATOR searchTransformations default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.SearchTransformations(client.NewApiSearchTransformationsRequest(

		ingestion.NewEmptyTransformationSearch().SetTransformationIDs(
			[]string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForSetClientApiKeyOfIngestion() {
	/*
	   Snippet for the setClientApiKey method.

	   switch API key
	*/

	// >SEPARATOR setClientApiKey default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	err = client.SetClientApiKey(
		"updated-api-key",
	)
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// SEPARATOR<
}
func SnippetForTriggerDockerSourceDiscoverOfIngestion() {
	/*
	   Snippet for the triggerDockerSourceDiscover method.

	   triggerDockerSourceDiscover
	*/

	// >SEPARATOR triggerDockerSourceDiscover default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TriggerDockerSourceDiscover(client.NewApiTriggerDockerSourceDiscoverRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForTryTransformationOfIngestion() {
	/*
	   Snippet for the tryTransformation method.

	   tryTransformation
	*/

	// >SEPARATOR tryTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformation(client.NewApiTryTransformationRequest(

		ingestion.NewEmptyTransformationTry().SetCode("foo").SetSampleRecord(map[string]any{"bar": "baz"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForTryTransformationBeforeUpdateOfIngestion() {
	/*
	   Snippet for the tryTransformationBeforeUpdate method.

	   tryTransformationBeforeUpdate
	*/

	// >SEPARATOR tryTransformationBeforeUpdate default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.TryTransformationBeforeUpdate(client.NewApiTryTransformationBeforeUpdateRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyTransformationTry().SetCode("foo").SetSampleRecord(map[string]any{"bar": "baz"}),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateAuthenticationOfIngestion() {
	/*
	   Snippet for the updateAuthentication method.

	   updateAuthentication
	*/

	// >SEPARATOR updateAuthentication default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateAuthentication(client.NewApiUpdateAuthenticationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyAuthenticationUpdate().SetName("newName"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateDestinationOfIngestion() {
	/*
	   Snippet for the updateDestination method.

	   updateDestination
	*/

	// >SEPARATOR updateDestination default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateDestination(client.NewApiUpdateDestinationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyDestinationUpdate().SetName("newName"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateSourceOfIngestion() {
	/*
	   Snippet for the updateSource method.

	   updateSource
	*/

	// >SEPARATOR updateSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateSource(client.NewApiUpdateSourceRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptySourceUpdate().SetName("newName"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateTaskOfIngestion() {
	/*
	   Snippet for the updateTask method.

	   updateTask
	*/

	// >SEPARATOR updateTask default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTask(client.NewApiUpdateTaskRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyTaskUpdate().SetEnabled(false).SetCron("* * * * *"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateTaskV1OfIngestion() {
	/*
	   Snippet for the updateTaskV1 method.

	   updateTaskV1
	*/

	// >SEPARATOR updateTaskV1 default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTaskV1(client.NewApiUpdateTaskV1Request(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyTaskUpdateV1().SetEnabled(false),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForUpdateTransformationOfIngestion() {
	/*
	   Snippet for the updateTransformation method.

	   updateTransformation
	*/

	// >SEPARATOR updateTransformation default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.UpdateTransformation(client.NewApiUpdateTransformationRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptyTransformationCreate().SetCode("foo").SetName("bar").SetDescription("baz"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForValidateSourceOfIngestion() {
	/*
	   Snippet for the validateSource method.

	   validateSource
	*/

	// >SEPARATOR validateSource default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ValidateSource(client.NewApiValidateSourceRequest().WithSourceCreate(
		ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType("commercetools")).SetName("sourceName").SetInput(ingestion.SourceCommercetoolsAsSourceInput(
			ingestion.NewEmptySourceCommercetools().SetStoreKeys(
				[]string{"myStore"}).SetLocales(
				[]string{"de"}).SetUrl("http://commercetools.com").SetProjectKey("keyID"))).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
func SnippetForValidateSourceBeforeUpdateOfIngestion() {
	/*
	   Snippet for the validateSourceBeforeUpdate method.

	   validateSourceBeforeUpdate
	*/

	// >SEPARATOR validateSourceBeforeUpdate default
	// Initialize the client with your application region, eg. ingestion.ALGOLIA_APPLICATION_REGION
	client, err := ingestion.NewClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY", ingestion.US)
	if err != nil {
		// The client can fail to initialize if you pass an invalid parameter.
		panic(err)
	}

	// Call the API
	response, err := client.ValidateSourceBeforeUpdate(client.NewApiValidateSourceBeforeUpdateRequest(
		"6c02aeb1-775e-418e-870b-1faccd4b2c0f",
		ingestion.NewEmptySourceUpdate().SetName("newName"),
	))
	if err != nil {
		// handle the eventual error
		panic(err)
	}

	// >LOG
	// use the model directly
	print(response)
	// SEPARATOR<
}
