// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.snippets

// >IMPORT
import com.algolia.client.api.RecommendClient
import com.algolia.client.configuration.*
import com.algolia.client.transport.*

// IMPORT<
import com.algolia.client.model.recommend.*
import kotlinx.serialization.json.*
import kotlin.system.exitProcess

class SnippetRecommendClient {
  suspend fun snippetForBatchRecommendRules() {
    // >SEPARATOR batchRecommendRules default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.batchRecommendRules(
      indexName = "<YOUR_INDEX_NAME>",
      model = RecommendModels.entries.first { it.value == "related-products" },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomDelete() {
    // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customDelete(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomDelete1() {
    // >SEPARATOR customDelete allow del method for a custom path with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customDelete(
      path = "test/all",
      parameters = mapOf("query" to "parameters"),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomGet() {
    // >SEPARATOR customGet allow get method for a custom path with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customGet(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomGet1() {
    // >SEPARATOR customGet allow get method for a custom path with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customGet(
      path = "test/all",
      parameters = mapOf("query" to "parameters with space"),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomGet2() {
    // >SEPARATOR customGet requestOptions should be escaped too
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customGet(
      path = "test/all",
      parameters = mapOf("query" to "to be overriden"),
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("query", "parameters with space")
          put("and an array", listOf("array", "with spaces"))
        },
        headers = buildMap {
          put("x-header-1", "spaces are left alone")
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost() {
    // >SEPARATOR customPost allow post method for a custom path with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost1() {
    // >SEPARATOR customPost allow post method for a custom path with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/all",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "body",
          JsonPrimitive("parameters"),
        )
      },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost2() {
    // >SEPARATOR customPost requestOptions can override default query parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("query", "myQueryParameter")
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost3() {
    // >SEPARATOR customPost requestOptions merges query parameters with default ones
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("query2", "myQueryParameter")
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost4() {
    // >SEPARATOR customPost requestOptions can override default headers
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        headers = buildMap {
          put("x-algolia-api-key", "ALGOLIA_API_KEY")
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost5() {
    // >SEPARATOR customPost requestOptions merges headers with default ones
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        headers = buildMap {
          put("x-algolia-api-key", "ALGOLIA_API_KEY")
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost6() {
    // >SEPARATOR customPost requestOptions queryParameters accepts booleans
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("isItWorking", true)
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost7() {
    // >SEPARATOR customPost requestOptions queryParameters accepts integers
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("myParam", 2)
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost8() {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of string
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("myParam", listOf("b and c", "d"))
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost9() {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("myParam", listOf(true, true, false))
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost10() {
    // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/requestOptions",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "facet",
          JsonPrimitive("filters"),
        )
      },
      requestOptions = RequestOptions(
        urlParameters = buildMap {
          put("myParam", listOf(1, 2))
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPut() {
    // >SEPARATOR customPut allow put method for a custom path with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPut(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPut1() {
    // >SEPARATOR customPut allow put method for a custom path with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.customPut(
      path = "test/all",
      parameters = mapOf("query" to "parameters"),
      body = buildJsonObject {
        put(
          "body",
          JsonPrimitive("parameters"),
        )
      },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteRecommendRule() {
    // >SEPARATOR deleteRecommendRule default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.deleteRecommendRule(
      indexName = "<YOUR_INDEX_NAME>",
      model = RecommendModels.entries.first { it.value == "related-products" },
      objectID = "objectID",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendRule() {
    // >SEPARATOR getRecommendRule default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendRule(
      indexName = "<YOUR_INDEX_NAME>",
      model = RecommendModels.entries.first { it.value == "related-products" },
      objectID = "objectID",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendStatus() {
    // >SEPARATOR getRecommendStatus default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendStatus(
      indexName = "<YOUR_INDEX_NAME>",
      model = RecommendModels.entries.first { it.value == "related-products" },
      taskID = 12345L,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations() {
    // >SEPARATOR getRecommendations get recommendations for recommend model with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 42.1,
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations1() {
    // >SEPARATOR getRecommendations get recommendations with e2e to check oneOf model
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "Æon Flux",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 20.0,
            maxRecommendations = 2,
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations2() {
    // >SEPARATOR getRecommendations get recommendations for recommend model with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 42.1,
            maxRecommendations = 10,
            queryParameters = RecommendSearchParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("query"))),
            ),
            fallbackParameters = FallbackParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("fallback"))),
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations3() {
    // >SEPARATOR getRecommendations get recommendations for trending model with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          TrendingItemsQuery(
            indexName = "<YOUR_INDEX_NAME>",
            model = TrendingItemsModel.entries.first { it.value == "trending-items" },
            threshold = 42.1,
            facetName = "facet",
            facetValue = "value",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations4() {
    // >SEPARATOR getRecommendations get recommendations for trending model with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          TrendingItemsQuery(
            indexName = "<YOUR_INDEX_NAME>",
            model = TrendingItemsModel.entries.first { it.value == "trending-items" },
            threshold = 42.1,
            maxRecommendations = 10,
            facetName = "myFacetName",
            facetValue = "myFacetValue",
            queryParameters = RecommendSearchParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("query"))),
            ),
            fallbackParameters = FallbackParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("fallback"))),
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations5() {
    // >SEPARATOR getRecommendations get multiple recommendations with minimal parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID1",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 21.7,
          ),
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID2",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 21.7,
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations6() {
    // >SEPARATOR getRecommendations get multiple recommendations with all parameters
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID1",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 21.7,
            maxRecommendations = 10,
            queryParameters = RecommendSearchParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("query1"))),
            ),
            fallbackParameters = FallbackParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("fallback1"))),
            ),
          ),
          RelatedQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID2",
            model = RelatedModel.entries.first { it.value == "related-products" },
            threshold = 21.7,
            maxRecommendations = 10,
            queryParameters = RecommendSearchParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("query2"))),
            ),
            fallbackParameters = FallbackParams(
              query = "myQuery",
              facetFilters = FacetFilters.of(listOf(FacetFilters.of("fallback2"))),
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRecommendations7() {
    // >SEPARATOR getRecommendations get frequently bought together recommendations
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.getRecommendations(
      getRecommendationsParams = GetRecommendationsParams(
        requests = listOf(
          BoughtTogetherQuery(
            indexName = "<YOUR_INDEX_NAME>",
            objectID = "objectID1",
            model = FbtModel.entries.first { it.value == "bought-together" },
            threshold = 42.7,
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchRecommendRules() {
    // >SEPARATOR searchRecommendRules default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    var response = client.searchRecommendRules(
      indexName = "<YOUR_INDEX_NAME>",
      model = RecommendModels.entries.first { it.value == "related-products" },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSetClientApiKey() {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    val client = RecommendClient(appId = "ALGOLIA_APPLICATION_ID", apiKey = "ALGOLIA_API_KEY")

    // Call the API
    client.setClientApiKey(
      apiKey = "updated-api-key",
    )

    // >LOG
    // SEPARATOR<

    exitProcess(0)
  }
}
