# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
require "algolia"

# IMPORT<

# Snippet for the addApiKey method.
#
# addApiKey
def snippet_for_add_api_key
  # >SEPARATOR addApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.add_api_key(
    Algolia::Search::ApiKey.new(
      acl: ["search", "addObject"],
      description: "my new api key",
      validity: 300,
      max_queries_per_ip_per_hour: 100,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the addOrUpdateObject method.
#
# addOrUpdateObject
def snippet_for_add_or_update_object
  # >SEPARATOR addOrUpdateObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.add_or_update_object("<YOUR_INDEX_NAME>", "uniqueID", {key: "value"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the appendSource method.
#
# appendSource
def snippet_for_append_source
  # >SEPARATOR appendSource default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.append_source(Algolia::Search::Source.new(source: "theSource", description: "theDescription"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the assignUserId method.
#
# simple
def snippet_for_assign_user_id
  # >SEPARATOR assignUserId simple
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.assign_user_id("user42", Algolia::Search::AssignUserIdParams.new(cluster: "d4242-eu"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the assignUserId method.
#
# it should not encode the userID
def snippet_for_assign_user_id1
  # >SEPARATOR assignUserId it should not encode the userID
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.assign_user_id(
    "user id with spaces",
    Algolia::Search::AssignUserIdParams.new(cluster: "cluster with spaces")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# addObject
def snippet_for_batch
  # >SEPARATOR batch addObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [
        Algolia::Search::BatchRequest.new(action: "addObject", body: {key: "bar", foo: "1"}),
        Algolia::Search::BatchRequest.new(action: "addObject", body: {key: "baz", foo: "2"})
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# clear
def snippet_for_batch1
  # >SEPARATOR batch clear
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "clear", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# delete
def snippet_for_batch2
  # >SEPARATOR batch delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "delete", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# deleteObject
def snippet_for_batch3
  # >SEPARATOR batch deleteObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "deleteObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# partialUpdateObject
def snippet_for_batch4
  # >SEPARATOR batch partialUpdateObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "partialUpdateObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# partialUpdateObjectNoCreate
def snippet_for_batch5
  # >SEPARATOR batch partialUpdateObjectNoCreate
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "partialUpdateObjectNoCreate", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# updateObject
def snippet_for_batch6
  # >SEPARATOR batch updateObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "updateObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchAssignUserIds method.
#
# batchAssignUserIds
def snippet_for_batch_assign_user_ids
  # >SEPARATOR batchAssignUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_assign_user_ids(
    "userID",
    Algolia::Search::BatchAssignUserIdsParams.new(cluster: "theCluster", users: ["user1", "user2"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# replace
def snippet_for_batch_dictionary_entries
  # >SEPARATOR batchDictionaryEntries replace
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "plurals",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      clear_existing_dictionary_entries: true,
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "addEntry",
          body: Algolia::Search::DictionaryEntry.new(
            algolia_object_id: "1",
            language: "en",
            word: "fancy",
            words: ["believe", "algolia"],
            decomposition: ["trust", "algolia"],
            state: "enabled"
          )
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# delete
def snippet_for_batch_dictionary_entries1
  # >SEPARATOR batchDictionaryEntries delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "plurals",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      clear_existing_dictionary_entries: true,
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "deleteEntry",
          body: Algolia::Search::DictionaryEntry.new(algolia_object_id: "1")
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# append
def snippet_for_batch_dictionary_entries2
  # >SEPARATOR batchDictionaryEntries append
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "stopwords",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "addEntry",
          body: Algolia::Search::DictionaryEntry.new(algolia_object_id: "1", language: "en", additional: "try me")
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the browse method.
#
# browse with minimal parameters
def snippet_for_browse
  # >SEPARATOR browse browse with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.browse("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the browse method.
#
# browse with search parameters
def snippet_for_browse1
  # >SEPARATOR browse browse with search parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.browse(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BrowseParamsObject.new(query: "myQuery", facet_filters: ["tags:algolia"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the browse method.
#
# browse allow a cursor in parameters
def snippet_for_browse2
  # >SEPARATOR browse browse allow a cursor in parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.browse("<YOUR_INDEX_NAME>", Algolia::Search::BrowseParamsObject.new(cursor: "test"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearObjects method.
#
# clearObjects
def snippet_for_clear_objects
  # >SEPARATOR clearObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_objects("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearRules method.
#
# clearRules
def snippet_for_clear_rules
  # >SEPARATOR clearRules default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_rules("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearSynonyms method.
#
# clearSynonyms
def snippet_for_clear_synonyms
  # >SEPARATOR clearSynonyms default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_synonyms("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customDelete method.
#
# allow del method for a custom path with minimal parameters
def snippet_for_custom_delete
  # >SEPARATOR customDelete allow del method for a custom path with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_delete("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customDelete method.
#
# allow del method for a custom path with all parameters
def snippet_for_custom_delete1
  # >SEPARATOR customDelete allow del method for a custom path with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_delete("test/all", {query: "parameters"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# allow get method for a custom path with minimal parameters
def snippet_for_custom_get
  # >SEPARATOR customGet allow get method for a custom path with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_get("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# allow get method for a custom path with all parameters
def snippet_for_custom_get1
  # >SEPARATOR customGet allow get method for a custom path with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_get("test/all", {query: "parameters with space"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# requestOptions should be escaped too
def snippet_for_custom_get2
  # >SEPARATOR customGet requestOptions should be escaped too
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_get(
    "test/all",
    {query: "to be overriden"},
    {
      :header_params => JSON.parse("{\"x-header-1\":\"spaces are left alone\"}", :symbolize_names => true),
      :query_params => JSON.parse(
        "{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}",
        :symbolize_names => true
      )
    }
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# allow post method for a custom path with minimal parameters
def snippet_for_custom_post
  # >SEPARATOR customPost allow post method for a custom path with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# allow post method for a custom path with all parameters
def snippet_for_custom_post1
  # >SEPARATOR customPost allow post method for a custom path with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post("test/all", {query: "parameters"}, {body: "parameters"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions can override default query parameters
def snippet_for_custom_post2
  # >SEPARATOR customPost requestOptions can override default query parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"query\":\"myQueryParameter\"}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions merges query parameters with default ones
def snippet_for_custom_post3
  # >SEPARATOR customPost requestOptions merges query parameters with default ones
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"query2\":\"myQueryParameter\"}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions can override default headers
def snippet_for_custom_post4
  # >SEPARATOR customPost requestOptions can override default headers
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:header_params => JSON.parse("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions merges headers with default ones
def snippet_for_custom_post5
  # >SEPARATOR customPost requestOptions merges headers with default ones
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:header_params => JSON.parse("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions queryParameters accepts booleans
def snippet_for_custom_post6
  # >SEPARATOR customPost requestOptions queryParameters accepts booleans
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"isItWorking\":true}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions queryParameters accepts integers
def snippet_for_custom_post7
  # >SEPARATOR customPost requestOptions queryParameters accepts integers
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"myParam\":2}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions queryParameters accepts list of string
def snippet_for_custom_post8
  # >SEPARATOR customPost requestOptions queryParameters accepts list of string
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"myParam\":[\"b and c\",\"d\"]}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions queryParameters accepts list of booleans
def snippet_for_custom_post9
  # >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"myParam\":[true,true,false]}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# requestOptions queryParameters accepts list of integers
def snippet_for_custom_post10
  # >SEPARATOR customPost requestOptions queryParameters accepts list of integers
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post(
    "test/requestOptions",
    {query: "parameters"},
    {facet: "filters"},
    {:query_params => JSON.parse("{\"myParam\":[1,2]}", :symbolize_names => true)}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPut method.
#
# allow put method for a custom path with minimal parameters
def snippet_for_custom_put
  # >SEPARATOR customPut allow put method for a custom path with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_put("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPut method.
#
# allow put method for a custom path with all parameters
def snippet_for_custom_put1
  # >SEPARATOR customPut allow put method for a custom path with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_put("test/all", {query: "parameters"}, {body: "parameters"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteApiKey method.
#
# deleteApiKey
def snippet_for_delete_api_key
  # >SEPARATOR deleteApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_api_key("myTestApiKey")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteBy method.
#
# deleteBy
def snippet_for_delete_by
  # >SEPARATOR deleteBy default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_by("<YOUR_INDEX_NAME>", Algolia::Search::DeleteByParams.new(filters: "brand:brandName"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteIndex method.
#
# deleteIndex
def snippet_for_delete_index
  # >SEPARATOR deleteIndex default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_index("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteObject method.
#
# deleteObject
def snippet_for_delete_object
  # >SEPARATOR deleteObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_object("<YOUR_INDEX_NAME>", "uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteObjects method.
#
# call deleteObjects without error
def snippet_for_delete_objects
  # >SEPARATOR deleteObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_objects("<YOUR_INDEX_NAME>", ["1", "2"])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteRule method.
#
# delete rule simple case
def snippet_for_delete_rule
  # >SEPARATOR deleteRule delete rule simple case
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_rule("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteRule method.
#
# delete rule with simple characters to encode in objectID
def snippet_for_delete_rule1
  # >SEPARATOR deleteRule delete rule with simple characters to encode in objectID
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_rule("<YOUR_INDEX_NAME>", "test/with/slash")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteSource method.
#
# deleteSource
def snippet_for_delete_source
  # >SEPARATOR deleteSource default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_source("theSource")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteSynonym method.
#
# deleteSynonym
def snippet_for_delete_synonym
  # >SEPARATOR deleteSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_synonym("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# api key basic
def snippet_for_generate_secured_api_key
  # >SEPARATOR generateSecuredApiKey api key basic
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(valid_until: 2524604400, restrict_indices: ["Movies"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# with searchParams
def snippet_for_generate_secured_api_key1
  # >SEPARATOR generateSecuredApiKey with searchParams
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(
      valid_until: 2524604400,
      restrict_indices: ["Movies", "cts_e2e_settings"],
      restrict_sources: "192.168.1.0/24",
      filters: "category:Book OR category:Ebook AND _tags:published",
      user_token: "user123",
      search_params: Algolia::Search::SearchParamsObject.new(
        query: "batman",
        typo_tolerance: "strict",
        around_radius: "all",
        mode: "neuralSearch",
        hits_per_page: 10,
        optional_words: ["one", "two"]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# with filters
def snippet_for_generate_secured_api_key2
  # >SEPARATOR generateSecuredApiKey with filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(
      filters: "user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# with visible_by filter
def snippet_for_generate_secured_api_key3
  # >SEPARATOR generateSecuredApiKey with visible_by filter
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(filters: "visible_by:group/Finance")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# with userID
def snippet_for_generate_secured_api_key4
  # >SEPARATOR generateSecuredApiKey with userID
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(user_token: "user42")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getApiKey method.
#
# getApiKey
def snippet_for_get_api_key
  # >SEPARATOR getApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_api_key("myTestApiKey")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getAppTask method.
#
# getAppTask
def snippet_for_get_app_task
  # >SEPARATOR getAppTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_app_task(123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getDictionaryLanguages method.
#
# get getDictionaryLanguages
def snippet_for_get_dictionary_languages
  # >SEPARATOR getDictionaryLanguages default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_dictionary_languages

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getDictionarySettings method.
#
# get getDictionarySettings results
def snippet_for_get_dictionary_settings
  # >SEPARATOR getDictionarySettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_dictionary_settings

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getLogs method.
#
# getLogs with minimal parameters
def snippet_for_get_logs
  # >SEPARATOR getLogs getLogs with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_logs

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getLogs method.
#
# getLogs with parameters
def snippet_for_get_logs1
  # >SEPARATOR getLogs getLogs with parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_logs(5, 10, "<YOUR_INDEX_NAME>", "all")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getObject method.
#
# getObject
def snippet_for_get_object
  # >SEPARATOR getObject getObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_object("<YOUR_INDEX_NAME>", "uniqueID", ["attr1", "attr2"])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getObject method.
#
# search with a real object
def snippet_for_get_object1
  # >SEPARATOR getObject search with a real object
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_object("<YOUR_INDEX_NAME>", "Batman and Robin")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getObjects method.
#
# getObjects
def snippet_for_get_objects
  # >SEPARATOR getObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_objects(
    Algolia::Search::GetObjectsParams.new(
      requests: [
        Algolia::Search::GetObjectsRequest.new(
          attributes_to_retrieve: ["attr1", "attr2"],
          algolia_object_id: "uniqueID",
          index_name: "<YOUR_INDEX_NAME>"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getRule method.
#
# getRule
def snippet_for_get_rule
  # >SEPARATOR getRule default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_rule("<YOUR_INDEX_NAME>", "qr-1725004648916")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSettings method.
#
# getSettings
def snippet_for_get_settings
  # >SEPARATOR getSettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_settings("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSources method.
#
# getSources
def snippet_for_get_sources
  # >SEPARATOR getSources default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_sources

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSynonym method.
#
# getSynonym
def snippet_for_get_synonym
  # >SEPARATOR getSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_synonym("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTask method.
#
# getTask
def snippet_for_get_task
  # >SEPARATOR getTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_task("<YOUR_INDEX_NAME>", 123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopUserIds method.
#
# getTopUserIds
def snippet_for_get_top_user_ids
  # >SEPARATOR getTopUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_top_user_ids

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getUserId method.
#
# getUserId
def snippet_for_get_user_id
  # >SEPARATOR getUserId default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_user_id("uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the hasPendingMappings method.
#
# hasPendingMappings with minimal parameters
def snippet_for_has_pending_mappings
  # >SEPARATOR hasPendingMappings hasPendingMappings with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.has_pending_mappings

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the hasPendingMappings method.
#
# hasPendingMappings with parameters
def snippet_for_has_pending_mappings1
  # >SEPARATOR hasPendingMappings hasPendingMappings with parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.has_pending_mappings(true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexExists
def snippet_for_index_exists
  # >SEPARATOR indexExists indexExists
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexNotExists
def snippet_for_index_exists1
  # >SEPARATOR indexExists indexNotExists
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexExistsWithError
def snippet_for_index_exists2
  # >SEPARATOR indexExists indexExistsWithError
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listApiKeys method.
#
# listApiKeys
def snippet_for_list_api_keys
  # >SEPARATOR listApiKeys default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_api_keys

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listClusters method.
#
# listClusters
def snippet_for_list_clusters
  # >SEPARATOR listClusters default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_clusters

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listIndices method.
#
# listIndices with minimal parameters
def snippet_for_list_indices
  # >SEPARATOR listIndices listIndices with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_indices

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listIndices method.
#
# listIndices with parameters
def snippet_for_list_indices1
  # >SEPARATOR listIndices listIndices with parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_indices(8, 3)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listUserIds method.
#
# listUserIds with minimal parameters
def snippet_for_list_user_ids
  # >SEPARATOR listUserIds listUserIds with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_user_ids

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listUserIds method.
#
# listUserIds with parameters
def snippet_for_list_user_ids1
  # >SEPARATOR listUserIds listUserIds with parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_user_ids(8, 100)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the multipleBatch method.
#
# multipleBatch
def snippet_for_multiple_batch
  # >SEPARATOR multipleBatch default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.multiple_batch(
    Algolia::Search::BatchParams.new(
      requests: [
        Algolia::Search::MultipleBatchRequest.new(
          action: "addObject",
          body: {key: "value"},
          index_name: "<YOUR_INDEX_NAME>"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# scopes
def snippet_for_operation_index
  # >SEPARATOR operationIndex scopes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(
      operation: "move",
      destination: "<DESTINATION_INDEX_NAME>",
      scope: ["rules", "settings"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# copy
def snippet_for_operation_index1
  # >SEPARATOR operationIndex copy
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(operation: "copy", destination: "<DESTINATION_INDEX_NAME>")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# move
def snippet_for_operation_index2
  # >SEPARATOR operationIndex move
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(operation: "move", destination: "<DESTINATION_INDEX_NAME>")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for a string attribute
def snippet_for_partial_update_object
  # >SEPARATOR partialUpdateObject Partial update with a new value for a string attribute
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: "new value"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for an integer attribute
def snippet_for_partial_update_object1
  # >SEPARATOR partialUpdateObject Partial update with a new value for an integer attribute
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: 1})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for a boolean attribute
def snippet_for_partial_update_object2
  # >SEPARATOR partialUpdateObject Partial update with a new value for a boolean attribute
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: true})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for an array attribute
def snippet_for_partial_update_object3
  # >SEPARATOR partialUpdateObject Partial update with a new value for an array attribute
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: ["one", "two", "three"]})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for an object attribute
def snippet_for_partial_update_object4
  # >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: {nested: "value"}})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# with visible_by filter
def snippet_for_partial_update_object5
  # >SEPARATOR partialUpdateObject with visible_by filter
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object(
    "<YOUR_INDEX_NAME>",
    "uniqueID",
    {visible_by: ["Angela", "group/Finance", "group/Shareholders"]}
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObjects method.
#
# call partialUpdateObjects with createIfNotExists=true
def snippet_for_partial_update_objects
  # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}],
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObjects method.
#
# call partialUpdateObjects with createIfNotExists=false
def snippet_for_partial_update_objects1
  # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "3", name: "Cyril"}, {objectID: "4", name: "David"}],
    false
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the removeUserId method.
#
# removeUserId
def snippet_for_remove_user_id
  # >SEPARATOR removeUserId default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.remove_user_id("uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceAllObjects method.
#
# call replaceAllObjects without error
def snippet_for_replace_all_objects
  # >SEPARATOR replaceAllObjects call replaceAllObjects without error
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_all_objects(
    "<YOUR_INDEX_NAME>",
    [
      {objectID: "1", name: "Adam"},
      {objectID: "2", name: "Benoit"},
      {objectID: "3", name: "Cyril"},
      {objectID: "4", name: "David"},
      {objectID: "5", name: "Eva"},
      {objectID: "6", name: "Fiona"},
      {objectID: "7", name: "Gael"},
      {objectID: "8", name: "Hugo"},
      {objectID: "9", name: "Igor"},
      {objectID: "10", name: "Julia"}
    ],
    3
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceAllObjects method.
#
# call replaceAllObjects with partial scopes
def snippet_for_replace_all_objects1
  # >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_all_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}],
    77,
    ["settings", "synonyms"]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceAllObjects method.
#
# replaceAllObjects should cleanup on failure
def snippet_for_replace_all_objects2
  # >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_all_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "fine", body: "small obj"}, {objectID: "toolarge", body: "something bigger than 10KB"}]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceSources method.
#
# replaceSources
def snippet_for_replace_sources
  # >SEPARATOR replaceSources default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_sources([Algolia::Search::Source.new(source: "theSource", description: "theDescription")])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the restoreApiKey method.
#
# restoreApiKey
def snippet_for_restore_api_key
  # >SEPARATOR restoreApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.restore_api_key("ALGOLIA_API_KEY")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObject method.
#
# saveObject
def snippet_for_save_object
  # >SEPARATOR saveObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_object("<YOUR_INDEX_NAME>", {objectID: "id", test: "val"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# call saveObjects without error
def snippet_for_save_objects
  # >SEPARATOR saveObjects call saveObjects without error
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# saveObjects should report errors
def snippet_for_save_objects1
  # >SEPARATOR saveObjects saveObjects should report errors
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# saveObjectsPlaylist
def snippet_for_save_objects2
  # >SEPARATOR saveObjects saveObjectsPlaylist
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [
      {
        objectID: "1",
        visibility: "public",
        name: "Hot 100 Billboard Charts",
        playlistId: "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
        createdAt: "1500240452"
      }
    ]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# saveObjectsPublicUser
def snippet_for_save_objects3
  # >SEPARATOR saveObjects saveObjectsPublicUser
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [
      {
        objectID: "1",
        visibility: "public",
        name: "Hot 100 Billboard Charts",
        playlistId: "d3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f",
        createdAt: "1500240452"
      }
    ]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# saveRule with minimal parameters
def snippet_for_save_rule
  # >SEPARATOR saveRule saveRule with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "id1",
    Algolia::Search::Rule.new(
      algolia_object_id: "id1",
      conditions: [Algolia::Search::Condition.new(pattern: "apple", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(filters: "brand:xiaomi")
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# saveRule with all parameters
def snippet_for_save_rule1
  # >SEPARATOR saveRule saveRule with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "id1",
    Algolia::Search::Rule.new(
      algolia_object_id: "id1",
      conditions: [
        Algolia::Search::Condition.new(pattern: "apple", anchoring: "contains", alternatives: false, context: "search")
      ],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          filters: "brand:apple",
          query: Algolia::Search::ConsequenceQueryObject.new(
            remove: ["algolia"],
            edits: [
              Algolia::Search::Edit.new(type: "remove", delete: "abc", insert: "cde"),
              Algolia::Search::Edit.new(type: "replace", delete: "abc", insert: "cde")
            ]
          )
        ),
        hide: [Algolia::Search::ConsequenceHide.new(algolia_object_id: "321")],
        filter_promotes: false,
        user_data: {algolia: "aloglia"},
        promote: [
          Algolia::Search::PromoteObjectID.new(algolia_object_id: "abc", position: 3),
          Algolia::Search::PromoteObjectIDs.new(object_ids: ["abc", "def"], position: 1)
        ]
      ),
      description: "test",
      enabled: true,
      validity: [Algolia::Search::TimeRange.new(from: 1656670273, _until: 1656670277)]
    ),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# b2b catalog
def snippet_for_save_rule2
  # >SEPARATOR saveRule b2b catalog
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "article-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "article-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "article", anchoring: "startsWith")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "article")]
          ),
          restrict_searchable_attributes: ["title", "book_id"]
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# merchandising and promoting
def snippet_for_save_rule3
  # >SEPARATOR saveRule merchandising and promoting
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "director-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "director-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "{facet:director} director", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          restrict_searchable_attributes: ["title", "book_id"],
          automatic_facet_filters: [Algolia::Search::AutomaticFacetFilter.new(facet: "director")],
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "director")]
          )
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# harry potter
def snippet_for_save_rule4
  # >SEPARATOR saveRule harry potter
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "harry-potter-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "harry-potter-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "harry potter", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(user_data: {promo_content: "20% OFF on all Harry Potter books!"})
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# merchandising empty query
def snippet_for_save_rule5
  # >SEPARATOR saveRule merchandising empty query
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "clearance-category-filter",
    Algolia::Search::Rule.new(
      algolia_object_id: "clearance-category-filter",
      conditions: [Algolia::Search::Condition.new(pattern: "", anchoring: "is", context: "landing")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(optional_filters: "clearance:true")
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# redirect
def snippet_for_save_rule6
  # >SEPARATOR saveRule redirect
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "redirect-help-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "redirect-help-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "help", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(user_data: {redirect: "https://www.algolia.com/support"})
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# promote some results over others
def snippet_for_save_rule7
  # >SEPARATOR saveRule promote some results over others
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "tomato-fruit",
    Algolia::Search::Rule.new(
      algolia_object_id: "tomato-fruit",
      conditions: [Algolia::Search::Condition.new(pattern: "tomato", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(optional_filters: "food_group:fruit")
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# promote several hits
def snippet_for_save_rule8
  # >SEPARATOR saveRule promote several hits
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "Promote-Apple-Newest",
    Algolia::Search::Rule.new(
      algolia_object_id: "Promote-Apple-Newest",
      conditions: [Algolia::Search::Condition.new(pattern: "apple", anchoring: "is")],
      consequence: Algolia::Search::Consequence.new(
        promote: [Algolia::Search::PromoteObjectIDs.new(object_ids: ["iPhone-12345", "watch-123"], position: 0)]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# promote newest release
def snippet_for_save_rule9
  # >SEPARATOR saveRule promote newest release
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "Promote-iPhone-X",
    Algolia::Search::Rule.new(
      algolia_object_id: "Promote-iPhone-X",
      conditions: [Algolia::Search::Condition.new(pattern: "iPhone", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        promote: [Algolia::Search::PromoteObjectID.new(algolia_object_id: "iPhone-12345", position: 0)]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# promote single item
def snippet_for_save_rule10
  # >SEPARATOR saveRule promote single item
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "promote-harry-potter-box-set",
    Algolia::Search::Rule.new(
      algolia_object_id: "promote-harry-potter-box-set",
      conditions: [Algolia::Search::Condition.new(pattern: "Harry Potter", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        promote: [Algolia::Search::PromoteObjectID.new(algolia_object_id: "HP-12345", position: 0)]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# limit search results
def snippet_for_save_rule11
  # >SEPARATOR saveRule limit search results
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "article-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "article-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "article", anchoring: "startsWith")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "article")]
          ),
          restrict_searchable_attributes: ["title", "book_id"]
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# query match
def snippet_for_save_rule12
  # >SEPARATOR saveRule query match
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "tagged-brand-rule",
    Algolia::Search::Rule.new(
      conditions: [
        Algolia::Search::Condition.new(pattern: "brand: {facet:brand}", anchoring: "contains", alternatives: false)
      ],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          automatic_facet_filters: [Algolia::Search::AutomaticFacetFilter.new(facet: "brand")],
          query: Algolia::Search::ConsequenceQueryObject.new(remove: ["brand:", "{facet:brand}"])
        )
      ),
      description: "filter on brand: {brand}",
      algolia_object_id: "tagged-brand-rule"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# dynamic filtering
def snippet_for_save_rule13
  # >SEPARATOR saveRule dynamic filtering
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "color-facets",
    Algolia::Search::Rule.new(
      algolia_object_id: "color-facets",
      conditions: [Algolia::Search::Condition.new(pattern: "{facet:color}")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          automatic_facet_filters: [Algolia::Search::AutomaticFacetFilter.new(facet: "color")]
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# hide hits
def snippet_for_save_rule14
  # >SEPARATOR saveRule hide hits
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "hide-12345",
    Algolia::Search::Rule.new(
      algolia_object_id: "hide-12345",
      conditions: [Algolia::Search::Condition.new(pattern: "cheap", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        hide: [Algolia::Search::ConsequenceHide.new(algolia_object_id: "to-hide-12345")]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# one rule per facet
def snippet_for_save_rule15
  # >SEPARATOR saveRule one rule per facet
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "red-color",
    Algolia::Search::Rule.new(
      algolia_object_id: "red-color",
      conditions: [Algolia::Search::Condition.new(pattern: "red", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          query: Algolia::Search::ConsequenceQueryObject.new(remove: ["red"]),
          filters: "color:red"
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# numerical filters
def snippet_for_save_rule16
  # >SEPARATOR saveRule numerical filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "cheap",
    Algolia::Search::Rule.new(
      algolia_object_id: "cheap",
      conditions: [Algolia::Search::Condition.new(pattern: "cheap", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          query: Algolia::Search::ConsequenceQueryObject.new(remove: ["cheap"]),
          filters: "price < 10"
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# negative filters
def snippet_for_save_rule17
  # >SEPARATOR saveRule negative filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "gluten-free-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "gluten-free-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "gluten-free", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          filters: "NOT allergens:gluten",
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "gluten-free")]
          )
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# positive filters
def snippet_for_save_rule18
  # >SEPARATOR saveRule positive filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "diet-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "diet-rule",
      conditions: [Algolia::Search::Condition.new(pattern: "diet", anchoring: "contains")],
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          filters: "'low-carb' OR 'low-fat'",
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "diet")]
          )
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# conditionless
def snippet_for_save_rule19
  # >SEPARATOR saveRule conditionless
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "diet-rule",
    Algolia::Search::Rule.new(
      algolia_object_id: "diet-rule",
      consequence: Algolia::Search::Consequence.new(
        params: Algolia::Search::ConsequenceParams.new(
          filters: "'low-carb' OR 'low-fat'",
          query: Algolia::Search::ConsequenceQueryObject.new(
            edits: [Algolia::Search::Edit.new(type: "remove", delete: "diet")]
          )
        )
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRules method.
#
# saveRules with minimal parameters
def snippet_for_save_rules
  # >SEPARATOR saveRules saveRules with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rules(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::Rule.new(
        algolia_object_id: "a-rule-id",
        conditions: [Algolia::Search::Condition.new(pattern: "smartphone", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(filters: "brand:apple")
        )
      ),
      Algolia::Search::Rule.new(
        algolia_object_id: "a-second-rule-id",
        conditions: [Algolia::Search::Condition.new(pattern: "apple", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(filters: "brand:samsung")
        )
      )
    ],
    false,
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRules method.
#
# saveRules with all parameters
def snippet_for_save_rules1
  # >SEPARATOR saveRules saveRules with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rules(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::Rule.new(
        algolia_object_id: "id1",
        conditions: [
          Algolia::Search::Condition.new(
            pattern: "apple",
            anchoring: "contains",
            alternatives: false,
            context: "search"
          )
        ],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(
            filters: "brand:apple",
            query: Algolia::Search::ConsequenceQueryObject.new(
              remove: ["algolia"],
              edits: [
                Algolia::Search::Edit.new(type: "remove", delete: "abc", insert: "cde"),
                Algolia::Search::Edit.new(type: "replace", delete: "abc", insert: "cde")
              ]
            )
          ),
          hide: [Algolia::Search::ConsequenceHide.new(algolia_object_id: "321")],
          filter_promotes: false,
          user_data: {algolia: "aloglia"},
          promote: [
            Algolia::Search::PromoteObjectID.new(algolia_object_id: "abc", position: 3),
            Algolia::Search::PromoteObjectIDs.new(object_ids: ["abc", "def"], position: 1)
          ]
        ),
        description: "test",
        enabled: true,
        validity: [Algolia::Search::TimeRange.new(from: 1656670273, _until: 1656670277)]
      )
    ],
    true,
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRules method.
#
# dynamic filtering
def snippet_for_save_rules2
  # >SEPARATOR saveRules dynamic filtering
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rules(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::Rule.new(
        algolia_object_id: "toaster",
        conditions: [Algolia::Search::Condition.new(pattern: "toaster", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(
            query: Algolia::Search::ConsequenceQueryObject.new(remove: ["toaster"]),
            filters: "product_type:toaster"
          )
        )
      ),
      Algolia::Search::Rule.new(
        algolia_object_id: "cheap",
        conditions: [Algolia::Search::Condition.new(pattern: "cheap", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(
            query: Algolia::Search::ConsequenceQueryObject.new(remove: ["cheap"]),
            filters: "price < 15"
          )
        )
      )
    ]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRules method.
#
# enhance search results
def snippet_for_save_rules3
  # >SEPARATOR saveRules enhance search results
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rules(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::Rule.new(
        algolia_object_id: "country",
        conditions: [Algolia::Search::Condition.new(pattern: "{facet:country}", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(around_lat_lng_via_ip: false)
        )
      ),
      Algolia::Search::Rule.new(
        algolia_object_id: "city",
        conditions: [Algolia::Search::Condition.new(pattern: "{facet:city}", anchoring: "contains")],
        consequence: Algolia::Search::Consequence.new(
          params: Algolia::Search::ConsequenceParams.new(around_lat_lng_via_ip: false)
        )
      )
    ]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveSynonym method.
#
# saveSynonym
def snippet_for_save_synonym
  # >SEPARATOR saveSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_synonym(
    "<YOUR_INDEX_NAME>",
    "id1",
    Algolia::Search::SynonymHit.new(algolia_object_id: "id1", type: "synonym", synonyms: ["car", "vehicule", "auto"]),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveSynonyms method.
#
# saveSynonyms
def snippet_for_save_synonyms
  # >SEPARATOR saveSynonyms default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_synonyms(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::SynonymHit.new(algolia_object_id: "id1", type: "synonym", synonyms: ["car", "vehicule", "auto"]),
      Algolia::Search::SynonymHit.new(
        algolia_object_id: "id2",
        type: "onewaysynonym",
        input: "iphone",
        synonyms: ["ephone", "aphone", "yphone"]
      )
    ],
    true,
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# withHitsPerPage
def snippet_for_search
  # >SEPARATOR search withHitsPerPage
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>", query: "<YOUR_QUERY>", hits_per_page: 50)
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterOnly
def snippet_for_search1
  # >SEPARATOR search filterOnly
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "actor:Scarlett Johansson"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterOr
def snippet_for_search2
  # >SEPARATOR search filterOr
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "actor:Tom Cruise OR actor:Scarlett Johansson"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterNot
def snippet_for_search3
  # >SEPARATOR search filterNot
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "NOT actor:Nicolas Cage"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for a single hits request with minimal parameters
def snippet_for_search4
  # >SEPARATOR search search for a single hits request with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>")]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search with highlight and snippet results
def snippet_for_search5
  # >SEPARATOR search search with highlight and snippet results
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "vim",
          attributes_to_snippet: ["*:20"],
          attributes_to_highlight: ["*"],
          attributes_to_retrieve: ["*"]
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# retrieveFacets
def snippet_for_search6
  # >SEPARATOR search retrieveFacets
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          facets: ["author", "genre"]
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# retrieveFacetsWildcard
def snippet_for_search7
  # >SEPARATOR search retrieveFacetsWildcard
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>", query: "<YOUR_QUERY>", facets: ["*"])
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for a single facet request with minimal parameters
def snippet_for_search8
  # >SEPARATOR search search for a single facet request with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [Algolia::Search::SearchForFacets.new(index_name: "<YOUR_INDEX_NAME>", type: "facet", facet: "editor")],
      strategy: "stopIfEnoughMatches"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for a single hits request with all parameters
def snippet_for_search9
  # >SEPARATOR search search for a single hits request with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "myQuery",
          hits_per_page: 50,
          type: "default"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for a single facet request with all parameters
def snippet_for_search10
  # >SEPARATOR search search for a single facet request with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForFacets.new(
          index_name: "<YOUR_INDEX_NAME>",
          type: "facet",
          facet: "theFacet",
          facet_query: "theFacetQuery",
          query: "theQuery",
          max_facet_hits: 50
        )
      ],
      strategy: "stopIfEnoughMatches"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for multiple mixed requests in multiple indices with minimal parameters
def snippet_for_search11
  # >SEPARATOR search search for multiple mixed requests in multiple indices with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>"),
        Algolia::Search::SearchForFacets.new(index_name: "<YOUR_INDEX_NAME>", type: "facet", facet: "theFacet"),
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>", type: "default")
      ],
      strategy: "stopIfEnoughMatches"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search for multiple mixed requests in multiple indices with all parameters
def snippet_for_search12
  # >SEPARATOR search search for multiple mixed requests in multiple indices with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForFacets.new(
          index_name: "<YOUR_INDEX_NAME>",
          type: "facet",
          facet: "theFacet",
          facet_query: "theFacetQuery",
          query: "theQuery",
          max_facet_hits: 50
        ),
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "myQuery",
          hits_per_page: 50,
          type: "default"
        )
      ],
      strategy: "stopIfEnoughMatches"
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search filters accept all of the possible shapes
def snippet_for_search13
  # >SEPARATOR search search filters accept all of the possible shapes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          facet_filters: "mySearch:filters",
          re_ranking_apply_filter: "mySearch:filters",
          tag_filters: "mySearch:filters",
          numeric_filters: "mySearch:filters",
          optional_filters: "mySearch:filters"
        ),
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          facet_filters: ["mySearch:filters", ["mySearch:filters", ["mySearch:filters"]]],
          re_ranking_apply_filter: ["mySearch:filters", ["mySearch:filters"]],
          tag_filters: ["mySearch:filters", ["mySearch:filters"]],
          numeric_filters: ["mySearch:filters", ["mySearch:filters"]],
          optional_filters: ["mySearch:filters", ["mySearch:filters"]]
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search filters end to end
def snippet_for_search14
  # >SEPARATOR search search filters end to end
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          filters: "editor:'visual studio' OR editor:neovim"
        ),
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          facet_filters: ["editor:'visual studio'", "editor:neovim"]
        ),
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          facet_filters: ["editor:'visual studio'", ["editor:neovim"]]
        ),
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          facet_filters: ["editor:'visual studio'", ["editor:neovim", ["editor:goland"]]]
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# search with all search parameters
def snippet_for_search15
  # >SEPARATOR search search with all search parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          advanced_syntax: true,
          advanced_syntax_features: ["exactPhrase"],
          allow_typos_on_numeric_tokens: true,
          alternatives_as_exact: ["multiWordsSynonym"],
          analytics: true,
          analytics_tags: [""],
          around_lat_lng: "",
          around_lat_lng_via_ip: true,
          around_precision: 0,
          around_radius: "all",
          attribute_criteria_computed_by_min_proximity: true,
          attributes_to_highlight: [""],
          attributes_to_retrieve: [""],
          attributes_to_snippet: [""],
          click_analytics: true,
          decompound_query: true,
          disable_exact_on_attributes: [""],
          disable_typo_tolerance_on_attributes: [""],
          distinct: 0,
          enable_ab_test: true,
          enable_personalization: true,
          enable_re_ranking: true,
          enable_rules: true,
          exact_on_single_word_query: "attribute",
          facet_filters: [""],
          faceting_after_distinct: true,
          facets: [""],
          filters: "",
          get_ranking_info: true,
          highlight_post_tag: "",
          highlight_pre_tag: "",
          hits_per_page: 1,
          ignore_plurals: false,
          index_name: "<YOUR_INDEX_NAME>",
          inside_bounding_box: [[47.3165, 4.9665, 47.3424, 5.0201], [40.9234, 2.1185, 38.643, 1.9916]],
          inside_polygon: [
            [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9],
            [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104]
          ],
          length: 1,
          max_values_per_facet: 0,
          min_proximity: 1,
          min_word_sizefor1_typo: 0,
          min_word_sizefor2_typos: 0,
          minimum_around_radius: 1,
          natural_languages: ["fr"],
          numeric_filters: [""],
          offset: 0,
          optional_filters: [""],
          optional_words: [""],
          page: 0,
          percentile_computation: true,
          personalization_impact: 0,
          query: "",
          query_languages: ["fr"],
          query_type: "prefixAll",
          ranking: [""],
          re_ranking_apply_filter: [""],
          relevancy_strictness: 0,
          remove_stop_words: true,
          remove_words_if_no_results: "allOptional",
          rendering_content: Algolia::Search::RenderingContent.new(
            facet_ordering: Algolia::Search::FacetOrdering.new(
              facets: Algolia::Search::Facets.new(order: ["a", "b"]),
              values: {a: Algolia::Search::Value.new(order: ["b"], sort_remaining_by: "count")}
            )
          ),
          replace_synonyms_in_highlight: true,
          response_fields: [""],
          restrict_highlight_and_snippet_arrays: true,
          restrict_searchable_attributes: [""],
          rule_contexts: [""],
          similar_query: "",
          snippet_ellipsis_text: "",
          sort_facet_values_by: "",
          sum_or_filters_scores: true,
          synonyms: true,
          tag_filters: [""],
          type: "default",
          typo_tolerance: "min",
          user_token: ""
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchDictionaryEntries method.
#
# get searchDictionaryEntries results with minimal parameters
def snippet_for_search_dictionary_entries
  # >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_dictionary_entries(
    "stopwords",
    Algolia::Search::SearchDictionaryEntriesParams.new(query: "about")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchDictionaryEntries method.
#
# get searchDictionaryEntries results with all parameters
def snippet_for_search_dictionary_entries1
  # >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_dictionary_entries(
    "compounds",
    Algolia::Search::SearchDictionaryEntriesParams.new(query: "foo", page: 4, hits_per_page: 2, language: "fr")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchForFacetValues method.
#
# get searchForFacetValues results with minimal parameters
def snippet_for_search_for_facet_values
  # >SEPARATOR searchForFacetValues get searchForFacetValues results with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_for_facet_values("<YOUR_INDEX_NAME>", "facetName")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchForFacetValues method.
#
# get searchForFacetValues results with all parameters
def snippet_for_search_for_facet_values1
  # >SEPARATOR searchForFacetValues get searchForFacetValues results with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_for_facet_values(
    "<YOUR_INDEX_NAME>",
    "facetName",
    Algolia::Search::SearchForFacetValuesRequest.new(
      params: "query=foo&facetFilters=['bar']",
      facet_query: "foo",
      max_facet_hits: 42
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchForFacetValues method.
#
# facetName and facetQuery
def snippet_for_search_for_facet_values2
  # >SEPARATOR searchForFacetValues facetName and facetQuery
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_for_facet_values(
    "<YOUR_INDEX_NAME>",
    "author",
    Algolia::Search::SearchForFacetValuesRequest.new(facet_query: "stephen king")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchRules method.
#
# searchRules
def snippet_for_search_rules
  # >SEPARATOR searchRules default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_rules("<YOUR_INDEX_NAME>", Algolia::Search::SearchRulesParams.new(query: "zorro"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# search with minimal parameters
def snippet_for_search_single_index
  # >SEPARATOR searchSingleIndex search with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# search with special characters in indexName
def snippet_for_search_single_index1
  # >SEPARATOR searchSingleIndex search with special characters in indexName
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# search with searchParams
def snippet_for_search_single_index2
  # >SEPARATOR searchSingleIndex search with searchParams
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(query: "myQuery", facet_filters: ["tags:algolia"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# single search retrieve snippets
def snippet_for_search_single_index3
  # >SEPARATOR searchSingleIndex single search retrieve snippets
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      query: "batman mask of the phantasm",
      attributes_to_retrieve: ["*"],
      attributes_to_snippet: ["*:20"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# query
def snippet_for_search_single_index4
  # >SEPARATOR searchSingleIndex query
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>", Algolia::Search::SearchParamsObject.new(query: "phone"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filters
def snippet_for_search_single_index5
  # >SEPARATOR searchSingleIndex filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(filters: "country:US AND price.gross < 2.0")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# distinct
def snippet_for_search_single_index6
  # >SEPARATOR searchSingleIndex distinct
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>", Algolia::Search::SearchParamsObject.new(distinct: true))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersNumeric
def snippet_for_search_single_index7
  # >SEPARATOR searchSingleIndex filtersNumeric
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(filters: "price < 10")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersTimestamp
def snippet_for_search_single_index8
  # >SEPARATOR searchSingleIndex filtersTimestamp
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(filters: "NOT date_timestamp:1514764800 TO 1546300799")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersSumOrFiltersScoresFalse
def snippet_for_search_single_index9
  # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      filters: "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
      sum_or_filters_scores: false
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersSumOrFiltersScoresTrue
def snippet_for_search_single_index10
  # >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      filters: "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
      sum_or_filters_scores: true
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersStephenKing
def snippet_for_search_single_index11
  # >SEPARATOR searchSingleIndex filtersStephenKing
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(filters: "author:\"Stephen King\"")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersNotTags
def snippet_for_search_single_index12
  # >SEPARATOR searchSingleIndex filtersNotTags
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(filters: "NOT _tags:non-fiction")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# facetFiltersList
def snippet_for_search_single_index13
  # >SEPARATOR searchSingleIndex facetFiltersList
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      facet_filters: ["publisher:Penguin", ["author:Stephen King", "genre:Horror"]]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# facetFiltersNeg
def snippet_for_search_single_index14
  # >SEPARATOR searchSingleIndex facetFiltersNeg
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(facet_filters: "category:-Ebook")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# filtersAndFacetFilters
def snippet_for_search_single_index15
  # >SEPARATOR searchSingleIndex filtersAndFacetFilters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      filters: "(author:\"Stephen King\" OR genre:\"Horror\")",
      facet_filters: ["publisher:Penguin"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# facet author genre
def snippet_for_search_single_index16
  # >SEPARATOR searchSingleIndex facet author genre
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(facets: ["author", "genre"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# facet wildcard
def snippet_for_search_single_index17
  # >SEPARATOR searchSingleIndex facet wildcard
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>", Algolia::Search::SearchParamsObject.new(facets: ["*"]))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# maxValuesPerFacet
def snippet_for_search_single_index18
  # >SEPARATOR searchSingleIndex maxValuesPerFacet
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(max_values_per_facet: 1000)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# aroundLatLng
def snippet_for_search_single_index19
  # >SEPARATOR searchSingleIndex aroundLatLng
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(around_lat_lng: "40.71, -74.01")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# aroundLatLngViaIP
def snippet_for_search_single_index20
  # >SEPARATOR searchSingleIndex aroundLatLngViaIP
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(around_lat_lng_via_ip: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# aroundRadius
def snippet_for_search_single_index21
  # >SEPARATOR searchSingleIndex aroundRadius
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(around_lat_lng: "40.71, -74.01", around_radius: 1000000)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# insideBoundingBox
def snippet_for_search_single_index22
  # >SEPARATOR searchSingleIndex insideBoundingBox
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      inside_bounding_box: [[49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875]]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# insidePolygon
def snippet_for_search_single_index23
  # >SEPARATOR searchSingleIndex insidePolygon
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      inside_polygon: [
        [
          42.01,
          -124.31,
          48.835509470063045,
          -124.40453125000005,
          45.01082951668149,
          -65.95726562500005,
          31.247243545293433,
          -81.06578125000004,
          25.924152577235226,
          -97.68234374999997,
          32.300311895879545,
          -117.54828125
        ]
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# insidePolygon
def snippet_for_search_single_index24
  # >SEPARATOR searchSingleIndex insidePolygon
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      inside_polygon: [
        [
          42.01,
          -124.31,
          48.835509470063045,
          -124.40453125000005,
          45.01082951668149,
          -65.95726562500005,
          31.247243545293433,
          -81.06578125000004,
          25.924152577235226,
          -97.68234374999997,
          32.300311895879545,
          -117.54828125
        ]
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# optionalFilters
def snippet_for_search_single_index25
  # >SEPARATOR searchSingleIndex optionalFilters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(optional_filters: ["can_deliver_quickly:true"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# optionalFiltersMany
def snippet_for_search_single_index26
  # >SEPARATOR searchSingleIndex optionalFiltersMany
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      optional_filters: ["brand:Apple<score=3>", "brand:Samsung<score=2>", "brand:-Huawei"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# optionalFiltersSimple
def snippet_for_search_single_index27
  # >SEPARATOR searchSingleIndex optionalFiltersSimple
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(optional_filters: ["brand:Apple<score=2>", "type:tablet"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# restrictSearchableAttributes
def snippet_for_search_single_index28
  # >SEPARATOR searchSingleIndex restrictSearchableAttributes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(restrict_searchable_attributes: ["title_fr"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# getRankingInfo
def snippet_for_search_single_index29
  # >SEPARATOR searchSingleIndex getRankingInfo
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(get_ranking_info: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# clickAnalytics
def snippet_for_search_single_index30
  # >SEPARATOR searchSingleIndex clickAnalytics
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(click_analytics: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# clickAnalyticsUserToken
def snippet_for_search_single_index31
  # >SEPARATOR searchSingleIndex clickAnalyticsUserToken
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(click_analytics: true, user_token: "user-1")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# enablePersonalization
def snippet_for_search_single_index32
  # >SEPARATOR searchSingleIndex enablePersonalization
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(enable_personalization: true, user_token: "user-1")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# userToken
def snippet_for_search_single_index33
  # >SEPARATOR searchSingleIndex userToken
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(user_token: "user-1")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# analyticsTag
def snippet_for_search_single_index34
  # >SEPARATOR searchSingleIndex analyticsTag
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(analytics_tags: ["YOUR_ANALYTICS_TAG"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# facetFiltersUsers
def snippet_for_search_single_index35
  # >SEPARATOR searchSingleIndex facetFiltersUsers
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(facet_filters: ["user:user42", "user:public"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# buildTheQuery
def snippet_for_search_single_index36
  # >SEPARATOR searchSingleIndex buildTheQuery
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchParamsObject.new(
      filters: "categoryPageId: Men's Clothing",
      hits_per_page: 50,
      analytics_tags: ["mens-clothing"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSynonyms method.
#
# searchSynonyms with minimal parameters
def snippet_for_search_synonyms
  # >SEPARATOR searchSynonyms searchSynonyms with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_synonyms("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSynonyms method.
#
# searchSynonyms with all parameters
def snippet_for_search_synonyms1
  # >SEPARATOR searchSynonyms searchSynonyms with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_synonyms(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::SearchSynonymsParams.new(query: "myQuery", type: "altcorrection1", page: 10, hits_per_page: 10)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchUserIds method.
#
# searchUserIds
def snippet_for_search_user_ids
  # >SEPARATOR searchUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_user_ids(
    Algolia::Search::SearchUserIdsParams.new(query: "test", cluster_name: "theClusterName", page: 5, hits_per_page: 10)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setClientApiKey method.
#
# switch API key
def snippet_for_set_client_api_key
  # >SEPARATOR setClientApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  client.set_client_api_key("updated-api-key")
  # >LOG
  # SEPARATOR<
end

# Snippet for the setDictionarySettings method.
#
# get setDictionarySettings results with minimal parameters
def snippet_for_set_dictionary_settings
  # >SEPARATOR setDictionarySettings get setDictionarySettings results with minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_dictionary_settings(
    Algolia::Search::DictionarySettingsParams.new(
      disable_standard_entries: Algolia::Search::StandardEntries.new(plurals: {fr: false, en: false, ru: true})
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setDictionarySettings method.
#
# get setDictionarySettings results with all parameters
def snippet_for_set_dictionary_settings1
  # >SEPARATOR setDictionarySettings get setDictionarySettings results with all parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_dictionary_settings(
    Algolia::Search::DictionarySettingsParams.new(
      disable_standard_entries: Algolia::Search::StandardEntries.new(
        plurals: {fr: false, en: false, ru: true},
        stopwords: {fr: false},
        compounds: {ru: true}
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# minimal parameters
def snippet_for_set_settings
  # >SEPARATOR setSettings minimal parameters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(pagination_limited_to: 10),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# boolean typoTolerance
def snippet_for_set_settings1
  # >SEPARATOR setSettings boolean typoTolerance
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(typo_tolerance: true), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# enum typoTolerance
def snippet_for_set_settings2
  # >SEPARATOR setSettings enum typoTolerance
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(typo_tolerance: "min"), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# ignorePlurals
def snippet_for_set_settings3
  # >SEPARATOR setSettings ignorePlurals
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(ignore_plurals: true), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# list of string ignorePlurals
def snippet_for_set_settings4
  # >SEPARATOR setSettings list of string ignorePlurals
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(ignore_plurals: ["fr"]), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# removeStopWords boolean
def snippet_for_set_settings5
  # >SEPARATOR setSettings removeStopWords boolean
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(remove_stop_words: true), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# removeStopWords list of string
def snippet_for_set_settings6
  # >SEPARATOR setSettings removeStopWords list of string
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(remove_stop_words: ["fr"]),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# boolean distinct
def snippet_for_set_settings7
  # >SEPARATOR setSettings boolean distinct
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(distinct: true), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# integer distinct
def snippet_for_set_settings8
  # >SEPARATOR setSettings integer distinct
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(distinct: 1), true)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# distinct company
def snippet_for_set_settings9
  # >SEPARATOR setSettings distinct company
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attribute_for_distinct: "company", distinct: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# distinct design
def snippet_for_set_settings10
  # >SEPARATOR setSettings distinct design
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attribute_for_distinct: "design", distinct: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# distinct true
def snippet_for_set_settings11
  # >SEPARATOR setSettings distinct true
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(distinct: true))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# distinct section
def snippet_for_set_settings12
  # >SEPARATOR setSettings distinct section
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attribute_for_distinct: "section", distinct: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting allergens
def snippet_for_set_settings13
  # >SEPARATOR setSettings attributesForFaceting allergens
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["allergens"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting categoryPageId
def snippet_for_set_settings14
  # >SEPARATOR setSettings attributesForFaceting categoryPageId
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["searchable(categoryPageId)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# unretrievableAttributes
def snippet_for_set_settings15
  # >SEPARATOR setSettings unretrievableAttributes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(unretrievable_attributes: ["visible_by"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting user restricted data
def snippet_for_set_settings16
  # >SEPARATOR setSettings attributesForFaceting user restricted data
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["filterOnly(visible_by)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting optional filters
def snippet_for_set_settings17
  # >SEPARATOR setSettings attributesForFaceting optional filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["can_deliver_quickly", "restaurant"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting redirect index
def snippet_for_set_settings18
  # >SEPARATOR setSettings attributesForFaceting redirect index
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["query_terms"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting multiple consequences
def snippet_for_set_settings19
  # >SEPARATOR setSettings attributesForFaceting multiple consequences
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["director"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting in-depth optional filters
def snippet_for_set_settings20
  # >SEPARATOR setSettings attributesForFaceting in-depth optional filters
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(attributes_for_faceting: ["filterOnly(brand)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# mode neuralSearch
def snippet_for_set_settings21
  # >SEPARATOR setSettings mode neuralSearch
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(mode: "neuralSearch"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# mode keywordSearch
def snippet_for_set_settings22
  # >SEPARATOR setSettings mode keywordSearch
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(mode: "keywordSearch"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributes same priority
def snippet_for_set_settings23
  # >SEPARATOR setSettings searchableAttributes same priority
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["title,comments", "ingredients"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributes higher priority
def snippet_for_set_settings24
  # >SEPARATOR setSettings searchableAttributes higher priority
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["title", "ingredients"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking retweets
def snippet_for_set_settings25
  # >SEPARATOR setSettings customRanking retweets
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(retweets)", "desc(likes)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking boosted
def snippet_for_set_settings26
  # >SEPARATOR setSettings customRanking boosted
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(boosted)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking pageviews
def snippet_for_set_settings27
  # >SEPARATOR setSettings customRanking pageviews
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(pageviews)", "desc(comments)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking applying search parameters for a specific query
def snippet_for_set_settings28
  # >SEPARATOR setSettings customRanking applying search parameters for a specific query
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      custom_ranking: ["desc(nb_airline_liaisons)"],
      attributes_for_faceting: ["city, country"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking rounded pageviews
def snippet_for_set_settings29
  # >SEPARATOR setSettings customRanking rounded pageviews
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(rounded_pageviews)", "desc(comments)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking price
def snippet_for_set_settings30
  # >SEPARATOR setSettings customRanking price
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(price)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# ranking exhaustive
def snippet_for_set_settings31
  # >SEPARATOR setSettings ranking exhaustive
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      ranking: ["desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# ranking standard replica
def snippet_for_set_settings32
  # >SEPARATOR setSettings ranking standard replica
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(ranking: ["desc(post_date_timestamp)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# ranking virtual replica
def snippet_for_set_settings33
  # >SEPARATOR setSettings ranking virtual replica
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["desc(post_date_timestamp)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# customRanking and ranking sort alphabetically
def snippet_for_set_settings34
  # >SEPARATOR setSettings customRanking and ranking sort alphabetically
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      custom_ranking: ["asc(textual_attribute)"],
      ranking: ["custom", "typo", "geo", "words", "filters", "proximity", "attribute", "exact"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# relevancyStrictness
def snippet_for_set_settings35
  # >SEPARATOR setSettings relevancyStrictness
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(custom_ranking: ["asc(textual_attribute)"], relevancy_strictness: 0)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# create replica index
def snippet_for_set_settings36
  # >SEPARATOR setSettings create replica index
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(replicas: ["products_price_desc"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# create virtual replica index
def snippet_for_set_settings37
  # >SEPARATOR setSettings create virtual replica index
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(replicas: ["virtual(products_price_desc)"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# unlink replica index
def snippet_for_set_settings38
  # >SEPARATOR setSettings unlink replica index
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(replicas: [""]))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# forwardToReplicas
def snippet_for_set_settings39
  # >SEPARATOR setSettings forwardToReplicas
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["name", "description"]),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# maxValuesPerFacet
def snippet_for_set_settings40
  # >SEPARATOR setSettings maxValuesPerFacet
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(max_values_per_facet: 1000))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# maxFacetHits
def snippet_for_set_settings41
  # >SEPARATOR setSettings maxFacetHits
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings("<YOUR_INDEX_NAME>", Algolia::Search::IndexSettings.new(max_facet_hits: 1000))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# attributesForFaceting complex
def snippet_for_set_settings42
  # >SEPARATOR setSettings attributesForFaceting complex
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      attributes_for_faceting: ["actor", "filterOnly(category)", "searchable(publisher)"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# ranking closest dates
def snippet_for_set_settings43
  # >SEPARATOR setSettings ranking closest dates
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      ranking: ["asc(date_timestamp)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributes item variation
def snippet_for_set_settings44
  # >SEPARATOR setSettings searchableAttributes item variation
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["design", "type", "color"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributes around location
def snippet_for_set_settings45
  # >SEPARATOR setSettings searchableAttributes around location
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      searchable_attributes: ["name", "country", "code", "iata_code"],
      custom_ranking: ["desc(links_count)"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributes around location
def snippet_for_set_settings46
  # >SEPARATOR setSettings searchableAttributes around location
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      searchable_attributes: ["name", "country", "code", "iata_code"],
      custom_ranking: ["desc(links_count)"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# disableTypoToleranceOnAttributes
def snippet_for_set_settings47
  # >SEPARATOR setSettings disableTypoToleranceOnAttributes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(disable_typo_tolerance_on_attributes: ["serial_number"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# everything
def snippet_for_set_settings48
  # >SEPARATOR setSettings everything
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      advanced_syntax: true,
      advanced_syntax_features: ["exactPhrase"],
      allow_compression_of_integer_array: true,
      allow_typos_on_numeric_tokens: true,
      alternatives_as_exact: ["singleWordSynonym"],
      attribute_criteria_computed_by_min_proximity: true,
      attribute_for_distinct: "test",
      attributes_for_faceting: ["algolia"],
      attributes_to_highlight: ["algolia"],
      attributes_to_retrieve: ["algolia"],
      attributes_to_snippet: ["algolia"],
      attributes_to_transliterate: ["algolia"],
      camel_case_attributes: ["algolia"],
      custom_normalization: {algolia: {aloglia: "aglolia"}},
      custom_ranking: ["algolia"],
      decompound_query: false,
      decompounded_attributes: {algolia: "aloglia"},
      disable_exact_on_attributes: ["algolia"],
      disable_prefix_on_attributes: ["algolia"],
      disable_typo_tolerance_on_attributes: ["algolia"],
      disable_typo_tolerance_on_words: ["algolia"],
      distinct: 3,
      enable_personalization: true,
      enable_re_ranking: false,
      enable_rules: true,
      exact_on_single_word_query: "attribute",
      highlight_pre_tag: "<span>",
      highlight_post_tag: "</span>",
      hits_per_page: 10,
      ignore_plurals: false,
      index_languages: ["fr"],
      keep_diacritics_on_characters: "abc",
      max_facet_hits: 20,
      max_values_per_facet: 30,
      min_proximity: 6,
      min_word_sizefor1_typo: 5,
      min_word_sizefor2_typos: 11,
      mode: "neuralSearch",
      numeric_attributes_for_filtering: ["algolia"],
      optional_words: ["myspace"],
      pagination_limited_to: 0,
      query_languages: ["fr"],
      query_type: "prefixLast",
      ranking: ["geo"],
      re_ranking_apply_filter: "mySearch:filters",
      relevancy_strictness: 10,
      remove_stop_words: false,
      remove_words_if_no_results: "lastWords",
      rendering_content: Algolia::Search::RenderingContent.new(
        facet_ordering: Algolia::Search::FacetOrdering.new(
          facets: Algolia::Search::Facets.new(order: ["a", "b"]),
          values: {a: Algolia::Search::Value.new(order: ["b"], sort_remaining_by: "count")}
        )
      ),
      replace_synonyms_in_highlight: true,
      replicas: [""],
      response_fields: ["algolia"],
      restrict_highlight_and_snippet_arrays: true,
      searchable_attributes: ["foo"],
      semantic_search: Algolia::Search::SemanticSearch.new(event_sources: ["foo"]),
      separators_to_index: "bar",
      snippet_ellipsis_text: "---",
      sort_facet_values_by: "date",
      typo_tolerance: false,
      unretrievable_attributes: ["foo"],
      user_data: {user: "data"}
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributesWithCustomRankingsAndAttributesForFaceting
def snippet_for_set_settings49
  # >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      searchable_attributes: ["brand", "name", "categories", "unordered(description)"],
      custom_ranking: ["desc(popularity)"],
      attributes_for_faceting: ["searchable(brand)", "type", "categories", "price"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributesProductReferenceSuffixes
def snippet_for_set_settings50
  # >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      searchable_attributes: ["name", "product_reference", "product_reference_suffixes"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# queryLanguageAndIgnorePlurals
def snippet_for_set_settings51
  # >SEPARATOR setSettings queryLanguageAndIgnorePlurals
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(query_languages: ["en"], ignore_plurals: true)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributesInMovies
def snippet_for_set_settings52
  # >SEPARATOR setSettings searchableAttributesInMovies
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["title_eng", "title_fr", "title_es"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# disablePrefixOnAttributes
def snippet_for_set_settings53
  # >SEPARATOR setSettings disablePrefixOnAttributes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(disable_prefix_on_attributes: ["serial_number"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# disableTypoToleranceOnAttributes
def snippet_for_set_settings54
  # >SEPARATOR setSettings disableTypoToleranceOnAttributes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(disable_typo_tolerance_on_attributes: ["serial_number"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributesSimpleExample
def snippet_for_set_settings55
  # >SEPARATOR setSettings searchableAttributesSimpleExample
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["serial_number"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# searchableAttributesSimpleExampleAlt
def snippet_for_set_settings56
  # >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(searchable_attributes: ["serial_number", "serial_number_suffixes"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the updateApiKey method.
#
# updateApiKey
def snippet_for_update_api_key
  # >SEPARATOR updateApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.update_api_key(
    "ALGOLIA_API_KEY",
    Algolia::Search::ApiKey.new(
      acl: ["search", "addObject"],
      validity: 300,
      max_queries_per_ip_per_hour: 100,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key helper - add
def snippet_for_wait_for_api_key
  # >SEPARATOR waitForApiKey wait for api key helper - add
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key("api-key-add-operation-test-ruby", "add")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key - update
def snippet_for_wait_for_api_key1
  # >SEPARATOR waitForApiKey wait for api key - update
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key(
    "api-key-update-operation-test-ruby",
    "update",
    Algolia::Search::ApiKey.new(
      description: "my updated api key",
      acl: ["search", "addObject", "deleteObject"],
      indexes: ["Movies", "Books"],
      referers: ["*google.com", "*algolia.com"],
      validity: 305,
      max_queries_per_ip_per_hour: 95,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key - delete
def snippet_for_wait_for_api_key2
  # >SEPARATOR waitForApiKey wait for api key - delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key("api-key-delete-operation-test-ruby", "delete")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForAppTask method.
#
# wait for an application-level task
def snippet_for_wait_for_app_task
  # >SEPARATOR waitForAppTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_app_task(123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForTask method.
#
# wait for task
def snippet_for_wait_for_task
  # >SEPARATOR waitForTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_task("<YOUR_INDEX_NAME>", 123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end
