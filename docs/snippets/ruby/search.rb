# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
require "algolia"

# IMPORT<

# Snippet for the addApiKey method.
#
# addApiKey
def snippet_for_add_api_key
  # >SEPARATOR addApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.add_api_key(
    Algolia::Search::ApiKey.new(
      acl: ["search", "addObject"],
      description: "my new api key",
      validity: 300,
      max_queries_per_ip_per_hour: 100,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the addOrUpdateObject method.
#
# addOrUpdateObject
def snippet_for_add_or_update_object
  # >SEPARATOR addOrUpdateObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.add_or_update_object("<YOUR_INDEX_NAME>", "uniqueID", {key: "value"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the appendSource method.
#
# appendSource
def snippet_for_append_source
  # >SEPARATOR appendSource default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.append_source(Algolia::Search::Source.new(source: "theSource", description: "theDescription"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the assignUserId method.
#
# assignUserId
def snippet_for_assign_user_id
  # >SEPARATOR assignUserId default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.assign_user_id("userID", Algolia::Search::AssignUserIdParams.new(cluster: "theCluster"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# addObject
def snippet_for_batch
  # >SEPARATOR batch addObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [
        Algolia::Search::BatchRequest.new(action: "addObject", body: {key: "bar", foo: "1"}),
        Algolia::Search::BatchRequest.new(action: "addObject", body: {key: "baz", foo: "2"})
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# clear
def snippet_for_batch1
  # >SEPARATOR batch clear
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "clear", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# delete
def snippet_for_batch2
  # >SEPARATOR batch delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "delete", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# deleteObject
def snippet_for_batch3
  # >SEPARATOR batch deleteObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "deleteObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# partialUpdateObject
def snippet_for_batch4
  # >SEPARATOR batch partialUpdateObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "partialUpdateObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# partialUpdateObjectNoCreate
def snippet_for_batch5
  # >SEPARATOR batch partialUpdateObjectNoCreate
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "partialUpdateObjectNoCreate", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batch method.
#
# updateObject
def snippet_for_batch6
  # >SEPARATOR batch updateObject
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::BatchWriteParams.new(
      requests: [Algolia::Search::BatchRequest.new(action: "updateObject", body: {key: "value"})]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchAssignUserIds method.
#
# batchAssignUserIds
def snippet_for_batch_assign_user_ids
  # >SEPARATOR batchAssignUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_assign_user_ids(
    "userID",
    Algolia::Search::BatchAssignUserIdsParams.new(cluster: "theCluster", users: ["user1", "user2"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# replace
def snippet_for_batch_dictionary_entries
  # >SEPARATOR batchDictionaryEntries replace
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "plurals",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      clear_existing_dictionary_entries: true,
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "addEntry",
          body: Algolia::Search::DictionaryEntry.new(
            object_id: "1",
            language: "en",
            word: "fancy",
            words: ["believe", "algolia"],
            decomposition: ["trust", "algolia"],
            state: "enabled"
          )
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# delete
def snippet_for_batch_dictionary_entries1
  # >SEPARATOR batchDictionaryEntries delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "plurals",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      clear_existing_dictionary_entries: true,
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "deleteEntry",
          body: Algolia::Search::DictionaryEntry.new(object_id: "1")
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the batchDictionaryEntries method.
#
# append
def snippet_for_batch_dictionary_entries2
  # >SEPARATOR batchDictionaryEntries append
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.batch_dictionary_entries(
    "stopwords",
    Algolia::Search::BatchDictionaryEntriesParams.new(
      requests: [
        Algolia::Search::BatchDictionaryEntriesRequest.new(
          action: "addEntry",
          body: Algolia::Search::DictionaryEntry.new(object_id: "1", language: "en", additional: "try me")
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the browse method.
#
# browse with minimal parameters
def snippet_for_browse
  # >SEPARATOR browse default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.browse("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearObjects method.
#
# clearObjects
def snippet_for_clear_objects
  # >SEPARATOR clearObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_objects("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearRules method.
#
# clearRules
def snippet_for_clear_rules
  # >SEPARATOR clearRules default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_rules("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the clearSynonyms method.
#
# clearSynonyms
def snippet_for_clear_synonyms
  # >SEPARATOR clearSynonyms default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.clear_synonyms("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customDelete method.
#
# allow del method for a custom path with minimal parameters
def snippet_for_custom_delete
  # >SEPARATOR customDelete default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_delete("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# allow get method for a custom path with minimal parameters
def snippet_for_custom_get
  # >SEPARATOR customGet default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_get("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# allow post method for a custom path with minimal parameters
def snippet_for_custom_post
  # >SEPARATOR customPost default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_post("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPut method.
#
# allow put method for a custom path with minimal parameters
def snippet_for_custom_put
  # >SEPARATOR customPut default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.custom_put("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteApiKey method.
#
# deleteApiKey
def snippet_for_delete_api_key
  # >SEPARATOR deleteApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_api_key("myTestApiKey")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteBy method.
#
# deleteBy
def snippet_for_delete_by
  # >SEPARATOR deleteBy default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_by("<YOUR_INDEX_NAME>", Algolia::Search::DeleteByParams.new(filters: "brand:brandName"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteIndex method.
#
# deleteIndex
def snippet_for_delete_index
  # >SEPARATOR deleteIndex default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_index("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteObject method.
#
# deleteObject
def snippet_for_delete_object
  # >SEPARATOR deleteObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_object("<YOUR_INDEX_NAME>", "uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteObjects method.
#
# call deleteObjects without error
def snippet_for_delete_objects
  # >SEPARATOR deleteObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_objects("<YOUR_INDEX_NAME>", ["1", "2"])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteRule method.
#
# delete rule simple case
def snippet_for_delete_rule
  # >SEPARATOR deleteRule default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_rule("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteSource method.
#
# deleteSource
def snippet_for_delete_source
  # >SEPARATOR deleteSource default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_source("theSource")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the deleteSynonym method.
#
# deleteSynonym
def snippet_for_delete_synonym
  # >SEPARATOR deleteSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.delete_synonym("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# generate secured api key basic
def snippet_for_generate_secured_api_key
  # >SEPARATOR generateSecuredApiKey generate secured api key basic
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(valid_until: 2524604400, restrict_indices: ["Movies"])
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the generateSecuredApiKey method.
#
# generate secured api key with searchParams
def snippet_for_generate_secured_api_key1
  # >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.generate_secured_api_key(
    "2640659426d5107b6e47d75db9cbaef8",
    Algolia::Search::SecuredApiKeyRestrictions.new(
      valid_until: 2524604400,
      restrict_indices: ["Movies", "cts_e2e_settings"],
      restrict_sources: "192.168.1.0/24",
      filters: "category:Book OR category:Ebook AND _tags:published",
      user_token: "user123",
      search_params: Algolia::Search::SearchParamsObject.new(
        query: "batman",
        typo_tolerance: "strict",
        around_radius: "all",
        mode: "neuralSearch",
        hits_per_page: 10,
        optional_words: ["one", "two"]
      )
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getApiKey method.
#
# getApiKey
def snippet_for_get_api_key
  # >SEPARATOR getApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_api_key("myTestApiKey")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getAppTask method.
#
# getAppTask
def snippet_for_get_app_task
  # >SEPARATOR getAppTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_app_task(123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getDictionaryLanguages method.
#
# get getDictionaryLanguages
def snippet_for_get_dictionary_languages
  # >SEPARATOR getDictionaryLanguages default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_dictionary_languages

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getDictionarySettings method.
#
# get getDictionarySettings results
def snippet_for_get_dictionary_settings
  # >SEPARATOR getDictionarySettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_dictionary_settings

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getLogs method.
#
# getLogs with minimal parameters
def snippet_for_get_logs
  # >SEPARATOR getLogs default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_logs

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getObject method.
#
# getObject
def snippet_for_get_object
  # >SEPARATOR getObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_object("<YOUR_INDEX_NAME>", "uniqueID", ["attr1", "attr2"])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getObjects method.
#
# getObjects
def snippet_for_get_objects
  # >SEPARATOR getObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_objects(
    Algolia::Search::GetObjectsParams.new(
      requests: [
        Algolia::Search::GetObjectsRequest.new(
          attributes_to_retrieve: ["attr1", "attr2"],
          object_id: "uniqueID",
          index_name: "<YOUR_INDEX_NAME>"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getRule method.
#
# getRule
def snippet_for_get_rule
  # >SEPARATOR getRule default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_rule("<YOUR_INDEX_NAME>", "qr-1725004648916")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSettings method.
#
# getSettings
def snippet_for_get_settings
  # >SEPARATOR getSettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_settings("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSources method.
#
# getSources
def snippet_for_get_sources
  # >SEPARATOR getSources default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_sources

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSynonym method.
#
# getSynonym
def snippet_for_get_synonym
  # >SEPARATOR getSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_synonym("<YOUR_INDEX_NAME>", "id1")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTask method.
#
# getTask
def snippet_for_get_task
  # >SEPARATOR getTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_task("<YOUR_INDEX_NAME>", 123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopUserIds method.
#
# getTopUserIds
def snippet_for_get_top_user_ids
  # >SEPARATOR getTopUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_top_user_ids

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getUserId method.
#
# getUserId
def snippet_for_get_user_id
  # >SEPARATOR getUserId default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.get_user_id("uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the hasPendingMappings method.
#
# hasPendingMappings with minimal parameters
def snippet_for_has_pending_mappings
  # >SEPARATOR hasPendingMappings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.has_pending_mappings

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexExists
def snippet_for_index_exists
  # >SEPARATOR indexExists indexExists
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexNotExists
def snippet_for_index_exists1
  # >SEPARATOR indexExists indexNotExists
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the indexExists method.
#
# indexExistsWithError
def snippet_for_index_exists2
  # >SEPARATOR indexExists indexExistsWithError
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.index_exists("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listApiKeys method.
#
# listApiKeys
def snippet_for_list_api_keys
  # >SEPARATOR listApiKeys default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_api_keys

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listClusters method.
#
# listClusters
def snippet_for_list_clusters
  # >SEPARATOR listClusters default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_clusters

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listIndices method.
#
# listIndices with minimal parameters
def snippet_for_list_indices
  # >SEPARATOR listIndices default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_indices

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the listUserIds method.
#
# listUserIds with minimal parameters
def snippet_for_list_user_ids
  # >SEPARATOR listUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.list_user_ids

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the multipleBatch method.
#
# multipleBatch
def snippet_for_multiple_batch
  # >SEPARATOR multipleBatch default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.multiple_batch(
    Algolia::Search::BatchParams.new(
      requests: [
        Algolia::Search::MultipleBatchRequest.new(
          action: "addObject",
          body: {key: "value"},
          index_name: "<YOUR_INDEX_NAME>"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# scopes
def snippet_for_operation_index
  # >SEPARATOR operationIndex scopes
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(
      operation: "move",
      destination: "<DESTINATION_INDEX_NAME>",
      scope: ["rules", "settings"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# copy
def snippet_for_operation_index1
  # >SEPARATOR operationIndex copy
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(operation: "copy", destination: "<DESTINATION_INDEX_NAME>")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the operationIndex method.
#
# move
def snippet_for_operation_index2
  # >SEPARATOR operationIndex move
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.operation_index(
    "<SOURCE_INDEX_NAME>",
    Algolia::Search::OperationIndexParams.new(operation: "move", destination: "<DESTINATION_INDEX_NAME>")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObject method.
#
# Partial update with a new value for a string attribute
def snippet_for_partial_update_object
  # >SEPARATOR partialUpdateObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_object("<YOUR_INDEX_NAME>", "uniqueID", {attributeId: "new value"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObjects method.
#
# call partialUpdateObjects with createIfNotExists=true
def snippet_for_partial_update_objects
  # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}],
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the partialUpdateObjects method.
#
# call partialUpdateObjects with createIfNotExists=false
def snippet_for_partial_update_objects1
  # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.partial_update_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "3", name: "Cyril"}, {objectID: "4", name: "David"}],
    false
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the removeUserId method.
#
# removeUserId
def snippet_for_remove_user_id
  # >SEPARATOR removeUserId default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.remove_user_id("uniqueID")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceAllObjects method.
#
# call replaceAllObjects without error
def snippet_for_replace_all_objects
  # >SEPARATOR replaceAllObjects default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_all_objects(
    "<YOUR_INDEX_NAME>",
    [
      {objectID: "1", name: "Adam"},
      {objectID: "2", name: "Benoit"},
      {objectID: "3", name: "Cyril"},
      {objectID: "4", name: "David"},
      {objectID: "5", name: "Eva"},
      {objectID: "6", name: "Fiona"},
      {objectID: "7", name: "Gael"},
      {objectID: "8", name: "Hugo"},
      {objectID: "9", name: "Igor"},
      {objectID: "10", name: "Julia"}
    ],
    3
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the replaceSources method.
#
# replaceSources
def snippet_for_replace_sources
  # >SEPARATOR replaceSources default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.replace_sources([Algolia::Search::Source.new(source: "theSource", description: "theDescription")])

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the restoreApiKey method.
#
# restoreApiKey
def snippet_for_restore_api_key
  # >SEPARATOR restoreApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.restore_api_key("ALGOLIA_API_KEY")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObject method.
#
# saveObject
def snippet_for_save_object
  # >SEPARATOR saveObject default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_object("<YOUR_INDEX_NAME>", {objectID: "id", test: "val"})

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# call saveObjects without error
def snippet_for_save_objects
  # >SEPARATOR saveObjects call saveObjects without error
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveObjects method.
#
# saveObjects should report errors
def snippet_for_save_objects1
  # >SEPARATOR saveObjects saveObjects should report errors
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_objects(
    "<YOUR_INDEX_NAME>",
    [{objectID: "1", name: "Adam"}, {objectID: "2", name: "Benoit"}]
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRule method.
#
# saveRule with minimal parameters
def snippet_for_save_rule
  # >SEPARATOR saveRule default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rule(
    "<YOUR_INDEX_NAME>",
    "id1",
    Algolia::Search::Rule.new(
      object_id: "id1",
      conditions: [Algolia::Search::Condition.new(pattern: "apple", anchoring: "contains")]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveRules method.
#
# saveRules with minimal parameters
def snippet_for_save_rules
  # >SEPARATOR saveRules default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_rules(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::Rule.new(
        object_id: "a-rule-id",
        conditions: [Algolia::Search::Condition.new(pattern: "smartphone", anchoring: "contains")]
      ),
      Algolia::Search::Rule.new(
        object_id: "a-second-rule-id",
        conditions: [Algolia::Search::Condition.new(pattern: "apple", anchoring: "contains")]
      )
    ],
    false,
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveSynonym method.
#
# saveSynonym
def snippet_for_save_synonym
  # >SEPARATOR saveSynonym default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_synonym(
    "<YOUR_INDEX_NAME>",
    "id1",
    Algolia::Search::SynonymHit.new(object_id: "id1", type: "synonym", synonyms: ["car", "vehicule", "auto"]),
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the saveSynonyms method.
#
# saveSynonyms
def snippet_for_save_synonyms
  # >SEPARATOR saveSynonyms default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.save_synonyms(
    "<YOUR_INDEX_NAME>",
    [
      Algolia::Search::SynonymHit.new(object_id: "id1", type: "synonym", synonyms: ["car", "vehicule", "auto"]),
      Algolia::Search::SynonymHit.new(
        object_id: "id2",
        type: "onewaysynonym",
        input: "iphone",
        synonyms: ["ephone", "aphone", "yphone"]
      )
    ],
    true,
    true
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# withHitsPerPage
def snippet_for_search
  # >SEPARATOR search withHitsPerPage
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>", query: "<YOUR_QUERY>", hits_per_page: 50)
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterOnly
def snippet_for_search1
  # >SEPARATOR search filterOnly
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "actor:Scarlett Johansson"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterOr
def snippet_for_search2
  # >SEPARATOR search filterOr
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "actor:Tom Cruise OR actor:Scarlett Johansson"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# filterNot
def snippet_for_search3
  # >SEPARATOR search filterNot
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          filters: "NOT actor:Nicolas Cage"
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# retrieveFacets
def snippet_for_search4
  # >SEPARATOR search retrieveFacets
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(
          index_name: "<YOUR_INDEX_NAME>",
          query: "<YOUR_QUERY>",
          facets: ["author", "genre"]
        )
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the search method.
#
# retrieveFacetsWildcard
def snippet_for_search5
  # >SEPARATOR search retrieveFacetsWildcard
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search(
    Algolia::Search::SearchMethodParams.new(
      requests: [
        Algolia::Search::SearchForHits.new(index_name: "<YOUR_INDEX_NAME>", query: "<YOUR_QUERY>", facets: ["*"])
      ]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchDictionaryEntries method.
#
# get searchDictionaryEntries results with minimal parameters
def snippet_for_search_dictionary_entries
  # >SEPARATOR searchDictionaryEntries default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_dictionary_entries(
    "stopwords",
    Algolia::Search::SearchDictionaryEntriesParams.new(query: "about")
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchForFacetValues method.
#
# get searchForFacetValues results with minimal parameters
def snippet_for_search_for_facet_values
  # >SEPARATOR searchForFacetValues default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_for_facet_values("<YOUR_INDEX_NAME>", "facetName")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchRules method.
#
# searchRules
def snippet_for_search_rules
  # >SEPARATOR searchRules default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_rules("<YOUR_INDEX_NAME>", Algolia::Search::SearchRulesParams.new(query: "zorro"))

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSingleIndex method.
#
# search with minimal parameters
def snippet_for_search_single_index
  # >SEPARATOR searchSingleIndex default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_single_index("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchSynonyms method.
#
# searchSynonyms with minimal parameters
def snippet_for_search_synonyms
  # >SEPARATOR searchSynonyms default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_synonyms("<YOUR_INDEX_NAME>")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the searchUserIds method.
#
# searchUserIds
def snippet_for_search_user_ids
  # >SEPARATOR searchUserIds default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.search_user_ids(
    Algolia::Search::SearchUserIdsParams.new(query: "test", cluster_name: "theClusterName", page: 5, hits_per_page: 10)
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setClientApiKey method.
#
# switch API key
def snippet_for_set_client_api_key
  # >SEPARATOR setClientApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  client.set_client_api_key("updated-api-key")
  # >LOG
  # SEPARATOR<
end

# Snippet for the setDictionarySettings method.
#
# get setDictionarySettings results with minimal parameters
def snippet_for_set_dictionary_settings
  # >SEPARATOR setDictionarySettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_dictionary_settings(
    Algolia::Search::DictionarySettingsParams.new(
      disable_standard_entries: Algolia::Search::StandardEntries.new(plurals: {fr: false, en: false, ru: true})
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setSettings method.
#
# setSettingsAttributesForFaceting
def snippet_for_set_settings
  # >SEPARATOR setSettings default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.set_settings(
    "<YOUR_INDEX_NAME>",
    Algolia::Search::IndexSettings.new(
      attributes_for_faceting: ["actor", "filterOnly(category)", "searchable(publisher)"]
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the updateApiKey method.
#
# updateApiKey
def snippet_for_update_api_key
  # >SEPARATOR updateApiKey default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.update_api_key(
    "ALGOLIA_API_KEY",
    Algolia::Search::ApiKey.new(
      acl: ["search", "addObject"],
      validity: 300,
      max_queries_per_ip_per_hour: 100,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key helper - add
def snippet_for_wait_for_api_key
  # >SEPARATOR waitForApiKey wait for api key helper - add
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key("api-key-add-operation-test-ruby", "add")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key - update
def snippet_for_wait_for_api_key1
  # >SEPARATOR waitForApiKey wait for api key - update
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key(
    "api-key-update-operation-test-ruby",
    "update",
    Algolia::Search::ApiKey.new(
      description: "my updated api key",
      acl: ["search", "addObject", "deleteObject"],
      indexes: ["Movies", "Books"],
      referers: ["*google.com", "*algolia.com"],
      validity: 305,
      max_queries_per_ip_per_hour: 95,
      max_hits_per_query: 20
    )
  )

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForApiKey method.
#
# wait for api key - delete
def snippet_for_wait_for_api_key2
  # >SEPARATOR waitForApiKey wait for api key - delete
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_api_key("api-key-delete-operation-test-ruby", "delete")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForAppTask method.
#
# wait for an application-level task
def snippet_for_wait_for_app_task
  # >SEPARATOR waitForAppTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_app_task(123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the waitForTask method.
#
# wait for task
def snippet_for_wait_for_task
  # >SEPARATOR waitForTask default
  # Initialize the client
  client = Algolia::SearchClient.create("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")

  # Call the API
  response = client.wait_for_task("<YOUR_INDEX_NAME>", 123)

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end
