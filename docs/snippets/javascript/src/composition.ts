// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import { compositionClient } from '@algolia/client-composition';
// IMPORT<

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getComposition method.
//
// getComposition
export async function snippetForGetComposition(): Promise<void> {
  // >SEPARATOR getComposition default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getComposition({ compositionID: 'foo' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRule method.
//
// getRule
export async function snippetForGetRule(): Promise<void> {
  // >SEPARATOR getRule default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getRule({ compositionID: 'foo', objectID: '123' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTask method.
//
// getTask
export async function snippetForGetTask(): Promise<void> {
  // >SEPARATOR getTask default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTask({ compositionID: 'foo', taskID: 42 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listCompositions method.
//
// listCompositions
export async function snippetForListCompositions(): Promise<void> {
  // >SEPARATOR listCompositions default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listCompositions();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch(): Promise<void> {
  // >SEPARATOR multipleBatch default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [
      {
        action: 'upsert',
        body: {
          objectID: 'foo',
          behavior: { injection: { main: { source: { search: { index: 'bar' } } }, insets: [] } },
        },
      },
      { action: 'delete', body: { objectID: 'baz' } },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the runSingleComposition method.
//
// runSingleComposition
export async function snippetForRunSingleComposition(): Promise<void> {
  // >SEPARATOR runSingleComposition default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.runSingleComposition({ compositionID: 'foo', searchParams: { query: 'batman' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules
export async function snippetForSaveRules(): Promise<void> {
  // >SEPARATOR saveRules default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    compositionID: 'foo',
    rules: {
      requests: [
        {
          action: 'upsert',
          body: {
            objectID: '123',
            conditions: [{ pattern: 'a' }],
            consequence: { behavior: { injection: { main: { source: { search: { index: '<YOUR_INDEX_NAME>' } } } } } },
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchCompositionRules method.
//
// searchCompositionRules
export async function snippetForSearchCompositionRules(): Promise<void> {
  // >SEPARATOR searchCompositionRules default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchCompositionRules({
    compositionID: 'foo',
    searchCompositionRulesParams: { query: 'batman' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// searchForFacetValues
export async function snippetForSearchForFacetValues(): Promise<void> {
  // >SEPARATOR searchForFacetValues default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({
    compositionID: 'foo',
    facetName: 'brand',
    searchForFacetValuesRequest: { params: { maxFacetHits: 10 } },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  //
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}
