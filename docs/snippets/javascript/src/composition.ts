// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import { compositionClient } from '@algolia/composition';
// IMPORT<

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with all parameters
export async function snippetForCustomDelete1(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with all parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with minimal parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with all parameters
export async function snippetForCustomGet1(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with all parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// requestOptions should be escaped too
export async function snippetForCustomGet2(): Promise<void> {
  // >SEPARATOR customGet requestOptions should be escaped too
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet(
    { path: 'test/all', parameters: { query: 'to be overriden' } },
    {
      queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },
      headers: { 'x-header-1': 'spaces are left alone' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with minimal parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with all parameters
export async function snippetForCustomPost1(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with all parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default query parameters
export async function snippetForCustomPost2(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default query parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges query parameters with default ones
export async function snippetForCustomPost3(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges query parameters with default ones
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query2: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default headers
export async function snippetForCustomPost4(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default headers
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges headers with default ones
export async function snippetForCustomPost5(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges headers with default ones
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts booleans
export async function snippetForCustomPost6(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts booleans
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { isItWorking: true },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts integers
export async function snippetForCustomPost7(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts integers
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: 2 },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of string
export async function snippetForCustomPost8(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of string
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: ['b and c', 'd'] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of booleans
export async function snippetForCustomPost9(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [true, true, false] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of integers
export async function snippetForCustomPost10(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [1, 2] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with minimal parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with all parameters
export async function snippetForCustomPut1(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with all parameters
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteComposition method.
//
// deleteComposition
export async function snippetForDeleteComposition(): Promise<void> {
  // >SEPARATOR deleteComposition default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteComposition({ compositionID: '1234' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteCompositionRule method.
//
// deleteCompositionRule
export async function snippetForDeleteCompositionRule(): Promise<void> {
  // >SEPARATOR deleteCompositionRule default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteCompositionRule({ compositionID: '1234', objectID: '5678' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getComposition method.
//
// getComposition
export async function snippetForGetComposition(): Promise<void> {
  // >SEPARATOR getComposition default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getComposition({ compositionID: 'foo' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRule method.
//
// getRule
export async function snippetForGetRule(): Promise<void> {
  // >SEPARATOR getRule default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getRule({ compositionID: 'foo', objectID: '123' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTask method.
//
// getTask
export async function snippetForGetTask(): Promise<void> {
  // >SEPARATOR getTask default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTask({ compositionID: 'foo', taskID: 42 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listCompositions method.
//
// listCompositions
export async function snippetForListCompositions(): Promise<void> {
  // >SEPARATOR listCompositions listCompositions
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listCompositions();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listCompositions method.
//
// listCompositions
export async function snippetForListCompositions1(): Promise<void> {
  // >SEPARATOR listCompositions listCompositions
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listCompositions();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch(): Promise<void> {
  // >SEPARATOR multipleBatch multipleBatch
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [
      {
        action: 'upsert',
        body: {
          objectID: 'foo',
          name: 'my first composition',
          behavior: { injection: { main: { source: { search: { index: 'bar' } } } } },
        },
      },
      { action: 'delete', body: { objectID: 'baz' } },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch1(): Promise<void> {
  // >SEPARATOR multipleBatch multipleBatch
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [
      {
        action: 'upsert',
        body: {
          objectID: 'my-external-injection-compo',
          name: 'my first composition',
          behavior: {
            injection: {
              main: { source: { search: { index: 'foo' } } },
              injectedItems: [
                {
                  key: 'injectedItem1',
                  source: { external: { index: 'foo', ordering: 'userDefined', params: { filters: 'brand:adidas' } } },
                  position: 2,
                  length: 1,
                },
              ],
            },
          },
        },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch2(): Promise<void> {
  // >SEPARATOR multipleBatch multipleBatch
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [
      {
        action: 'upsert',
        body: {
          objectID: 'my-metadata-compo',
          name: 'my composition',
          behavior: {
            injection: {
              main: { source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } } },
              injectedItems: [
                {
                  key: 'injectedItem1',
                  source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },
                  position: 2,
                  length: 1,
                  metadata: {
                    hits: {
                      addItemKey: true,
                      extra: {
                        'my-string': 'string',
                        'my-bool': true,
                        'my-number': 42,
                        'my-object': { 'sub-key': 'sub-value' },
                      },
                    },
                  },
                },
                {
                  key: 'externalItem',
                  source: { search: { index: 'foo', params: { filters: 'brand:puma' } } },
                  position: 5,
                  length: 5,
                  metadata: {
                    hits: {
                      addItemKey: true,
                      extra: {
                        'my-string': 'string',
                        'my-bool': true,
                        'my-number': 42,
                        'my-object': { 'sub-key': 'sub-value' },
                      },
                    },
                  },
                },
              ],
            },
          },
        },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putComposition method.
//
// putComposition
export async function snippetForPutComposition(): Promise<void> {
  // >SEPARATOR putComposition putComposition
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putComposition({
    compositionID: '1234',
    composition: {
      objectID: '1234',
      name: 'my first composition',
      behavior: {
        injection: {
          main: { source: { search: { index: 'foo' } } },
          injectedItems: [{ key: 'injectedItem1', source: { search: { index: 'foo' } }, position: 2, length: 1 }],
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putComposition method.
//
// putComposition
export async function snippetForPutComposition1(): Promise<void> {
  // >SEPARATOR putComposition putComposition
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putComposition({
    compositionID: 'my-external-injection-compo',
    composition: {
      objectID: 'my-external-injection-compo',
      name: 'my first composition',
      behavior: {
        injection: {
          main: { source: { search: { index: 'foo' } } },
          injectedItems: [
            {
              key: 'injectedItem1',
              source: { external: { index: 'foo', ordering: 'userDefined', params: { filters: 'brand:adidas' } } },
              position: 2,
              length: 1,
            },
          ],
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putComposition method.
//
// putComposition
export async function snippetForPutComposition2(): Promise<void> {
  // >SEPARATOR putComposition putComposition
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putComposition({
    compositionID: 'my-metadata-compo',
    composition: {
      objectID: 'my-metadata-compo',
      name: 'my composition',
      behavior: {
        injection: {
          main: { source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } } },
          injectedItems: [
            {
              key: 'injectedItem1',
              source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },
              position: 2,
              length: 1,
              metadata: {
                hits: {
                  addItemKey: true,
                  extra: {
                    'my-string': 'string',
                    'my-bool': true,
                    'my-number': 42,
                    'my-object': { 'sub-key': 'sub-value' },
                  },
                },
              },
            },
            {
              key: 'externalItem',
              source: { search: { index: 'foo', params: { filters: 'brand:puma' } } },
              position: 5,
              length: 5,
              metadata: {
                hits: {
                  addItemKey: true,
                  extra: {
                    'my-string': 'string',
                    'my-bool': true,
                    'my-number': 42,
                    'my-object': { 'sub-key': 'sub-value' },
                  },
                },
              },
            },
          ],
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putCompositionRule method.
//
// putCompositionRule
export async function snippetForPutCompositionRule(): Promise<void> {
  // >SEPARATOR putCompositionRule putCompositionRule
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putCompositionRule({
    compositionID: 'compositionID',
    objectID: 'ruleID',
    compositionRule: {
      objectID: 'ruleID',
      conditions: [{ anchoring: 'is', pattern: 'test' }],
      consequence: {
        behavior: {
          injection: {
            main: { source: { search: { index: 'foo' } } },
            injectedItems: [{ key: 'injectedItem1', source: { search: { index: 'foo' } }, position: 2, length: 1 }],
          },
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putCompositionRule method.
//
// putCompositionRule
export async function snippetForPutCompositionRule1(): Promise<void> {
  // >SEPARATOR putCompositionRule putCompositionRule
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putCompositionRule({
    compositionID: 'compositionID',
    objectID: 'rule-with-metadata',
    compositionRule: {
      objectID: 'rule-with-metadata',
      conditions: [{ anchoring: 'is', pattern: 'test' }],
      consequence: {
        behavior: {
          injection: {
            main: { source: { search: { index: 'foo' } } },
            injectedItems: [
              {
                key: 'injectedItem1',
                source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },
                position: 2,
                length: 1,
                metadata: {
                  hits: {
                    addItemKey: true,
                    extra: {
                      'my-string': 'string',
                      'my-bool': true,
                      'my-number': 42,
                      'my-object': { 'sub-key': 'sub-value' },
                    },
                  },
                },
              },
            ],
          },
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the putCompositionRule method.
//
// putCompositionRule
export async function snippetForPutCompositionRule2(): Promise<void> {
  // >SEPARATOR putCompositionRule putCompositionRule
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.putCompositionRule({
    compositionID: 'compositionID',
    objectID: 'rule-with-exernal-source',
    compositionRule: {
      objectID: 'rule-with-exernal-source',
      description: 'my description',
      tags: ['tag1', 'tag2'],
      enabled: true,
      validity: [{ from: 1704063600, until: 1704083600 }],
      conditions: [
        { anchoring: 'contains', pattern: 'harry' },
        { anchoring: 'contains', pattern: 'potter' },
      ],
      consequence: {
        behavior: {
          injection: {
            main: { source: { search: { index: 'my-index', params: { filters: 'brand:adidas' } } } },
            injectedItems: [
              {
                key: 'injectedItem',
                source: {
                  external: { index: 'my-index', params: { filters: 'brand:adidas' }, ordering: 'userDefined' },
                },
                position: 0,
                length: 3,
              },
            ],
          },
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules
export async function snippetForSaveRules(): Promise<void> {
  // >SEPARATOR saveRules saveRules
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    compositionID: 'foo',
    rules: {
      requests: [
        {
          action: 'upsert',
          body: {
            objectID: '123',
            conditions: [{ pattern: 'a' }],
            consequence: { behavior: { injection: { main: { source: { search: { index: '<YOUR_INDEX_NAME>' } } } } } },
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules
export async function snippetForSaveRules1(): Promise<void> {
  // >SEPARATOR saveRules saveRules
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    compositionID: 'rule-with-metadata',
    rules: {
      requests: [
        {
          action: 'upsert',
          body: {
            objectID: 'rule-with-metadata',
            conditions: [{ anchoring: 'is', pattern: 'test' }],
            consequence: {
              behavior: {
                injection: {
                  main: { source: { search: { index: 'foo' } } },
                  injectedItems: [
                    {
                      key: 'injectedItem1',
                      source: { search: { index: 'foo', params: { filters: 'brand:adidas' } } },
                      position: 2,
                      length: 1,
                      metadata: {
                        hits: {
                          addItemKey: true,
                          extra: {
                            'my-string': 'string',
                            'my-bool': true,
                            'my-number': 42,
                            'my-object': { 'sub-key': 'sub-value' },
                          },
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules
export async function snippetForSaveRules2(): Promise<void> {
  // >SEPARATOR saveRules saveRules
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    compositionID: 'rule-with-exernal-source',
    rules: {
      requests: [
        {
          action: 'upsert',
          body: {
            objectID: 'rule-with-exernal-source',
            description: 'my description',
            tags: ['tag1', 'tag2'],
            enabled: true,
            validity: [{ from: 1704063600, until: 1704083600 }],
            conditions: [
              { anchoring: 'contains', pattern: 'harry' },
              { anchoring: 'contains', pattern: 'potter' },
            ],
            consequence: {
              behavior: {
                injection: {
                  main: { source: { search: { index: 'my-index', params: { filters: 'brand:adidas' } } } },
                  injectedItems: [
                    {
                      key: 'injectedItem',
                      source: {
                        external: { index: 'my-index', params: { filters: 'brand:adidas' }, ordering: 'userDefined' },
                      },
                      position: 0,
                      length: 3,
                    },
                  ],
                },
              },
            },
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search
export async function snippetForSearch(): Promise<void> {
  // >SEPARATOR search search
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({ compositionID: 'foo', requestBody: { params: { query: 'batman' } } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search
export async function snippetForSearch1(): Promise<void> {
  // >SEPARATOR search search
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    compositionID: 'foo',
    requestBody: {
      params: {
        query: 'batman',
        injectedItems: {
          injectedItem1: {
            items: [
              { objectID: 'my-object-1' },
              {
                objectID: 'my-object-2',
                metadata: {
                  'my-string': 'string',
                  'my-bool': true,
                  'my-number': 42,
                  'my-object': { 'sub-key': 'sub-value' },
                },
              },
            ],
          },
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchCompositionRules method.
//
// searchCompositionRules
export async function snippetForSearchCompositionRules(): Promise<void> {
  // >SEPARATOR searchCompositionRules default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchCompositionRules({
    compositionID: 'foo',
    searchCompositionRulesParams: { query: 'batman' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// searchForFacetValues
export async function snippetForSearchForFacetValues(): Promise<void> {
  // >SEPARATOR searchForFacetValues default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({
    compositionID: 'foo',
    facetName: 'brand',
    searchForFacetValuesRequest: { params: { maxFacetHits: 10 } },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  const client = compositionClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}
