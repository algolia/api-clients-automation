// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import { algoliasearch } from 'algoliasearch';
// IMPORT<

// Snippet for the batchRecommendRules method.
//
// batch recommend rules
export async function snippetForBatchRecommendRules(): Promise<void> {
  // >SEPARATOR batchRecommendRules default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.batchRecommendRules({ indexName: 'indexName', model: 'related-products' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with all parameters
export async function snippetForCustomDelete1(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with all parameters
export async function snippetForCustomGet1(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// requestOptions should be escaped too
export async function snippetForCustomGet2(): Promise<void> {
  // >SEPARATOR customGet requestOptions should be escaped too
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customGet(
    { path: 'test/all', parameters: { query: 'to be overriden' } },
    {
      queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },
      headers: { 'x-header-1': 'spaces are left alone' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with all parameters
export async function snippetForCustomPost1(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default query parameters
export async function snippetForCustomPost2(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default query parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges query parameters with default ones
export async function snippetForCustomPost3(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges query parameters with default ones
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query2: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default headers
export async function snippetForCustomPost4(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default headers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges headers with default ones
export async function snippetForCustomPost5(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges headers with default ones
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts booleans
export async function snippetForCustomPost6(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts booleans
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { isItWorking: true },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts integers
export async function snippetForCustomPost7(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts integers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: 2 },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of string
export async function snippetForCustomPost8(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of string
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: ['b and c', 'd'] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of booleans
export async function snippetForCustomPost9(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [true, true, false] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of integers
export async function snippetForCustomPost10(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [1, 2] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with all parameters
export async function snippetForCustomPut1(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.customPut({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteRecommendRule method.
//
// deleteRecommendRule
export async function snippetForDeleteRecommendRule(): Promise<void> {
  // >SEPARATOR deleteRecommendRule default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.deleteRecommendRule({
    indexName: 'indexName',
    model: 'related-products',
    objectID: 'objectID',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendRule method.
//
// getRecommendRule
export async function snippetForGetRecommendRule(): Promise<void> {
  // >SEPARATOR getRecommendRule default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendRule({
    indexName: 'indexName',
    model: 'related-products',
    objectID: 'objectID',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendStatus method.
//
// getRecommendStatus
export async function snippetForGetRecommendStatus(): Promise<void> {
  // >SEPARATOR getRecommendStatus default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendStatus({
    indexName: 'indexName',
    model: 'related-products',
    taskID: 12345,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get recommendations for recommend model with minimal parameters
export async function snippetForGetRecommendations(): Promise<void> {
  // >SEPARATOR getRecommendations get recommendations for recommend model with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [{ indexName: 'indexName', objectID: 'objectID', model: 'related-products', threshold: 42.1 }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get recommendations with e2e to check oneOf model
export async function snippetForGetRecommendations1(): Promise<void> {
  // >SEPARATOR getRecommendations get recommendations with e2e to check oneOf model
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      {
        indexName: 'cts_e2e_browse',
        objectID: 'Æon Flux',
        model: 'related-products',
        threshold: 20.0,
        maxRecommendations: 2,
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get recommendations for recommend model with all parameters
export async function snippetForGetRecommendations2(): Promise<void> {
  // >SEPARATOR getRecommendations get recommendations for recommend model with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      {
        indexName: 'indexName',
        objectID: 'objectID',
        model: 'related-products',
        threshold: 42.1,
        maxRecommendations: 10,
        queryParameters: { query: 'myQuery', facetFilters: ['query'] },
        fallbackParameters: { query: 'myQuery', facetFilters: ['fallback'] },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get recommendations for trending model with minimal parameters
export async function snippetForGetRecommendations3(): Promise<void> {
  // >SEPARATOR getRecommendations get recommendations for trending model with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      { indexName: 'indexName', model: 'trending-items', threshold: 42.1, facetName: 'facet', facetValue: 'value' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get recommendations for trending model with all parameters
export async function snippetForGetRecommendations4(): Promise<void> {
  // >SEPARATOR getRecommendations get recommendations for trending model with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      {
        indexName: 'indexName',
        model: 'trending-items',
        threshold: 42.1,
        maxRecommendations: 10,
        facetName: 'myFacetName',
        facetValue: 'myFacetValue',
        queryParameters: { query: 'myQuery', facetFilters: ['query'] },
        fallbackParameters: { query: 'myQuery', facetFilters: ['fallback'] },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get multiple recommendations with minimal parameters
export async function snippetForGetRecommendations5(): Promise<void> {
  // >SEPARATOR getRecommendations get multiple recommendations with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      { indexName: 'indexName1', objectID: 'objectID1', model: 'related-products', threshold: 21.7 },
      { indexName: 'indexName2', objectID: 'objectID2', model: 'related-products', threshold: 21.7 },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get multiple recommendations with all parameters
export async function snippetForGetRecommendations6(): Promise<void> {
  // >SEPARATOR getRecommendations get multiple recommendations with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [
      {
        indexName: 'indexName1',
        objectID: 'objectID1',
        model: 'related-products',
        threshold: 21.7,
        maxRecommendations: 10,
        queryParameters: { query: 'myQuery', facetFilters: ['query1'] },
        fallbackParameters: { query: 'myQuery', facetFilters: ['fallback1'] },
      },
      {
        indexName: 'indexName2',
        objectID: 'objectID2',
        model: 'related-products',
        threshold: 21.7,
        maxRecommendations: 10,
        queryParameters: { query: 'myQuery', facetFilters: ['query2'] },
        fallbackParameters: { query: 'myQuery', facetFilters: ['fallback2'] },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRecommendations method.
//
// get frequently bought together recommendations
export async function snippetForGetRecommendations7(): Promise<void> {
  // >SEPARATOR getRecommendations get frequently bought together recommendations
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.getRecommendations({
    requests: [{ indexName: 'indexName1', objectID: 'objectID1', model: 'bought-together', threshold: 42.7 }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchRecommendRules method.
//
// searchRecommendRules
export async function snippetForSearchRecommendRules(): Promise<void> {
  // >SEPARATOR searchRecommendRules default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  const response = await client.searchRecommendRules({ indexName: 'indexName', model: 'related-products' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY').initRecommend();

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}
