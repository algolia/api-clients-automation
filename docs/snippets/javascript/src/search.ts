// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

// >IMPORT
import { algoliasearch } from 'algoliasearch';
// IMPORT<

// Snippet for the addApiKey method.
//
// addApiKey
export async function snippetForAddApiKey(): Promise<void> {
  // >SEPARATOR addApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.addApiKey({
    acl: ['search', 'addObject'],
    description: 'my new api key',
    validity: 300,
    maxQueriesPerIPPerHour: 100,
    maxHitsPerQuery: 20,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the addOrUpdateObject method.
//
// addOrUpdateObject
export async function snippetForAddOrUpdateObject(): Promise<void> {
  // >SEPARATOR addOrUpdateObject default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.addOrUpdateObject({
    indexName: 'indexName',
    objectID: 'uniqueID',
    body: { key: 'value' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the appendSource method.
//
// appendSource
export async function snippetForAppendSource(): Promise<void> {
  // >SEPARATOR appendSource default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.appendSource({ source: 'theSource', description: 'theDescription' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the assignUserId method.
//
// simple
export async function snippetForAssignUserId(): Promise<void> {
  // >SEPARATOR assignUserId simple
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.assignUserId({ xAlgoliaUserID: 'user42', assignUserIdParams: { cluster: 'd4242-eu' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the assignUserId method.
//
// it should not encode the userID
export async function snippetForAssignUserId1(): Promise<void> {
  // >SEPARATOR assignUserId it should not encode the userID
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.assignUserId({
    xAlgoliaUserID: 'user id with spaces',
    assignUserIdParams: { cluster: 'cluster with spaces' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// addObject
export async function snippetForBatch(): Promise<void> {
  // >SEPARATOR batch addObject
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: {
      requests: [
        { action: 'addObject', body: { key: 'bar', foo: '1' } },
        { action: 'addObject', body: { key: 'baz', foo: '2' } },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// clear
export async function snippetForBatch1(): Promise<void> {
  // >SEPARATOR batch clear
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'clear', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// delete
export async function snippetForBatch2(): Promise<void> {
  // >SEPARATOR batch delete
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'delete', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// deleteObject
export async function snippetForBatch3(): Promise<void> {
  // >SEPARATOR batch deleteObject
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'deleteObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// partialUpdateObject
export async function snippetForBatch4(): Promise<void> {
  // >SEPARATOR batch partialUpdateObject
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'partialUpdateObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// partialUpdateObjectNoCreate
export async function snippetForBatch5(): Promise<void> {
  // >SEPARATOR batch partialUpdateObjectNoCreate
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'partialUpdateObjectNoCreate', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// updateObject
export async function snippetForBatch6(): Promise<void> {
  // >SEPARATOR batch updateObject
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'updateObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchAssignUserIds method.
//
// batchAssignUserIds
export async function snippetForBatchAssignUserIds(): Promise<void> {
  // >SEPARATOR batchAssignUserIds default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchAssignUserIds({
    xAlgoliaUserID: 'userID',
    batchAssignUserIdsParams: { cluster: 'theCluster', users: ['user1', 'user2'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// replace
export async function snippetForBatchDictionaryEntries(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries replace
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'plurals',
    batchDictionaryEntriesParams: {
      clearExistingDictionaryEntries: true,
      requests: [
        {
          action: 'addEntry',
          body: {
            objectID: '1',
            language: 'en',
            word: 'fancy',
            words: ['believe', 'algolia'],
            decomposition: ['trust', 'algolia'],
            state: 'enabled',
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// delete
export async function snippetForBatchDictionaryEntries1(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries delete
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'plurals',
    batchDictionaryEntriesParams: {
      clearExistingDictionaryEntries: true,
      requests: [{ action: 'deleteEntry', body: { objectID: '1' } }],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// append
export async function snippetForBatchDictionaryEntries2(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries append
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'stopwords',
    batchDictionaryEntriesParams: {
      requests: [{ action: 'addEntry', body: { objectID: '1', language: 'en', additional: 'try me' } }],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the browse method.
//
// browse with minimal parameters
export async function snippetForBrowse(): Promise<void> {
  // >SEPARATOR browse browse with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.browse({ indexName: 'cts_e2e_browse' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the browse method.
//
// browse with search parameters
export async function snippetForBrowse1(): Promise<void> {
  // >SEPARATOR browse browse with search parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.browse({
    indexName: 'indexName',
    browseParams: { query: 'myQuery', facetFilters: ['tags:algolia'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the browse method.
//
// browse allow a cursor in parameters
export async function snippetForBrowse2(): Promise<void> {
  // >SEPARATOR browse browse allow a cursor in parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.browse({ indexName: 'indexName', browseParams: { cursor: 'test' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearObjects method.
//
// clearObjects
export async function snippetForClearObjects(): Promise<void> {
  // >SEPARATOR clearObjects default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearObjects({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearRules method.
//
// clearRules
export async function snippetForClearRules(): Promise<void> {
  // >SEPARATOR clearRules default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearRules({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearSynonyms method.
//
// clearSynonyms
export async function snippetForClearSynonyms(): Promise<void> {
  // >SEPARATOR clearSynonyms default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearSynonyms({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with all parameters
export async function snippetForCustomDelete1(): Promise<void> {
  // >SEPARATOR customDelete allow del method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/all', parameters: { query: 'parameters' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with all parameters
export async function snippetForCustomGet1(): Promise<void> {
  // >SEPARATOR customGet allow get method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/all', parameters: { query: 'parameters with space' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// requestOptions should be escaped too
export async function snippetForCustomGet2(): Promise<void> {
  // >SEPARATOR customGet requestOptions should be escaped too
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet(
    { path: 'test/all', parameters: { query: 'to be overriden' } },
    {
      queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },
      headers: { 'x-header-1': 'spaces are left alone' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with all parameters
export async function snippetForCustomPost1(): Promise<void> {
  // >SEPARATOR customPost allow post method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default query parameters
export async function snippetForCustomPost2(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default query parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges query parameters with default ones
export async function snippetForCustomPost3(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges query parameters with default ones
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { query2: 'myQueryParameter' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions can override default headers
export async function snippetForCustomPost4(): Promise<void> {
  // >SEPARATOR customPost requestOptions can override default headers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions merges headers with default ones
export async function snippetForCustomPost5(): Promise<void> {
  // >SEPARATOR customPost requestOptions merges headers with default ones
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts booleans
export async function snippetForCustomPost6(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts booleans
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { isItWorking: true },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts integers
export async function snippetForCustomPost7(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts integers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: 2 },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of string
export async function snippetForCustomPost8(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of string
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: ['b and c', 'd'] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of booleans
export async function snippetForCustomPost9(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of booleans
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [true, true, false] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// requestOptions queryParameters accepts list of integers
export async function snippetForCustomPost10(): Promise<void> {
  // >SEPARATOR customPost requestOptions queryParameters accepts list of integers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost(
    { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
    {
      queryParameters: { myParam: [1, 2] },
    },
  );

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with all parameters
export async function snippetForCustomPut1(): Promise<void> {
  // >SEPARATOR customPut allow put method for a custom path with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({
    path: 'test/all',
    parameters: { query: 'parameters' },
    body: { body: 'parameters' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteApiKey method.
//
// deleteApiKey
export async function snippetForDeleteApiKey(): Promise<void> {
  // >SEPARATOR deleteApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteApiKey({ key: 'myTestApiKey' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteBy method.
//
// deleteBy
export async function snippetForDeleteBy(): Promise<void> {
  // >SEPARATOR deleteBy default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteBy({ indexName: 'theIndexName', deleteByParams: { filters: 'brand:brandName' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteIndex method.
//
// deleteIndex
export async function snippetForDeleteIndex(): Promise<void> {
  // >SEPARATOR deleteIndex default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteIndex({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteObject method.
//
// deleteObject
export async function snippetForDeleteObject(): Promise<void> {
  // >SEPARATOR deleteObject default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteObject({ indexName: '<YOUR_INDEX_NAME>', objectID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteObjects method.
//
// call deleteObjects without error
export async function snippetForDeleteObjects(): Promise<void> {
  // >SEPARATOR deleteObjects default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteObjects({ indexName: 'cts_e2e_deleteObjects_javascript', objectIDs: ['1', '2'] });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteRule method.
//
// delete rule simple case
export async function snippetForDeleteRule(): Promise<void> {
  // >SEPARATOR deleteRule delete rule simple case
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteRule({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteRule method.
//
// delete rule with simple characters to encode in objectID
export async function snippetForDeleteRule1(): Promise<void> {
  // >SEPARATOR deleteRule delete rule with simple characters to encode in objectID
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteRule({ indexName: 'indexName', objectID: 'test/with/slash' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteSource method.
//
// deleteSource
export async function snippetForDeleteSource(): Promise<void> {
  // >SEPARATOR deleteSource default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteSource({ source: 'theSource' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteSynonym method.
//
// deleteSynonym
export async function snippetForDeleteSynonym(): Promise<void> {
  // >SEPARATOR deleteSynonym default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteSynonym({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// api key basic
export function snippetForGenerateSecuredApiKey(): void {
  // >SEPARATOR generateSecuredApiKey api key basic
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: { validUntil: 2524604400, restrictIndices: ['Movies'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// with searchParams
export function snippetForGenerateSecuredApiKey1(): void {
  // >SEPARATOR generateSecuredApiKey with searchParams
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: {
      validUntil: 2524604400,
      restrictIndices: ['Movies', 'cts_e2e_settings'],
      restrictSources: '192.168.1.0/24',
      filters: 'category:Book OR category:Ebook AND _tags:published',
      userToken: 'user123',
      searchParams: {
        query: 'batman',
        typoTolerance: 'strict',
        aroundRadius: 'all',
        mode: 'neuralSearch',
        hitsPerPage: 10,
        optionalWords: ['one', 'two'],
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// with filters
export function snippetForGenerateSecuredApiKey2(): void {
  // >SEPARATOR generateSecuredApiKey with filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: { filters: 'user:user42 AND user:public AND (visible_by:John OR visible_by:group/Finance)' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// with visible_by filter
export function snippetForGenerateSecuredApiKey3(): void {
  // >SEPARATOR generateSecuredApiKey with visible_by filter
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: { filters: 'visible_by:group/Finance' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// with userID
export function snippetForGenerateSecuredApiKey4(): void {
  // >SEPARATOR generateSecuredApiKey with userID
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: { userToken: 'user42' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getApiKey method.
//
// getApiKey
export async function snippetForGetApiKey(): Promise<void> {
  // >SEPARATOR getApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getApiKey({ key: 'myTestApiKey' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getAppTask method.
//
// getAppTask
export async function snippetForGetAppTask(): Promise<void> {
  // >SEPARATOR getAppTask default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getAppTask({ taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getDictionaryLanguages method.
//
// get getDictionaryLanguages
export async function snippetForGetDictionaryLanguages(): Promise<void> {
  // >SEPARATOR getDictionaryLanguages default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getDictionaryLanguages();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getDictionarySettings method.
//
// get getDictionarySettings results
export async function snippetForGetDictionarySettings(): Promise<void> {
  // >SEPARATOR getDictionarySettings default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getDictionarySettings();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getLogs method.
//
// getLogs with minimal parameters
export async function snippetForGetLogs(): Promise<void> {
  // >SEPARATOR getLogs getLogs with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getLogs();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getLogs method.
//
// getLogs with parameters
export async function snippetForGetLogs1(): Promise<void> {
  // >SEPARATOR getLogs getLogs with parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getLogs({ offset: 5, length: 10, indexName: 'theIndexName', type: 'all' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getObject method.
//
// getObject
export async function snippetForGetObject(): Promise<void> {
  // >SEPARATOR getObject getObject
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToRetrieve: ['attr1', 'attr2'],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getObject method.
//
// search with a real object
export async function snippetForGetObject1(): Promise<void> {
  // >SEPARATOR getObject search with a real object
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getObject({ indexName: 'cts_e2e_browse', objectID: 'Batman and Robin' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getObjects method.
//
// getObjects
export async function snippetForGetObjects(): Promise<void> {
  // >SEPARATOR getObjects default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getObjects({
    requests: [{ attributesToRetrieve: ['attr1', 'attr2'], objectID: 'uniqueID', indexName: 'theIndexName' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRule method.
//
// getRule
export async function snippetForGetRule(): Promise<void> {
  // >SEPARATOR getRule default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getRule({ indexName: 'cts_e2e_browse', objectID: 'qr-1725004648916' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSettings method.
//
// getSettings
export async function snippetForGetSettings(): Promise<void> {
  // >SEPARATOR getSettings default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSettings({ indexName: 'cts_e2e_settings' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSources method.
//
// getSources
export async function snippetForGetSources(): Promise<void> {
  // >SEPARATOR getSources default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSources();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSynonym method.
//
// getSynonym
export async function snippetForGetSynonym(): Promise<void> {
  // >SEPARATOR getSynonym default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSynonym({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTask method.
//
// getTask
export async function snippetForGetTask(): Promise<void> {
  // >SEPARATOR getTask default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTask({ indexName: 'theIndexName', taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTopUserIds method.
//
// getTopUserIds
export async function snippetForGetTopUserIds(): Promise<void> {
  // >SEPARATOR getTopUserIds default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTopUserIds();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getUserId method.
//
// getUserId
export async function snippetForGetUserId(): Promise<void> {
  // >SEPARATOR getUserId default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getUserId({ userID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the hasPendingMappings method.
//
// hasPendingMappings with minimal parameters
export async function snippetForHasPendingMappings(): Promise<void> {
  // >SEPARATOR hasPendingMappings hasPendingMappings with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.hasPendingMappings();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the hasPendingMappings method.
//
// hasPendingMappings with parameters
export async function snippetForHasPendingMappings1(): Promise<void> {
  // >SEPARATOR hasPendingMappings hasPendingMappings with parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.hasPendingMappings({ getClusters: true });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexExists
export async function snippetForIndexExists(): Promise<void> {
  // >SEPARATOR indexExists indexExists
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsYES' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexNotExists
export async function snippetForIndexExists1(): Promise<void> {
  // >SEPARATOR indexExists indexNotExists
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsNO' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexExistsWithError
export async function snippetForIndexExists2(): Promise<void> {
  // >SEPARATOR indexExists indexExistsWithError
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsERROR' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listApiKeys method.
//
// listApiKeys
export async function snippetForListApiKeys(): Promise<void> {
  // >SEPARATOR listApiKeys default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listApiKeys();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listClusters method.
//
// listClusters
export async function snippetForListClusters(): Promise<void> {
  // >SEPARATOR listClusters default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listClusters();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listIndices method.
//
// listIndices with minimal parameters
export async function snippetForListIndices(): Promise<void> {
  // >SEPARATOR listIndices listIndices with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listIndices();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listIndices method.
//
// listIndices with parameters
export async function snippetForListIndices1(): Promise<void> {
  // >SEPARATOR listIndices listIndices with parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listIndices({ page: 8, hitsPerPage: 3 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listUserIds method.
//
// listUserIds with minimal parameters
export async function snippetForListUserIds(): Promise<void> {
  // >SEPARATOR listUserIds listUserIds with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listUserIds();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listUserIds method.
//
// listUserIds with parameters
export async function snippetForListUserIds1(): Promise<void> {
  // >SEPARATOR listUserIds listUserIds with parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listUserIds({ page: 8, hitsPerPage: 100 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch(): Promise<void> {
  // >SEPARATOR multipleBatch default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [{ action: 'addObject', body: { key: 'value' }, indexName: 'theIndexName' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// scopes
export async function snippetForOperationIndex(): Promise<void> {
  // >SEPARATOR operationIndex scopes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'move', destination: '<DESTINATION_INDEX_NAME>', scope: ['rules', 'settings'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// copy
export async function snippetForOperationIndex1(): Promise<void> {
  // >SEPARATOR operationIndex copy
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'copy', destination: '<DESTINATION_INDEX_NAME>' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// move
export async function snippetForOperationIndex2(): Promise<void> {
  // >SEPARATOR operationIndex move
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'move', destination: '<DESTINATION_INDEX_NAME>' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for a string attribute
export async function snippetForPartialUpdateObject(): Promise<void> {
  // >SEPARATOR partialUpdateObject Partial update with a new value for a string attribute
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: 'new value' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for an integer attribute
export async function snippetForPartialUpdateObject1(): Promise<void> {
  // >SEPARATOR partialUpdateObject Partial update with a new value for an integer attribute
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: 1 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for a boolean attribute
export async function snippetForPartialUpdateObject2(): Promise<void> {
  // >SEPARATOR partialUpdateObject Partial update with a new value for a boolean attribute
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for an array attribute
export async function snippetForPartialUpdateObject3(): Promise<void> {
  // >SEPARATOR partialUpdateObject Partial update with a new value for an array attribute
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: ['one', 'two', 'three'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for an object attribute
export async function snippetForPartialUpdateObject4(): Promise<void> {
  // >SEPARATOR partialUpdateObject Partial update with a new value for an object attribute
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: { nested: 'value' } },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// with visible_by filter
export async function snippetForPartialUpdateObject5(): Promise<void> {
  // >SEPARATOR partialUpdateObject with visible_by filter
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { visible_by: ['Angela', 'group/Finance', 'group/Shareholders'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObjects method.
//
// call partialUpdateObjects with createIfNotExists=true
export async function snippetForPartialUpdateObjects(): Promise<void> {
  // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=true
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObjects({
    indexName: 'cts_e2e_partialUpdateObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
    createIfNotExists: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObjects method.
//
// call partialUpdateObjects with createIfNotExists=false
export async function snippetForPartialUpdateObjects1(): Promise<void> {
  // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists=false
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObjects({
    indexName: 'cts_e2e_partialUpdateObjects_javascript',
    objects: [
      { objectID: '3', name: 'Cyril' },
      { objectID: '4', name: 'David' },
    ],
    createIfNotExists: false,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the removeUserId method.
//
// removeUserId
export async function snippetForRemoveUserId(): Promise<void> {
  // >SEPARATOR removeUserId default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.removeUserId({ userID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceAllObjects method.
//
// call replaceAllObjects without error
export async function snippetForReplaceAllObjects(): Promise<void> {
  // >SEPARATOR replaceAllObjects call replaceAllObjects without error
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceAllObjects({
    indexName: 'cts_e2e_replace_all_objects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
      { objectID: '3', name: 'Cyril' },
      { objectID: '4', name: 'David' },
      { objectID: '5', name: 'Eva' },
      { objectID: '6', name: 'Fiona' },
      { objectID: '7', name: 'Gael' },
      { objectID: '8', name: 'Hugo' },
      { objectID: '9', name: 'Igor' },
      { objectID: '10', name: 'Julia' },
    ],
    batchSize: 3,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceAllObjects method.
//
// call replaceAllObjects with partial scopes
export async function snippetForReplaceAllObjects1(): Promise<void> {
  // >SEPARATOR replaceAllObjects call replaceAllObjects with partial scopes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceAllObjects({
    indexName: 'cts_e2e_replace_all_objects_scopes_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
    batchSize: 77,
    scopes: ['settings', 'synonyms'],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceAllObjects method.
//
// replaceAllObjects should cleanup on failure
export async function snippetForReplaceAllObjects2(): Promise<void> {
  // >SEPARATOR replaceAllObjects replaceAllObjects should cleanup on failure
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceAllObjects({
    indexName: 'cts_e2e_replace_all_objects_too_big_javascript',
    objects: [
      { objectID: 'fine', body: 'small obj' },
      { objectID: 'toolarge', body: 'something bigger than 10KB' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceSources method.
//
// replaceSources
export async function snippetForReplaceSources(): Promise<void> {
  // >SEPARATOR replaceSources default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceSources({ source: [{ source: 'theSource', description: 'theDescription' }] });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the restoreApiKey method.
//
// restoreApiKey
export async function snippetForRestoreApiKey(): Promise<void> {
  // >SEPARATOR restoreApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.restoreApiKey({ key: 'ALGOLIA_API_KEY' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObject method.
//
// saveObject
export async function snippetForSaveObject(): Promise<void> {
  // >SEPARATOR saveObject default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObject({ indexName: '<YOUR_INDEX_NAME>', body: { objectID: 'id', test: 'val' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// call saveObjects without error
export async function snippetForSaveObjects(): Promise<void> {
  // >SEPARATOR saveObjects call saveObjects without error
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'cts_e2e_saveObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// saveObjects should report errors
export async function snippetForSaveObjects1(): Promise<void> {
  // >SEPARATOR saveObjects saveObjects should report errors
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'cts_e2e_saveObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// saveObjectsPlaylist
export async function snippetForSaveObjects2(): Promise<void> {
  // >SEPARATOR saveObjects saveObjectsPlaylist
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'playlists',
    objects: [
      {
        objectID: '1',
        visibility: 'public',
        name: 'Hot 100 Billboard Charts',
        playlistId: 'd3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f',
        createdAt: '1500240452',
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// saveObjectsPublicUser
export async function snippetForSaveObjects3(): Promise<void> {
  // >SEPARATOR saveObjects saveObjectsPublicUser
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'playlists',
    objects: [
      {
        objectID: '1',
        visibility: 'public',
        name: 'Hot 100 Billboard Charts',
        playlistId: 'd3e8e8f3-0a4f-4b7d-9b6b-7e8f4e8e3a0f',
        createdAt: '1500240452',
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// saveRule with minimal parameters
export async function snippetForSaveRule(): Promise<void> {
  // >SEPARATOR saveRule saveRule with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'id1',
    rule: {
      objectID: 'id1',
      conditions: [{ pattern: 'apple', anchoring: 'contains' }],
      consequence: { params: { filters: 'brand:xiaomi' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// saveRule with all parameters
export async function snippetForSaveRule1(): Promise<void> {
  // >SEPARATOR saveRule saveRule with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'id1',
    rule: {
      objectID: 'id1',
      conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
      consequence: {
        params: {
          filters: 'brand:apple',
          query: {
            remove: ['algolia'],
            edits: [
              { type: 'remove', delete: 'abc', insert: 'cde' },
              { type: 'replace', delete: 'abc', insert: 'cde' },
            ],
          },
        },
        hide: [{ objectID: '321' }],
        filterPromotes: false,
        userData: { algolia: 'aloglia' },
        promote: [
          { objectID: 'abc', position: 3 },
          { objectIDs: ['abc', 'def'], position: 1 },
        ],
      },
      description: 'test',
      enabled: true,
      validity: [{ from: 1656670273, until: 1656670277 }],
    },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// b2b catalog
export async function snippetForSaveRule2(): Promise<void> {
  // >SEPARATOR saveRule b2b catalog
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'article-rule',
    rule: {
      objectID: 'article-rule',
      conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
      consequence: {
        params: {
          query: { edits: [{ type: 'remove', delete: 'article' }] },
          restrictSearchableAttributes: ['title', 'book_id'],
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// merchandising and promoting
export async function snippetForSaveRule3(): Promise<void> {
  // >SEPARATOR saveRule merchandising and promoting
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'director-rule',
    rule: {
      objectID: 'director-rule',
      conditions: [{ pattern: '{facet:director} director', anchoring: 'contains' }],
      consequence: {
        params: {
          restrictSearchableAttributes: ['title', 'book_id'],
          automaticFacetFilters: [{ facet: 'director' }],
          query: { edits: [{ type: 'remove', delete: 'director' }] },
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// harry potter
export async function snippetForSaveRule4(): Promise<void> {
  // >SEPARATOR saveRule harry potter
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'harry-potter-rule',
    rule: {
      objectID: 'harry-potter-rule',
      conditions: [{ pattern: 'harry potter', anchoring: 'contains' }],
      consequence: { userData: { promo_content: '20% OFF on all Harry Potter books!' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// merchandising empty query
export async function snippetForSaveRule5(): Promise<void> {
  // >SEPARATOR saveRule merchandising empty query
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'clearance-category-filter',
    rule: {
      objectID: 'clearance-category-filter',
      conditions: [{ pattern: '', anchoring: 'is', context: 'landing' }],
      consequence: { params: { optionalFilters: 'clearance:true' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// redirect
export async function snippetForSaveRule6(): Promise<void> {
  // >SEPARATOR saveRule redirect
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'redirect-help-rule',
    rule: {
      objectID: 'redirect-help-rule',
      conditions: [{ pattern: 'help', anchoring: 'contains' }],
      consequence: { userData: { redirect: 'https://www.algolia.com/support' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// promote some results over others
export async function snippetForSaveRule7(): Promise<void> {
  // >SEPARATOR saveRule promote some results over others
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'tomato-fruit',
    rule: {
      objectID: 'tomato-fruit',
      conditions: [{ pattern: 'tomato', anchoring: 'contains' }],
      consequence: { params: { optionalFilters: 'food_group:fruit' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// promote several hits
export async function snippetForSaveRule8(): Promise<void> {
  // >SEPARATOR saveRule promote several hits
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'Promote-Apple-Newest',
    rule: {
      objectID: 'Promote-Apple-Newest',
      conditions: [{ pattern: 'apple', anchoring: 'is' }],
      consequence: { promote: [{ objectIDs: ['iPhone-12345', 'watch-123'], position: 0 }] },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// promote newest release
export async function snippetForSaveRule9(): Promise<void> {
  // >SEPARATOR saveRule promote newest release
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'Promote-iPhone-X',
    rule: {
      objectID: 'Promote-iPhone-X',
      conditions: [{ pattern: 'iPhone', anchoring: 'contains' }],
      consequence: { promote: [{ objectID: 'iPhone-12345', position: 0 }] },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// promote single item
export async function snippetForSaveRule10(): Promise<void> {
  // >SEPARATOR saveRule promote single item
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'promote-harry-potter-box-set',
    rule: {
      objectID: 'promote-harry-potter-box-set',
      conditions: [{ pattern: 'Harry Potter', anchoring: 'contains' }],
      consequence: { promote: [{ objectID: 'HP-12345', position: 0 }] },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// limit search results
export async function snippetForSaveRule11(): Promise<void> {
  // >SEPARATOR saveRule limit search results
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'article-rule',
    rule: {
      objectID: 'article-rule',
      conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
      consequence: {
        params: {
          query: { edits: [{ type: 'remove', delete: 'article' }] },
          restrictSearchableAttributes: ['title', 'book_id'],
        },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// query match
export async function snippetForSaveRule12(): Promise<void> {
  // >SEPARATOR saveRule query match
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'tagged-brand-rule',
    rule: {
      conditions: [{ pattern: 'brand: {facet:brand}', anchoring: 'contains', alternatives: false }],
      consequence: {
        params: { automaticFacetFilters: [{ facet: 'brand' }], query: { remove: ['brand:', '{facet:brand}'] } },
      },
      description: 'filter on brand: {brand}',
      objectID: 'tagged-brand-rule',
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// dynamic filtering
export async function snippetForSaveRule13(): Promise<void> {
  // >SEPARATOR saveRule dynamic filtering
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'color-facets',
    rule: {
      objectID: 'color-facets',
      conditions: [{ pattern: '{facet:color}' }],
      consequence: { params: { automaticFacetFilters: [{ facet: 'color' }] } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// hide hits
export async function snippetForSaveRule14(): Promise<void> {
  // >SEPARATOR saveRule hide hits
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'hide-12345',
    rule: {
      objectID: 'hide-12345',
      conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
      consequence: { hide: [{ objectID: 'to-hide-12345' }] },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// one rule per facet
export async function snippetForSaveRule15(): Promise<void> {
  // >SEPARATOR saveRule one rule per facet
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'red-color',
    rule: {
      objectID: 'red-color',
      conditions: [{ pattern: 'red', anchoring: 'contains' }],
      consequence: { params: { query: { remove: ['red'] }, filters: 'color:red' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// numerical filters
export async function snippetForSaveRule16(): Promise<void> {
  // >SEPARATOR saveRule numerical filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'cheap',
    rule: {
      objectID: 'cheap',
      conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
      consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 10' } },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// negative filters
export async function snippetForSaveRule17(): Promise<void> {
  // >SEPARATOR saveRule negative filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'gluten-free-rule',
    rule: {
      objectID: 'gluten-free-rule',
      conditions: [{ pattern: 'gluten-free', anchoring: 'contains' }],
      consequence: {
        params: { filters: 'NOT allergens:gluten', query: { edits: [{ type: 'remove', delete: 'gluten-free' }] } },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// positive filters
export async function snippetForSaveRule18(): Promise<void> {
  // >SEPARATOR saveRule positive filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'diet-rule',
    rule: {
      objectID: 'diet-rule',
      conditions: [{ pattern: 'diet', anchoring: 'contains' }],
      consequence: {
        params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// conditionless
export async function snippetForSaveRule19(): Promise<void> {
  // >SEPARATOR saveRule conditionless
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'diet-rule',
    rule: {
      objectID: 'diet-rule',
      consequence: {
        params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules with minimal parameters
export async function snippetForSaveRules(): Promise<void> {
  // >SEPARATOR saveRules saveRules with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    indexName: '<YOUR_INDEX_NAME>',
    rules: [
      {
        objectID: 'a-rule-id',
        conditions: [{ pattern: 'smartphone', anchoring: 'contains' }],
        consequence: { params: { filters: 'brand:apple' } },
      },
      {
        objectID: 'a-second-rule-id',
        conditions: [{ pattern: 'apple', anchoring: 'contains' }],
        consequence: { params: { filters: 'brand:samsung' } },
      },
    ],
    forwardToReplicas: false,
    clearExistingRules: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules with all parameters
export async function snippetForSaveRules1(): Promise<void> {
  // >SEPARATOR saveRules saveRules with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    indexName: '<YOUR_INDEX_NAME>',
    rules: [
      {
        objectID: 'id1',
        conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
        consequence: {
          params: {
            filters: 'brand:apple',
            query: {
              remove: ['algolia'],
              edits: [
                { type: 'remove', delete: 'abc', insert: 'cde' },
                { type: 'replace', delete: 'abc', insert: 'cde' },
              ],
            },
          },
          hide: [{ objectID: '321' }],
          filterPromotes: false,
          userData: { algolia: 'aloglia' },
          promote: [
            { objectID: 'abc', position: 3 },
            { objectIDs: ['abc', 'def'], position: 1 },
          ],
        },
        description: 'test',
        enabled: true,
        validity: [{ from: 1656670273, until: 1656670277 }],
      },
    ],
    forwardToReplicas: true,
    clearExistingRules: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// dynamic filtering
export async function snippetForSaveRules2(): Promise<void> {
  // >SEPARATOR saveRules dynamic filtering
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    indexName: '<YOUR_INDEX_NAME>',
    rules: [
      {
        objectID: 'toaster',
        conditions: [{ pattern: 'toaster', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['toaster'] }, filters: 'product_type:toaster' } },
      },
      {
        objectID: 'cheap',
        conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 15' } },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// enhance search results
export async function snippetForSaveRules3(): Promise<void> {
  // >SEPARATOR saveRules enhance search results
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    indexName: '<YOUR_INDEX_NAME>',
    rules: [
      {
        objectID: 'country',
        conditions: [{ pattern: '{facet:country}', anchoring: 'contains' }],
        consequence: { params: { aroundLatLngViaIP: false } },
      },
      {
        objectID: 'city',
        conditions: [{ pattern: '{facet:city}', anchoring: 'contains' }],
        consequence: { params: { aroundLatLngViaIP: false } },
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveSynonym method.
//
// saveSynonym
export async function snippetForSaveSynonym(): Promise<void> {
  // >SEPARATOR saveSynonym default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveSynonym({
    indexName: 'indexName',
    objectID: 'id1',
    synonymHit: { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveSynonyms method.
//
// saveSynonyms
export async function snippetForSaveSynonyms(): Promise<void> {
  // >SEPARATOR saveSynonyms default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveSynonyms({
    indexName: '<YOUR_INDEX_NAME>',
    synonymHit: [
      { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
      { objectID: 'id2', type: 'onewaysynonym', input: 'iphone', synonyms: ['ephone', 'aphone', 'yphone'] },
    ],
    forwardToReplicas: true,
    replaceExistingSynonyms: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// withHitsPerPage
export async function snippetForSearch(): Promise<void> {
  // >SEPARATOR search withHitsPerPage
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', hitsPerPage: 50 }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOnly
export async function snippetForSearch1(): Promise<void> {
  // >SEPARATOR search filterOnly
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'actor:Scarlett Johansson' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOr
export async function snippetForSearch2(): Promise<void> {
  // >SEPARATOR search filterOr
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        filters: 'actor:Tom Cruise OR actor:Scarlett Johansson',
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterNot
export async function snippetForSearch3(): Promise<void> {
  // >SEPARATOR search filterNot
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'NOT actor:Nicolas Cage' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for a single hits request with minimal parameters
export async function snippetForSearch4(): Promise<void> {
  // >SEPARATOR search search for a single hits request with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({ requests: [{ indexName: 'cts_e2e_search_empty_index' }] });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search with highlight and snippet results
export async function snippetForSearch5(): Promise<void> {
  // >SEPARATOR search search with highlight and snippet results
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: 'cts_e2e_highlight_snippet_results',
        query: 'vim',
        attributesToSnippet: ['*:20'],
        attributesToHighlight: ['*'],
        attributesToRetrieve: ['*'],
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacets
export async function snippetForSearch6(): Promise<void> {
  // >SEPARATOR search retrieveFacets
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['author', 'genre'] }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacetsWildcard
export async function snippetForSearch7(): Promise<void> {
  // >SEPARATOR search retrieveFacetsWildcard
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['*'] }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for a single facet request with minimal parameters
export async function snippetForSearch8(): Promise<void> {
  // >SEPARATOR search search for a single facet request with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: 'cts_e2e_search_facet', type: 'facet', facet: 'editor' }],
    strategy: 'stopIfEnoughMatches',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for a single hits request with all parameters
export async function snippetForSearch9(): Promise<void> {
  // >SEPARATOR search search for a single hits request with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for a single facet request with all parameters
export async function snippetForSearch10(): Promise<void> {
  // >SEPARATOR search search for a single facet request with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: 'theIndexName',
        type: 'facet',
        facet: 'theFacet',
        facetQuery: 'theFacetQuery',
        query: 'theQuery',
        maxFacetHits: 50,
      },
    ],
    strategy: 'stopIfEnoughMatches',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for multiple mixed requests in multiple indices with minimal parameters
export async function snippetForSearch11(): Promise<void> {
  // >SEPARATOR search search for multiple mixed requests in multiple indices with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      { indexName: 'theIndexName' },
      { indexName: 'theIndexName2', type: 'facet', facet: 'theFacet' },
      { indexName: 'theIndexName', type: 'default' },
    ],
    strategy: 'stopIfEnoughMatches',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search for multiple mixed requests in multiple indices with all parameters
export async function snippetForSearch12(): Promise<void> {
  // >SEPARATOR search search for multiple mixed requests in multiple indices with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: 'theIndexName',
        type: 'facet',
        facet: 'theFacet',
        facetQuery: 'theFacetQuery',
        query: 'theQuery',
        maxFacetHits: 50,
      },
      { indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' },
    ],
    strategy: 'stopIfEnoughMatches',
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search filters accept all of the possible shapes
export async function snippetForSearch13(): Promise<void> {
  // >SEPARATOR search search filters accept all of the possible shapes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: 'theIndexName',
        facetFilters: 'mySearch:filters',
        reRankingApplyFilter: 'mySearch:filters',
        tagFilters: 'mySearch:filters',
        numericFilters: 'mySearch:filters',
        optionalFilters: 'mySearch:filters',
      },
      {
        indexName: 'theIndexName',
        facetFilters: ['mySearch:filters', ['mySearch:filters', ['mySearch:filters']]],
        reRankingApplyFilter: ['mySearch:filters', ['mySearch:filters']],
        tagFilters: ['mySearch:filters', ['mySearch:filters']],
        numericFilters: ['mySearch:filters', ['mySearch:filters']],
        optionalFilters: ['mySearch:filters', ['mySearch:filters']],
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search filters end to end
export async function snippetForSearch14(): Promise<void> {
  // >SEPARATOR search search filters end to end
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      { indexName: 'cts_e2e_search_facet', filters: "editor:'visual studio' OR editor:neovim" },
      { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", 'editor:neovim'] },
      { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", ['editor:neovim']] },
      {
        indexName: 'cts_e2e_search_facet',
        facetFilters: ["editor:'visual studio'", ['editor:neovim', ['editor:goland']]],
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// search with all search parameters
export async function snippetForSearch15(): Promise<void> {
  // >SEPARATOR search search with all search parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        advancedSyntax: true,
        advancedSyntaxFeatures: ['exactPhrase'],
        allowTyposOnNumericTokens: true,
        alternativesAsExact: ['multiWordsSynonym'],
        analytics: true,
        analyticsTags: [''],
        aroundLatLng: '',
        aroundLatLngViaIP: true,
        aroundPrecision: 0,
        aroundRadius: 'all',
        attributeCriteriaComputedByMinProximity: true,
        attributesToHighlight: [''],
        attributesToRetrieve: [''],
        attributesToSnippet: [''],
        clickAnalytics: true,
        decompoundQuery: true,
        disableExactOnAttributes: [''],
        disableTypoToleranceOnAttributes: [''],
        distinct: 0,
        enableABTest: true,
        enablePersonalization: true,
        enableReRanking: true,
        enableRules: true,
        exactOnSingleWordQuery: 'attribute',
        facetFilters: [''],
        facetingAfterDistinct: true,
        facets: [''],
        filters: '',
        getRankingInfo: true,
        highlightPostTag: '',
        highlightPreTag: '',
        hitsPerPage: 1,
        ignorePlurals: false,
        indexName: 'theIndexName',
        insideBoundingBox: [
          [47.3165, 4.9665, 47.3424, 5.0201],
          [40.9234, 2.1185, 38.643, 1.9916],
        ],
        insidePolygon: [
          [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9],
          [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104],
        ],
        length: 1,
        maxValuesPerFacet: 0,
        minProximity: 1,
        minWordSizefor1Typo: 0,
        minWordSizefor2Typos: 0,
        minimumAroundRadius: 1,
        naturalLanguages: ['fr'],
        numericFilters: [''],
        offset: 0,
        optionalFilters: [''],
        optionalWords: [''],
        page: 0,
        percentileComputation: true,
        personalizationImpact: 0,
        query: '',
        queryLanguages: ['fr'],
        queryType: 'prefixAll',
        ranking: [''],
        reRankingApplyFilter: [''],
        relevancyStrictness: 0,
        removeStopWords: true,
        removeWordsIfNoResults: 'allOptional',
        renderingContent: {
          facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
        },
        replaceSynonymsInHighlight: true,
        responseFields: [''],
        restrictHighlightAndSnippetArrays: true,
        restrictSearchableAttributes: [''],
        ruleContexts: [''],
        similarQuery: '',
        snippetEllipsisText: '',
        sortFacetValuesBy: '',
        sumOrFiltersScores: true,
        synonyms: true,
        tagFilters: [''],
        type: 'default',
        typoTolerance: 'min',
        userToken: '',
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchDictionaryEntries method.
//
// get searchDictionaryEntries results with minimal parameters
export async function snippetForSearchDictionaryEntries(): Promise<void> {
  // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchDictionaryEntries({
    dictionaryName: 'stopwords',
    searchDictionaryEntriesParams: { query: 'about' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchDictionaryEntries method.
//
// get searchDictionaryEntries results with all parameters
export async function snippetForSearchDictionaryEntries1(): Promise<void> {
  // >SEPARATOR searchDictionaryEntries get searchDictionaryEntries results with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchDictionaryEntries({
    dictionaryName: 'compounds',
    searchDictionaryEntriesParams: { query: 'foo', page: 4, hitsPerPage: 2, language: 'fr' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// get searchForFacetValues results with minimal parameters
export async function snippetForSearchForFacetValues(): Promise<void> {
  // >SEPARATOR searchForFacetValues get searchForFacetValues results with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({ indexName: 'indexName', facetName: 'facetName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// get searchForFacetValues results with all parameters
export async function snippetForSearchForFacetValues1(): Promise<void> {
  // >SEPARATOR searchForFacetValues get searchForFacetValues results with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({
    indexName: 'indexName',
    facetName: 'facetName',
    searchForFacetValuesRequest: { params: "query=foo&facetFilters=['bar']", facetQuery: 'foo', maxFacetHits: 42 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// facetName and facetQuery
export async function snippetForSearchForFacetValues2(): Promise<void> {
  // >SEPARATOR searchForFacetValues facetName and facetQuery
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({
    indexName: 'indexName',
    facetName: 'author',
    searchForFacetValuesRequest: { facetQuery: 'stephen king' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchRules method.
//
// searchRules
export async function snippetForSearchRules(): Promise<void> {
  // >SEPARATOR searchRules default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchRules({ indexName: 'cts_e2e_browse', searchRulesParams: { query: 'zorro' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// search with minimal parameters
export async function snippetForSearchSingleIndex(): Promise<void> {
  // >SEPARATOR searchSingleIndex search with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// search with special characters in indexName
export async function snippetForSearchSingleIndex1(): Promise<void> {
  // >SEPARATOR searchSingleIndex search with special characters in indexName
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'cts_e2e_space in index' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// search with searchParams
export async function snippetForSearchSingleIndex2(): Promise<void> {
  // >SEPARATOR searchSingleIndex search with searchParams
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { query: 'myQuery', facetFilters: ['tags:algolia'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// single search retrieve snippets
export async function snippetForSearchSingleIndex3(): Promise<void> {
  // >SEPARATOR searchSingleIndex single search retrieve snippets
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'cts_e2e_browse',
    searchParams: { query: 'batman mask of the phantasm', attributesToRetrieve: ['*'], attributesToSnippet: ['*:20'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// query
export async function snippetForSearchSingleIndex4(): Promise<void> {
  // >SEPARATOR searchSingleIndex query
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { query: 'phone' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filters
export async function snippetForSearchSingleIndex5(): Promise<void> {
  // >SEPARATOR searchSingleIndex filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: 'country:US AND price.gross < 2.0' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// distinct
export async function snippetForSearchSingleIndex6(): Promise<void> {
  // >SEPARATOR searchSingleIndex distinct
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { distinct: true } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersNumeric
export async function snippetForSearchSingleIndex7(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersNumeric
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { filters: 'price < 10' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersTimestamp
export async function snippetForSearchSingleIndex8(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersTimestamp
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: 'NOT date_timestamp:1514764800 TO 1546300799' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersSumOrFiltersScoresFalse
export async function snippetForSearchSingleIndex9(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresFalse
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: {
      filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
      sumOrFiltersScores: false,
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersSumOrFiltersScoresTrue
export async function snippetForSearchSingleIndex10(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersSumOrFiltersScoresTrue
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: {
      filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
      sumOrFiltersScores: true,
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersStephenKing
export async function snippetForSearchSingleIndex11(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersStephenKing
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: 'author:"Stephen King"' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersNotTags
export async function snippetForSearchSingleIndex12(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersNotTags
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: 'NOT _tags:non-fiction' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// facetFiltersList
export async function snippetForSearchSingleIndex13(): Promise<void> {
  // >SEPARATOR searchSingleIndex facetFiltersList
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { facetFilters: ['publisher:Penguin', ['author:Stephen King', 'genre:Horror']] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// facetFiltersNeg
export async function snippetForSearchSingleIndex14(): Promise<void> {
  // >SEPARATOR searchSingleIndex facetFiltersNeg
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { facetFilters: 'category:-Ebook' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// filtersAndFacetFilters
export async function snippetForSearchSingleIndex15(): Promise<void> {
  // >SEPARATOR searchSingleIndex filtersAndFacetFilters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: '(author:"Stephen King" OR genre:"Horror")', facetFilters: ['publisher:Penguin'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// facet author genre
export async function snippetForSearchSingleIndex16(): Promise<void> {
  // >SEPARATOR searchSingleIndex facet author genre
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { facets: ['author', 'genre'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// facet wildcard
export async function snippetForSearchSingleIndex17(): Promise<void> {
  // >SEPARATOR searchSingleIndex facet wildcard
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { facets: ['*'] } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// maxValuesPerFacet
export async function snippetForSearchSingleIndex18(): Promise<void> {
  // >SEPARATOR searchSingleIndex maxValuesPerFacet
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { maxValuesPerFacet: 1000 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// aroundLatLng
export async function snippetForSearchSingleIndex19(): Promise<void> {
  // >SEPARATOR searchSingleIndex aroundLatLng
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { aroundLatLng: '40.71, -74.01' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// aroundLatLngViaIP
export async function snippetForSearchSingleIndex20(): Promise<void> {
  // >SEPARATOR searchSingleIndex aroundLatLngViaIP
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { aroundLatLngViaIP: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// aroundRadius
export async function snippetForSearchSingleIndex21(): Promise<void> {
  // >SEPARATOR searchSingleIndex aroundRadius
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { aroundLatLng: '40.71, -74.01', aroundRadius: 1000000 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// insideBoundingBox
export async function snippetForSearchSingleIndex22(): Promise<void> {
  // >SEPARATOR searchSingleIndex insideBoundingBox
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { insideBoundingBox: [[49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875]] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// insidePolygon
export async function snippetForSearchSingleIndex23(): Promise<void> {
  // >SEPARATOR searchSingleIndex insidePolygon
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: {
      insidePolygon: [
        [
          42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
          31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
          -117.54828125,
        ],
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// insidePolygon
export async function snippetForSearchSingleIndex24(): Promise<void> {
  // >SEPARATOR searchSingleIndex insidePolygon
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: {
      insidePolygon: [
        [
          42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
          31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
          -117.54828125,
        ],
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// optionalFilters
export async function snippetForSearchSingleIndex25(): Promise<void> {
  // >SEPARATOR searchSingleIndex optionalFilters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { optionalFilters: ['can_deliver_quickly:true'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// optionalFiltersMany
export async function snippetForSearchSingleIndex26(): Promise<void> {
  // >SEPARATOR searchSingleIndex optionalFiltersMany
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { optionalFilters: ['brand:Apple<score=3>', 'brand:Samsung<score=2>', 'brand:-Huawei'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// optionalFiltersSimple
export async function snippetForSearchSingleIndex27(): Promise<void> {
  // >SEPARATOR searchSingleIndex optionalFiltersSimple
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { optionalFilters: ['brand:Apple<score=2>', 'type:tablet'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// restrictSearchableAttributes
export async function snippetForSearchSingleIndex28(): Promise<void> {
  // >SEPARATOR searchSingleIndex restrictSearchableAttributes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { restrictSearchableAttributes: ['title_fr'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// getRankingInfo
export async function snippetForSearchSingleIndex29(): Promise<void> {
  // >SEPARATOR searchSingleIndex getRankingInfo
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { getRankingInfo: true } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// clickAnalytics
export async function snippetForSearchSingleIndex30(): Promise<void> {
  // >SEPARATOR searchSingleIndex clickAnalytics
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { clickAnalytics: true } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// clickAnalyticsUserToken
export async function snippetForSearchSingleIndex31(): Promise<void> {
  // >SEPARATOR searchSingleIndex clickAnalyticsUserToken
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { clickAnalytics: true, userToken: 'user-1' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// enablePersonalization
export async function snippetForSearchSingleIndex32(): Promise<void> {
  // >SEPARATOR searchSingleIndex enablePersonalization
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { enablePersonalization: true, userToken: 'user-1' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// userToken
export async function snippetForSearchSingleIndex33(): Promise<void> {
  // >SEPARATOR searchSingleIndex userToken
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName', searchParams: { userToken: 'user-1' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// analyticsTag
export async function snippetForSearchSingleIndex34(): Promise<void> {
  // >SEPARATOR searchSingleIndex analyticsTag
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { analyticsTags: ['YOUR_ANALYTICS_TAG'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// facetFiltersUsers
export async function snippetForSearchSingleIndex35(): Promise<void> {
  // >SEPARATOR searchSingleIndex facetFiltersUsers
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { facetFilters: ['user:user42', 'user:public'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// buildTheQuery
export async function snippetForSearchSingleIndex36(): Promise<void> {
  // >SEPARATOR searchSingleIndex buildTheQuery
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({
    indexName: 'indexName',
    searchParams: { filters: "categoryPageId: Men's Clothing", hitsPerPage: 50, analyticsTags: ['mens-clothing'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSynonyms method.
//
// searchSynonyms with minimal parameters
export async function snippetForSearchSynonyms(): Promise<void> {
  // >SEPARATOR searchSynonyms searchSynonyms with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSynonyms({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSynonyms method.
//
// searchSynonyms with all parameters
export async function snippetForSearchSynonyms1(): Promise<void> {
  // >SEPARATOR searchSynonyms searchSynonyms with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSynonyms({
    indexName: 'indexName',
    searchSynonymsParams: { query: 'myQuery', type: 'altcorrection1', page: 10, hitsPerPage: 10 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchUserIds method.
//
// searchUserIds
export async function snippetForSearchUserIds(): Promise<void> {
  // >SEPARATOR searchUserIds default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchUserIds({
    query: 'test',
    clusterName: 'theClusterName',
    page: 5,
    hitsPerPage: 10,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}

// Snippet for the setDictionarySettings method.
//
// get setDictionarySettings results with minimal parameters
export async function snippetForSetDictionarySettings(): Promise<void> {
  // >SEPARATOR setDictionarySettings get setDictionarySettings results with minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setDictionarySettings({
    disableStandardEntries: { plurals: { fr: false, en: false, ru: true } },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setDictionarySettings method.
//
// get setDictionarySettings results with all parameters
export async function snippetForSetDictionarySettings1(): Promise<void> {
  // >SEPARATOR setDictionarySettings get setDictionarySettings results with all parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setDictionarySettings({
    disableStandardEntries: {
      plurals: { fr: false, en: false, ru: true },
      stopwords: { fr: false },
      compounds: { ru: true },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// minimal parameters
export async function snippetForSetSettings(): Promise<void> {
  // >SEPARATOR setSettings minimal parameters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'cts_e2e_settings',
    indexSettings: { paginationLimitedTo: 10 },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// boolean typoTolerance
export async function snippetForSetSettings1(): Promise<void> {
  // >SEPARATOR setSettings boolean typoTolerance
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { typoTolerance: true },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// enum typoTolerance
export async function snippetForSetSettings2(): Promise<void> {
  // >SEPARATOR setSettings enum typoTolerance
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { typoTolerance: 'min' },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// ignorePlurals
export async function snippetForSetSettings3(): Promise<void> {
  // >SEPARATOR setSettings ignorePlurals
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { ignorePlurals: true },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// list of string ignorePlurals
export async function snippetForSetSettings4(): Promise<void> {
  // >SEPARATOR setSettings list of string ignorePlurals
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { ignorePlurals: ['fr'] },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// removeStopWords boolean
export async function snippetForSetSettings5(): Promise<void> {
  // >SEPARATOR setSettings removeStopWords boolean
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { removeStopWords: true },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// removeStopWords list of string
export async function snippetForSetSettings6(): Promise<void> {
  // >SEPARATOR setSettings removeStopWords list of string
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { removeStopWords: ['fr'] },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// boolean distinct
export async function snippetForSetSettings7(): Promise<void> {
  // >SEPARATOR setSettings boolean distinct
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { distinct: true },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// integer distinct
export async function snippetForSetSettings8(): Promise<void> {
  // >SEPARATOR setSettings integer distinct
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { distinct: 1 },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// distinct company
export async function snippetForSetSettings9(): Promise<void> {
  // >SEPARATOR setSettings distinct company
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { attributeForDistinct: 'company', distinct: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// distinct design
export async function snippetForSetSettings10(): Promise<void> {
  // >SEPARATOR setSettings distinct design
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { attributeForDistinct: 'design', distinct: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// distinct true
export async function snippetForSetSettings11(): Promise<void> {
  // >SEPARATOR setSettings distinct true
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { distinct: true } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// distinct section
export async function snippetForSetSettings12(): Promise<void> {
  // >SEPARATOR setSettings distinct section
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { attributeForDistinct: 'section', distinct: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting allergens
export async function snippetForSetSettings13(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting allergens
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['allergens'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting categoryPageId
export async function snippetForSetSettings14(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting categoryPageId
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['searchable(categoryPageId)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// unretrievableAttributes
export async function snippetForSetSettings15(): Promise<void> {
  // >SEPARATOR setSettings unretrievableAttributes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { unretrievableAttributes: ['visible_by'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting user restricted data
export async function snippetForSetSettings16(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting user restricted data
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['filterOnly(visible_by)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting optional filters
export async function snippetForSetSettings17(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting optional filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['can_deliver_quickly', 'restaurant'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting redirect index
export async function snippetForSetSettings18(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting redirect index
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['query_terms'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting multiple consequences
export async function snippetForSetSettings19(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting multiple consequences
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['director'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting in-depth optional filters
export async function snippetForSetSettings20(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting in-depth optional filters
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['filterOnly(brand)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// mode neuralSearch
export async function snippetForSetSettings21(): Promise<void> {
  // >SEPARATOR setSettings mode neuralSearch
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { mode: 'neuralSearch' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// mode keywordSearch
export async function snippetForSetSettings22(): Promise<void> {
  // >SEPARATOR setSettings mode keywordSearch
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { mode: 'keywordSearch' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributes same priority
export async function snippetForSetSettings23(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributes same priority
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['title,comments', 'ingredients'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributes higher priority
export async function snippetForSetSettings24(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributes higher priority
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['title', 'ingredients'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking retweets
export async function snippetForSetSettings25(): Promise<void> {
  // >SEPARATOR setSettings customRanking retweets
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(retweets)', 'desc(likes)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking boosted
export async function snippetForSetSettings26(): Promise<void> {
  // >SEPARATOR setSettings customRanking boosted
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(boosted)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking pageviews
export async function snippetForSetSettings27(): Promise<void> {
  // >SEPARATOR setSettings customRanking pageviews
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(pageviews)', 'desc(comments)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking applying search parameters for a specific query
export async function snippetForSetSettings28(): Promise<void> {
  // >SEPARATOR setSettings customRanking applying search parameters for a specific query
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(nb_airline_liaisons)'], attributesForFaceting: ['city, country'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking rounded pageviews
export async function snippetForSetSettings29(): Promise<void> {
  // >SEPARATOR setSettings customRanking rounded pageviews
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(rounded_pageviews)', 'desc(comments)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking price
export async function snippetForSetSettings30(): Promise<void> {
  // >SEPARATOR setSettings customRanking price
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(price)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// ranking exhaustive
export async function snippetForSetSettings31(): Promise<void> {
  // >SEPARATOR setSettings ranking exhaustive
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      ranking: ['desc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// ranking standard replica
export async function snippetForSetSettings32(): Promise<void> {
  // >SEPARATOR setSettings ranking standard replica
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { ranking: ['desc(post_date_timestamp)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// ranking virtual replica
export async function snippetForSetSettings33(): Promise<void> {
  // >SEPARATOR setSettings ranking virtual replica
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['desc(post_date_timestamp)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// customRanking and ranking sort alphabetically
export async function snippetForSetSettings34(): Promise<void> {
  // >SEPARATOR setSettings customRanking and ranking sort alphabetically
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      customRanking: ['asc(textual_attribute)'],
      ranking: ['custom', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// relevancyStrictness
export async function snippetForSetSettings35(): Promise<void> {
  // >SEPARATOR setSettings relevancyStrictness
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { customRanking: ['asc(textual_attribute)'], relevancyStrictness: 0 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// create replica index
export async function snippetForSetSettings36(): Promise<void> {
  // >SEPARATOR setSettings create replica index
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { replicas: ['products_price_desc'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// create virtual replica index
export async function snippetForSetSettings37(): Promise<void> {
  // >SEPARATOR setSettings create virtual replica index
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { replicas: ['virtual(products_price_desc)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// unlink replica index
export async function snippetForSetSettings38(): Promise<void> {
  // >SEPARATOR setSettings unlink replica index
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { replicas: [''] } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// forwardToReplicas
export async function snippetForSetSettings39(): Promise<void> {
  // >SEPARATOR setSettings forwardToReplicas
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['name', 'description'] },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// maxValuesPerFacet
export async function snippetForSetSettings40(): Promise<void> {
  // >SEPARATOR setSettings maxValuesPerFacet
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { maxValuesPerFacet: 1000 } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// maxFacetHits
export async function snippetForSetSettings41(): Promise<void> {
  // >SEPARATOR setSettings maxFacetHits
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({ indexName: 'theIndexName', indexSettings: { maxFacetHits: 1000 } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// attributesForFaceting complex
export async function snippetForSetSettings42(): Promise<void> {
  // >SEPARATOR setSettings attributesForFaceting complex
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['actor', 'filterOnly(category)', 'searchable(publisher)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// ranking closest dates
export async function snippetForSetSettings43(): Promise<void> {
  // >SEPARATOR setSettings ranking closest dates
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      ranking: ['asc(date_timestamp)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributes item variation
export async function snippetForSetSettings44(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributes item variation
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['design', 'type', 'color'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributes around location
export async function snippetForSetSettings45(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributes around location
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      searchableAttributes: ['name', 'country', 'code', 'iata_code'],
      customRanking: ['desc(links_count)'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributes around location
export async function snippetForSetSettings46(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributes around location
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      searchableAttributes: ['name', 'country', 'code', 'iata_code'],
      customRanking: ['desc(links_count)'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// disableTypoToleranceOnAttributes
export async function snippetForSetSettings47(): Promise<void> {
  // >SEPARATOR setSettings disableTypoToleranceOnAttributes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { disableTypoToleranceOnAttributes: ['serial_number'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// everything
export async function snippetForSetSettings48(): Promise<void> {
  // >SEPARATOR setSettings everything
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      advancedSyntax: true,
      advancedSyntaxFeatures: ['exactPhrase'],
      allowCompressionOfIntegerArray: true,
      allowTyposOnNumericTokens: true,
      alternativesAsExact: ['singleWordSynonym'],
      attributeCriteriaComputedByMinProximity: true,
      attributeForDistinct: 'test',
      attributesForFaceting: ['algolia'],
      attributesToHighlight: ['algolia'],
      attributesToRetrieve: ['algolia'],
      attributesToSnippet: ['algolia'],
      attributesToTransliterate: ['algolia'],
      camelCaseAttributes: ['algolia'],
      customNormalization: { algolia: { aloglia: 'aglolia' } },
      customRanking: ['algolia'],
      decompoundQuery: false,
      decompoundedAttributes: { algolia: 'aloglia' },
      disableExactOnAttributes: ['algolia'],
      disablePrefixOnAttributes: ['algolia'],
      disableTypoToleranceOnAttributes: ['algolia'],
      disableTypoToleranceOnWords: ['algolia'],
      distinct: 3,
      enablePersonalization: true,
      enableReRanking: false,
      enableRules: true,
      exactOnSingleWordQuery: 'attribute',
      highlightPreTag: '<span>',
      highlightPostTag: '</span>',
      hitsPerPage: 10,
      ignorePlurals: false,
      indexLanguages: ['fr'],
      keepDiacriticsOnCharacters: 'abc',
      maxFacetHits: 20,
      maxValuesPerFacet: 30,
      minProximity: 6,
      minWordSizefor1Typo: 5,
      minWordSizefor2Typos: 11,
      mode: 'neuralSearch',
      numericAttributesForFiltering: ['algolia'],
      optionalWords: ['myspace'],
      paginationLimitedTo: 0,
      queryLanguages: ['fr'],
      queryType: 'prefixLast',
      ranking: ['geo'],
      reRankingApplyFilter: 'mySearch:filters',
      relevancyStrictness: 10,
      removeStopWords: false,
      removeWordsIfNoResults: 'lastWords',
      renderingContent: {
        facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
      },
      replaceSynonymsInHighlight: true,
      replicas: [''],
      responseFields: ['algolia'],
      restrictHighlightAndSnippetArrays: true,
      searchableAttributes: ['foo'],
      semanticSearch: { eventSources: ['foo'] },
      separatorsToIndex: 'bar',
      snippetEllipsisText: '---',
      sortFacetValuesBy: 'date',
      typoTolerance: false,
      unretrievableAttributes: ['foo'],
      userData: { user: 'data' },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributesWithCustomRankingsAndAttributesForFaceting
export async function snippetForSetSettings49(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributesWithCustomRankingsAndAttributesForFaceting
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: {
      searchableAttributes: ['brand', 'name', 'categories', 'unordered(description)'],
      customRanking: ['desc(popularity)'],
      attributesForFaceting: ['searchable(brand)', 'type', 'categories', 'price'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributesProductReferenceSuffixes
export async function snippetForSetSettings50(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributesProductReferenceSuffixes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['name', 'product_reference', 'product_reference_suffixes'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// queryLanguageAndIgnorePlurals
export async function snippetForSetSettings51(): Promise<void> {
  // >SEPARATOR setSettings queryLanguageAndIgnorePlurals
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { queryLanguages: ['en'], ignorePlurals: true },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributesInMovies
export async function snippetForSetSettings52(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributesInMovies
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'movies',
    indexSettings: { searchableAttributes: ['title_eng', 'title_fr', 'title_es'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// disablePrefixOnAttributes
export async function snippetForSetSettings53(): Promise<void> {
  // >SEPARATOR setSettings disablePrefixOnAttributes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { disablePrefixOnAttributes: ['serial_number'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// disableTypoToleranceOnAttributes
export async function snippetForSetSettings54(): Promise<void> {
  // >SEPARATOR setSettings disableTypoToleranceOnAttributes
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { disableTypoToleranceOnAttributes: ['serial_number'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributesSimpleExample
export async function snippetForSetSettings55(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributesSimpleExample
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['serial_number'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// searchableAttributesSimpleExampleAlt
export async function snippetForSetSettings56(): Promise<void> {
  // >SEPARATOR setSettings searchableAttributesSimpleExampleAlt
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: 'theIndexName',
    indexSettings: { searchableAttributes: ['serial_number', 'serial_number_suffixes'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the updateApiKey method.
//
// updateApiKey
export async function snippetForUpdateApiKey(): Promise<void> {
  // >SEPARATOR updateApiKey default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.updateApiKey({
    key: 'ALGOLIA_API_KEY',
    apiKey: { acl: ['search', 'addObject'], validity: 300, maxQueriesPerIPPerHour: 100, maxHitsPerQuery: 20 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key helper - add
export async function snippetForWaitForApiKey(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key helper - add
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({ key: 'api-key-add-operation-test-javascript', operation: 'add' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key - update
export async function snippetForWaitForApiKey1(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key - update
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({
    key: 'api-key-update-operation-test-javascript',
    operation: 'update',
    apiKey: {
      description: 'my updated api key',
      acl: ['search', 'addObject', 'deleteObject'],
      indexes: ['Movies', 'Books'],
      referers: ['*google.com', '*algolia.com'],
      validity: 305,
      maxQueriesPerIPPerHour: 95,
      maxHitsPerQuery: 20,
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key - delete
export async function snippetForWaitForApiKey2(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key - delete
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({ key: 'api-key-delete-operation-test-javascript', operation: 'delete' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForAppTask method.
//
// wait for an application-level task
export async function snippetForWaitForAppTask(): Promise<void> {
  // >SEPARATOR waitForAppTask default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForAppTask({ taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForTask method.
//
// wait for task
export async function snippetForWaitForTask(): Promise<void> {
  // >SEPARATOR waitForTask default
  // Initialize the client
  //
  const client = algoliasearch('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForTask({ indexName: 'wait-task-javascript', taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}
