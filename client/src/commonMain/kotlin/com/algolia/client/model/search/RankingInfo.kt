/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.algolia.client.model.search

import com.algolia.client.model.search.MatchedGeoLocation
import com.algolia.client.model.search.Personalization

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param filters This field is reserved for advanced usage.
 * @param firstMatchedWord Position of the most important matched attribute in the attributes to index list.
 * @param geoDistance Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters).
 * @param nbExactWords Number of exactly matched words.
 * @param nbTypos Number of typos encountered when matching the record.
 * @param promoted Present and set to true if a Rule promoted the hit.
 * @param userScore Custom ranking for the object, expressed as a single integer value.
 * @param words Number of matched words, including prefixes and typos.
 * @param geoPrecision Precision used when computing the geo distance, in meters.
 * @param matchedGeoLocation 
 * @param personalization 
 * @param proximityDistance When the query contains more than one word, the sum of the distances between matched words (in meters).
 * @param promotedByReRanking Wether the record are promoted by the re-ranking strategy.
 */
@Serializable

data class RankingInfo (

    /* This field is reserved for advanced usage. */
    @SerialName(value = "filters") @Required val filters: Int,

    /* Position of the most important matched attribute in the attributes to index list. */
    @SerialName(value = "firstMatchedWord") @Required val firstMatchedWord: Int,

    /* Distance between the geo location in the search query and the best matching geo location in the record, divided by the geo precision (in meters). */
    @SerialName(value = "geoDistance") @Required val geoDistance: Int,

    /* Number of exactly matched words. */
    @SerialName(value = "nbExactWords") @Required val nbExactWords: Int,

    /* Number of typos encountered when matching the record. */
    @SerialName(value = "nbTypos") @Required val nbTypos: Int,

    /* Present and set to true if a Rule promoted the hit. */
    @SerialName(value = "promoted") @Required val promoted: Boolean,

    /* Custom ranking for the object, expressed as a single integer value. */
    @SerialName(value = "userScore") @Required val userScore: Int,

    /* Number of matched words, including prefixes and typos. */
    @SerialName(value = "words") @Required val words: Int,

    /* Precision used when computing the geo distance, in meters. */
    @SerialName(value = "geoPrecision") val geoPrecision: Int? = null,

    @SerialName(value = "matchedGeoLocation") val matchedGeoLocation: MatchedGeoLocation? = null,

    @SerialName(value = "personalization") val personalization: Personalization? = null,

    /* When the query contains more than one word, the sum of the distances between matched words (in meters). */
    @SerialName(value = "proximityDistance") val proximityDistance: Int? = null,

    /* Wether the record are promoted by the re-ranking strategy. */
    @SerialName(value = "promotedByReRanking") val promotedByReRanking: Boolean? = null

)

