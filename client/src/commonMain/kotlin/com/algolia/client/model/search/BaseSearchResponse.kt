/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.algolia.client.model.search

import com.algolia.client.model.search.AbstractMap
import com.algolia.client.model.search.Any
import com.algolia.client.model.search.Exhaustive
import com.algolia.client.model.search.FacetsStats
import com.algolia.client.model.search.JsonObject
import com.algolia.client.model.search.Redirect
import com.algolia.client.model.search.RenderingContent

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 *
 * @param hitsPerPage Number of hits per page.
 * @param nbHits Number of hits the search query matched.
 * @param nbPages Number of pages of results for the current query.
 * @param page Page to retrieve (the first page is `0`, not `1`).
 * @param processingTimeMS Time the server took to process the request, in milliseconds.
 * @param abTestID A/B test ID. This is only included in the response for indices that are part of an A/B test.
 * @param abTestVariantID Variant ID. This is only included in the response for indices that are part of an A/B test.
 * @param aroundLatLng Computed geographical location.
 * @param automaticRadius Automatically-computed radius.
 * @param exhaustive 
 * @param exhaustiveFacetsCount See the `facetsCount` field of the `exhaustive` object in the response.
 * @param exhaustiveNbHits See the `nbHits` field of the `exhaustive` object in the response.
 * @param exhaustiveTypo See the `typo` field of the `exhaustive` object in the response.
 * @param facets Mapping of each facet name to the corresponding facet counts.
 * @param facetsStats Statistics for numerical facets.
 * @param index Index name used for the query.
 * @param indexUsed Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query.
 * @param message Warnings about the query.
 * @param nbSortedHits Number of hits selected and sorted by the relevant sort algorithm.
 * @param parsedQuery Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched.
 * @param processingTimingsMS Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues.
 * @param queryAfterRemoval Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set.
 * @param redirect 
 * @param renderingContent 
 * @param serverTimeMS Time the server took to process the request, in milliseconds.
 * @param serverUsed Host name of the server that processed the request.
 * @param userData Lets you store custom data in your indices.
 */
@Serializable

data class BaseSearchResponse (

    /* Number of hits per page. */
    @SerialName(value = "hitsPerPage") @Required val hitsPerPage: Int = 20,

    /* Number of hits the search query matched. */
    @SerialName(value = "nbHits") @Required val nbHits: Int,

    /* Number of pages of results for the current query. */
    @SerialName(value = "nbPages") @Required val nbPages: Int,

    /* Page to retrieve (the first page is `0`, not `1`). */
    @SerialName(value = "page") @Required val page: Int = 0,

    /* Time the server took to process the request, in milliseconds. */
    @SerialName(value = "processingTimeMS") @Required val processingTimeMS: Int,

    /* A/B test ID. This is only included in the response for indices that are part of an A/B test. */
    @SerialName(value = "abTestID") val abTestID: Int? = null,

    /* Variant ID. This is only included in the response for indices that are part of an A/B test. */
    @SerialName(value = "abTestVariantID") val abTestVariantID: Int? = null,

    /* Computed geographical location. */
    @SerialName(value = "aroundLatLng") val aroundLatLng: String? = null,

    /* Automatically-computed radius. */
    @SerialName(value = "automaticRadius") val automaticRadius: String? = null,

    @SerialName(value = "exhaustive") val exhaustive: Exhaustive? = null,

    /* See the `facetsCount` field of the `exhaustive` object in the response. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "exhaustiveFacetsCount") val exhaustiveFacetsCount: Boolean? = null,

    /* See the `nbHits` field of the `exhaustive` object in the response. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "exhaustiveNbHits") val exhaustiveNbHits: Boolean? = null,

    /* See the `typo` field of the `exhaustive` object in the response. */
    @Deprecated(message = "This property is deprecated.")
    @SerialName(value = "exhaustiveTypo") val exhaustiveTypo: Boolean? = null,

    /* Mapping of each facet name to the corresponding facet counts. */
    @SerialName(value = "facets") val facets: Map<kotlin.String, Map<kotlin.String, Int>>? = null,

    /* Statistics for numerical facets. */
    @SerialName(value = "facets_stats") val facetsStats: Map<kotlin.String, FacetsStats>? = null,

    /* Index name used for the query. */
    @SerialName(value = "index") val index: String? = null,

    /* Index name used for the query. During A/B testing, the targeted index isn't always the index used by the query. */
    @SerialName(value = "indexUsed") val indexUsed: String? = null,

    /* Warnings about the query. */
    @SerialName(value = "message") val message: String? = null,

    /* Number of hits selected and sorted by the relevant sort algorithm. */
    @SerialName(value = "nbSortedHits") val nbSortedHits: Int? = null,

    /* Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean) query string that will be searched. */
    @SerialName(value = "parsedQuery") val parsedQuery: String? = null,

    /* Experimental. List of processing steps and their times, in milliseconds. You can use this list to investigate performance issues. */
    @SerialName(value = "processingTimingsMS") val processingTimingsMS: JsonObject? = null,

    /* Markup text indicating which parts of the original query have been removed to retrieve a non-empty result set. */
    @SerialName(value = "queryAfterRemoval") val queryAfterRemoval: String? = null,

    @SerialName(value = "redirect") val redirect: Redirect? = null,

    @SerialName(value = "renderingContent") val renderingContent: RenderingContent? = null,

    /* Time the server took to process the request, in milliseconds. */
    @SerialName(value = "serverTimeMS") val serverTimeMS: Int? = null,

    /* Host name of the server that processed the request. */
    @SerialName(value = "serverUsed") val serverUsed: String? = null,

    /* Lets you store custom data in your indices. */
    @SerialName(value = "userData") val userData: Any? = null

) : AbstractMap<String, Any>()

