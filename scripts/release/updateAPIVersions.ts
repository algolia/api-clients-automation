import fsp from 'fs/promises';

import clientsConfig from '../../config/clients.config.json' assert { type: 'json' };
import { CI, exists, setVerbose, toAbsolutePath } from '../common.js';
import { getGitHubUrl, getLanguageFolder } from '../config.js';
import type { Language } from '../types.js';

import { writeJsonFile } from './common.js';
import { updateDartPackages } from './dart.js';
import { updateJavaScriptPackages } from './javascript.js';
import type { Changelog, Versions } from './types.js';

async function updateConfigFiles(versionsToRelease: Versions): Promise<void> {
  // update the other versions in clients.config.json
  for (const lang of Object.keys(versionsToRelease) as Language[]) {
    if (versionsToRelease[lang]?.next) {
      clientsConfig[lang].packageVersion = versionsToRelease[lang].next;
    }
  }

  await writeJsonFile(toAbsolutePath('config/clients.config.json'), clientsConfig);
}

export async function updateChangelog(
  lang: Language,
  changelog: string,
  current: string,
  next: string,
  changelogPath: string,
): Promise<void> {
  let content = '';
  const changelogHeader = `## [${next}](${getGitHubUrl(lang)}/compare/${current}...${next})`;

  if (await exists(changelogPath)) {
    content = (await fsp.readFile(changelogPath)).toString();
  }

  await fsp.writeFile(changelogPath, [changelogHeader, changelog, content].join('\n\n'));
}

/**
 * Updates the changelogs and the config files containing versions of the API clients.
 *
 * @param versions - A summary of the version changes, with their new version and release type.
 * @param changelog - The changelog of all the languages, which is generated by `createReleasePR`.
 */
export async function updateAPIVersions(versions: Versions, changelog: Changelog): Promise<void> {
  await updateConfigFiles(versions);

  for (const [lang, { current, releaseType, next }] of Object.entries(versions)) {
    if (!next) {
      continue;
    }

    if (lang === 'dart') {
      await updateDartPackages(changelog[lang]!, next);

      continue;
    }

    if (lang === 'javascript' && releaseType) {
      setVerbose(CI);
      await updateJavaScriptPackages(releaseType);
    }

    await updateChangelog(
      lang as Language,
      changelog[lang],
      current,
      next,
      toAbsolutePath(`${getLanguageFolder(lang as Language)}/CHANGELOG.md`),
    );
  }
}
