// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
/* eslint no-console: ["error", { allow: ["log"] }] */

// >IMPORT
import { monitoringClient } from '@algolia/monitoring';
// IMPORT<

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getClusterIncidents method.
//
// getClusterIncidents
export async function snippetForGetClusterIncidents(): Promise<void> {
  // >SEPARATOR getClusterIncidents default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getClusterIncidents({ clusters: 'c1-de' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getClusterStatus method.
//
// getClusterStatus
export async function snippetForGetClusterStatus(): Promise<void> {
  // >SEPARATOR getClusterStatus default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getClusterStatus({ clusters: 'c1-de' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getIncidents method.
//
// getIncidents
export async function snippetForGetIncidents(): Promise<void> {
  // >SEPARATOR getIncidents default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getIncidents();

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getIndexingTime method.
//
// getIndexingTime
export async function snippetForGetIndexingTime(): Promise<void> {
  // >SEPARATOR getIndexingTime default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getIndexingTime({ clusters: 'c1-de' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getLatency method.
//
// getLatency
export async function snippetForGetLatency(): Promise<void> {
  // >SEPARATOR getLatency default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getLatency({ clusters: 'c1-de' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getMetrics method.
//
// getMetrics
export async function snippetForGetMetrics(): Promise<void> {
  // >SEPARATOR getMetrics default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getMetrics({ metric: 'avg_build_time', period: 'minute' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getReachability method.
//
// getReachability
export async function snippetForGetReachability(): Promise<void> {
  // >SEPARATOR getReachability default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getReachability({ clusters: 'c1-de' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getServers method.
//
// getInventory
export async function snippetForGetServers(): Promise<void> {
  // >SEPARATOR getServers default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getServers();

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getStatus method.
//
// getStatus
export async function snippetForGetStatus(): Promise<void> {
  // >SEPARATOR getStatus default
  // Initialize the client
  const client = monitoringClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.getStatus();

  // use typed response
  console.log(response);
  // SEPARATOR<
}
