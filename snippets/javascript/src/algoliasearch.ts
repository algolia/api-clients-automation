// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
/* eslint no-console: ["error", { allow: ["log"] }] */

// >IMPORT
import { liteClient } from 'algoliasearch/lite';
// IMPORT<

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// withHitsPerPage
export async function snippetForSearch(): Promise<void> {
  // >SEPARATOR search withHitsPerPage
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        hitsPerPage: 50,
      },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOnly
export async function snippetForSearch1(): Promise<void> {
  // >SEPARATOR search filterOnly
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        filters: 'actor:Scarlett Johansson',
      },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOr
export async function snippetForSearch2(): Promise<void> {
  // >SEPARATOR search filterOr
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        filters: 'actor:Tom Cruise OR actor:Scarlett Johansson',
      },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterNot
export async function snippetForSearch3(): Promise<void> {
  // >SEPARATOR search filterNot
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        filters: 'NOT actor:Nicolas Cage',
      },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacets
export async function snippetForSearch5(): Promise<void> {
  // >SEPARATOR search retrieveFacets
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        facets: ['author', 'genre'],
      },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacetsWildcard
export async function snippetForSearch6(): Promise<void> {
  // >SEPARATOR search retrieveFacetsWildcard
  // Initialize the client
  const client = liteClient('YOUR_APP_ID', 'YOUR_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      { indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['*'] },
    ],
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}
