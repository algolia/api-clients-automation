// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
/* eslint no-console: ["error", { allow: ["log"] }] */

// >IMPORT
import { searchClient } from '@algolia/client-search';
// IMPORT<

// Snippet for the addApiKey method.
//
// addApiKey
export async function snippetForAddApiKey(): Promise<void> {
  // >SEPARATOR addApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.addApiKey({
    acl: ['search', 'addObject'],
    description: 'my new api key',
    validity: 300,
    maxQueriesPerIPPerHour: 100,
    maxHitsPerQuery: 20,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the addOrUpdateObject method.
//
// addOrUpdateObject
export async function snippetForAddOrUpdateObject(): Promise<void> {
  // >SEPARATOR addOrUpdateObject default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.addOrUpdateObject({
    indexName: 'indexName',
    objectID: 'uniqueID',
    body: { key: 'value' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the appendSource method.
//
// appendSource
export async function snippetForAppendSource(): Promise<void> {
  // >SEPARATOR appendSource default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.appendSource({ source: 'theSource', description: 'theDescription' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the assignUserId method.
//
// assignUserId
export async function snippetForAssignUserId(): Promise<void> {
  // >SEPARATOR assignUserId default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.assignUserId({
    xAlgoliaUserID: 'userID',
    assignUserIdParams: { cluster: 'theCluster' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// addObject
export async function snippetForBatch(): Promise<void> {
  // >SEPARATOR batch addObject
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: {
      requests: [
        { action: 'addObject', body: { key: 'bar', foo: '1' } },
        { action: 'addObject', body: { key: 'baz', foo: '2' } },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// clear
export async function snippetForBatch1(): Promise<void> {
  // >SEPARATOR batch clear
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'clear', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// delete
export async function snippetForBatch2(): Promise<void> {
  // >SEPARATOR batch delete
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'delete', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// deleteObject
export async function snippetForBatch3(): Promise<void> {
  // >SEPARATOR batch deleteObject
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'deleteObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// partialUpdateObject
export async function snippetForBatch4(): Promise<void> {
  // >SEPARATOR batch partialUpdateObject
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'partialUpdateObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// partialUpdateObjectNoCreate
export async function snippetForBatch5(): Promise<void> {
  // >SEPARATOR batch partialUpdateObjectNoCreate
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'partialUpdateObjectNoCreate', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batch method.
//
// updateObject
export async function snippetForBatch6(): Promise<void> {
  // >SEPARATOR batch updateObject
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batch({
    indexName: '<YOUR_INDEX_NAME>',
    batchWriteParams: { requests: [{ action: 'updateObject', body: { key: 'value' } }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchAssignUserIds method.
//
// batchAssignUserIds
export async function snippetForBatchAssignUserIds(): Promise<void> {
  // >SEPARATOR batchAssignUserIds default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchAssignUserIds({
    xAlgoliaUserID: 'userID',
    batchAssignUserIdsParams: { cluster: 'theCluster', users: ['user1', 'user2'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// replace
export async function snippetForBatchDictionaryEntries(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries replace
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'plurals',
    batchDictionaryEntriesParams: {
      clearExistingDictionaryEntries: true,
      requests: [
        {
          action: 'addEntry',
          body: {
            objectID: '1',
            language: 'en',
            word: 'fancy',
            words: ['believe', 'algolia'],
            decomposition: ['trust', 'algolia'],
            state: 'enabled',
          },
        },
      ],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// delete
export async function snippetForBatchDictionaryEntries1(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries delete
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'plurals',
    batchDictionaryEntriesParams: {
      clearExistingDictionaryEntries: true,
      requests: [{ action: 'deleteEntry', body: { objectID: '1' } }],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the batchDictionaryEntries method.
//
// append
export async function snippetForBatchDictionaryEntries2(): Promise<void> {
  // >SEPARATOR batchDictionaryEntries append
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.batchDictionaryEntries({
    dictionaryName: 'stopwords',
    batchDictionaryEntriesParams: {
      requests: [{ action: 'addEntry', body: { objectID: '1', language: 'en', additional: 'try me' } }],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the browse method.
//
// browse with minimal parameters
export async function snippetForBrowse(): Promise<void> {
  // >SEPARATOR browse default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.browse({ indexName: 'cts_e2e_browse' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearObjects method.
//
// clearObjects
export async function snippetForClearObjects(): Promise<void> {
  // >SEPARATOR clearObjects default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearObjects({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearRules method.
//
// clearRules
export async function snippetForClearRules(): Promise<void> {
  // >SEPARATOR clearRules default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearRules({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the clearSynonyms method.
//
// clearSynonyms
export async function snippetForClearSynonyms(): Promise<void> {
  // >SEPARATOR clearSynonyms default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.clearSynonyms({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteApiKey method.
//
// deleteApiKey
export async function snippetForDeleteApiKey(): Promise<void> {
  // >SEPARATOR deleteApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteApiKey({ key: 'myTestApiKey' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteBy method.
//
// deleteBy
export async function snippetForDeleteBy(): Promise<void> {
  // >SEPARATOR deleteBy default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteBy({ indexName: 'theIndexName', deleteByParams: { filters: 'brand:brandName' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteIndex method.
//
// deleteIndex
export async function snippetForDeleteIndex(): Promise<void> {
  // >SEPARATOR deleteIndex default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteIndex({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteObject method.
//
// deleteObject
export async function snippetForDeleteObject(): Promise<void> {
  // >SEPARATOR deleteObject default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteObject({ indexName: '<YOUR_INDEX_NAME>', objectID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteObjects method.
//
// call deleteObjects without error
export async function snippetForDeleteObjects(): Promise<void> {
  // >SEPARATOR deleteObjects default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteObjects({ indexName: 'cts_e2e_deleteObjects_javascript', objectIDs: ['1', '2'] });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteRule method.
//
// delete rule simple case
export async function snippetForDeleteRule(): Promise<void> {
  // >SEPARATOR deleteRule default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteRule({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteSource method.
//
// deleteSource
export async function snippetForDeleteSource(): Promise<void> {
  // >SEPARATOR deleteSource default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteSource({ source: 'theSource' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteSynonym method.
//
// deleteSynonym
export async function snippetForDeleteSynonym(): Promise<void> {
  // >SEPARATOR deleteSynonym default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.deleteSynonym({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// generate secured api key basic
export function snippetForGenerateSecuredApiKey(): void {
  // >SEPARATOR generateSecuredApiKey generate secured api key basic
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: { validUntil: 2524604400, restrictIndices: ['Movies'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the generateSecuredApiKey method.
//
// generate secured api key with searchParams
export function snippetForGenerateSecuredApiKey1(): void {
  // >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = client.generateSecuredApiKey({
    parentApiKey: '2640659426d5107b6e47d75db9cbaef8',
    restrictions: {
      validUntil: 2524604400,
      restrictIndices: ['Movies', 'cts_e2e_settings'],
      restrictSources: '192.168.1.0/24',
      filters: 'category:Book OR category:Ebook AND _tags:published',
      userToken: 'user123',
      searchParams: {
        query: 'batman',
        typoTolerance: 'strict',
        aroundRadius: 'all',
        mode: 'neuralSearch',
        hitsPerPage: 10,
        optionalWords: ['one', 'two'],
      },
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getApiKey method.
//
// getApiKey
export async function snippetForGetApiKey(): Promise<void> {
  // >SEPARATOR getApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getApiKey({ key: 'myTestApiKey' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getAppTask method.
//
// getAppTask
export async function snippetForGetAppTask(): Promise<void> {
  // >SEPARATOR getAppTask default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getAppTask({ taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getDictionaryLanguages method.
//
// get getDictionaryLanguages
export async function snippetForGetDictionaryLanguages(): Promise<void> {
  // >SEPARATOR getDictionaryLanguages default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getDictionaryLanguages();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getDictionarySettings method.
//
// get getDictionarySettings results
export async function snippetForGetDictionarySettings(): Promise<void> {
  // >SEPARATOR getDictionarySettings default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getDictionarySettings();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getLogs method.
//
// getLogs with minimal parameters
export async function snippetForGetLogs(): Promise<void> {
  // >SEPARATOR getLogs default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getLogs();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getObject method.
//
// getObject
export async function snippetForGetObject(): Promise<void> {
  // >SEPARATOR getObject default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToRetrieve: ['attr1', 'attr2'],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getObjects method.
//
// getObjects
export async function snippetForGetObjects(): Promise<void> {
  // >SEPARATOR getObjects default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getObjects({
    requests: [{ attributesToRetrieve: ['attr1', 'attr2'], objectID: 'uniqueID', indexName: 'theIndexName' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getRule method.
//
// getRule
export async function snippetForGetRule(): Promise<void> {
  // >SEPARATOR getRule default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getRule({ indexName: 'cts_e2e_browse', objectID: 'qr-1725004648916' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSettings method.
//
// getSettings
export async function snippetForGetSettings(): Promise<void> {
  // >SEPARATOR getSettings default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSettings({ indexName: 'cts_e2e_settings' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSources method.
//
// getSources
export async function snippetForGetSources(): Promise<void> {
  // >SEPARATOR getSources default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSources();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getSynonym method.
//
// getSynonym
export async function snippetForGetSynonym(): Promise<void> {
  // >SEPARATOR getSynonym default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getSynonym({ indexName: 'indexName', objectID: 'id1' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTask method.
//
// getTask
export async function snippetForGetTask(): Promise<void> {
  // >SEPARATOR getTask default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTask({ indexName: 'theIndexName', taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getTopUserIds method.
//
// getTopUserIds
export async function snippetForGetTopUserIds(): Promise<void> {
  // >SEPARATOR getTopUserIds default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getTopUserIds();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getUserId method.
//
// getUserId
export async function snippetForGetUserId(): Promise<void> {
  // >SEPARATOR getUserId default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.getUserId({ userID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the hasPendingMappings method.
//
// hasPendingMappings with minimal parameters
export async function snippetForHasPendingMappings(): Promise<void> {
  // >SEPARATOR hasPendingMappings default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.hasPendingMappings();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexExists
export async function snippetForIndexExists(): Promise<void> {
  // >SEPARATOR indexExists indexExists
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsYES' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexNotExists
export async function snippetForIndexExists1(): Promise<void> {
  // >SEPARATOR indexExists indexNotExists
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsNO' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the indexExists method.
//
// indexExistsWithError
export async function snippetForIndexExists2(): Promise<void> {
  // >SEPARATOR indexExists indexExistsWithError
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.indexExists({ indexName: 'indexExistsERROR' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listApiKeys method.
//
// listApiKeys
export async function snippetForListApiKeys(): Promise<void> {
  // >SEPARATOR listApiKeys default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listApiKeys();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listClusters method.
//
// listClusters
export async function snippetForListClusters(): Promise<void> {
  // >SEPARATOR listClusters default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listClusters();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listIndices method.
//
// listIndices with minimal parameters
export async function snippetForListIndices(): Promise<void> {
  // >SEPARATOR listIndices default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listIndices();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the listUserIds method.
//
// listUserIds with minimal parameters
export async function snippetForListUserIds(): Promise<void> {
  // >SEPARATOR listUserIds default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.listUserIds();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the multipleBatch method.
//
// multipleBatch
export async function snippetForMultipleBatch(): Promise<void> {
  // >SEPARATOR multipleBatch default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.multipleBatch({
    requests: [{ action: 'addObject', body: { key: 'value' }, indexName: 'theIndexName' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// scopes
export async function snippetForOperationIndex(): Promise<void> {
  // >SEPARATOR operationIndex scopes
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'move', destination: '<DESTINATION_INDEX_NAME>', scope: ['rules', 'settings'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// copy
export async function snippetForOperationIndex1(): Promise<void> {
  // >SEPARATOR operationIndex copy
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'copy', destination: '<DESTINATION_INDEX_NAME>' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the operationIndex method.
//
// move
export async function snippetForOperationIndex2(): Promise<void> {
  // >SEPARATOR operationIndex move
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.operationIndex({
    indexName: '<SOURCE_INDEX_NAME>',
    operationIndexParams: { operation: 'move', destination: '<DESTINATION_INDEX_NAME>' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObject method.
//
// Partial update with a new value for a string attribute
export async function snippetForPartialUpdateObject(): Promise<void> {
  // >SEPARATOR partialUpdateObject default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObject({
    indexName: 'theIndexName',
    objectID: 'uniqueID',
    attributesToUpdate: { attributeId: 'new value' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObjects method.
//
// call partialUpdateObjects with createIfNotExists=true
export async function snippetForPartialUpdateObjects(): Promise<void> {
  // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObjects({
    indexName: 'cts_e2e_partialUpdateObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
    createIfNotExists: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the partialUpdateObjects method.
//
// call partialUpdateObjects with createIfNotExists=false
export async function snippetForPartialUpdateObjects1(): Promise<void> {
  // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.partialUpdateObjects({
    indexName: 'cts_e2e_partialUpdateObjects_javascript',
    objects: [
      { objectID: '3', name: 'Cyril' },
      { objectID: '4', name: 'David' },
    ],
    createIfNotExists: false,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the removeUserId method.
//
// removeUserId
export async function snippetForRemoveUserId(): Promise<void> {
  // >SEPARATOR removeUserId default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.removeUserId({ userID: 'uniqueID' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceAllObjects method.
//
// call replaceAllObjects without error
export async function snippetForReplaceAllObjects(): Promise<void> {
  // >SEPARATOR replaceAllObjects default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceAllObjects({
    indexName: 'cts_e2e_replace_all_objects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
      { objectID: '3', name: 'Cyril' },
      { objectID: '4', name: 'David' },
      { objectID: '5', name: 'Eva' },
      { objectID: '6', name: 'Fiona' },
      { objectID: '7', name: 'Gael' },
      { objectID: '8', name: 'Hugo' },
      { objectID: '9', name: 'Igor' },
      { objectID: '10', name: 'Julia' },
    ],
    batchSize: 3,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the replaceSources method.
//
// replaceSources
export async function snippetForReplaceSources(): Promise<void> {
  // >SEPARATOR replaceSources default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.replaceSources({ source: [{ source: 'theSource', description: 'theDescription' }] });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the restoreApiKey method.
//
// restoreApiKey
export async function snippetForRestoreApiKey(): Promise<void> {
  // >SEPARATOR restoreApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.restoreApiKey({ key: 'ALGOLIA_API_KEY' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObject method.
//
// saveObject
export async function snippetForSaveObject(): Promise<void> {
  // >SEPARATOR saveObject default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObject({ indexName: '<YOUR_INDEX_NAME>', body: { objectID: 'id', test: 'val' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// call saveObjects without error
export async function snippetForSaveObjects(): Promise<void> {
  // >SEPARATOR saveObjects call saveObjects without error
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'cts_e2e_saveObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveObjects method.
//
// saveObjects should report errors
export async function snippetForSaveObjects1(): Promise<void> {
  // >SEPARATOR saveObjects saveObjects should report errors
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveObjects({
    indexName: 'cts_e2e_saveObjects_javascript',
    objects: [
      { objectID: '1', name: 'Adam' },
      { objectID: '2', name: 'Benoit' },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRule method.
//
// saveRule with minimal parameters
export async function snippetForSaveRule(): Promise<void> {
  // >SEPARATOR saveRule default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRule({
    indexName: 'indexName',
    objectID: 'id1',
    rule: { objectID: 'id1', conditions: [{ pattern: 'apple', anchoring: 'contains' }] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveRules method.
//
// saveRules with minimal parameters
export async function snippetForSaveRules(): Promise<void> {
  // >SEPARATOR saveRules default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveRules({
    indexName: '<YOUR_INDEX_NAME>',
    rules: [
      { objectID: 'a-rule-id', conditions: [{ pattern: 'smartphone', anchoring: 'contains' }] },
      { objectID: 'a-second-rule-id', conditions: [{ pattern: 'apple', anchoring: 'contains' }] },
    ],
    forwardToReplicas: false,
    clearExistingRules: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveSynonym method.
//
// saveSynonym
export async function snippetForSaveSynonym(): Promise<void> {
  // >SEPARATOR saveSynonym default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveSynonym({
    indexName: 'indexName',
    objectID: 'id1',
    synonymHit: { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
    forwardToReplicas: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the saveSynonyms method.
//
// saveSynonyms
export async function snippetForSaveSynonyms(): Promise<void> {
  // >SEPARATOR saveSynonyms default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.saveSynonyms({
    indexName: '<YOUR_INDEX_NAME>',
    synonymHit: [
      { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
      { objectID: 'id2', type: 'onewaysynonym', input: 'iphone', synonyms: ['ephone', 'aphone', 'yphone'] },
    ],
    forwardToReplicas: true,
    replaceExistingSynonyms: true,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// withHitsPerPage
export async function snippetForSearch(): Promise<void> {
  // >SEPARATOR search withHitsPerPage
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', hitsPerPage: 50 }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOnly
export async function snippetForSearch1(): Promise<void> {
  // >SEPARATOR search filterOnly
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'actor:Scarlett Johansson' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterOr
export async function snippetForSearch2(): Promise<void> {
  // >SEPARATOR search filterOr
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [
      {
        indexName: '<YOUR_INDEX_NAME>',
        query: '<YOUR_QUERY>',
        filters: 'actor:Tom Cruise OR actor:Scarlett Johansson',
      },
    ],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// filterNot
export async function snippetForSearch3(): Promise<void> {
  // >SEPARATOR search filterNot
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'NOT actor:Nicolas Cage' }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacets
export async function snippetForSearch4(): Promise<void> {
  // >SEPARATOR search retrieveFacets
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['author', 'genre'] }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the search method.
//
// retrieveFacetsWildcard
export async function snippetForSearch5(): Promise<void> {
  // >SEPARATOR search retrieveFacetsWildcard
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.search({
    requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['*'] }],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchDictionaryEntries method.
//
// get searchDictionaryEntries results with minimal parameters
export async function snippetForSearchDictionaryEntries(): Promise<void> {
  // >SEPARATOR searchDictionaryEntries default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchDictionaryEntries({
    dictionaryName: 'stopwords',
    searchDictionaryEntriesParams: { query: 'about' },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchForFacetValues method.
//
// get searchForFacetValues results with minimal parameters
export async function snippetForSearchForFacetValues(): Promise<void> {
  // >SEPARATOR searchForFacetValues default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchForFacetValues({ indexName: 'indexName', facetName: 'facetName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchRules method.
//
// searchRules
export async function snippetForSearchRules(): Promise<void> {
  // >SEPARATOR searchRules default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchRules({ indexName: 'cts_e2e_browse', searchRulesParams: { query: 'zorro' } });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSingleIndex method.
//
// search with minimal parameters
export async function snippetForSearchSingleIndex(): Promise<void> {
  // >SEPARATOR searchSingleIndex default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSingleIndex({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchSynonyms method.
//
// searchSynonyms with minimal parameters
export async function snippetForSearchSynonyms(): Promise<void> {
  // >SEPARATOR searchSynonyms default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchSynonyms({ indexName: 'indexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the searchUserIds method.
//
// searchUserIds
export async function snippetForSearchUserIds(): Promise<void> {
  // >SEPARATOR searchUserIds default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.searchUserIds({
    query: 'test',
    clusterName: 'theClusterName',
    page: 5,
    hitsPerPage: 10,
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}

// Snippet for the setDictionarySettings method.
//
// get setDictionarySettings results with minimal parameters
export async function snippetForSetDictionarySettings(): Promise<void> {
  // >SEPARATOR setDictionarySettings default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setDictionarySettings({
    disableStandardEntries: { plurals: { fr: false, en: false, ru: true } },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setSettings method.
//
// setSettingsAttributesForFaceting
export async function snippetForSetSettings(): Promise<void> {
  // >SEPARATOR setSettings default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.setSettings({
    indexName: '<YOUR_INDEX_NAME>',
    indexSettings: { attributesForFaceting: ['actor', 'filterOnly(category)', 'searchable(publisher)'] },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the updateApiKey method.
//
// updateApiKey
export async function snippetForUpdateApiKey(): Promise<void> {
  // >SEPARATOR updateApiKey default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.updateApiKey({
    key: 'ALGOLIA_API_KEY',
    apiKey: { acl: ['search', 'addObject'], validity: 300, maxQueriesPerIPPerHour: 100, maxHitsPerQuery: 20 },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key helper - add
export async function snippetForWaitForApiKey(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key helper - add
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({ key: 'api-key-add-operation-test-javascript', operation: 'add' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key - update
export async function snippetForWaitForApiKey1(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key - update
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({
    key: 'api-key-update-operation-test-javascript',
    operation: 'update',
    apiKey: {
      description: 'my updated api key',
      acl: ['search', 'addObject', 'deleteObject'],
      indexes: ['Movies', 'Books'],
      referers: ['*google.com', '*algolia.com'],
      validity: 305,
      maxQueriesPerIPPerHour: 95,
      maxHitsPerQuery: 20,
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForApiKey method.
//
// wait for api key - delete
export async function snippetForWaitForApiKey2(): Promise<void> {
  // >SEPARATOR waitForApiKey wait for api key - delete
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForApiKey({ key: 'api-key-delete-operation-test-javascript', operation: 'delete' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForAppTask method.
//
// wait for an application-level task
export async function snippetForWaitForAppTask(): Promise<void> {
  // >SEPARATOR waitForAppTask default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForAppTask({ taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the waitForTask method.
//
// wait for task
export async function snippetForWaitForTask(): Promise<void> {
  // >SEPARATOR waitForTask default
  // Initialize the client
  const client = searchClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

  // Call the API
  const response = await client.waitForTask({ indexName: 'wait-task-javascript', taskID: 123 });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}
