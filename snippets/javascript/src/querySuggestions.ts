// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
/* eslint no-console: ["error", { allow: ["log"] }] */

// >IMPORT
import { querySuggestionsClient } from '@algolia/client-query-suggestions';
// IMPORT<

// Snippet for the createConfig method.
//
// createConfig
export async function snippetForCreateConfig(): Promise<void> {
  // >SEPARATOR createConfig default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.createConfig({
    indexName: 'theIndexName',
    sourceIndices: [
      { indexName: 'testIndex', facets: [{ attribute: 'test' }], generate: [['facetA', 'facetB'], ['facetC']] },
    ],
    languages: ['french'],
    exclude: ['test'],
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteConfig method.
//
// deleteConfig
export async function snippetForDeleteConfig(): Promise<void> {
  // >SEPARATOR deleteConfig default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.deleteConfig({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getAllConfigs method.
//
// getAllConfigs
export async function snippetForGetAllConfigs(): Promise<void> {
  // >SEPARATOR getAllConfigs default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getAllConfigs();

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getConfig method.
//
// Retrieve QS config e2e
export async function snippetForGetConfig(): Promise<void> {
  // >SEPARATOR getConfig default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getConfig({ indexName: 'cts_e2e_browse_query_suggestions' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getConfigStatus method.
//
// getConfigStatus
export async function snippetForGetConfigStatus(): Promise<void> {
  // >SEPARATOR getConfigStatus default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getConfigStatus({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getLogFile method.
//
// getLogFile
export async function snippetForGetLogFile(): Promise<void> {
  // >SEPARATOR getLogFile default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getLogFile({ indexName: 'theIndexName' });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setClientApiKey method.
//
// switch API key
export function snippetForSetClientApiKey(): void {
  // >SEPARATOR setClientApiKey default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  client.setClientApiKey({ apiKey: 'updated-api-key' });

  // >LOG
  // SEPARATOR<
}

// Snippet for the updateConfig method.
//
// updateConfig
export async function snippetForUpdateConfig(): Promise<void> {
  // >SEPARATOR updateConfig default
  // Initialize the client
  const client = querySuggestionsClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.updateConfig({
    indexName: 'theIndexName',
    configuration: {
      sourceIndices: [
        { indexName: 'testIndex', facets: [{ attribute: 'test' }], generate: [['facetA', 'facetB'], ['facetC']] },
      ],
      languages: ['french'],
      exclude: ['test'],
    },
  });

  // >LOG
  // use typed response
  console.log(response);
  // SEPARATOR<
}
