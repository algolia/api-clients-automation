// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
/* eslint no-console: ["error", { allow: ["log"] }] */

// >IMPORT
import { personalizationClient } from '@algolia/client-personalization';
// IMPORT<

// Snippet for the customDelete method.
//
// allow del method for a custom path with minimal parameters
export async function snippetForCustomDelete(): Promise<void> {
  // >SEPARATOR customDelete default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customDelete({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customGet method.
//
// allow get method for a custom path with minimal parameters
export async function snippetForCustomGet(): Promise<void> {
  // >SEPARATOR customGet default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customGet({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPost method.
//
// allow post method for a custom path with minimal parameters
export async function snippetForCustomPost(): Promise<void> {
  // >SEPARATOR customPost default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customPost({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the customPut method.
//
// allow put method for a custom path with minimal parameters
export async function snippetForCustomPut(): Promise<void> {
  // >SEPARATOR customPut default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.customPut({ path: 'test/minimal' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the deleteUserProfile method.
//
// delete deleteUserProfile
export async function snippetForDeleteUserProfile(): Promise<void> {
  // >SEPARATOR deleteUserProfile default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.deleteUserProfile({ userToken: 'UserToken' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getPersonalizationStrategy method.
//
// get getPersonalizationStrategy
export async function snippetForGetPersonalizationStrategy(): Promise<void> {
  // >SEPARATOR getPersonalizationStrategy default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getPersonalizationStrategy();

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the getUserTokenProfile method.
//
// get getUserTokenProfile
export async function snippetForGetUserTokenProfile(): Promise<void> {
  // >SEPARATOR getUserTokenProfile default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.getUserTokenProfile({ userToken: 'UserToken' });

  // use typed response
  console.log(response);
  // SEPARATOR<
}

// Snippet for the setPersonalizationStrategy method.
//
// set setPersonalizationStrategy
export async function snippetForSetPersonalizationStrategy(): Promise<void> {
  // >SEPARATOR setPersonalizationStrategy default
  // Initialize the client
  const client = personalizationClient('YOUR_APP_ID', 'YOUR_API_KEY', 'YOUR_APP_ID_REGION');

  // Call the API
  const response = await client.setPersonalizationStrategy({
    eventScoring: [{ score: 42, eventName: 'Algolia', eventType: 'click' }],
    facetScoring: [{ score: 42, facetName: 'Event' }],
    personalizationImpact: 42,
  });

  // use typed response
  console.log(response);
  // SEPARATOR<
}
