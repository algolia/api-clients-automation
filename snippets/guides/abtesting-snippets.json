{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;"
    },
    "addABTests": {
      "default": "var response = await client.AddABTestsAsync(\n  new AddABTestsRequest\n  {\n    EndAt = \"2022-12-31T00:00:00.000Z\",\n    Name = \"myABTest\",\n    Variants = new List<AddABTestsVariant>\n    {\n      new AddABTestsVariant(\n        new AbTestsVariant { Index = \"AB_TEST_1\", TrafficPercentage = 30, }\n      ),\n      new AddABTestsVariant(new AbTestsVariant { Index = \"AB_TEST_2\", TrafficPercentage = 50, })\n    },\n  }\n);"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");"
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");"
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");"
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");"
    },
    "deleteABTest": {
      "default": "var response = await client.DeleteABTestAsync(42);"
    },
    "getABTest": {
      "default": "var response = await client.GetABTestAsync(42);"
    },
    "listABTests": {
      "default": "var response = await client.ListABTestsAsync();"
    },
    "stopABTest": {
      "default": "var response = await client.StopABTestAsync(42);"
    },
    "init": {
      "default": "var client = new AbtestingClient("
    },
    "waitForAppTask": {
      "default": "await client.WaitForAppTaskAsync(response.TaskID);"
    },
    "waitForApiKey": {
      "add": "await client.WaitForApiKeyAsync(ApiKeyOperation.Add, response.Key);",
      "update": "await client.WaitForApiKeyAsync(ApiKeyOperation.Update, response.Key, {\n        Acl = new List<Acl> { Enum.Parse<Acl>(\"Search\"), Enum.Parse<Acl>(\"AddObject\") },\n        Validity = 300,\n        MaxQueriesPerIPPerHour = 100,\n        MaxHitsPerQuery = 20,\n      });",
      "delete": "await client.WaitForApiKeyAsync(ApiKeyOperation.Delete, response.Key);"
    },
    "waitForTask": {
      "default": "await client.WaitForTaskAsync(\"<<indexName>>\", response.TaskID);"
    }
  },
  "dart": {
    "waitForAppTask": {
      "default": "await client.waitAppTask(response.taskID);"
    },
    "waitForApiKey": {
      "add": "",
      "update": "",
      "delete": ""
    },
    "waitForTask": {
      "default": "await client.waitTask('<<indexName>>', response.taskID);"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/abtesting\""
    },
    "addABTests": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.AddABTests(client.NewApiAddABTestsRequest(\n\n  abtesting.NewEmptyAddABTestsRequest().SetEndAt(\"2022-12-31T00:00:00.000Z\").SetName(\"myABTest\").SetVariants(\n    []abtesting.AddABTestsVariant{*abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_1\").SetTrafficPercentage(30)), *abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_2\").SetTrafficPercentage(50))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "customDelete": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "customGet": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "customPost": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "customPut": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "deleteABTest": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.DeleteABTest(client.NewApiDeleteABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "getABTest": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.GetABTest(client.NewApiGetABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "listABTests": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.ListABTests(client.NewApiListABTestsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "stopABTest": {
      "default": "// Initialize the client with your application region, eg. abtesting.YOUR_APP_ID_REGION\nclient, err := abtesting.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}\n\n// Call the API\nresponse, err := client.StopABTest(client.NewApiStopABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)\n"
    },
    "waitForAppTask": {
      "default": "taskResponse, err := searchClient.WaitForAppTask(response.TaskID, nil, nil, nil)\nif err != nil {\n  panic(err)\n}"
    },
    "waitForApiKey": {
      "add": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_ADD, response.Key, nil)\nif err != nil {\n  panic(err)\n}",
      "update": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_UPDATE, response.Key, search.NewEmptyApiKey().SetAcl([]search.Acl{search.Acl(\"search\"), search.Acl(\"addObject\")}).SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20))\nif err != nil {\n  panic(err)\n}",
      "delete": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_DELETE, response.Key, nil)\nif err != nil {\n  panic(err)\n}"
    },
    "waitForTask": {
      "default": "taskResponse, err := searchClient.WaitForTask(\"<<indexName>>\", response.TaskID, nil, nil, nil)\nif err != nil {\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.AbtestingClient;\nimport com.algolia.model.abtesting.*;"
    },
    "addABTests": {
      "default": "client.addABTests(\n  new AddABTestsRequest()\n    .setEndAt(\"2022-12-31T00:00:00.000Z\")\n    .setName(\"myABTest\")\n    .setVariants(\n      List.of(\n        new AbTestsVariant().setIndex(\"AB_TEST_1\").setTrafficPercentage(30),\n        new AbTestsVariant().setIndex(\"AB_TEST_2\").setTrafficPercentage(50)\n      )\n    )\n);"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");"
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");"
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");"
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");"
    },
    "deleteABTest": {
      "default": "client.deleteABTest(42);"
    },
    "getABTest": {
      "default": "client.getABTest(42);"
    },
    "listABTests": {
      "default": "client.listABTests();"
    },
    "stopABTest": {
      "default": "client.stopABTest(42);"
    },
    "init": {
      "default": "AbtestingClient client = new AbtestingClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", \"YOUR_APP_ID_REGION\");"
    },
    "waitForAppTask": {
      "default": "client.waitForAppTask(response.getTaskID());"
    },
    "waitForApiKey": {
      "add": "client.waitForApiKey(ApiKeyOperation.ADD, response.Key, null)",
      "update": "client.waitForApiKey(ApiKeyOperation.UPDATE, response.Key, new ApiKey()\n        .setAcl(List.of(Acl.SEARCH, Acl.ADD_OBJECT))\n        .setValidity(300)\n        .setMaxQueriesPerIPPerHour(100)\n        .setMaxHitsPerQuery(20))",
      "delete": "client.waitForApiKey(ApiKeyOperation.DELETE, response.Key, null)"
    },
    "waitForTask": {
      "default": "client.waitForTask(\"<<indexName>>\", response.getTaskID());"
    }
  },
  "javascript": {
    "import": {
      "default": "import { abtestingClient } from '@algolia/client-abtesting';"
    },
    "addABTests": {
      "default": "const response = await client.addABTests({\n  endAt: '2022-12-31T00:00:00.000Z',\n  name: 'myABTest',\n  variants: [\n    { index: 'AB_TEST_1', trafficPercentage: 30 },\n    { index: 'AB_TEST_2', trafficPercentage: 50 },\n  ],\n});\n\n// use typed response\nconsole.log(response);"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "deleteABTest": {
      "default": "const response = await client.deleteABTest({ id: 42 });\n\n// use typed response\nconsole.log(response);"
    },
    "getABTest": {
      "default": "const response = await client.getABTest({ id: 42 });\n\n// use typed response\nconsole.log(response);"
    },
    "listABTests": {
      "default": "const response = await client.listABTests();\n\n// use typed response\nconsole.log(response);"
    },
    "stopABTest": {
      "default": "const response = await client.stopABTest({ id: 42 });\n\n// use typed response\nconsole.log(response);"
    },
    "init": {
      "default": "const client = abtestingClient("
    },
    "waitForAppTask": {
      "default": "await client.waitForAppTask({ taskID: response.taskID });"
    },
    "waitForApiKey": {
      "add": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key });",
      "update": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key, apiKey: {\n        acl: ['search', 'addObject'],\n        validity: 300,\n        maxQueriesPerIPPerHour: 100,\n        maxHitsPerQuery: 20,\n      }});",
      "delete": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key });"
    },
    "waitForTask": {
      "default": "await client.waitForTask({ indexName: '<<indexName>>', taskID: response.taskID });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.AbtestingClient"
    },
    "addABTests": {
      "default": "var response = client.addABTests(\n  addABTestsRequest = AddABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = listOf(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30,\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50,\n      ),\n    ),\n  ),\n)\n\n// Use the response\nprintln(response)"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "deleteABTest": {
      "default": "var response = client.deleteABTest(\n  id = 42,\n)\n\n// Use the response\nprintln(response)"
    },
    "getABTest": {
      "default": "var response = client.getABTest(\n  id = 42,\n)\n\n// Use the response\nprintln(response)"
    },
    "listABTests": {
      "default": "var response = client.listABTests()\n\n// Use the response\nprintln(response)"
    },
    "stopABTest": {
      "default": "var response = client.stopABTest(\n  id = 42,\n)\n\n// Use the response\nprintln(response)"
    },
    "init": {
      "default": "val client = AbtestingClient(appId = \"YOUR_APP_ID\", apiKey = \"YOUR_API_KEY\", region = \"YOUR_APP_ID_REGION\")"
    },
    "waitForAppTask": {
      "default": "client.waitAppTask(response.taskID)"
    },
    "waitForApiKey": {
      "add": "",
      "update": "",
      "delete": ""
    },
    "waitForTask": {
      "default": "client.waitTask(\"<<indexName>>\", response.taskID)"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\AbtestingClient;"
    },
    "addABTests": {
      "default": "$response = $client->addABTests(\n    ['endAt' => '2022-12-31T00:00:00.000Z',\n        'name' => 'myABTest',\n        'variants' => [\n            ['index' => 'AB_TEST_1',\n                'trafficPercentage' => 30,\n            ],\n\n            ['index' => 'AB_TEST_2',\n                'trafficPercentage' => 50,\n            ],\n        ],\n    ],\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "deleteABTest": {
      "default": "$response = $client->deleteABTest(\n    42,\n);\n\n// play with the response\nvar_dump($response);"
    },
    "getABTest": {
      "default": "$response = $client->getABTest(\n    42,\n);\n\n// play with the response\nvar_dump($response);"
    },
    "listABTests": {
      "default": "$response = $client->listABTests();\n\n// play with the response\nvar_dump($response);"
    },
    "stopABTest": {
      "default": "$response = $client->stopABTest(\n    42,\n);\n\n// play with the response\nvar_dump($response);"
    },
    "init": {
      "default": "$client = AbtestingClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');"
    },
    "waitForAppTask": {
      "default": "$client->waitForAppTask($response['taskID']);"
    },
    "waitForApiKey": {
      "add": "$client->waitForApiKey('<<operation>>', $response['key']);",
      "update": "$client->waitForApiKey('<<operation>>', $response['key'], [\n        'acl' => [\n          'search',\n          'addObject',\n        ],\n          'validity' => 300,\n          'maxQueriesPerIPPerHour' => 100,\n          'maxHitsPerQuery' => 20,\n        ]);",
      "delete": "$client->waitForApiKey('<<operation>>', $response['key']);"
    },
    "waitForTask": {
      "default": "$client->waitForTask('<<indexName>>', $response['taskID']);"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.abtesting.client import AbtestingClient"
    },
    "addABTests": {
      "default": "response = await _client.add_ab_tests(\n    add_ab_tests_request={\n        \"endAt\": \"2022-12-31T00:00:00.000Z\",\n        \"name\": \"myABTest\",\n        \"variants\": [\n            {\n                \"index\": \"AB_TEST_1\",\n                \"trafficPercentage\": 30,\n            },\n            {\n                \"index\": \"AB_TEST_2\",\n                \"trafficPercentage\": 50,\n            },\n        ],\n    },\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customDelete": {
      "default": "response = await _client.custom_delete(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customGet": {
      "default": "response = await _client.custom_get(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customPost": {
      "default": "response = await _client.custom_post(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customPut": {
      "default": "response = await _client.custom_put(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "deleteABTest": {
      "default": "response = await _client.delete_ab_test(\n    id=42,\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "getABTest": {
      "default": "response = await _client.get_ab_test(\n    id=42,\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "listABTests": {
      "default": "response = await _client.list_ab_tests()\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "stopABTest": {
      "default": "response = await _client.stop_ab_test(\n    id=42,\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "init": {
      "default": "_client = AbtestingClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\", \"YOUR_APP_ID_REGION\")"
    },
    "waitForAppTask": {
      "default": "await client.wait_for_app_task(task_id=response.task_id)"
    },
    "waitForApiKey": {
      "add": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)",
      "update": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key, api_key={\n          \"acl\": [\n              \"search\",\n              \"addObject\",\n          ],\n          \"validity\": 300,\n          \"maxQueriesPerIPPerHour\": 100,\n          \"maxHitsPerQuery\": 20,\n      })",
      "delete": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)"
    },
    "waitForTask": {
      "default": "await client.wait_for_task(index_name=\"<<indexName>>\", task_id=response.task_id)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "addABTests": {
      "default": "response = client.add_ab_tests(\n  AddABTestsRequest.new(\n    end_at: \"2022-12-31T00:00:00.000Z\",\n    name: \"myABTest\",\n    variants: [\n      AbTestsVariant.new(index: \"AB_TEST_1\", traffic_percentage: 30),\n      AbTestsVariant.new(index: \"AB_TEST_2\", traffic_percentage: 50)\n    ]\n  )\n)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "deleteABTest": {
      "default": "response = client.delete_ab_test(42)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "getABTest": {
      "default": "response = client.get_ab_test(42)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "listABTests": {
      "default": "response = client.list_ab_tests\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "stopABTest": {
      "default": "response = client.stop_ab_test(42)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "init": {
      "default": "client = Algolia::AbtestingClient.create(\"YOUR_APP_ID\", \"YOUR_API_KEY\", \"YOUR_APP_ID_REGION\")"
    },
    "waitForAppTask": {
      "default": "client.wait_for_app_task(response.task_id)"
    },
    "waitForApiKey": {
      "add": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)",
      "update": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key, api_key=ApiKey.new(\n        acl: ['search', 'addObject'],\n        validity: 300,\n        max_queries_per_ip_per_hour: 100,\n        max_hits_per_query: 20\n      ))",
      "delete": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)"
    },
    "waitForTask": {
      "default": "client.wait_for_task(\"<<indexName>>\", response.task_id)"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.AbtestingClient"
    },
    "addABTests": {
      "default": "val response = client.addABTests(\n  addABTestsRequest = AddABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = Seq(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50\n      )\n    )\n  )\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "deleteABTest": {
      "default": "val response = client.deleteABTest(\n  id = 42\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "getABTest": {
      "default": "val response = client.getABTest(\n  id = 42\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "listABTests": {
      "default": "val response = client.listABTests(\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "stopABTest": {
      "default": "val response = client.stopABTest(\n  id = 42\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "init": {
      "default": "val client = AbtestingClient(appId = \"YOUR_APP_ID\", apiKey = \"YOUR_API_KEY\", region = Option(\"YOUR_APP_ID_REGION\"))"
    },
    "waitForAppTask": {
      "default": "client.waitAppTask(response.getTaskID())"
    },
    "waitForApiKey": {
      "add": "",
      "update": "",
      "delete": ""
    },
    "waitForTask": {
      "default": "client.waitTask(\"<<indexName>>\", response.getTaskID())"
    }
  },
  "swift": {
    "import": {
      "default": "import Abtesting"
    },
    "addABTests": {
      "default": "let response = try await client.addABTests(addABTestsRequest: AddABTestsRequest(\n    name: \"myABTest\",\n    variants: [\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_1\", trafficPercentage: 30)),\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_2\", trafficPercentage: 50)),\n    ],\n    endAt: \"2022-12-31T00:00:00.000Z\"\n))"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")"
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")"
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")"
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")"
    },
    "deleteABTest": {
      "default": "let response = try await client.deleteABTest(id: 42)"
    },
    "getABTest": {
      "default": "let response = try await client.getABTest(id: 42)"
    },
    "listABTests": {
      "default": "let response = try await client.listABTests()"
    },
    "stopABTest": {
      "default": "let response = try await client.stopABTest(id: 42)"
    },
    "init": {
      "default": "let client = try AbtestingClient(appID: \"YOUR_APP_ID\", apiKey: \"YOUR_API_KEY\", region: .us)"
    },
    "waitForAppTask": {
      "default": "try await client.waitForAppTask(with: response.taskID)"
    },
    "waitForApiKey": {
      "add": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.add)",
      "update": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.update, apiKey: ApiKey(\n          acl: [Acl.search, Acl.addObject],\n          maxHitsPerQuery: 20,\n          maxQueriesPerIPPerHour: 100,\n          validity: 300\n      ))",
      "delete": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.delete)"
    },
    "waitForTask": {
      "default": "try await client.waitForTask(with: response.taskID, in: \"<<indexName>>\")"
    }
  }
}