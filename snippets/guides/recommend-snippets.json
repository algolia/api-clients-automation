{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Http;"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");"
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");"
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");"
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");"
    },
    "deleteRecommendRule": {
      "default": "var response = await client.DeleteRecommendRuleAsync(\n  \"indexName\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendRule": {
      "default": "var response = await client.GetRecommendRuleAsync(\n  \"indexName\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  \"objectID\"\n);"
    },
    "getRecommendStatus": {
      "default": "var response = await client.GetRecommendStatusAsync(\n  \"indexName\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\"),\n  12345L\n);"
    },
    "getRecommendations": {
      "default": "var response = await client.GetRecommendationsAsync(\n  new GetRecommendationsParams\n  {\n    Requests = new List<RecommendationsRequest>\n    {\n      new RecommendationsRequest(\n        new RelatedQuery\n        {\n          IndexName = \"indexName\",\n          ObjectID = \"objectID\",\n          Model = Enum.Parse<RelatedModel>(\"RelatedProducts\"),\n          Threshold = 42.1,\n        }\n      )\n    },\n  }\n);"
    },
    "searchRecommendRules": {
      "default": "var response = await client.SearchRecommendRulesAsync(\n  \"indexName\",\n  Enum.Parse<RecommendModels>(\"RelatedProducts\")\n);"
    },
    "init": {
      "default": "var client = new RecommendClient(new RecommendConfig(\"YOUR_APP_ID\", \"YOUR_API_KEY\"));"
    },
    "waitForAppTask": {
      "default": "await client.WaitForAppTaskAsync(response.TaskID);"
    },
    "waitForApiKey": {
      "default": {
        "add": "await client.WaitForApiKeyAsync(ApiKeyOperation.Add, response.Key);",
        "update": "await client.WaitForApiKeyAsync(ApiKeyOperation.Update, response.Key, {\n        Acl = new List<Acl> { Enum.Parse<Acl>(\"Search\"), Enum.Parse<Acl>(\"AddObject\") },\n        Validity = 300,\n        MaxQueriesPerIPPerHour = 100,\n        MaxHitsPerQuery = 20,\n      });",
        "delete": "await client.WaitForApiKeyAsync(ApiKeyOperation.Delete, response.Key);"
      }
    },
    "waitForTask": {
      "default": "await client.WaitForTaskAsync(\"<<indexName>>\", response.TaskID);"
    }
  },
  "dart": {
    "import": {
      "default": "import 'package:algolia_client_recommend/algolia_client_recommend.dart';"
    },
    "customDelete": {
      "default": "final response = await client.customDelete(\n  path: \"test/minimal\",\n);"
    },
    "customGet": {
      "default": "final response = await client.customGet(\n  path: \"test/minimal\",\n);"
    },
    "customPost": {
      "default": "final response = await client.customPost(\n  path: \"test/minimal\",\n);"
    },
    "customPut": {
      "default": "final response = await client.customPut(\n  path: \"test/minimal\",\n);"
    },
    "deleteRecommendRule": {
      "default": "final response = await client.deleteRecommendRule(\n  indexName: \"indexName\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendRule": {
      "default": "final response = await client.getRecommendRule(\n  indexName: \"indexName\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  objectID: \"objectID\",\n);"
    },
    "getRecommendStatus": {
      "default": "final response = await client.getRecommendStatus(\n  indexName: \"indexName\",\n  model: RecommendModels.fromJson(\"related-products\"),\n  taskID: 12345,\n);"
    },
    "getRecommendations": {
      "default": "final response = await client.getRecommendations(\n  getRecommendationsParams: GetRecommendationsParams(\n    requests: [\n      RelatedQuery(\n        indexName: \"indexName\",\n        objectID: \"objectID\",\n        model: RelatedModel.fromJson(\"related-products\"),\n        threshold: 42.1,\n      ),\n    ],\n  ),\n);"
    },
    "searchRecommendRules": {
      "default": "final response = await client.searchRecommendRules(\n  indexName: \"indexName\",\n  model: RecommendModels.fromJson(\"related-products\"),\n);"
    },
    "init": {
      "default": "final client = RecommendClient(appId: 'YOUR_APP_ID', apiKey: 'YOUR_API_KEY');"
    },
    "waitForAppTask": {
      "default": "await client.waitAppTask(response.taskID);"
    },
    "waitForApiKey": {
      "default": {
        "add": "",
        "update": "",
        "delete": ""
      }
    },
    "waitForTask": {
      "default": "await client.waitTask('<<indexName>>', response.taskID);"
    }
  },
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/recommend\""
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "deleteRecommendRule": {
      "default": "response, err := client.DeleteRecommendRule(client.NewApiDeleteRecommendRuleRequest(\n  \"indexName\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "getRecommendRule": {
      "default": "response, err := client.GetRecommendRule(client.NewApiGetRecommendRuleRequest(\n  \"indexName\", recommend.RecommendModels(\"related-products\"), \"objectID\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "getRecommendStatus": {
      "default": "response, err := client.GetRecommendStatus(client.NewApiGetRecommendStatusRequest(\n  \"indexName\", recommend.RecommendModels(\"related-products\"), 12345,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "getRecommendations": {
      "default": "response, err := client.GetRecommendations(client.NewApiGetRecommendationsRequest(\n\n  recommend.NewEmptyGetRecommendationsParams().SetRequests(\n    []recommend.RecommendationsRequest{*recommend.RelatedQueryAsRecommendationsRequest(\n      recommend.NewEmptyRelatedQuery().SetIndexName(\"indexName\").SetObjectID(\"objectID\").SetModel(recommend.RelatedModel(\"related-products\")).SetThreshold(42.1))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "searchRecommendRules": {
      "default": "response, err := client.SearchRecommendRules(client.NewApiSearchRecommendRulesRequest(\n  \"indexName\", recommend.RecommendModels(\"related-products\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}\n\n// use the model directly\nprint(response)"
    },
    "init": {
      "default": "client, err := recommend.NewClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "taskResponse, err := searchClient.WaitForAppTask(response.TaskID, nil, nil, nil)\nif err != nil {\n  panic(err)\n}"
    },
    "waitForApiKey": {
      "default": {
        "add": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_ADD, response.Key, nil)\nif err != nil {\n  panic(err)\n}",
        "update": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_UPDATE, response.Key, search.NewEmptyApiKey().SetAcl([]search.Acl{search.Acl(\"search\"), search.Acl(\"addObject\")}).SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20))\nif err != nil {\n  panic(err)\n}",
        "delete": "waitResponse, err := client.WaitForApiKey(search.API_KEY_OPERATION_DELETE, response.Key, nil)\nif err != nil {\n  panic(err)\n}"
      }
    },
    "waitForTask": {
      "default": "taskResponse, err := searchClient.WaitForTask(\"<<indexName>>\", response.TaskID, nil, nil, nil)\nif err != nil {\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.RecommendClient;\nimport com.algolia.model.recommend.*;"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");"
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");"
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");"
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");"
    },
    "deleteRecommendRule": {
      "default": "client.deleteRecommendRule(\"indexName\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendRule": {
      "default": "client.getRecommendRule(\"indexName\", RecommendModels.RELATED_PRODUCTS, \"objectID\");"
    },
    "getRecommendStatus": {
      "default": "client.getRecommendStatus(\"indexName\", RecommendModels.RELATED_PRODUCTS, 12345L);"
    },
    "getRecommendations": {
      "default": "client.getRecommendations(\n  new GetRecommendationsParams()\n    .setRequests(\n      List.of(\n        new RelatedQuery().setIndexName(\"indexName\").setObjectID(\"objectID\").setModel(RelatedModel.RELATED_PRODUCTS).setThreshold(42.1)\n      )\n    )\n);"
    },
    "searchRecommendRules": {
      "default": "client.searchRecommendRules(\"indexName\", RecommendModels.RELATED_PRODUCTS);"
    },
    "init": {
      "default": "RecommendClient client = new RecommendClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\");"
    },
    "waitForAppTask": {
      "default": "client.waitForAppTask(response.getTaskID());"
    },
    "waitForApiKey": {
      "default": {
        "add": "client.waitForApiKey(ApiKeyOperation.ADD, response.Key, null)",
        "update": "client.waitForApiKey(ApiKeyOperation.UPDATE, response.Key, new ApiKey()\n        .setAcl(List.of(Acl.SEARCH, Acl.ADD_OBJECT))\n        .setValidity(300)\n        .setMaxQueriesPerIPPerHour(100)\n        .setMaxHitsPerQuery(20))",
        "delete": "client.waitForApiKey(ApiKeyOperation.DELETE, response.Key, null)"
      }
    },
    "waitForTask": {
      "default": "client.waitForTask(\"<<indexName>>\", response.getTaskID());"
    }
  },
  "javascript": {
    "import": {
      "default": "import { recommendClient } from '@algolia/recommend';"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });\n\n// use typed response\nconsole.log(response);"
    },
    "deleteRecommendRule": {
      "default": "const response = await client.deleteRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});\n\n// use typed response\nconsole.log(response);"
    },
    "getRecommendRule": {
      "default": "const response = await client.getRecommendRule({\n  indexName: 'indexName',\n  model: 'related-products',\n  objectID: 'objectID',\n});\n\n// use typed response\nconsole.log(response);"
    },
    "getRecommendStatus": {
      "default": "const response = await client.getRecommendStatus({\n  indexName: 'indexName',\n  model: 'related-products',\n  taskID: 12345,\n});\n\n// use typed response\nconsole.log(response);"
    },
    "getRecommendations": {
      "default": "const response = await client.getRecommendations({\n  requests: [\n    {\n      indexName: 'indexName',\n      objectID: 'objectID',\n      model: 'related-products',\n      threshold: 42.1,\n    },\n  ],\n});\n\n// use typed response\nconsole.log(response);"
    },
    "searchRecommendRules": {
      "default": "const response = await client.searchRecommendRules({\n  indexName: 'indexName',\n  model: 'related-products',\n});\n\n// use typed response\nconsole.log(response);"
    },
    "init": {
      "default": "const client = recommendClient('YOUR_APP_ID', 'YOUR_API_KEY');"
    },
    "waitForAppTask": {
      "default": "await client.waitForAppTask({ taskID: response.taskID });"
    },
    "waitForApiKey": {
      "default": {
        "add": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key });",
        "update": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key, apiKey: {\n        acl: ['search', 'addObject'],\n        validity: 300,\n        maxQueriesPerIPPerHour: 100,\n        maxHitsPerQuery: 20,\n      }});",
        "delete": "await client.waitForApiKey({ operation: \"<<operation>>\", key: response.key });"
      }
    },
    "waitForTask": {
      "default": "await client.waitForTask({ indexName: '<<indexName>>', taskID: response.taskID });"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.RecommendClient"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)\n\n// Use the response\nprintln(response)"
    },
    "deleteRecommendRule": {
      "default": "var response = client.deleteRecommendRule(\n  indexName = \"indexName\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)\n\n// Use the response\nprintln(response)"
    },
    "getRecommendRule": {
      "default": "var response = client.getRecommendRule(\n  indexName = \"indexName\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  objectID = \"objectID\",\n)\n\n// Use the response\nprintln(response)"
    },
    "getRecommendStatus": {
      "default": "var response = client.getRecommendStatus(\n  indexName = \"indexName\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n  taskID = 12345L,\n)\n\n// Use the response\nprintln(response)"
    },
    "getRecommendations": {
      "default": "var response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = listOf(\n      RelatedQuery(\n        indexName = \"indexName\",\n        objectID = \"objectID\",\n        model = RelatedModel.entries.first { it.value == \"related-products\" },\n        threshold = 42.1,\n      ),\n    ),\n  ),\n)\n\n// Use the response\nprintln(response)"
    },
    "searchRecommendRules": {
      "default": "var response = client.searchRecommendRules(\n  indexName = \"indexName\",\n  model = RecommendModels.entries.first { it.value == \"related-products\" },\n)\n\n// Use the response\nprintln(response)"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"YOUR_APP_ID\", apiKey = \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "client.waitAppTask(response.taskID)"
    },
    "waitForApiKey": {
      "default": {
        "add": "",
        "update": "",
        "delete": ""
      }
    },
    "waitForTask": {
      "default": "client.waitTask(\"<<indexName>>\", response.taskID)"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\RecommendClient;"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "deleteRecommendRule": {
      "default": "$response = $client->deleteRecommendRule(\n    'indexName',\n    'related-products',\n    'objectID',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "getRecommendRule": {
      "default": "$response = $client->getRecommendRule(\n    'indexName',\n    'related-products',\n    'objectID',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "getRecommendStatus": {
      "default": "$response = $client->getRecommendStatus(\n    'indexName',\n    'related-products',\n    12345,\n);\n\n// play with the response\nvar_dump($response);"
    },
    "getRecommendations": {
      "default": "$response = $client->getRecommendations(\n    ['requests' => [\n        ['indexName' => 'indexName',\n            'objectID' => 'objectID',\n            'model' => 'related-products',\n            'threshold' => 42.1,\n        ],\n    ],\n    ],\n);\n\n// play with the response\nvar_dump($response);"
    },
    "searchRecommendRules": {
      "default": "$response = $client->searchRecommendRules(\n    'indexName',\n    'related-products',\n);\n\n// play with the response\nvar_dump($response);"
    },
    "init": {
      "default": "$client = RecommendClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');"
    },
    "waitForAppTask": {
      "default": "$client->waitForAppTask($response['taskID']);"
    },
    "waitForApiKey": {
      "default": {
        "add": "$client->waitForApiKey('<<operation>>', $response['key']);",
        "update": "$client->waitForApiKey('<<operation>>', $response['key'], [\n        'acl' => [\n          'search',\n          'addObject',\n        ],\n          'validity' => 300,\n          'maxQueriesPerIPPerHour' => 100,\n          'maxHitsPerQuery' => 20,\n        ]);",
        "delete": "$client->waitForApiKey('<<operation>>', $response['key']);"
      }
    },
    "waitForTask": {
      "default": "$client->waitForTask('<<indexName>>', $response['taskID']);"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.recommend.client import RecommendClient"
    },
    "customDelete": {
      "default": "response = await _client.custom_delete(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customGet": {
      "default": "response = await _client.custom_get(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customPost": {
      "default": "response = await _client.custom_post(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "customPut": {
      "default": "response = await _client.custom_put(\n    path=\"test/minimal\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "deleteRecommendRule": {
      "default": "response = await _client.delete_recommend_rule(\n    index_name=\"indexName\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "getRecommendRule": {
      "default": "response = await _client.get_recommend_rule(\n    index_name=\"indexName\",\n    model=\"related-products\",\n    object_id=\"objectID\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "getRecommendStatus": {
      "default": "response = await _client.get_recommend_status(\n    index_name=\"indexName\",\n    model=\"related-products\",\n    task_id=12345,\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "getRecommendations": {
      "default": "response = await _client.get_recommendations(\n    get_recommendations_params={\n        \"requests\": [\n            {\n                \"indexName\": \"indexName\",\n                \"objectID\": \"objectID\",\n                \"model\": \"related-products\",\n                \"threshold\": 42.1,\n            },\n        ],\n    },\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "searchRecommendRules": {
      "default": "response = await _client.search_recommend_rules(\n    index_name=\"indexName\",\n    model=\"related-products\",\n)\n\n# use the class directly\nprint(response)\n\n# print the JSON response\nprint(response.to_json())"
    },
    "init": {
      "default": "_client = RecommendClient(\"YOUR_APP_ID\", \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "await client.wait_for_app_task(task_id=response.task_id)"
    },
    "waitForApiKey": {
      "default": {
        "add": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)",
        "update": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key, api_key={\n          \"acl\": [\n              \"search\",\n              \"addObject\",\n          ],\n          \"validity\": 300,\n          \"maxQueriesPerIPPerHour\": 100,\n          \"maxHitsPerQuery\": 20,\n      })",
        "delete": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)"
      }
    },
    "waitForTask": {
      "default": "await client.wait_for_task(index_name=\"<<indexName>>\", task_id=response.task_id)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "deleteRecommendRule": {
      "default": "response = client.delete_recommend_rule(\"indexName\", \"related-products\", \"objectID\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "getRecommendRule": {
      "default": "response = client.get_recommend_rule(\"indexName\", \"related-products\", \"objectID\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "getRecommendStatus": {
      "default": "response = client.get_recommend_status(\"indexName\", \"related-products\", 12345)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "getRecommendations": {
      "default": "response = client.get_recommendations(\n  GetRecommendationsParams.new(\n    requests: [\n      RelatedQuery.new(index_name: \"indexName\", object_id: \"objectID\", model: \"related-products\", threshold: 42.1)\n    ]\n  )\n)\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "searchRecommendRules": {
      "default": "response = client.search_recommend_rules(\"indexName\", \"related-products\")\n\n# use the class directly\nputs(response)\n\n# print the JSON response\nputs(response.to_json)"
    },
    "init": {
      "default": "client = Algolia::RecommendClient.create(\"YOUR_APP_ID\", \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "client.wait_for_app_task(response.task_id)"
    },
    "waitForApiKey": {
      "default": {
        "add": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)",
        "update": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key, api_key=ApiKey.new(\n        acl: ['search', 'addObject'],\n        validity: 300,\n        max_queries_per_ip_per_hour: 100,\n        max_hits_per_query: 20\n      ))",
        "delete": "await client.wait_for_api_key(operation=\"<<operation>>\", key=response.key)"
      }
    },
    "waitForTask": {
      "default": "client.wait_for_task(\"<<indexName>>\", response.task_id)"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.RecommendClient"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "deleteRecommendRule": {
      "default": "val response = client.deleteRecommendRule(\n  indexName = \"indexName\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "getRecommendRule": {
      "default": "val response = client.getRecommendRule(\n  indexName = \"indexName\",\n  model = RecommendModels.withName(\"related-products\"),\n  objectID = \"objectID\"\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "getRecommendStatus": {
      "default": "val response = client.getRecommendStatus(\n  indexName = \"indexName\",\n  model = RecommendModels.withName(\"related-products\"),\n  taskID = 12345L\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "getRecommendations": {
      "default": "val response = client.getRecommendations(\n  getRecommendationsParams = GetRecommendationsParams(\n    requests = Seq(\n      RelatedQuery(\n        indexName = \"indexName\",\n        objectID = \"objectID\",\n        model = RelatedModel.withName(\"related-products\"),\n        threshold = 42.1\n      )\n    )\n  )\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "searchRecommendRules": {
      "default": "val response = client.searchRecommendRules(\n  indexName = \"indexName\",\n  model = RecommendModels.withName(\"related-products\")\n)\n\n// Use the response\nval value = Await.result(response, Duration(100, \"sec\"))"
    },
    "init": {
      "default": "val client = RecommendClient(appId = \"YOUR_APP_ID\", apiKey = \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "client.waitAppTask(response.getTaskID())"
    },
    "waitForApiKey": {
      "default": {
        "add": "",
        "update": "",
        "delete": ""
      }
    },
    "waitForTask": {
      "default": "client.waitTask(\"<<indexName>>\", response.getTaskID())"
    }
  },
  "swift": {
    "import": {
      "default": "import Recommend"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")"
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")"
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")"
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")"
    },
    "deleteRecommendRule": {
      "default": "let response = try await client.deleteRecommendRule(\n    indexName: \"indexName\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendRule": {
      "default": "let response = try await client.getRecommendRule(\n    indexName: \"indexName\",\n    model: RecommendModels.relatedProducts,\n    objectID: \"objectID\"\n)"
    },
    "getRecommendStatus": {
      "default": "let response = try await client.getRecommendStatus(\n    indexName: \"indexName\",\n    model: RecommendModels.relatedProducts,\n    taskID: Int64(12345)\n)"
    },
    "getRecommendations": {
      "default": "let response = try await client\n    .getRecommendations(getRecommendationsParams: GetRecommendationsParams(requests: [\n        RecommendationsRequest\n            .relatedQuery(RelatedQuery(\n                indexName: \"indexName\",\n                threshold: 42.1,\n                model: RelatedModel.relatedProducts,\n                objectID: \"objectID\"\n            )),\n    ]))"
    },
    "searchRecommendRules": {
      "default": "let response = try await client.searchRecommendRules(\n    indexName: \"indexName\",\n    model: RecommendModels.relatedProducts\n)"
    },
    "init": {
      "default": "let client = try RecommendClient(appID: \"YOUR_APP_ID\", apiKey: \"YOUR_API_KEY\")"
    },
    "waitForAppTask": {
      "default": "try await client.waitForAppTask(with: response.taskID)"
    },
    "waitForApiKey": {
      "default": {
        "add": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.add)",
        "update": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.update, apiKey: ApiKey(\n          acl: [Acl.search, Acl.addObject],\n          maxHitsPerQuery: 20,\n          maxQueriesPerIPPerHour: 100,\n          validity: 300\n      ))",
        "delete": "try await client.waitForApiKey(with: response.key, operation: ApiKeyOperation.delete)"
      }
    },
    "waitForTask": {
      "default": "try await client.waitForTask(with: response.taskID, in: \"<<indexName>>\")"
    }
  }
}