# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
require "algolia"

# IMPORT<

# Snippet for the customDelete method.
#
# allow del method for a custom path with minimal parameters
def snippet_for_custom_delete
  # >SEPARATOR customDelete default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.custom_delete("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# allow get method for a custom path with minimal parameters
def snippet_for_custom_get
  # >SEPARATOR customGet default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.custom_get("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# allow post method for a custom path with minimal parameters
def snippet_for_custom_post
  # >SEPARATOR customPost default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.custom_post("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPut method.
#
# allow put method for a custom path with minimal parameters
def snippet_for_custom_put
  # >SEPARATOR customPut default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.custom_put("test/minimal")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getAddToCartRate method.
#
# get getAddToCartRate with minimal parameters
def snippet_for_get_add_to_cart_rate
  # >SEPARATOR getAddToCartRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_add_to_cart_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getAverageClickPosition method.
#
# get getAverageClickPosition with minimal parameters
def snippet_for_get_average_click_position
  # >SEPARATOR getAverageClickPosition default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_average_click_position("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getClickPositions method.
#
# get getClickPositions with minimal parameters
def snippet_for_get_click_positions
  # >SEPARATOR getClickPositions default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_click_positions("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getClickThroughRate method.
#
# get getClickThroughRate with minimal parameters
def snippet_for_get_click_through_rate
  # >SEPARATOR getClickThroughRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_click_through_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getConversionRate method.
#
# get getConversationRate with minimal parameters
def snippet_for_get_conversion_rate
  # >SEPARATOR getConversionRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_conversion_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getNoClickRate method.
#
# get getNoClickRate with minimal parameters
def snippet_for_get_no_click_rate
  # >SEPARATOR getNoClickRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_no_click_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getNoResultsRate method.
#
# get getNoResultsRate with minimal parameters
def snippet_for_get_no_results_rate
  # >SEPARATOR getNoResultsRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_no_results_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getPurchaseRate method.
#
# get getPurchaseRate with minimal parameters
def snippet_for_get_purchase_rate
  # >SEPARATOR getPurchaseRate default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_purchase_rate("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getRevenue method.
#
# get getRevenue with minimal parameters
def snippet_for_get_revenue
  # >SEPARATOR getRevenue default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_revenue("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSearchesCount method.
#
# get getSearchesCount with minimal parameters
def snippet_for_get_searches_count
  # >SEPARATOR getSearchesCount default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_searches_count("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSearchesNoClicks method.
#
# get getSearchesNoClicks with minimal parameters
def snippet_for_get_searches_no_clicks
  # >SEPARATOR getSearchesNoClicks default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_searches_no_clicks("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getSearchesNoResults method.
#
# get getSearchesNoResults with minimal parameters
def snippet_for_get_searches_no_results
  # >SEPARATOR getSearchesNoResults default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_searches_no_results("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getStatus method.
#
# get getStatus with minimal parameters
def snippet_for_get_status
  # >SEPARATOR getStatus default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_status("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopCountries method.
#
# get getTopCountries with minimal parameters
def snippet_for_get_top_countries
  # >SEPARATOR getTopCountries default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_countries("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopFilterAttributes method.
#
# get getTopFilterAttributes with minimal parameters
def snippet_for_get_top_filter_attributes
  # >SEPARATOR getTopFilterAttributes default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_filter_attributes("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopFilterForAttribute method.
#
# get getTopFilterForAttribute with minimal parameters
def snippet_for_get_top_filter_for_attribute
  # >SEPARATOR getTopFilterForAttribute default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_filter_for_attribute("myAttribute", "index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopFiltersNoResults method.
#
# get getTopFiltersNoResults with minimal parameters
def snippet_for_get_top_filters_no_results
  # >SEPARATOR getTopFiltersNoResults default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_filters_no_results("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopHits method.
#
# get getTopHits with minimal parameters
def snippet_for_get_top_hits
  # >SEPARATOR getTopHits default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_hits("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getTopSearches method.
#
# get getTopSearches with minimal parameters
def snippet_for_get_top_searches
  # >SEPARATOR getTopSearches default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_top_searches("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getUsersCount method.
#
# get getUsersCount with minimal parameters
def snippet_for_get_users_count
  # >SEPARATOR getUsersCount default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  response = client.get_users_count("index")

  # >LOG
  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the setClientApiKey method.
#
# switch API key
def snippet_for_set_client_api_key
  # >SEPARATOR setClientApiKey default
  # Initialize the client
  client = Algolia::AnalyticsClient.create("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

  # Call the API
  client.set_client_api_key("updated-api-key")
  # >LOG
  # SEPARATOR<
end
