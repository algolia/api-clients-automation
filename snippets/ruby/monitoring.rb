# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
require "algolia"

# IMPORT<

# Snippet for the customDelete method.
#
# allow del method for a custom path with minimal parameters
def snippet_for_custom_delete
  # >SEPARATOR customDelete default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.custom_delete("test/minimal")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customGet method.
#
# allow get method for a custom path with minimal parameters
def snippet_for_custom_get
  # >SEPARATOR customGet default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.custom_get("test/minimal")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPost method.
#
# allow post method for a custom path with minimal parameters
def snippet_for_custom_post
  # >SEPARATOR customPost default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.custom_post("test/minimal")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the customPut method.
#
# allow put method for a custom path with minimal parameters
def snippet_for_custom_put
  # >SEPARATOR customPut default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.custom_put("test/minimal")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getClusterIncidents method.
#
# getClusterIncidents
def snippet_for_get_cluster_incidents
  # >SEPARATOR getClusterIncidents default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_cluster_incidents("c1-de")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getClusterStatus method.
#
# getClusterStatus
def snippet_for_get_cluster_status
  # >SEPARATOR getClusterStatus default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_cluster_status("c1-de")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getIncidents method.
#
# getIncidents
def snippet_for_get_incidents
  # >SEPARATOR getIncidents default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_incidents

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getIndexingTime method.
#
# getIndexingTime
def snippet_for_get_indexing_time
  # >SEPARATOR getIndexingTime default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_indexing_time("c1-de")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getLatency method.
#
# getLatency
def snippet_for_get_latency
  # >SEPARATOR getLatency default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_latency("c1-de")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getMetrics method.
#
# getMetrics
def snippet_for_get_metrics
  # >SEPARATOR getMetrics default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_metrics("avg_build_time", "minute")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getReachability method.
#
# getReachability
def snippet_for_get_reachability
  # >SEPARATOR getReachability default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_reachability("c1-de")

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getServers method.
#
# getInventory
def snippet_for_get_servers
  # >SEPARATOR getServers default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_servers

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end

# Snippet for the getStatus method.
#
# getStatus
def snippet_for_get_status
  # >SEPARATOR getStatus default
  # Initialize the client
  client = Algolia::MonitoringClient.create("YOUR_APP_ID", "YOUR_API_KEY")

  # Call the API
  response = client.get_status

  # use the class directly
  puts(response)

  # print the JSON response
  puts(response.to_json)
  # SEPARATOR<
end
