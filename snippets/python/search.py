# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.search.client import SearchClient
# IMPORT<


async def snippet_for_add_api_key():
    """
    Snippet for the addApiKey method.

    addApiKey
    """
    # >SEPARATOR addApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.add_api_key(
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "description": "my new api key",
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_add_or_update_object():
    """
    Snippet for the addOrUpdateObject method.

    addOrUpdateObject
    """
    # >SEPARATOR addOrUpdateObject default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.add_or_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        body={
            "key": "value",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_append_source():
    """
    Snippet for the appendSource method.

    appendSource
    """
    # >SEPARATOR appendSource default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.append_source(
        source={
            "source": "theSource",
            "description": "theDescription",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_assign_user_id():
    """
    Snippet for the assignUserId method.

    assignUserId
    """
    # >SEPARATOR assignUserId default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.assign_user_id(
        x_algolia_user_id="userID",
        assign_user_id_params={
            "cluster": "theCluster",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch():
    """
    Snippet for the batch method.

    addObject
    """
    # >SEPARATOR batch addObject
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "bar",
                        "foo": "1",
                    },
                },
                {
                    "action": "addObject",
                    "body": {
                        "key": "baz",
                        "foo": "2",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch1():
    """
    Snippet for the batch method.

    clear
    """
    # >SEPARATOR batch clear
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "clear",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch2():
    """
    Snippet for the batch method.

    delete
    """
    # >SEPARATOR batch delete
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "delete",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch3():
    """
    Snippet for the batch method.

    deleteObject
    """
    # >SEPARATOR batch deleteObject
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "deleteObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch4():
    """
    Snippet for the batch method.

    partialUpdateObject
    """
    # >SEPARATOR batch partialUpdateObject
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch5():
    """
    Snippet for the batch method.

    partialUpdateObjectNoCreate
    """
    # >SEPARATOR batch partialUpdateObjectNoCreate
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "partialUpdateObjectNoCreate",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch6():
    """
    Snippet for the batch method.

    updateObject
    """
    # >SEPARATOR batch updateObject
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch(
        index_name="<YOUR_INDEX_NAME>",
        batch_write_params={
            "requests": [
                {
                    "action": "updateObject",
                    "body": {
                        "key": "value",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch_assign_user_ids():
    """
    Snippet for the batchAssignUserIds method.

    batchAssignUserIds
    """
    # >SEPARATOR batchAssignUserIds default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch_assign_user_ids(
        x_algolia_user_id="userID",
        batch_assign_user_ids_params={
            "cluster": "theCluster",
            "users": [
                "user1",
                "user2",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch_dictionary_entries():
    """
    Snippet for the batchDictionaryEntries method.

    replace
    """
    # >SEPARATOR batchDictionaryEntries replace
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "word": "fancy",
                        "words": [
                            "believe",
                            "algolia",
                        ],
                        "decomposition": [
                            "trust",
                            "algolia",
                        ],
                        "state": "enabled",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch_dictionary_entries1():
    """
    Snippet for the batchDictionaryEntries method.

    delete
    """
    # >SEPARATOR batchDictionaryEntries delete
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch_dictionary_entries(
        dictionary_name="plurals",
        batch_dictionary_entries_params={
            "clearExistingDictionaryEntries": True,
            "requests": [
                {
                    "action": "deleteEntry",
                    "body": {
                        "objectID": "1",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_batch_dictionary_entries2():
    """
    Snippet for the batchDictionaryEntries method.

    append
    """
    # >SEPARATOR batchDictionaryEntries append
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.batch_dictionary_entries(
        dictionary_name="stopwords",
        batch_dictionary_entries_params={
            "requests": [
                {
                    "action": "addEntry",
                    "body": {
                        "objectID": "1",
                        "language": "en",
                        "additional": "try me",
                    },
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_browse():
    """
    Snippet for the browse method.

    browse with minimal parameters
    """
    # >SEPARATOR browse default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.browse(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_clear_objects():
    """
    Snippet for the clearObjects method.

    clearObjects
    """
    # >SEPARATOR clearObjects default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.clear_objects(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_clear_rules():
    """
    Snippet for the clearRules method.

    clearRules
    """
    # >SEPARATOR clearRules default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.clear_rules(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_clear_synonyms():
    """
    Snippet for the clearSynonyms method.

    clearSynonyms
    """
    # >SEPARATOR clearSynonyms default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.clear_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.custom_delete(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.custom_get(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.custom_post(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.custom_put(
        path="test/minimal",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_api_key():
    """
    Snippet for the deleteApiKey method.

    deleteApiKey
    """
    # >SEPARATOR deleteApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_by():
    """
    Snippet for the deleteBy method.

    deleteBy
    """
    # >SEPARATOR deleteBy default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_by(
        index_name="<YOUR_INDEX_NAME>",
        delete_by_params={
            "filters": "brand:brandName",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_index():
    """
    Snippet for the deleteIndex method.

    deleteIndex
    """
    # >SEPARATOR deleteIndex default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_object():
    """
    Snippet for the deleteObject method.

    deleteObject
    """
    # >SEPARATOR deleteObject default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_objects():
    """
    Snippet for the deleteObjects method.

    call deleteObjects without error
    """
    # >SEPARATOR deleteObjects default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_objects(
        index_name="<YOUR_INDEX_NAME>",
        object_ids=[
            "1",
            "2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_rule():
    """
    Snippet for the deleteRule method.

    delete rule simple case
    """
    # >SEPARATOR deleteRule default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_source():
    """
    Snippet for the deleteSource method.

    deleteSource
    """
    # >SEPARATOR deleteSource default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_source(
        source="theSource",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_synonym():
    """
    Snippet for the deleteSynonym method.

    deleteSynonym
    """
    # >SEPARATOR deleteSynonym default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.delete_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_generate_secured_api_key():
    """
    Snippet for the generateSecuredApiKey method.

    generate secured api key basic
    """
    # >SEPARATOR generateSecuredApiKey generate secured api key basic
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = _client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_generate_secured_api_key1():
    """
    Snippet for the generateSecuredApiKey method.

    generate secured api key with searchParams
    """
    # >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = _client.generate_secured_api_key(
        parent_api_key="2640659426d5107b6e47d75db9cbaef8",
        restrictions={
            "validUntil": 2524604400,
            "restrictIndices": [
                "Movies",
                "cts_e2e_settings",
            ],
            "restrictSources": "192.168.1.0/24",
            "filters": "category:Book OR category:Ebook AND _tags:published",
            "userToken": "user123",
            "searchParams": {
                "query": "batman",
                "typoTolerance": "strict",
                "aroundRadius": "all",
                "mode": "neuralSearch",
                "hitsPerPage": 10,
                "optionalWords": [
                    "one",
                    "two",
                ],
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_api_key():
    """
    Snippet for the getApiKey method.

    getApiKey
    """
    # >SEPARATOR getApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_api_key(
        key="myTestApiKey",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_app_task():
    """
    Snippet for the getAppTask method.

    getAppTask
    """
    # >SEPARATOR getAppTask default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_dictionary_languages():
    """
    Snippet for the getDictionaryLanguages method.

    get getDictionaryLanguages
    """
    # >SEPARATOR getDictionaryLanguages default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_dictionary_languages()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_dictionary_settings():
    """
    Snippet for the getDictionarySettings method.

    get getDictionarySettings results
    """
    # >SEPARATOR getDictionarySettings default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_dictionary_settings()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_logs():
    """
    Snippet for the getLogs method.

    getLogs with minimal parameters
    """
    # >SEPARATOR getLogs default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_logs()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_object():
    """
    Snippet for the getObject method.

    getObject
    """
    # >SEPARATOR getObject default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_retrieve=[
            "attr1",
            "attr2",
        ],
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_objects():
    """
    Snippet for the getObjects method.

    getObjects
    """
    # >SEPARATOR getObjects default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_objects(
        get_objects_params={
            "requests": [
                {
                    "attributesToRetrieve": [
                        "attr1",
                        "attr2",
                    ],
                    "objectID": "uniqueID",
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_rule():
    """
    Snippet for the getRule method.

    getRule
    """
    # >SEPARATOR getRule default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="qr-1725004648916",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_settings():
    """
    Snippet for the getSettings method.

    getSettings
    """
    # >SEPARATOR getSettings default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_settings(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_sources():
    """
    Snippet for the getSources method.

    getSources
    """
    # >SEPARATOR getSources default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_sources()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_synonym():
    """
    Snippet for the getSynonym method.

    getSynonym
    """
    # >SEPARATOR getSynonym default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_task():
    """
    Snippet for the getTask method.

    getTask
    """
    # >SEPARATOR getTask default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_top_user_ids():
    """
    Snippet for the getTopUserIds method.

    getTopUserIds
    """
    # >SEPARATOR getTopUserIds default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_top_user_ids()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_user_id():
    """
    Snippet for the getUserId method.

    getUserId
    """
    # >SEPARATOR getUserId default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.get_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_has_pending_mappings():
    """
    Snippet for the hasPendingMappings method.

    hasPendingMappings with minimal parameters
    """
    # >SEPARATOR hasPendingMappings default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.has_pending_mappings()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_index_exists():
    """
    Snippet for the indexExists method.

    indexExists
    """
    # >SEPARATOR indexExists indexExists
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_index_exists1():
    """
    Snippet for the indexExists method.

    indexNotExists
    """
    # >SEPARATOR indexExists indexNotExists
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_index_exists2():
    """
    Snippet for the indexExists method.

    indexExistsWithError
    """
    # >SEPARATOR indexExists indexExistsWithError
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.index_exists(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_list_api_keys():
    """
    Snippet for the listApiKeys method.

    listApiKeys
    """
    # >SEPARATOR listApiKeys default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.list_api_keys()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_list_clusters():
    """
    Snippet for the listClusters method.

    listClusters
    """
    # >SEPARATOR listClusters default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.list_clusters()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_list_indices():
    """
    Snippet for the listIndices method.

    listIndices with minimal parameters
    """
    # >SEPARATOR listIndices default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.list_indices()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_list_user_ids():
    """
    Snippet for the listUserIds method.

    listUserIds with minimal parameters
    """
    # >SEPARATOR listUserIds default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.list_user_ids()

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_multiple_batch():
    """
    Snippet for the multipleBatch method.

    multipleBatch
    """
    # >SEPARATOR multipleBatch default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.multiple_batch(
        batch_params={
            "requests": [
                {
                    "action": "addObject",
                    "body": {
                        "key": "value",
                    },
                    "indexName": "<YOUR_INDEX_NAME>",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_operation_index():
    """
    Snippet for the operationIndex method.

    scopes
    """
    # >SEPARATOR operationIndex scopes
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
            "scope": [
                "rules",
                "settings",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_operation_index1():
    """
    Snippet for the operationIndex method.

    copy
    """
    # >SEPARATOR operationIndex copy
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "copy",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_operation_index2():
    """
    Snippet for the operationIndex method.

    move
    """
    # >SEPARATOR operationIndex move
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.operation_index(
        index_name="<SOURCE_INDEX_NAME>",
        operation_index_params={
            "operation": "move",
            "destination": "<DESTINATION_INDEX_NAME>",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_partial_update_object():
    """
    Snippet for the partialUpdateObject method.

    Partial update with a new value for a string attribute
    """
    # >SEPARATOR partialUpdateObject default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.partial_update_object(
        index_name="<YOUR_INDEX_NAME>",
        object_id="uniqueID",
        attributes_to_update={
            "attributeId": "new value",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_partial_update_objects():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=true
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
        create_if_not_exists=True,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_partial_update_objects1():
    """
    Snippet for the partialUpdateObjects method.

    call partialUpdateObjects with createIfNotExists=false
    """
    # >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.partial_update_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
        ],
        create_if_not_exists=False,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_remove_user_id():
    """
    Snippet for the removeUserId method.

    removeUserId
    """
    # >SEPARATOR removeUserId default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.remove_user_id(
        user_id="uniqueID",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_replace_all_objects():
    """
    Snippet for the replaceAllObjects method.

    call replaceAllObjects without error
    """
    # >SEPARATOR replaceAllObjects default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.replace_all_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
            {
                "objectID": "3",
                "name": "Cyril",
            },
            {
                "objectID": "4",
                "name": "David",
            },
            {
                "objectID": "5",
                "name": "Eva",
            },
            {
                "objectID": "6",
                "name": "Fiona",
            },
            {
                "objectID": "7",
                "name": "Gael",
            },
            {
                "objectID": "8",
                "name": "Hugo",
            },
            {
                "objectID": "9",
                "name": "Igor",
            },
            {
                "objectID": "10",
                "name": "Julia",
            },
        ],
        batch_size=3,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_replace_sources():
    """
    Snippet for the replaceSources method.

    replaceSources
    """
    # >SEPARATOR replaceSources default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.replace_sources(
        source=[
            {
                "source": "theSource",
                "description": "theDescription",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_restore_api_key():
    """
    Snippet for the restoreApiKey method.

    restoreApiKey
    """
    # >SEPARATOR restoreApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.restore_api_key(
        key="myApiKey",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_object():
    """
    Snippet for the saveObject method.

    saveObject
    """
    # >SEPARATOR saveObject default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_object(
        index_name="<YOUR_INDEX_NAME>",
        body={
            "objectID": "id",
            "test": "val",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_objects():
    """
    Snippet for the saveObjects method.

    call saveObjects without error
    """
    # >SEPARATOR saveObjects call saveObjects without error
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_objects1():
    """
    Snippet for the saveObjects method.

    saveObjects should report errors
    """
    # >SEPARATOR saveObjects saveObjects should report errors
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_objects(
        index_name="<YOUR_INDEX_NAME>",
        objects=[
            {
                "objectID": "1",
                "name": "Adam",
            },
            {
                "objectID": "2",
                "name": "Benoit",
            },
        ],
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_rule():
    """
    Snippet for the saveRule method.

    saveRule with minimal parameters
    """
    # >SEPARATOR saveRule default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_rule(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        rule={
            "objectID": "id1",
            "conditions": [
                {
                    "pattern": "apple",
                    "anchoring": "contains",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_rules():
    """
    Snippet for the saveRules method.

    saveRules with minimal parameters
    """
    # >SEPARATOR saveRules default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_rules(
        index_name="<YOUR_INDEX_NAME>",
        rules=[
            {
                "objectID": "a-rule-id",
                "conditions": [
                    {
                        "pattern": "smartphone",
                        "anchoring": "contains",
                    },
                ],
            },
            {
                "objectID": "a-second-rule-id",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                    },
                ],
            },
        ],
        forward_to_replicas=False,
        clear_existing_rules=True,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_synonym():
    """
    Snippet for the saveSynonym method.

    saveSynonym
    """
    # >SEPARATOR saveSynonym default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_synonym(
        index_name="<YOUR_INDEX_NAME>",
        object_id="id1",
        synonym_hit={
            "objectID": "id1",
            "type": "synonym",
            "synonyms": [
                "car",
                "vehicule",
                "auto",
            ],
        },
        forward_to_replicas=True,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_save_synonyms():
    """
    Snippet for the saveSynonyms method.

    saveSynonyms
    """
    # >SEPARATOR saveSynonyms default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.save_synonyms(
        index_name="<YOUR_INDEX_NAME>",
        synonym_hit=[
            {
                "objectID": "id1",
                "type": "synonym",
                "synonyms": [
                    "car",
                    "vehicule",
                    "auto",
                ],
            },
            {
                "objectID": "id2",
                "type": "onewaysynonym",
                "input": "iphone",
                "synonyms": [
                    "ephone",
                    "aphone",
                    "yphone",
                ],
            },
        ],
        forward_to_replicas=True,
        replace_existing_synonyms=True,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search():
    """
    Snippet for the search method.

    withHitsPerPage
    """
    # >SEPARATOR search withHitsPerPage
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "hitsPerPage": 50,
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search1():
    """
    Snippet for the search method.

    filterOnly
    """
    # >SEPARATOR search filterOnly
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search2():
    """
    Snippet for the search method.

    filterOr
    """
    # >SEPARATOR search filterOr
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "actor:Tom Cruise OR actor:Scarlett Johansson",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search3():
    """
    Snippet for the search method.

    filterNot
    """
    # >SEPARATOR search filterNot
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "filters": "NOT actor:Nicolas Cage",
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search4():
    """
    Snippet for the search method.

    retrieveFacets
    """
    # >SEPARATOR search retrieveFacets
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "author",
                        "genre",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search5():
    """
    Snippet for the search method.

    retrieveFacetsWildcard
    """
    # >SEPARATOR search retrieveFacetsWildcard
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search(
        search_method_params={
            "requests": [
                {
                    "indexName": "<YOUR_INDEX_NAME>",
                    "query": "<YOUR_QUERY>",
                    "facets": [
                        "*",
                    ],
                },
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_dictionary_entries():
    """
    Snippet for the searchDictionaryEntries method.

    get searchDictionaryEntries results with minimal parameters
    """
    # >SEPARATOR searchDictionaryEntries default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_dictionary_entries(
        dictionary_name="stopwords",
        search_dictionary_entries_params={
            "query": "about",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_for_facet_values():
    """
    Snippet for the searchForFacetValues method.

    get searchForFacetValues results with minimal parameters
    """
    # >SEPARATOR searchForFacetValues default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_for_facet_values(
        index_name="<YOUR_INDEX_NAME>",
        facet_name="facetName",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_rules():
    """
    Snippet for the searchRules method.

    searchRules
    """
    # >SEPARATOR searchRules default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_rules(
        index_name="<YOUR_INDEX_NAME>",
        search_rules_params={
            "query": "zorro",
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_single_index():
    """
    Snippet for the searchSingleIndex method.

    search with minimal parameters
    """
    # >SEPARATOR searchSingleIndex default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_single_index(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_synonyms():
    """
    Snippet for the searchSynonyms method.

    searchSynonyms with minimal parameters
    """
    # >SEPARATOR searchSynonyms default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_synonyms(
        index_name="<YOUR_INDEX_NAME>",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_search_user_ids():
    """
    Snippet for the searchUserIds method.

    searchUserIds
    """
    # >SEPARATOR searchUserIds default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.search_user_ids(
        search_user_ids_params={
            "query": "test",
            "clusterName": "theClusterName",
            "page": 5,
            "hitsPerPage": 10,
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_set_client_api_key():
    """
    Snippet for the setClientApiKey method.

    switch API key
    """
    # >SEPARATOR setClientApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    _client.set_client_api_key(
        api_key="updated-api-key",
    )

    # >LOG
    # SEPARATOR<


async def snippet_for_set_dictionary_settings():
    """
    Snippet for the setDictionarySettings method.

    get setDictionarySettings results with minimal parameters
    """
    # >SEPARATOR setDictionarySettings default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.set_dictionary_settings(
        dictionary_settings_params={
            "disableStandardEntries": {
                "plurals": {
                    "fr": False,
                    "en": False,
                    "ru": True,
                },
            },
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_set_settings():
    """
    Snippet for the setSettings method.

    setSettingsAttributesForFaceting
    """
    # >SEPARATOR setSettings default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.set_settings(
        index_name="<YOUR_INDEX_NAME>",
        index_settings={
            "attributesForFaceting": [
                "actor",
                "filterOnly(category)",
                "searchable(publisher)",
            ],
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_update_api_key():
    """
    Snippet for the updateApiKey method.

    updateApiKey
    """
    # >SEPARATOR updateApiKey default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.update_api_key(
        key="myApiKey",
        api_key={
            "acl": [
                "search",
                "addObject",
            ],
            "validity": 300,
            "maxQueriesPerIPPerHour": 100,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_wait_for_api_key():
    """
    Snippet for the waitForApiKey method.

    wait for api key helper - add
    """
    # >SEPARATOR waitForApiKey wait for api key helper - add
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.wait_for_api_key(
        key="api-key-add-operation-test-python",
        operation="add",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_wait_for_api_key1():
    """
    Snippet for the waitForApiKey method.

    wait for api key - update
    """
    # >SEPARATOR waitForApiKey wait for api key - update
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.wait_for_api_key(
        key="api-key-update-operation-test-python",
        operation="update",
        api_key={
            "description": "my updated api key",
            "acl": [
                "search",
                "addObject",
                "deleteObject",
            ],
            "indexes": [
                "Movies",
                "Books",
            ],
            "referers": [
                "*google.com",
                "*algolia.com",
            ],
            "validity": 305,
            "maxQueriesPerIPPerHour": 95,
            "maxHitsPerQuery": 20,
        },
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_wait_for_api_key2():
    """
    Snippet for the waitForApiKey method.

    wait for api key - delete
    """
    # >SEPARATOR waitForApiKey wait for api key - delete
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.wait_for_api_key(
        key="api-key-delete-operation-test-python",
        operation="delete",
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_wait_for_app_task():
    """
    Snippet for the waitForAppTask method.

    wait for an application-level task
    """
    # >SEPARATOR waitForAppTask default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.wait_for_app_task(
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_wait_for_task():
    """
    Snippet for the waitForTask method.

    wait for task
    """
    # >SEPARATOR waitForTask default
    # Initialize the client
    _client = SearchClient("YOUR_APP_ID", "YOUR_API_KEY")

    # Call the API
    response = await _client.wait_for_task(
        index_name="<YOUR_INDEX_NAME>",
        task_id=123,
    )

    # >LOG
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<
