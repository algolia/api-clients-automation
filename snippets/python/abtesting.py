# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
# >IMPORT
from algoliasearch.abtesting.client import AbtestingClient
# IMPORT<


async def snippet_for_add_ab_tests():
    """
    Snippet for the addABTests method.

    addABTests with minimal parameters
    """
    # >SEPARATOR addABTests default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.add_ab_tests(
        add_ab_tests_request={
            "endAt": "2022-12-31T00:00:00.000Z",
            "name": "myABTest",
            "variants": [
                {
                    "index": "AB_TEST_1",
                    "trafficPercentage": 30,
                },
                {
                    "index": "AB_TEST_2",
                    "trafficPercentage": 50,
                },
            ],
        },
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_delete():
    """
    Snippet for the customDelete method.

    allow del method for a custom path with minimal parameters
    """
    # >SEPARATOR customDelete default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.custom_delete(
        path="test/minimal",
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_get():
    """
    Snippet for the customGet method.

    allow get method for a custom path with minimal parameters
    """
    # >SEPARATOR customGet default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.custom_get(
        path="test/minimal",
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_post():
    """
    Snippet for the customPost method.

    allow post method for a custom path with minimal parameters
    """
    # >SEPARATOR customPost default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.custom_post(
        path="test/minimal",
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_custom_put():
    """
    Snippet for the customPut method.

    allow put method for a custom path with minimal parameters
    """
    # >SEPARATOR customPut default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.custom_put(
        path="test/minimal",
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_delete_ab_test():
    """
    Snippet for the deleteABTest method.

    deleteABTest
    """
    # >SEPARATOR deleteABTest default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.delete_ab_test(
        id=42,
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_get_ab_test():
    """
    Snippet for the getABTest method.

    getABTest
    """
    # >SEPARATOR getABTest default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.get_ab_test(
        id=42,
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_list_ab_tests():
    """
    Snippet for the listABTests method.

    listABTests with minimal parameters
    """
    # >SEPARATOR listABTests default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.list_ab_tests()

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<


async def snippet_for_stop_ab_test():
    """
    Snippet for the stopABTest method.

    stopABTest
    """
    # >SEPARATOR stopABTest default
    # Initialize the client
    _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")

    # Call the API
    response = await _client.stop_ab_test(
        id=42,
    )

    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    # SEPARATOR<
