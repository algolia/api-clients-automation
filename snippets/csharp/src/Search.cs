// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// >IMPORT
using Algolia.Search.Clients;
using Algolia.Search.Models.Search;
// IMPORT<
using Action = Algolia.Search.Models.Search.Action;

public class SnippetSearchClient
{
  /// <summary>
  /// Snippet for the AddApiKey method.
  ///
  /// addApiKey
  /// </summary>
  public async Task SnippetForSearchClientAddApiKey()
  {
    // >SEPARATOR addApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AddApiKeyAsync(
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Description = "my new api key",
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AddOrUpdateObject method.
  ///
  /// addOrUpdateObject
  /// </summary>
  public async Task SnippetForSearchClientAddOrUpdateObject()
  {
    // >SEPARATOR addOrUpdateObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AddOrUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, string> { { "key", "value" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AppendSource method.
  ///
  /// appendSource
  /// </summary>
  public async Task SnippetForSearchClientAppendSource()
  {
    // >SEPARATOR appendSource default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AppendSourceAsync(
      new Source { VarSource = "theSource", Description = "theDescription" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the AssignUserId method.
  ///
  /// assignUserId
  /// </summary>
  public async Task SnippetForSearchClientAssignUserId()
  {
    // >SEPARATOR assignUserId default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.AssignUserIdAsync(
      "userID",
      new AssignUserIdParams { Cluster = "theCluster" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// addObject
  /// </summary>
  public async Task SnippetForSearchClientBatch()
  {
    // >SEPARATOR batch addObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "bar" }, { "foo", "1" } },
          },
          new BatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "baz" }, { "foo", "2" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// clear
  /// </summary>
  public async Task SnippetForSearchClientBatch1()
  {
    // >SEPARATOR batch clear
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Clear"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// delete
  /// </summary>
  public async Task SnippetForSearchClientBatch2()
  {
    // >SEPARATOR batch delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("Delete"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// deleteObject
  /// </summary>
  public async Task SnippetForSearchClientBatch3()
  {
    // >SEPARATOR batch deleteObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("DeleteObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// partialUpdateObject
  /// </summary>
  public async Task SnippetForSearchClientBatch4()
  {
    // >SEPARATOR batch partialUpdateObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// partialUpdateObjectNoCreate
  /// </summary>
  public async Task SnippetForSearchClientBatch5()
  {
    // >SEPARATOR batch partialUpdateObjectNoCreate
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("PartialUpdateObjectNoCreate"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Batch method.
  ///
  /// updateObject
  /// </summary>
  public async Task SnippetForSearchClientBatch6()
  {
    // >SEPARATOR batch updateObject
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAsync(
      "<YOUR_INDEX_NAME>",
      new BatchWriteParams
      {
        Requests = new List<BatchRequest>
        {
          new BatchRequest
          {
            Action = Enum.Parse<Action>("UpdateObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchAssignUserIds method.
  ///
  /// batchAssignUserIds
  /// </summary>
  public async Task SnippetForSearchClientBatchAssignUserIds()
  {
    // >SEPARATOR batchAssignUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchAssignUserIdsAsync(
      "userID",
      new BatchAssignUserIdsParams
      {
        Cluster = "theCluster",
        Users = new List<string> { "user1", "user2" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// replace
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries()
  {
    // >SEPARATOR batchDictionaryEntries replace
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              Word = "fancy",
              Words = new List<string> { "believe", "algolia" },
              Decomposition = new List<string> { "trust", "algolia" },
              State = Enum.Parse<DictionaryEntryState>("Enabled"),
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// delete
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries1()
  {
    // >SEPARATOR batchDictionaryEntries delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Plurals"),
      new BatchDictionaryEntriesParams
      {
        ClearExistingDictionaryEntries = true,
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("DeleteEntry"),
            Body = new DictionaryEntry { ObjectID = "1" },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the BatchDictionaryEntries method.
  ///
  /// append
  /// </summary>
  public async Task SnippetForSearchClientBatchDictionaryEntries2()
  {
    // >SEPARATOR batchDictionaryEntries append
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BatchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new BatchDictionaryEntriesParams
      {
        Requests = new List<BatchDictionaryEntriesRequest>
        {
          new BatchDictionaryEntriesRequest
          {
            Action = Enum.Parse<DictionaryAction>("AddEntry"),
            Body = new DictionaryEntry
            {
              ObjectID = "1",
              Language = Enum.Parse<SupportedLanguage>("En"),
              AdditionalProperties = new Dictionary<string, object> { { "additional", "try me" } },
            },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Browse method.
  ///
  /// browse with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientBrowse()
  {
    // >SEPARATOR browse default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.BrowseAsync<Hit>("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearObjects method.
  ///
  /// clearObjects
  /// </summary>
  public async Task SnippetForSearchClientClearObjects()
  {
    // >SEPARATOR clearObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearObjectsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearRules method.
  ///
  /// clearRules
  /// </summary>
  public async Task SnippetForSearchClientClearRules()
  {
    // >SEPARATOR clearRules default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearRulesAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ClearSynonyms method.
  ///
  /// clearSynonyms
  /// </summary>
  public async Task SnippetForSearchClientClearSynonyms()
  {
    // >SEPARATOR clearSynonyms default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ClearSynonymsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomDelete method.
  ///
  /// allow del method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomDelete()
  {
    // >SEPARATOR customDelete default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomDeleteAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomGet method.
  ///
  /// allow get method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomGet()
  {
    // >SEPARATOR customGet default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomGetAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPost method.
  ///
  /// allow post method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPost()
  {
    // >SEPARATOR customPost default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPostAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the CustomPut method.
  ///
  /// allow put method for a custom path with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientCustomPut()
  {
    // >SEPARATOR customPut default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.CustomPutAsync("test/minimal");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteApiKey method.
  ///
  /// deleteApiKey
  /// </summary>
  public async Task SnippetForSearchClientDeleteApiKey()
  {
    // >SEPARATOR deleteApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteApiKeyAsync("myTestApiKey");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteBy method.
  ///
  /// deleteBy
  /// </summary>
  public async Task SnippetForSearchClientDeleteBy()
  {
    // >SEPARATOR deleteBy default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteByAsync(
      "<YOUR_INDEX_NAME>",
      new DeleteByParams { Filters = "brand:brandName" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteIndex method.
  ///
  /// deleteIndex
  /// </summary>
  public async Task SnippetForSearchClientDeleteIndex()
  {
    // >SEPARATOR deleteIndex default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteIndexAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteObject method.
  ///
  /// deleteObject
  /// </summary>
  public async Task SnippetForSearchClientDeleteObject()
  {
    // >SEPARATOR deleteObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteObjectAsync("<YOUR_INDEX_NAME>", "uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteObjects method.
  ///
  /// call deleteObjects without error
  /// </summary>
  public async Task SnippetForSearchClientDeleteObjects()
  {
    // >SEPARATOR deleteObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<string> { "1", "2" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteRule method.
  ///
  /// delete rule simple case
  /// </summary>
  public async Task SnippetForSearchClientDeleteRule()
  {
    // >SEPARATOR deleteRule default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteRuleAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteSource method.
  ///
  /// deleteSource
  /// </summary>
  public async Task SnippetForSearchClientDeleteSource()
  {
    // >SEPARATOR deleteSource default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteSourceAsync("theSource");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the DeleteSynonym method.
  ///
  /// deleteSynonym
  /// </summary>
  public async Task SnippetForSearchClientDeleteSynonym()
  {
    // >SEPARATOR deleteSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.DeleteSynonymAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// generate secured api key basic
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey()
  {
    // >SEPARATOR generateSecuredApiKey generate secured api key basic
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions
      {
        ValidUntil = 2524604400L,
        RestrictIndices = new List<string> { "Movies" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GenerateSecuredApiKey method.
  ///
  /// generate secured api key with searchParams
  /// </summary>
  public async Task SnippetForSearchClientGenerateSecuredApiKey1()
  {
    // >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = client.GenerateSecuredApiKey(
      "2640659426d5107b6e47d75db9cbaef8",
      new SecuredApiKeyRestrictions
      {
        ValidUntil = 2524604400L,
        RestrictIndices = new List<string> { "Movies", "cts_e2e_settings" },
        RestrictSources = "192.168.1.0/24",
        Filters = "category:Book OR category:Ebook AND _tags:published",
        UserToken = "user123",
        SearchParams = new SearchParamsObject
        {
          Query = "batman",
          TypoTolerance = new TypoTolerance(Enum.Parse<TypoToleranceEnum>("Strict")),
          AroundRadius = new AroundRadius(Enum.Parse<AroundRadiusAll>("All")),
          Mode = Enum.Parse<Mode>("NeuralSearch"),
          HitsPerPage = 10,
          OptionalWords = new List<string> { "one", "two" },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetApiKey method.
  ///
  /// getApiKey
  /// </summary>
  public async Task SnippetForSearchClientGetApiKey()
  {
    // >SEPARATOR getApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetApiKeyAsync("myTestApiKey");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetAppTask method.
  ///
  /// getAppTask
  /// </summary>
  public async Task SnippetForSearchClientGetAppTask()
  {
    // >SEPARATOR getAppTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetAppTaskAsync(123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetDictionaryLanguages method.
  ///
  /// get getDictionaryLanguages
  /// </summary>
  public async Task SnippetForSearchClientGetDictionaryLanguages()
  {
    // >SEPARATOR getDictionaryLanguages default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetDictionaryLanguagesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetDictionarySettings method.
  ///
  /// get getDictionarySettings results
  /// </summary>
  public async Task SnippetForSearchClientGetDictionarySettings()
  {
    // >SEPARATOR getDictionarySettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetDictionarySettingsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetLogs method.
  ///
  /// getLogs with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientGetLogs()
  {
    // >SEPARATOR getLogs default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetLogsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObject method.
  ///
  /// getObject
  /// </summary>
  public async Task SnippetForSearchClientGetObject()
  {
    // >SEPARATOR getObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new List<string> { "attr1", "attr2" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetObjects method.
  ///
  /// getObjects
  /// </summary>
  public async Task SnippetForSearchClientGetObjects()
  {
    // >SEPARATOR getObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetObjectsAsync<Hit>(
      new GetObjectsParams
      {
        Requests = new List<GetObjectsRequest>
        {
          new GetObjectsRequest
          {
            AttributesToRetrieve = new List<string> { "attr1", "attr2" },
            ObjectID = "uniqueID",
            IndexName = "<YOUR_INDEX_NAME>",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetRule method.
  ///
  /// getRule
  /// </summary>
  public async Task SnippetForSearchClientGetRule()
  {
    // >SEPARATOR getRule default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetRuleAsync("<YOUR_INDEX_NAME>", "qr-1725004648916");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSettings method.
  ///
  /// getSettings
  /// </summary>
  public async Task SnippetForSearchClientGetSettings()
  {
    // >SEPARATOR getSettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSettingsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSources method.
  ///
  /// getSources
  /// </summary>
  public async Task SnippetForSearchClientGetSources()
  {
    // >SEPARATOR getSources default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSourcesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetSynonym method.
  ///
  /// getSynonym
  /// </summary>
  public async Task SnippetForSearchClientGetSynonym()
  {
    // >SEPARATOR getSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetSynonymAsync("<YOUR_INDEX_NAME>", "id1");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetTask method.
  ///
  /// getTask
  /// </summary>
  public async Task SnippetForSearchClientGetTask()
  {
    // >SEPARATOR getTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetTaskAsync("<YOUR_INDEX_NAME>", 123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetTopUserIds method.
  ///
  /// getTopUserIds
  /// </summary>
  public async Task SnippetForSearchClientGetTopUserIds()
  {
    // >SEPARATOR getTopUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetTopUserIdsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the GetUserId method.
  ///
  /// getUserId
  /// </summary>
  public async Task SnippetForSearchClientGetUserId()
  {
    // >SEPARATOR getUserId default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.GetUserIdAsync("uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the HasPendingMappings method.
  ///
  /// hasPendingMappings with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientHasPendingMappings()
  {
    // >SEPARATOR hasPendingMappings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.HasPendingMappingsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexExists
  /// </summary>
  public async Task SnippetForSearchClientIndexExists()
  {
    // >SEPARATOR indexExists indexExists
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexNotExists
  /// </summary>
  public async Task SnippetForSearchClientIndexExists1()
  {
    // >SEPARATOR indexExists indexNotExists
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the IndexExists method.
  ///
  /// indexExistsWithError
  /// </summary>
  public async Task SnippetForSearchClientIndexExists2()
  {
    // >SEPARATOR indexExists indexExistsWithError
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.IndexExistsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListApiKeys method.
  ///
  /// listApiKeys
  /// </summary>
  public async Task SnippetForSearchClientListApiKeys()
  {
    // >SEPARATOR listApiKeys default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListApiKeysAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListClusters method.
  ///
  /// listClusters
  /// </summary>
  public async Task SnippetForSearchClientListClusters()
  {
    // >SEPARATOR listClusters default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListClustersAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListIndices method.
  ///
  /// listIndices with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientListIndices()
  {
    // >SEPARATOR listIndices default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListIndicesAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ListUserIds method.
  ///
  /// listUserIds with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientListUserIds()
  {
    // >SEPARATOR listUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ListUserIdsAsync();
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the MultipleBatch method.
  ///
  /// multipleBatch
  /// </summary>
  public async Task SnippetForSearchClientMultipleBatch()
  {
    // >SEPARATOR multipleBatch default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.MultipleBatchAsync(
      new BatchParams
      {
        Requests = new List<MultipleBatchRequest>
        {
          new MultipleBatchRequest
          {
            Action = Enum.Parse<Action>("AddObject"),
            Body = new Dictionary<string, string> { { "key", "value" } },
            IndexName = "<YOUR_INDEX_NAME>",
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// scopes
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex()
  {
    // >SEPARATOR operationIndex scopes
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
        Scope = new List<ScopeType>
        {
          Enum.Parse<ScopeType>("Rules"),
          Enum.Parse<ScopeType>("Settings"),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// copy
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex1()
  {
    // >SEPARATOR operationIndex copy
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Copy"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the OperationIndex method.
  ///
  /// move
  /// </summary>
  public async Task SnippetForSearchClientOperationIndex2()
  {
    // >SEPARATOR operationIndex move
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.OperationIndexAsync(
      "<SOURCE_INDEX_NAME>",
      new OperationIndexParams
      {
        Operation = Enum.Parse<OperationType>("Move"),
        Destination = "<DESTINATION_INDEX_NAME>",
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObject method.
  ///
  /// Partial update with a new value for a string attribute
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObject()
  {
    // >SEPARATOR partialUpdateObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectAsync(
      "<YOUR_INDEX_NAME>",
      "uniqueID",
      new Dictionary<string, string> { { "attributeId", "new value" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObjects method.
  ///
  /// call partialUpdateObjects with createIfNotExists=true
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObjects()
  {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the PartialUpdateObjects method.
  ///
  /// call partialUpdateObjects with createIfNotExists=false
  /// </summary>
  public async Task SnippetForSearchClientPartialUpdateObjects1()
  {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.PartialUpdateObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "3" }, { "name", "Cyril" } },
        new Dictionary<string, string> { { "objectID", "4" }, { "name", "David" } },
      },
      false
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the RemoveUserId method.
  ///
  /// removeUserId
  /// </summary>
  public async Task SnippetForSearchClientRemoveUserId()
  {
    // >SEPARATOR removeUserId default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.RemoveUserIdAsync("uniqueID");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceAllObjects method.
  ///
  /// call replaceAllObjects without error
  /// </summary>
  public async Task SnippetForSearchClientReplaceAllObjects()
  {
    // >SEPARATOR replaceAllObjects default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceAllObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
        new Dictionary<string, string> { { "objectID", "3" }, { "name", "Cyril" } },
        new Dictionary<string, string> { { "objectID", "4" }, { "name", "David" } },
        new Dictionary<string, string> { { "objectID", "5" }, { "name", "Eva" } },
        new Dictionary<string, string> { { "objectID", "6" }, { "name", "Fiona" } },
        new Dictionary<string, string> { { "objectID", "7" }, { "name", "Gael" } },
        new Dictionary<string, string> { { "objectID", "8" }, { "name", "Hugo" } },
        new Dictionary<string, string> { { "objectID", "9" }, { "name", "Igor" } },
        new Dictionary<string, string> { { "objectID", "10" }, { "name", "Julia" } },
      },
      3
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the ReplaceSources method.
  ///
  /// replaceSources
  /// </summary>
  public async Task SnippetForSearchClientReplaceSources()
  {
    // >SEPARATOR replaceSources default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.ReplaceSourcesAsync(
      new List<Source>
      {
        new Source { VarSource = "theSource", Description = "theDescription" },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the RestoreApiKey method.
  ///
  /// restoreApiKey
  /// </summary>
  public async Task SnippetForSearchClientRestoreApiKey()
  {
    // >SEPARATOR restoreApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.RestoreApiKeyAsync("ALGOLIA_API_KEY");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObject method.
  ///
  /// saveObject
  /// </summary>
  public async Task SnippetForSearchClientSaveObject()
  {
    // >SEPARATOR saveObject default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectAsync(
      "<YOUR_INDEX_NAME>",
      new Dictionary<string, string> { { "objectID", "id" }, { "test", "val" } }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// call saveObjects without error
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects()
  {
    // >SEPARATOR saveObjects call saveObjects without error
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveObjects method.
  ///
  /// saveObjects should report errors
  /// </summary>
  public async Task SnippetForSearchClientSaveObjects1()
  {
    // >SEPARATOR saveObjects saveObjects should report errors
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveObjectsAsync(
      "<YOUR_INDEX_NAME>",
      new List<Object>
      {
        new Dictionary<string, string> { { "objectID", "1" }, { "name", "Adam" } },
        new Dictionary<string, string> { { "objectID", "2" }, { "name", "Benoit" } },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRule method.
  ///
  /// saveRule with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRule()
  {
    // >SEPARATOR saveRule default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRuleAsync(
      "<YOUR_INDEX_NAME>",
      "id1",
      new Rule
      {
        ObjectID = "id1",
        Conditions = new List<Condition>
        {
          new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains") },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveRules method.
  ///
  /// saveRules with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSaveRules()
  {
    // >SEPARATOR saveRules default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveRulesAsync(
      "<YOUR_INDEX_NAME>",
      new List<Rule>
      {
        new Rule
        {
          ObjectID = "a-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "smartphone", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
        },
        new Rule
        {
          ObjectID = "a-second-rule-id",
          Conditions = new List<Condition>
          {
            new Condition { Pattern = "apple", Anchoring = Enum.Parse<Anchoring>("Contains") },
          },
        },
      },
      false,
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveSynonym method.
  ///
  /// saveSynonym
  /// </summary>
  public async Task SnippetForSearchClientSaveSynonym()
  {
    // >SEPARATOR saveSynonym default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveSynonymAsync(
      "<YOUR_INDEX_NAME>",
      "id1",
      new SynonymHit
      {
        ObjectID = "id1",
        Type = Enum.Parse<SynonymType>("Synonym"),
        Synonyms = new List<string> { "car", "vehicule", "auto" },
      },
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SaveSynonyms method.
  ///
  /// saveSynonyms
  /// </summary>
  public async Task SnippetForSearchClientSaveSynonyms()
  {
    // >SEPARATOR saveSynonyms default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SaveSynonymsAsync(
      "<YOUR_INDEX_NAME>",
      new List<SynonymHit>
      {
        new SynonymHit
        {
          ObjectID = "id1",
          Type = Enum.Parse<SynonymType>("Synonym"),
          Synonyms = new List<string> { "car", "vehicule", "auto" },
        },
        new SynonymHit
        {
          ObjectID = "id2",
          Type = Enum.Parse<SynonymType>("Onewaysynonym"),
          Input = "iphone",
          Synonyms = new List<string> { "ephone", "aphone", "yphone" },
        },
      },
      true,
      true
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// withHitsPerPage
  /// </summary>
  public async Task SnippetForSearchClientSearch()
  {
    // >SEPARATOR search withHitsPerPage
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              HitsPerPage = 50,
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterOnly
  /// </summary>
  public async Task SnippetForSearchClientSearch1()
  {
    // >SEPARATOR search filterOnly
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Scarlett Johansson",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterOr
  /// </summary>
  public async Task SnippetForSearchClientSearch2()
  {
    // >SEPARATOR search filterOr
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "actor:Tom Cruise OR actor:Scarlett Johansson",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// filterNot
  /// </summary>
  public async Task SnippetForSearchClientSearch3()
  {
    // >SEPARATOR search filterNot
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Filters = "NOT actor:Nicolas Cage",
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// retrieveFacets
  /// </summary>
  public async Task SnippetForSearchClientSearch4()
  {
    // >SEPARATOR search retrieveFacets
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "author", "genre" },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the Search method.
  ///
  /// retrieveFacetsWildcard
  /// </summary>
  public async Task SnippetForSearchClientSearch5()
  {
    // >SEPARATOR search retrieveFacetsWildcard
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchAsync<Hit>(
      new SearchMethodParams
      {
        Requests = new List<SearchQuery>
        {
          new SearchQuery(
            new SearchForHits
            {
              IndexName = "<YOUR_INDEX_NAME>",
              Query = "<YOUR_QUERY>",
              Facets = new List<string> { "*" },
            }
          ),
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchDictionaryEntries method.
  ///
  /// get searchDictionaryEntries results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchDictionaryEntries()
  {
    // >SEPARATOR searchDictionaryEntries default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchDictionaryEntriesAsync(
      Enum.Parse<DictionaryType>("Stopwords"),
      new SearchDictionaryEntriesParams { Query = "about" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchForFacetValues method.
  ///
  /// get searchForFacetValues results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchForFacetValues()
  {
    // >SEPARATOR searchForFacetValues default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchForFacetValuesAsync("<YOUR_INDEX_NAME>", "facetName");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchRules method.
  ///
  /// searchRules
  /// </summary>
  public async Task SnippetForSearchClientSearchRules()
  {
    // >SEPARATOR searchRules default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchRulesAsync(
      "<YOUR_INDEX_NAME>",
      new SearchRulesParams { Query = "zorro" }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSingleIndex method.
  ///
  /// search with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchSingleIndex()
  {
    // >SEPARATOR searchSingleIndex default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSingleIndexAsync<Hit>("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchSynonyms method.
  ///
  /// searchSynonyms with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSearchSynonyms()
  {
    // >SEPARATOR searchSynonyms default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchSynonymsAsync("<YOUR_INDEX_NAME>");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SearchUserIds method.
  ///
  /// searchUserIds
  /// </summary>
  public async Task SnippetForSearchClientSearchUserIds()
  {
    // >SEPARATOR searchUserIds default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SearchUserIdsAsync(
      new SearchUserIdsParams
      {
        Query = "test",
        ClusterName = "theClusterName",
        Page = 5,
        HitsPerPage = 10,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetClientApiKey method.
  ///
  /// switch API key
  /// </summary>
  public async Task SnippetForSearchClientSetClientApiKey()
  {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    client.SetClientApiKey("updated-api-key");
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetDictionarySettings method.
  ///
  /// get setDictionarySettings results with minimal parameters
  /// </summary>
  public async Task SnippetForSearchClientSetDictionarySettings()
  {
    // >SEPARATOR setDictionarySettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetDictionarySettingsAsync(
      new DictionarySettingsParams
      {
        DisableStandardEntries = new StandardEntries
        {
          Plurals = new Dictionary<string, Boolean>
          {
            { "fr", false },
            { "en", false },
            { "ru", true },
          },
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the SetSettings method.
  ///
  /// setSettingsAttributesForFaceting
  /// </summary>
  public async Task SnippetForSearchClientSetSettings()
  {
    // >SEPARATOR setSettings default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.SetSettingsAsync(
      "<YOUR_INDEX_NAME>",
      new IndexSettings
      {
        AttributesForFaceting = new List<string>
        {
          "actor",
          "filterOnly(category)",
          "searchable(publisher)",
        },
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the UpdateApiKey method.
  ///
  /// updateApiKey
  /// </summary>
  public async Task SnippetForSearchClientUpdateApiKey()
  {
    // >SEPARATOR updateApiKey default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.UpdateApiKeyAsync(
      "ALGOLIA_API_KEY",
      new ApiKey
      {
        Acl = new List<Acl> { Enum.Parse<Acl>("Search"), Enum.Parse<Acl>("AddObject") },
        Validity = 300,
        MaxQueriesPerIPPerHour = 100,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key helper - add
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey()
  {
    // >SEPARATOR waitForApiKey wait for api key helper - add
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-add-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Add")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key - update
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey1()
  {
    // >SEPARATOR waitForApiKey wait for api key - update
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-update-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Update"),
      new ApiKey
      {
        Description = "my updated api key",
        Acl = new List<Acl>
        {
          Enum.Parse<Acl>("Search"),
          Enum.Parse<Acl>("AddObject"),
          Enum.Parse<Acl>("DeleteObject"),
        },
        Indexes = new List<string> { "Movies", "Books" },
        Referers = new List<string> { "*google.com", "*algolia.com" },
        Validity = 305,
        MaxQueriesPerIPPerHour = 95,
        MaxHitsPerQuery = 20,
      }
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForApiKey method.
  ///
  /// wait for api key - delete
  /// </summary>
  public async Task SnippetForSearchClientWaitForApiKey2()
  {
    // >SEPARATOR waitForApiKey wait for api key - delete
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForApiKeyAsync(
      "api-key-delete-operation-test-csharp",
      Enum.Parse<ApiKeyOperation>("Delete")
    );
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForAppTask method.
  ///
  /// wait for an application-level task
  /// </summary>
  public async Task SnippetForSearchClientWaitForAppTask()
  {
    // >SEPARATOR waitForAppTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForAppTaskAsync(123L);
    // >LOG
    // SEPARATOR<
  }

  /// <summary>
  /// Snippet for the WaitForTask method.
  ///
  /// wait for task
  /// </summary>
  public async Task SnippetForSearchClientWaitForTask()
  {
    // >SEPARATOR waitForTask default
    // Initialize the client
    var client = new SearchClient(new SearchConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY"));

    // Call the API
    var response = await client.WaitForTaskAsync("<YOUR_INDEX_NAME>", 123L);
    // >LOG
    // SEPARATOR<
  }
}
