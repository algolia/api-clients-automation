// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.methods.snippets

import scala.concurrent.duration.Duration

// >IMPORT
import algoliasearch.api.SearchClient
// IMPORT<
import algoliasearch.search.*

import org.json4s.*
import org.json4s.native.JsonParser.*
import scala.concurrent.{Await, ExecutionContextExecutor}

class SnippetSearchClient {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  /** Snippet for the addApiKey method.
    *
    * addApiKey
    */
  def snippetForSearchClientAddApiKey(): Unit = {
    // >SEPARATOR addApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.addApiKey(
      apiKey = ApiKey(
        acl = Seq(Acl.withName("search"), Acl.withName("addObject")),
        description = Some("my new api key"),
        validity = Some(300),
        maxQueriesPerIPPerHour = Some(100),
        maxHitsPerQuery = Some(20)
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the addOrUpdateObject method.
    *
    * addOrUpdateObject
    */
  def snippetForSearchClientAddOrUpdateObject(): Unit = {
    // >SEPARATOR addOrUpdateObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.addOrUpdateObject(
      indexName = "indexName",
      objectID = "uniqueID",
      body = JObject(List(JField("key", JString("value"))))
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the appendSource method.
    *
    * appendSource
    */
  def snippetForSearchClientAppendSource(): Unit = {
    // >SEPARATOR appendSource default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.appendSource(
      source = Source(
        source = "theSource",
        description = Some("theDescription")
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the assignUserId method.
    *
    * assignUserId
    */
  def snippetForSearchClientAssignUserId(): Unit = {
    // >SEPARATOR assignUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.assignUserId(
      xAlgoliaUserID = "userID",
      assignUserIdParams = AssignUserIdParams(
        cluster = "theCluster"
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * addObject
    */
  def snippetForSearchClientBatch(): Unit = {
    // >SEPARATOR batch addObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("addObject"),
            body = JObject(List(JField("key", JString("bar")), JField("foo", JString("1"))))
          ),
          BatchRequest(
            action = Action.withName("addObject"),
            body = JObject(List(JField("key", JString("baz")), JField("foo", JString("2"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * clear
    */
  def snippetForSearchClientBatch1(): Unit = {
    // >SEPARATOR batch clear
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("clear"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * delete
    */
  def snippetForSearchClientBatch2(): Unit = {
    // >SEPARATOR batch delete
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("delete"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * deleteObject
    */
  def snippetForSearchClientBatch3(): Unit = {
    // >SEPARATOR batch deleteObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("deleteObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * partialUpdateObject
    */
  def snippetForSearchClientBatch4(): Unit = {
    // >SEPARATOR batch partialUpdateObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("partialUpdateObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * partialUpdateObjectNoCreate
    */
  def snippetForSearchClientBatch5(): Unit = {
    // >SEPARATOR batch partialUpdateObjectNoCreate
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("partialUpdateObjectNoCreate"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batch method.
    *
    * updateObject
    */
  def snippetForSearchClientBatch6(): Unit = {
    // >SEPARATOR batch updateObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = Seq(
          BatchRequest(
            action = Action.withName("updateObject"),
            body = JObject(List(JField("key", JString("value"))))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchAssignUserIds method.
    *
    * batchAssignUserIds
    */
  def snippetForSearchClientBatchAssignUserIds(): Unit = {
    // >SEPARATOR batchAssignUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batchAssignUserIds(
      xAlgoliaUserID = "userID",
      batchAssignUserIdsParams = BatchAssignUserIdsParams(
        cluster = "theCluster",
        users = Seq("user1", "user2")
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * replace
    */
  def snippetForSearchClientBatchDictionaryEntries(): Unit = {
    // >SEPARATOR batchDictionaryEntries replace
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("plurals"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = Some(true),
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("addEntry"),
            body = DictionaryEntry(
              objectID = "1",
              language = Some(SupportedLanguage.withName("en")),
              word = Some("fancy"),
              words = Some(Seq("believe", "algolia")),
              decomposition = Some(Seq("trust", "algolia")),
              state = Some(DictionaryEntryState.withName("enabled"))
            )
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * delete
    */
  def snippetForSearchClientBatchDictionaryEntries1(): Unit = {
    // >SEPARATOR batchDictionaryEntries delete
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("plurals"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = Some(true),
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("deleteEntry"),
            body = DictionaryEntry(
              objectID = "1"
            )
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the batchDictionaryEntries method.
    *
    * append
    */
  def snippetForSearchClientBatchDictionaryEntries2(): Unit = {
    // >SEPARATOR batchDictionaryEntries append
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.withName("stopwords"),
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        requests = Seq(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.withName("addEntry"),
            body = DictionaryEntry(
              objectID = "1",
              language = Some(SupportedLanguage.withName("en")),
              additionalProperties = Some(List(JField("additional", JString("try me"))))
            )
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the browse method.
    *
    * browse with minimal parameters
    */
  def snippetForSearchClientBrowse(): Unit = {
    // >SEPARATOR browse default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.browse(
      indexName = "cts_e2e_browse"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearObjects method.
    *
    * clearObjects
    */
  def snippetForSearchClientClearObjects(): Unit = {
    // >SEPARATOR clearObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.clearObjects(
      indexName = "theIndexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearRules method.
    *
    * clearRules
    */
  def snippetForSearchClientClearRules(): Unit = {
    // >SEPARATOR clearRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.clearRules(
      indexName = "indexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the clearSynonyms method.
    *
    * clearSynonyms
    */
  def snippetForSearchClientClearSynonyms(): Unit = {
    // >SEPARATOR clearSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.clearSynonyms(
      indexName = "indexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customDelete method.
    *
    * allow del method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomDelete(): Unit = {
    // >SEPARATOR customDelete default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.customDelete[JObject](
      path = "test/minimal"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customGet method.
    *
    * allow get method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomGet(): Unit = {
    // >SEPARATOR customGet default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.customGet[JObject](
      path = "test/minimal"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPost method.
    *
    * allow post method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomPost(): Unit = {
    // >SEPARATOR customPost default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.customPost[JObject](
      path = "test/minimal"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the customPut method.
    *
    * allow put method for a custom path with minimal parameters
    */
  def snippetForSearchClientCustomPut(): Unit = {
    // >SEPARATOR customPut default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.customPut[JObject](
      path = "test/minimal"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteApiKey method.
    *
    * deleteApiKey
    */
  def snippetForSearchClientDeleteApiKey(): Unit = {
    // >SEPARATOR deleteApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteApiKey(
      key = "myTestApiKey"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteBy method.
    *
    * deleteBy
    */
  def snippetForSearchClientDeleteBy(): Unit = {
    // >SEPARATOR deleteBy default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteBy(
      indexName = "theIndexName",
      deleteByParams = DeleteByParams(
        filters = Some("brand:brandName")
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteIndex method.
    *
    * deleteIndex
    */
  def snippetForSearchClientDeleteIndex(): Unit = {
    // >SEPARATOR deleteIndex default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteIndex(
      indexName = "theIndexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteObject method.
    *
    * deleteObject
    */
  def snippetForSearchClientDeleteObject(): Unit = {
    // >SEPARATOR deleteObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteRule method.
    *
    * delete rule simple case
    */
  def snippetForSearchClientDeleteRule(): Unit = {
    // >SEPARATOR deleteRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteRule(
      indexName = "indexName",
      objectID = "id1"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteSource method.
    *
    * deleteSource
    */
  def snippetForSearchClientDeleteSource(): Unit = {
    // >SEPARATOR deleteSource default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteSource(
      source = "theSource"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the deleteSynonym method.
    *
    * deleteSynonym
    */
  def snippetForSearchClientDeleteSynonym(): Unit = {
    // >SEPARATOR deleteSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.deleteSynonym(
      indexName = "indexName",
      objectID = "id1"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getApiKey method.
    *
    * getApiKey
    */
  def snippetForSearchClientGetApiKey(): Unit = {
    // >SEPARATOR getApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getApiKey(
      key = "myTestApiKey"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getAppTask method.
    *
    * getAppTask
    */
  def snippetForSearchClientGetAppTask(): Unit = {
    // >SEPARATOR getAppTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getAppTask(
      taskID = 123L
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getDictionaryLanguages method.
    *
    * get getDictionaryLanguages
    */
  def snippetForSearchClientGetDictionaryLanguages(): Unit = {
    // >SEPARATOR getDictionaryLanguages default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getDictionaryLanguages(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getDictionarySettings method.
    *
    * get getDictionarySettings results
    */
  def snippetForSearchClientGetDictionarySettings(): Unit = {
    // >SEPARATOR getDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getDictionarySettings(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getLogs method.
    *
    * getLogs with minimal parameters
    */
  def snippetForSearchClientGetLogs(): Unit = {
    // >SEPARATOR getLogs default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getLogs(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getObject method.
    *
    * getObject
    */
  def snippetForSearchClientGetObject(): Unit = {
    // >SEPARATOR getObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getObject(
      indexName = "theIndexName",
      objectID = "uniqueID",
      attributesToRetrieve = Some(Seq("attr1", "attr2"))
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getObjects method.
    *
    * getObjects
    */
  def snippetForSearchClientGetObjects(): Unit = {
    // >SEPARATOR getObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getObjects(
      getObjectsParams = GetObjectsParams(
        requests = Seq(
          GetObjectsRequest(
            attributesToRetrieve = Some(Seq("attr1", "attr2")),
            objectID = "uniqueID",
            indexName = "theIndexName"
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getRule method.
    *
    * getRule
    */
  def snippetForSearchClientGetRule(): Unit = {
    // >SEPARATOR getRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getRule(
      indexName = "indexName",
      objectID = "id1"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSettings method.
    *
    * getSettings
    */
  def snippetForSearchClientGetSettings(): Unit = {
    // >SEPARATOR getSettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getSettings(
      indexName = "cts_e2e_settings"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSources method.
    *
    * getSources
    */
  def snippetForSearchClientGetSources(): Unit = {
    // >SEPARATOR getSources default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getSources(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getSynonym method.
    *
    * getSynonym
    */
  def snippetForSearchClientGetSynonym(): Unit = {
    // >SEPARATOR getSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getSynonym(
      indexName = "indexName",
      objectID = "id1"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTask method.
    *
    * getTask
    */
  def snippetForSearchClientGetTask(): Unit = {
    // >SEPARATOR getTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getTask(
      indexName = "theIndexName",
      taskID = 123L
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getTopUserIds method.
    *
    * getTopUserIds
    */
  def snippetForSearchClientGetTopUserIds(): Unit = {
    // >SEPARATOR getTopUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getTopUserIds(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the getUserId method.
    *
    * getUserId
    */
  def snippetForSearchClientGetUserId(): Unit = {
    // >SEPARATOR getUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.getUserId(
      userID = "uniqueID"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the hasPendingMappings method.
    *
    * hasPendingMappings with minimal parameters
    */
  def snippetForSearchClientHasPendingMappings(): Unit = {
    // >SEPARATOR hasPendingMappings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.hasPendingMappings(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listApiKeys method.
    *
    * listApiKeys
    */
  def snippetForSearchClientListApiKeys(): Unit = {
    // >SEPARATOR listApiKeys default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.listApiKeys(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listClusters method.
    *
    * listClusters
    */
  def snippetForSearchClientListClusters(): Unit = {
    // >SEPARATOR listClusters default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.listClusters(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listIndices method.
    *
    * listIndices with minimal parameters
    */
  def snippetForSearchClientListIndices(): Unit = {
    // >SEPARATOR listIndices default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.listIndices(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the listUserIds method.
    *
    * listUserIds with minimal parameters
    */
  def snippetForSearchClientListUserIds(): Unit = {
    // >SEPARATOR listUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.listUserIds(
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the multipleBatch method.
    *
    * multipleBatch
    */
  def snippetForSearchClientMultipleBatch(): Unit = {
    // >SEPARATOR multipleBatch default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.multipleBatch(
      batchParams = BatchParams(
        requests = Seq(
          MultipleBatchRequest(
            action = Action.withName("addObject"),
            body = Some(JObject(List(JField("key", JString("value"))))),
            indexName = "theIndexName"
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * scopes
    */
  def snippetForSearchClientOperationIndex(): Unit = {
    // >SEPARATOR operationIndex scopes
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("move"),
        destination = "<DESTINATION_INDEX_NAME>",
        scope = Some(Seq(ScopeType.withName("rules"), ScopeType.withName("settings")))
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * copy
    */
  def snippetForSearchClientOperationIndex1(): Unit = {
    // >SEPARATOR operationIndex copy
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("copy"),
        destination = "<DESTINATION_INDEX_NAME>"
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the operationIndex method.
    *
    * move
    */
  def snippetForSearchClientOperationIndex2(): Unit = {
    // >SEPARATOR operationIndex move
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.withName("move"),
        destination = "<DESTINATION_INDEX_NAME>"
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the partialUpdateObject method.
    *
    * Partial update with string value
    */
  def snippetForSearchClientPartialUpdateObject(): Unit = {
    // >SEPARATOR partialUpdateObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.partialUpdateObject(
      indexName = "theIndexName",
      objectID = "uniqueID",
      attributesToUpdate = Map(
        "id1" -> AttributeToUpdate("test"),
        "id2" -> BuiltInOperation(
          _operation = BuiltInOperationType.withName("AddUnique"),
          value = BuiltInOperationValue("test2")
        )
      ),
      createIfNotExists = Some(true)
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the removeUserId method.
    *
    * removeUserId
    */
  def snippetForSearchClientRemoveUserId(): Unit = {
    // >SEPARATOR removeUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.removeUserId(
      userID = "uniqueID"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the replaceSources method.
    *
    * replaceSources
    */
  def snippetForSearchClientReplaceSources(): Unit = {
    // >SEPARATOR replaceSources default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.replaceSources(
      source = Seq(
        Source(
          source = "theSource",
          description = Some("theDescription")
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the restoreApiKey method.
    *
    * restoreApiKey
    */
  def snippetForSearchClientRestoreApiKey(): Unit = {
    // >SEPARATOR restoreApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.restoreApiKey(
      key = "myApiKey"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveObject method.
    *
    * saveObject
    */
  def snippetForSearchClientSaveObject(): Unit = {
    // >SEPARATOR saveObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.saveObject(
      indexName = "<YOUR_INDEX_NAME>",
      body = JObject(List(JField("objectID", JString("id")), JField("test", JString("val"))))
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRule method.
    *
    * saveRule with minimal parameters
    */
  def snippetForSearchClientSaveRule(): Unit = {
    // >SEPARATOR saveRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.saveRule(
      indexName = "indexName",
      objectID = "id1",
      rule = Rule(
        objectID = "id1",
        conditions = Some(
          Seq(
            Condition(
              pattern = Some("apple"),
              anchoring = Some(Anchoring.withName("contains"))
            )
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveRules method.
    *
    * saveRules with minimal parameters
    */
  def snippetForSearchClientSaveRules(): Unit = {
    // >SEPARATOR saveRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.saveRules(
      indexName = "<YOUR_INDEX_NAME>",
      rules = Seq(
        Rule(
          objectID = "a-rule-id",
          conditions = Some(
            Seq(
              Condition(
                pattern = Some("smartphone"),
                anchoring = Some(Anchoring.withName("contains"))
              )
            )
          )
        ),
        Rule(
          objectID = "a-second-rule-id",
          conditions = Some(
            Seq(
              Condition(
                pattern = Some("apple"),
                anchoring = Some(Anchoring.withName("contains"))
              )
            )
          )
        )
      ),
      forwardToReplicas = Some(false),
      clearExistingRules = Some(true)
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveSynonym method.
    *
    * saveSynonym
    */
  def snippetForSearchClientSaveSynonym(): Unit = {
    // >SEPARATOR saveSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.saveSynonym(
      indexName = "indexName",
      objectID = "id1",
      synonymHit = SynonymHit(
        objectID = "id1",
        `type` = SynonymType.withName("synonym"),
        synonyms = Some(Seq("car", "vehicule", "auto"))
      ),
      forwardToReplicas = Some(true)
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the saveSynonyms method.
    *
    * saveSynonyms
    */
  def snippetForSearchClientSaveSynonyms(): Unit = {
    // >SEPARATOR saveSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.saveSynonyms(
      indexName = "<YOUR_INDEX_NAME>",
      synonymHit = Seq(
        SynonymHit(
          objectID = "id1",
          `type` = SynonymType.withName("synonym"),
          synonyms = Some(Seq("car", "vehicule", "auto"))
        ),
        SynonymHit(
          objectID = "id2",
          `type` = SynonymType.withName("onewaysynonym"),
          input = Some("iphone"),
          synonyms = Some(Seq("ephone", "aphone", "yphone"))
        )
      ),
      forwardToReplicas = Some(true),
      replaceExistingSynonyms = Some(true)
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * withHitsPerPage
    */
  def snippetForSearchClientSearch(): Unit = {
    // >SEPARATOR search withHitsPerPage
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            hitsPerPage = Some(50)
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterOnly
    */
  def snippetForSearchClientSearch1(): Unit = {
    // >SEPARATOR search filterOnly
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("actor:Scarlett Johansson")
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterOr
    */
  def snippetForSearchClientSearch2(): Unit = {
    // >SEPARATOR search filterOr
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("actor:Tom Cruise OR actor:Scarlett Johansson")
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * filterNot
    */
  def snippetForSearchClientSearch3(): Unit = {
    // >SEPARATOR search filterNot
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            filters = Some("NOT actor:Nicolas Cage")
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * retrieveFacets
    */
  def snippetForSearchClientSearch6(): Unit = {
    // >SEPARATOR search retrieveFacets
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            facets = Some(Seq("author", "genre"))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the search method.
    *
    * retrieveFacetsWildcard
    */
  def snippetForSearchClientSearch7(): Unit = {
    // >SEPARATOR search retrieveFacetsWildcard
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = Seq(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = Some("<YOUR_QUERY>"),
            facets = Some(Seq("*"))
          )
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchDictionaryEntries method.
    *
    * get searchDictionaryEntries results with minimal parameters
    */
  def snippetForSearchClientSearchDictionaryEntries(): Unit = {
    // >SEPARATOR searchDictionaryEntries default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchDictionaryEntries(
      dictionaryName = DictionaryType.withName("stopwords"),
      searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
        query = "about"
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchForFacetValues method.
    *
    * get searchForFacetValues results with minimal parameters
    */
  def snippetForSearchClientSearchForFacetValues(): Unit = {
    // >SEPARATOR searchForFacetValues default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchForFacetValues(
      indexName = "indexName",
      facetName = "facetName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchRules method.
    *
    * searchRules
    */
  def snippetForSearchClientSearchRules(): Unit = {
    // >SEPARATOR searchRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchRules(
      indexName = "indexName",
      searchRulesParams = Some(
        SearchRulesParams(
          query = Some("something")
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSingleIndex method.
    *
    * search with minimal parameters
    */
  def snippetForSearchClientSearchSingleIndex(): Unit = {
    // >SEPARATOR searchSingleIndex default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchSingleIndex(
      indexName = "indexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchSynonyms method.
    *
    * searchSynonyms with minimal parameters
    */
  def snippetForSearchClientSearchSynonyms(): Unit = {
    // >SEPARATOR searchSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchSynonyms(
      indexName = "indexName"
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the searchUserIds method.
    *
    * searchUserIds
    */
  def snippetForSearchClientSearchUserIds(): Unit = {
    // >SEPARATOR searchUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.searchUserIds(
      searchUserIdsParams = SearchUserIdsParams(
        query = "test",
        clusterName = Some("theClusterName"),
        page = Some(5),
        hitsPerPage = Some(10)
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setDictionarySettings method.
    *
    * get setDictionarySettings results with minimal parameters
    */
  def snippetForSearchClientSetDictionarySettings(): Unit = {
    // >SEPARATOR setDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.setDictionarySettings(
      dictionarySettingsParams = DictionarySettingsParams(
        disableStandardEntries = StandardEntries(
          plurals = Some(Map("fr" -> false, "en" -> false, "ru" -> true))
        )
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the setSettings method.
    *
    * setSettingsAttributesForFaceting
    */
  def snippetForSearchClientSetSettings(): Unit = {
    // >SEPARATOR setSettings setSettingsAttributesForFaceting
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = Some(Seq("actor", "filterOnly(category)", "searchable(publisher)"))
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

  /** Snippet for the updateApiKey method.
    *
    * updateApiKey
    */
  def snippetForSearchClientUpdateApiKey(): Unit = {
    // >SEPARATOR updateApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    val response = client.updateApiKey(
      key = "myApiKey",
      apiKey = ApiKey(
        acl = Seq(Acl.withName("search"), Acl.withName("addObject")),
        validity = Some(300),
        maxQueriesPerIPPerHour = Some(100),
        maxHitsPerQuery = Some(20)
      )
    )

    // Use the response
    val value = Await.result(response, Duration(100, "sec"))
    // SEPARATOR<
  }

}
