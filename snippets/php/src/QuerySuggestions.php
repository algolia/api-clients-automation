<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Snippets;

// >IMPORT
use Algolia\AlgoliaSearch\Api\QuerySuggestionsClient;

// IMPORT<

class SnippetQuerySuggestionsClient
{
    /**
     * Snippet for the CreateConfig method.
     *
     * createConfig
     */
    public function snippetForCreateConfig(): void
    {
        // >SEPARATOR createConfig default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->createConfig(
            ['indexName' => '<YOUR_INDEX_NAME>',
                'sourceIndices' => [
                    ['indexName' => '<YOUR_INDEX_NAME>',
                        'facets' => [
                            ['attribute' => 'test',
                            ],
                        ],
                        'generate' => [
                            [
                                'facetA',

                                'facetB',
                            ],

                            [
                                'facetC',
                            ],
                        ],
                    ],
                ],
                'languages' => [
                    'french',
                ],
                'exclude' => [
                    'test',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomDelete method.
     *
     * allow del method for a custom path with minimal parameters
     */
    public function snippetForCustomDelete(): void
    {
        // >SEPARATOR customDelete default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->customDelete(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomGet method.
     *
     * allow get method for a custom path with minimal parameters
     */
    public function snippetForCustomGet(): void
    {
        // >SEPARATOR customGet default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->customGet(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * allow post method for a custom path with minimal parameters
     */
    public function snippetForCustomPost(): void
    {
        // >SEPARATOR customPost default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->customPost(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPut method.
     *
     * allow put method for a custom path with minimal parameters
     */
    public function snippetForCustomPut(): void
    {
        // >SEPARATOR customPut default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->customPut(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteConfig method.
     *
     * deleteConfig
     */
    public function snippetForDeleteConfig(): void
    {
        // >SEPARATOR deleteConfig default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->deleteConfig(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetAllConfigs method.
     *
     * getAllConfigs
     */
    public function snippetForGetAllConfigs(): void
    {
        // >SEPARATOR getAllConfigs default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->getAllConfigs();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetConfig method.
     *
     * Retrieve QS config e2e
     */
    public function snippetForGetConfig(): void
    {
        // >SEPARATOR getConfig default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->getConfig(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetConfigStatus method.
     *
     * getConfigStatus
     */
    public function snippetForGetConfigStatus(): void
    {
        // >SEPARATOR getConfigStatus default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->getConfigStatus(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetLogFile method.
     *
     * getLogFile
     */
    public function snippetForGetLogFile(): void
    {
        // >SEPARATOR getLogFile default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->getLogFile(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetClientApiKey method.
     *
     * switch API key
     */
    public function snippetForSetClientApiKey(): void
    {
        // >SEPARATOR setClientApiKey default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $client->setClientApiKey(
            'updated-api-key',
        );

        // >LOG
        // SEPARATOR<
    }

    /**
     * Snippet for the UpdateConfig method.
     *
     * updateConfig
     */
    public function snippetForUpdateConfig(): void
    {
        // >SEPARATOR updateConfig default
        // Initialize the client
        $client = QuerySuggestionsClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');

        // Call the API
        $response = $client->updateConfig(
            '<YOUR_INDEX_NAME>',
            ['sourceIndices' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'facets' => [
                        ['attribute' => 'test',
                        ],
                    ],
                    'generate' => [
                        [
                            'facetA',

                            'facetB',
                        ],

                        [
                            'facetC',
                        ],
                    ],
                ],
            ],
                'languages' => [
                    'french',
                ],
                'exclude' => [
                    'test',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }
}
