<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Snippets;

// >IMPORT
use Algolia\AlgoliaSearch\Api\SearchClient;

// IMPORT<

class SnippetSearchClient
{
    /**
     * Snippet for the AddApiKey method.
     *
     * addApiKey
     */
    public function snippetForAddApiKey(): void
    {
        // >SEPARATOR addApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->addApiKey(
            ['acl' => [
                'search',

                'addObject',
            ],
                'description' => 'my new api key',
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AddOrUpdateObject method.
     *
     * addOrUpdateObject
     */
    public function snippetForAddOrUpdateObject(): void
    {
        // >SEPARATOR addOrUpdateObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->addOrUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['key' => 'value',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AppendSource method.
     *
     * appendSource
     */
    public function snippetForAppendSource(): void
    {
        // >SEPARATOR appendSource default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->appendSource(
            ['source' => 'theSource',
                'description' => 'theDescription',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the AssignUserId method.
     *
     * assignUserId
     */
    public function snippetForAssignUserId(): void
    {
        // >SEPARATOR assignUserId default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->assignUserId(
            'userID',
            ['cluster' => 'theCluster',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * addObject
     */
    public function snippetForBatch(): void
    {
        // >SEPARATOR batch addObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'bar',
                        'foo' => '1',
                    ],
                ],

                ['action' => 'addObject',
                    'body' => ['key' => 'baz',
                        'foo' => '2',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * clear
     */
    public function snippetForBatch1(): void
    {
        // >SEPARATOR batch clear
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'clear',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * delete
     */
    public function snippetForBatch2(): void
    {
        // >SEPARATOR batch delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'delete',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * deleteObject
     */
    public function snippetForBatch3(): void
    {
        // >SEPARATOR batch deleteObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'deleteObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * partialUpdateObject
     */
    public function snippetForBatch4(): void
    {
        // >SEPARATOR batch partialUpdateObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * partialUpdateObjectNoCreate
     */
    public function snippetForBatch5(): void
    {
        // >SEPARATOR batch partialUpdateObjectNoCreate
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObjectNoCreate',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Batch method.
     *
     * updateObject
     */
    public function snippetForBatch6(): void
    {
        // >SEPARATOR batch updateObject
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'updateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchAssignUserIds method.
     *
     * batchAssignUserIds
     */
    public function snippetForBatchAssignUserIds(): void
    {
        // >SEPARATOR batchAssignUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchAssignUserIds(
            'userID',
            ['cluster' => 'theCluster',
                'users' => [
                    'user1',

                    'user2',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * replace
     */
    public function snippetForBatchDictionaryEntries(): void
    {
        // >SEPARATOR batchDictionaryEntries replace
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'addEntry',
                        'body' => ['objectID' => '1',
                            'language' => 'en',
                            'word' => 'fancy',
                            'words' => [
                                'believe',

                                'algolia',
                            ],
                            'decomposition' => [
                                'trust',

                                'algolia',
                            ],
                            'state' => 'enabled',
                        ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * delete
     */
    public function snippetForBatchDictionaryEntries1(): void
    {
        // >SEPARATOR batchDictionaryEntries delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'deleteEntry',
                        'body' => ['objectID' => '1',
                        ],
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the BatchDictionaryEntries method.
     *
     * append
     */
    public function snippetForBatchDictionaryEntries2(): void
    {
        // >SEPARATOR batchDictionaryEntries append
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->batchDictionaryEntries(
            'stopwords',
            ['requests' => [
                ['action' => 'addEntry',
                    'body' => ['objectID' => '1',
                        'language' => 'en',
                        'additional' => 'try me',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Browse method.
     *
     * browse with minimal parameters
     */
    public function snippetForBrowse(): void
    {
        // >SEPARATOR browse default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->browse(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearObjects method.
     *
     * clearObjects
     */
    public function snippetForClearObjects(): void
    {
        // >SEPARATOR clearObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearObjects(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearRules method.
     *
     * clearRules
     */
    public function snippetForClearRules(): void
    {
        // >SEPARATOR clearRules default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearRules(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ClearSynonyms method.
     *
     * clearSynonyms
     */
    public function snippetForClearSynonyms(): void
    {
        // >SEPARATOR clearSynonyms default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->clearSynonyms(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomDelete method.
     *
     * allow del method for a custom path with minimal parameters
     */
    public function snippetForCustomDelete(): void
    {
        // >SEPARATOR customDelete default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customDelete(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomGet method.
     *
     * allow get method for a custom path with minimal parameters
     */
    public function snippetForCustomGet(): void
    {
        // >SEPARATOR customGet default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customGet(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPost method.
     *
     * allow post method for a custom path with minimal parameters
     */
    public function snippetForCustomPost(): void
    {
        // >SEPARATOR customPost default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPost(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the CustomPut method.
     *
     * allow put method for a custom path with minimal parameters
     */
    public function snippetForCustomPut(): void
    {
        // >SEPARATOR customPut default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->customPut(
            'test/minimal',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteApiKey method.
     *
     * deleteApiKey
     */
    public function snippetForDeleteApiKey(): void
    {
        // >SEPARATOR deleteApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteApiKey(
            'myTestApiKey',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteBy method.
     *
     * deleteBy
     */
    public function snippetForDeleteBy(): void
    {
        // >SEPARATOR deleteBy default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteBy(
            '<YOUR_INDEX_NAME>',
            ['filters' => 'brand:brandName',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteIndex method.
     *
     * deleteIndex
     */
    public function snippetForDeleteIndex(): void
    {
        // >SEPARATOR deleteIndex default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteIndex(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteObject method.
     *
     * deleteObject
     */
    public function snippetForDeleteObject(): void
    {
        // >SEPARATOR deleteObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteObjects method.
     *
     * call deleteObjects without error
     */
    public function snippetForDeleteObjects(): void
    {
        // >SEPARATOR deleteObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteObjects(
            '<YOUR_INDEX_NAME>',
            [
                '1',

                '2',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteRule method.
     *
     * delete rule simple case
     */
    public function snippetForDeleteRule(): void
    {
        // >SEPARATOR deleteRule default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteRule(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteSource method.
     *
     * deleteSource
     */
    public function snippetForDeleteSource(): void
    {
        // >SEPARATOR deleteSource default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteSource(
            'theSource',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the DeleteSynonym method.
     *
     * deleteSynonym
     */
    public function snippetForDeleteSynonym(): void
    {
        // >SEPARATOR deleteSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->deleteSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * generate secured api key basic
     */
    public function snippetForGenerateSecuredApiKey(): void
    {
        // >SEPARATOR generateSecuredApiKey generate secured api key basic
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['validUntil' => 2524604400,
                'restrictIndices' => [
                    'Movies',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GenerateSecuredApiKey method.
     *
     * generate secured api key with searchParams
     */
    public function snippetForGenerateSecuredApiKey1(): void
    {
        // >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->generateSecuredApiKey(
            '2640659426d5107b6e47d75db9cbaef8',
            ['validUntil' => 2524604400,
                'restrictIndices' => [
                    'Movies',

                    'cts_e2e_settings',
                ],
                'restrictSources' => '192.168.1.0/24',
                'filters' => 'category:Book OR category:Ebook AND _tags:published',
                'userToken' => 'user123',
                'searchParams' => ['query' => 'batman',
                    'typoTolerance' => 'strict',
                    'aroundRadius' => 'all',
                    'mode' => 'neuralSearch',
                    'hitsPerPage' => 10,
                    'optionalWords' => [
                        'one',

                        'two',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetApiKey method.
     *
     * getApiKey
     */
    public function snippetForGetApiKey(): void
    {
        // >SEPARATOR getApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getApiKey(
            'myTestApiKey',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetAppTask method.
     *
     * getAppTask
     */
    public function snippetForGetAppTask(): void
    {
        // >SEPARATOR getAppTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getAppTask(
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetDictionaryLanguages method.
     *
     * get getDictionaryLanguages
     */
    public function snippetForGetDictionaryLanguages(): void
    {
        // >SEPARATOR getDictionaryLanguages default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getDictionaryLanguages();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetDictionarySettings method.
     *
     * get getDictionarySettings results
     */
    public function snippetForGetDictionarySettings(): void
    {
        // >SEPARATOR getDictionarySettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getDictionarySettings();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetLogs method.
     *
     * getLogs with minimal parameters
     */
    public function snippetForGetLogs(): void
    {
        // >SEPARATOR getLogs default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getLogs();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObject method.
     *
     * getObject
     */
    public function snippetForGetObject(): void
    {
        // >SEPARATOR getObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            [
                'attr1',

                'attr2',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetObjects method.
     *
     * getObjects
     */
    public function snippetForGetObjects(): void
    {
        // >SEPARATOR getObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getObjects(
            ['requests' => [
                ['attributesToRetrieve' => [
                    'attr1',

                    'attr2',
                ],
                    'objectID' => 'uniqueID',
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetRule method.
     *
     * getRule
     */
    public function snippetForGetRule(): void
    {
        // >SEPARATOR getRule default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getRule(
            '<YOUR_INDEX_NAME>',
            'qr-1725004648916',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSettings method.
     *
     * getSettings
     */
    public function snippetForGetSettings(): void
    {
        // >SEPARATOR getSettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSettings(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSources method.
     *
     * getSources
     */
    public function snippetForGetSources(): void
    {
        // >SEPARATOR getSources default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSources();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetSynonym method.
     *
     * getSynonym
     */
    public function snippetForGetSynonym(): void
    {
        // >SEPARATOR getSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetTask method.
     *
     * getTask
     */
    public function snippetForGetTask(): void
    {
        // >SEPARATOR getTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getTask(
            '<YOUR_INDEX_NAME>',
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetTopUserIds method.
     *
     * getTopUserIds
     */
    public function snippetForGetTopUserIds(): void
    {
        // >SEPARATOR getTopUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getTopUserIds();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the GetUserId method.
     *
     * getUserId
     */
    public function snippetForGetUserId(): void
    {
        // >SEPARATOR getUserId default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->getUserId(
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the HasPendingMappings method.
     *
     * hasPendingMappings with minimal parameters
     */
    public function snippetForHasPendingMappings(): void
    {
        // >SEPARATOR hasPendingMappings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->hasPendingMappings();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexExists
     */
    public function snippetForIndexExists(): void
    {
        // >SEPARATOR indexExists indexExists
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexNotExists
     */
    public function snippetForIndexExists1(): void
    {
        // >SEPARATOR indexExists indexNotExists
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the IndexExists method.
     *
     * indexExistsWithError
     */
    public function snippetForIndexExists2(): void
    {
        // >SEPARATOR indexExists indexExistsWithError
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->indexExists(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListApiKeys method.
     *
     * listApiKeys
     */
    public function snippetForListApiKeys(): void
    {
        // >SEPARATOR listApiKeys default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listApiKeys();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListClusters method.
     *
     * listClusters
     */
    public function snippetForListClusters(): void
    {
        // >SEPARATOR listClusters default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listClusters();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListIndices method.
     *
     * listIndices with minimal parameters
     */
    public function snippetForListIndices(): void
    {
        // >SEPARATOR listIndices default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listIndices();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ListUserIds method.
     *
     * listUserIds with minimal parameters
     */
    public function snippetForListUserIds(): void
    {
        // >SEPARATOR listUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->listUserIds();

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the MultipleBatch method.
     *
     * multipleBatch
     */
    public function snippetForMultipleBatch(): void
    {
        // >SEPARATOR multipleBatch default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->multipleBatch(
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'value',
                    ],
                    'indexName' => '<YOUR_INDEX_NAME>',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * scopes
     */
    public function snippetForOperationIndex(): void
    {
        // >SEPARATOR operationIndex scopes
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
                'scope' => [
                    'rules',

                    'settings',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * copy
     */
    public function snippetForOperationIndex1(): void
    {
        // >SEPARATOR operationIndex copy
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'copy',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the OperationIndex method.
     *
     * move
     */
    public function snippetForOperationIndex2(): void
    {
        // >SEPARATOR operationIndex move
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObject method.
     *
     * Partial update with a new value for a string attribute
     */
    public function snippetForPartialUpdateObject(): void
    {
        // >SEPARATOR partialUpdateObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
            ['attributeId' => 'new value',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObjects method.
     *
     * call partialUpdateObjects with createIfNotExists=true
     */
    public function snippetForPartialUpdateObjects(): void
    {
        // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the PartialUpdateObjects method.
     *
     * call partialUpdateObjects with createIfNotExists=false
     */
    public function snippetForPartialUpdateObjects1(): void
    {
        // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->partialUpdateObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '3',
                    'name' => 'Cyril',
                ],

                ['objectID' => '4',
                    'name' => 'David',
                ],
            ],
            false,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the RemoveUserId method.
     *
     * removeUserId
     */
    public function snippetForRemoveUserId(): void
    {
        // >SEPARATOR removeUserId default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->removeUserId(
            'uniqueID',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceAllObjects method.
     *
     * call replaceAllObjects without error
     */
    public function snippetForReplaceAllObjects(): void
    {
        // >SEPARATOR replaceAllObjects default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceAllObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],

                ['objectID' => '3',
                    'name' => 'Cyril',
                ],

                ['objectID' => '4',
                    'name' => 'David',
                ],

                ['objectID' => '5',
                    'name' => 'Eva',
                ],

                ['objectID' => '6',
                    'name' => 'Fiona',
                ],

                ['objectID' => '7',
                    'name' => 'Gael',
                ],

                ['objectID' => '8',
                    'name' => 'Hugo',
                ],

                ['objectID' => '9',
                    'name' => 'Igor',
                ],

                ['objectID' => '10',
                    'name' => 'Julia',
                ],
            ],
            3,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the ReplaceSources method.
     *
     * replaceSources
     */
    public function snippetForReplaceSources(): void
    {
        // >SEPARATOR replaceSources default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->replaceSources(
            [
                ['source' => 'theSource',
                    'description' => 'theDescription',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the RestoreApiKey method.
     *
     * restoreApiKey
     */
    public function snippetForRestoreApiKey(): void
    {
        // >SEPARATOR restoreApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->restoreApiKey(
            'ALGOLIA_API_KEY',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObject method.
     *
     * saveObject
     */
    public function snippetForSaveObject(): void
    {
        // >SEPARATOR saveObject default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObject(
            '<YOUR_INDEX_NAME>',
            ['objectID' => 'id',
                'test' => 'val',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * call saveObjects without error
     */
    public function snippetForSaveObjects(): void
    {
        // >SEPARATOR saveObjects call saveObjects without error
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveObjects method.
     *
     * saveObjects should report errors
     */
    public function snippetForSaveObjects1(): void
    {
        // >SEPARATOR saveObjects saveObjects should report errors
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveObjects(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => '1',
                    'name' => 'Adam',
                ],

                ['objectID' => '2',
                    'name' => 'Benoit',
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRule method.
     *
     * saveRule with minimal parameters
     */
    public function snippetForSaveRule(): void
    {
        // >SEPARATOR saveRule default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRule(
            '<YOUR_INDEX_NAME>',
            'id1',
            ['objectID' => 'id1',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'contains',
                    ],
                ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveRules method.
     *
     * saveRules with minimal parameters
     */
    public function snippetForSaveRules(): void
    {
        // >SEPARATOR saveRules default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'a-rule-id',
                    'conditions' => [
                        ['pattern' => 'smartphone',
                            'anchoring' => 'contains',
                        ],
                    ],
                ],

                ['objectID' => 'a-second-rule-id',
                    'conditions' => [
                        ['pattern' => 'apple',
                            'anchoring' => 'contains',
                        ],
                    ],
                ],
            ],
            false,
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveSynonym method.
     *
     * saveSynonym
     */
    public function snippetForSaveSynonym(): void
    {
        // >SEPARATOR saveSynonym default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveSynonym(
            '<YOUR_INDEX_NAME>',
            'id1',
            ['objectID' => 'id1',
                'type' => 'synonym',
                'synonyms' => [
                    'car',

                    'vehicule',

                    'auto',
                ],
            ],
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SaveSynonyms method.
     *
     * saveSynonyms
     */
    public function snippetForSaveSynonyms(): void
    {
        // >SEPARATOR saveSynonyms default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->saveSynonyms(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'id1',
                    'type' => 'synonym',
                    'synonyms' => [
                        'car',

                        'vehicule',

                        'auto',
                    ],
                ],

                ['objectID' => 'id2',
                    'type' => 'onewaysynonym',
                    'input' => 'iphone',
                    'synonyms' => [
                        'ephone',

                        'aphone',

                        'yphone',
                    ],
                ],
            ],
            true,
            true,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * withHitsPerPage
     */
    public function snippetForSearch(): void
    {
        // >SEPARATOR search withHitsPerPage
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'hitsPerPage' => 50,
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterOnly
     */
    public function snippetForSearch1(): void
    {
        // >SEPARATOR search filterOnly
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterOr
     */
    public function snippetForSearch2(): void
    {
        // >SEPARATOR search filterOr
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Tom Cruise OR actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * filterNot
     */
    public function snippetForSearch3(): void
    {
        // >SEPARATOR search filterNot
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'NOT actor:Nicolas Cage',
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * retrieveFacets
     */
    public function snippetForSearch4(): void
    {
        // >SEPARATOR search retrieveFacets
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        'author',

                        'genre',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the Search method.
     *
     * retrieveFacetsWildcard
     */
    public function snippetForSearch5(): void
    {
        // >SEPARATOR search retrieveFacetsWildcard
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        '*',
                    ],
                ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchDictionaryEntries method.
     *
     * get searchDictionaryEntries results with minimal parameters
     */
    public function snippetForSearchDictionaryEntries(): void
    {
        // >SEPARATOR searchDictionaryEntries default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchDictionaryEntries(
            'stopwords',
            ['query' => 'about',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchForFacetValues method.
     *
     * get searchForFacetValues results with minimal parameters
     */
    public function snippetForSearchForFacetValues(): void
    {
        // >SEPARATOR searchForFacetValues default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchForFacetValues(
            '<YOUR_INDEX_NAME>',
            'facetName',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchRules method.
     *
     * searchRules
     */
    public function snippetForSearchRules(): void
    {
        // >SEPARATOR searchRules default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchRules(
            '<YOUR_INDEX_NAME>',
            ['query' => 'zorro',
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSingleIndex method.
     *
     * search with minimal parameters
     */
    public function snippetForSearchSingleIndex(): void
    {
        // >SEPARATOR searchSingleIndex default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSingleIndex(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchSynonyms method.
     *
     * searchSynonyms with minimal parameters
     */
    public function snippetForSearchSynonyms(): void
    {
        // >SEPARATOR searchSynonyms default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchSynonyms(
            '<YOUR_INDEX_NAME>',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SearchUserIds method.
     *
     * searchUserIds
     */
    public function snippetForSearchUserIds(): void
    {
        // >SEPARATOR searchUserIds default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->searchUserIds(
            ['query' => 'test',
                'clusterName' => 'theClusterName',
                'page' => 5,
                'hitsPerPage' => 10,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetClientApiKey method.
     *
     * switch API key
     */
    public function snippetForSetClientApiKey(): void
    {
        // >SEPARATOR setClientApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $client->setClientApiKey(
            'updated-api-key',
        );

        // >LOG
        // SEPARATOR<
    }

    /**
     * Snippet for the SetDictionarySettings method.
     *
     * get setDictionarySettings results with minimal parameters
     */
    public function snippetForSetDictionarySettings(): void
    {
        // >SEPARATOR setDictionarySettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setDictionarySettings(
            ['disableStandardEntries' => ['plurals' => ['fr' => false,
                'en' => false,
                'ru' => true,
            ],
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the SetSettings method.
     *
     * setSettingsAttributesForFaceting
     */
    public function snippetForSetSettings(): void
    {
        // >SEPARATOR setSettings default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'actor',

                'filterOnly(category)',

                'searchable(publisher)',
            ],
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the UpdateApiKey method.
     *
     * updateApiKey
     */
    public function snippetForUpdateApiKey(): void
    {
        // >SEPARATOR updateApiKey default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->updateApiKey(
            'ALGOLIA_API_KEY',
            ['acl' => [
                'search',

                'addObject',
            ],
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key helper - add
     */
    public function snippetForWaitForApiKey(): void
    {
        // >SEPARATOR waitForApiKey wait for api key helper - add
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-add-operation-test-php',
            'add',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key - update
     */
    public function snippetForWaitForApiKey1(): void
    {
        // >SEPARATOR waitForApiKey wait for api key - update
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-update-operation-test-php',
            'update',
            ['description' => 'my updated api key',
                'acl' => [
                    'search',

                    'addObject',

                    'deleteObject',
                ],
                'indexes' => [
                    'Movies',

                    'Books',
                ],
                'referers' => [
                    '*google.com',

                    '*algolia.com',
                ],
                'validity' => 305,
                'maxQueriesPerIPPerHour' => 95,
                'maxHitsPerQuery' => 20,
            ],
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForApiKey method.
     *
     * wait for api key - delete
     */
    public function snippetForWaitForApiKey2(): void
    {
        // >SEPARATOR waitForApiKey wait for api key - delete
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForApiKey(
            'api-key-delete-operation-test-php',
            'delete',
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForAppTask method.
     *
     * wait for an application-level task
     */
    public function snippetForWaitForAppTask(): void
    {
        // >SEPARATOR waitForAppTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForAppTask(
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }

    /**
     * Snippet for the WaitForTask method.
     *
     * wait for task
     */
    public function snippetForWaitForTask(): void
    {
        // >SEPARATOR waitForTask default
        // Initialize the client
        $client = SearchClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');

        // Call the API
        $response = $client->waitForTask(
            '<YOUR_INDEX_NAME>',
            123,
        );

        // >LOG
        // play with the response
        var_dump($response);
        // SEPARATOR<
    }
}
