// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.snippets

// >IMPORT
import com.algolia.client.api.SearchClient
import com.algolia.client.extensions.*
// IMPORT<
import com.algolia.client.model.search.*
import kotlinx.serialization.json.*
import kotlin.system.exitProcess

class SnippetSearchClient {
  suspend fun snippetForAddApiKey() {
    // >SEPARATOR addApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.addApiKey(
      apiKey = ApiKey(
        acl = listOf(Acl.entries.first { it.value == "search" }, Acl.entries.first { it.value == "addObject" }),
        description = "my new api key",
        validity = 300,
        maxQueriesPerIPPerHour = 100,
        maxHitsPerQuery = 20,
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForAddOrUpdateObject() {
    // >SEPARATOR addOrUpdateObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.addOrUpdateObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      body = buildJsonObject {
        put(
          "key",
          JsonPrimitive("value"),
        )
      },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForAppendSource() {
    // >SEPARATOR appendSource default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.appendSource(
      source = Source(
        source = "theSource",
        description = "theDescription",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForAssignUserId() {
    // >SEPARATOR assignUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.assignUserId(
      xAlgoliaUserID = "userID",
      assignUserIdParams = AssignUserIdParams(
        cluster = "theCluster",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch() {
    // >SEPARATOR batch addObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "addObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("bar"),
              )
              put(
                "foo",
                JsonPrimitive("1"),
              )
            },
          ),
          BatchRequest(
            action = Action.entries.first { it.value == "addObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("baz"),
              )
              put(
                "foo",
                JsonPrimitive("2"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch1() {
    // >SEPARATOR batch clear
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "clear" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch2() {
    // >SEPARATOR batch delete
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "delete" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch3() {
    // >SEPARATOR batch deleteObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "deleteObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch4() {
    // >SEPARATOR batch partialUpdateObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "partialUpdateObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch5() {
    // >SEPARATOR batch partialUpdateObjectNoCreate
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "partialUpdateObjectNoCreate" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatch6() {
    // >SEPARATOR batch updateObject
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batch(
      indexName = "<YOUR_INDEX_NAME>",
      batchWriteParams = BatchWriteParams(
        requests = listOf(
          BatchRequest(
            action = Action.entries.first { it.value == "updateObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatchAssignUserIds() {
    // >SEPARATOR batchAssignUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batchAssignUserIds(
      xAlgoliaUserID = "userID",
      batchAssignUserIdsParams = BatchAssignUserIdsParams(
        cluster = "theCluster",
        users = listOf("user1", "user2"),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatchDictionaryEntries() {
    // >SEPARATOR batchDictionaryEntries replace
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.entries.first { it.value == "plurals" },
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = true,
        requests = listOf(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.entries.first { it.value == "addEntry" },
            body = DictionaryEntry(
              objectID = "1",
              language = SupportedLanguage.entries.first { it.value == "en" },
              word = "fancy",
              words = listOf("believe", "algolia"),
              decomposition = listOf("trust", "algolia"),
              state = DictionaryEntryState.entries.first { it.value == "enabled" },
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatchDictionaryEntries1() {
    // >SEPARATOR batchDictionaryEntries delete
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.entries.first { it.value == "plurals" },
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        clearExistingDictionaryEntries = true,
        requests = listOf(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.entries.first { it.value == "deleteEntry" },
            body = DictionaryEntry(
              objectID = "1",
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBatchDictionaryEntries2() {
    // >SEPARATOR batchDictionaryEntries append
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.batchDictionaryEntries(
      dictionaryName = DictionaryType.entries.first { it.value == "stopwords" },
      batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
        requests = listOf(
          BatchDictionaryEntriesRequest(
            action = DictionaryAction.entries.first { it.value == "addEntry" },
            body = DictionaryEntry(
              objectID = "1",
              language = SupportedLanguage.entries.first { it.value == "en" },
              additionalProperties = mapOf(
                "additional" to JsonPrimitive("try me"),
              ),
            ),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForBrowse() {
    // >SEPARATOR browse default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.browse(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForClearObjects() {
    // >SEPARATOR clearObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.clearObjects(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForClearRules() {
    // >SEPARATOR clearRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.clearRules(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForClearSynonyms() {
    // >SEPARATOR clearSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.clearSynonyms(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomDelete() {
    // >SEPARATOR customDelete default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customDelete(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomGet() {
    // >SEPARATOR customGet default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customGet(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost() {
    // >SEPARATOR customPost default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPut() {
    // >SEPARATOR customPut default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customPut(
      path = "test/minimal",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteApiKey() {
    // >SEPARATOR deleteApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteApiKey(
      key = "myTestApiKey",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteBy() {
    // >SEPARATOR deleteBy default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteBy(
      indexName = "<YOUR_INDEX_NAME>",
      deleteByParams = DeleteByParams(
        filters = "brand:brandName",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteIndex() {
    // >SEPARATOR deleteIndex default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteIndex(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteObject() {
    // >SEPARATOR deleteObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteObjects() {
    // >SEPARATOR deleteObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objectIDs = listOf("1", "2"),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteRule() {
    // >SEPARATOR deleteRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteSource() {
    // >SEPARATOR deleteSource default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteSource(
      source = "theSource",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForDeleteSynonym() {
    // >SEPARATOR deleteSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.deleteSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGenerateSecuredApiKey() {
    // >SEPARATOR generateSecuredApiKey generate secured api key basic
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.generateSecuredApiKey(
      parentApiKey = "2640659426d5107b6e47d75db9cbaef8",
      restrictions = SecuredApiKeyRestrictions(
        validUntil = 2524604400L,
        restrictIndices = listOf("Movies"),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGenerateSecuredApiKey1() {
    // >SEPARATOR generateSecuredApiKey generate secured api key with searchParams
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.generateSecuredApiKey(
      parentApiKey = "2640659426d5107b6e47d75db9cbaef8",
      restrictions = SecuredApiKeyRestrictions(
        validUntil = 2524604400L,
        restrictIndices = listOf("Movies", "cts_e2e_settings"),
        restrictSources = "192.168.1.0/24",
        filters = "category:Book OR category:Ebook AND _tags:published",
        userToken = "user123",
        searchParams = SearchParamsObject(
          query = "batman",
          typoTolerance = TypoToleranceEnum.entries.first { it.value == "strict" },
          aroundRadius = AroundRadiusAll.entries.first { it.value == "all" },
          mode = Mode.entries.first { it.value == "neuralSearch" },
          hitsPerPage = 10,
          optionalWords = listOf("one", "two"),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetApiKey() {
    // >SEPARATOR getApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getApiKey(
      key = "myTestApiKey",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetAppTask() {
    // >SEPARATOR getAppTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getAppTask(
      taskID = 123L,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetDictionaryLanguages() {
    // >SEPARATOR getDictionaryLanguages default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getDictionaryLanguages()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetDictionarySettings() {
    // >SEPARATOR getDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getDictionarySettings()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetLogs() {
    // >SEPARATOR getLogs default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getLogs()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetObject() {
    // >SEPARATOR getObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      attributesToRetrieve = listOf("attr1", "attr2"),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetObjects() {
    // >SEPARATOR getObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getObjects(
      getObjectsParams = GetObjectsParams(
        requests = listOf(
          GetObjectsRequest(
            attributesToRetrieve = listOf("attr1", "attr2"),
            objectID = "uniqueID",
            indexName = "<YOUR_INDEX_NAME>",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetRule() {
    // >SEPARATOR getRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "qr-1725004648916",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetSettings() {
    // >SEPARATOR getSettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getSettings(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetSources() {
    // >SEPARATOR getSources default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getSources()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetSynonym() {
    // >SEPARATOR getSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetTask() {
    // >SEPARATOR getTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getTask(
      indexName = "<YOUR_INDEX_NAME>",
      taskID = 123L,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetTopUserIds() {
    // >SEPARATOR getTopUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getTopUserIds()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetUserId() {
    // >SEPARATOR getUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getUserId(
      userID = "uniqueID",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForHasPendingMappings() {
    // >SEPARATOR hasPendingMappings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.hasPendingMappings()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForIndexExists() {
    // >SEPARATOR indexExists indexExists
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.indexExists(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForIndexExists1() {
    // >SEPARATOR indexExists indexNotExists
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.indexExists(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForIndexExists2() {
    // >SEPARATOR indexExists indexExistsWithError
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.indexExists(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForListApiKeys() {
    // >SEPARATOR listApiKeys default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.listApiKeys()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForListClusters() {
    // >SEPARATOR listClusters default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.listClusters()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForListIndices() {
    // >SEPARATOR listIndices default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.listIndices()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForListUserIds() {
    // >SEPARATOR listUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.listUserIds()

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForMultipleBatch() {
    // >SEPARATOR multipleBatch default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.multipleBatch(
      batchParams = BatchParams(
        requests = listOf(
          MultipleBatchRequest(
            action = Action.entries.first { it.value == "addObject" },
            body = buildJsonObject {
              put(
                "key",
                JsonPrimitive("value"),
              )
            },
            indexName = "<YOUR_INDEX_NAME>",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForOperationIndex() {
    // >SEPARATOR operationIndex scopes
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.entries.first { it.value == "move" },
        destination = "<DESTINATION_INDEX_NAME>",
        scope = listOf(ScopeType.entries.first { it.value == "rules" }, ScopeType.entries.first { it.value == "settings" }),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForOperationIndex1() {
    // >SEPARATOR operationIndex copy
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.entries.first { it.value == "copy" },
        destination = "<DESTINATION_INDEX_NAME>",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForOperationIndex2() {
    // >SEPARATOR operationIndex move
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.operationIndex(
      indexName = "<SOURCE_INDEX_NAME>",
      operationIndexParams = OperationIndexParams(
        operation = OperationType.entries.first { it.value == "move" },
        destination = "<DESTINATION_INDEX_NAME>",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForPartialUpdateObject() {
    // >SEPARATOR partialUpdateObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.partialUpdateObject(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "uniqueID",
      attributesToUpdate = buildJsonObject {
        put(
          "attributeId",
          JsonPrimitive("new value"),
        )
      },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForPartialUpdateObjects() {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;true
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.partialUpdateObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objects = listOf(
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("1"),
          )
          put(
            "name",
            JsonPrimitive("Adam"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("2"),
          )
          put(
            "name",
            JsonPrimitive("Benoit"),
          )
        },
      ),
      createIfNotExists = true,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForPartialUpdateObjects1() {
    // >SEPARATOR partialUpdateObjects call partialUpdateObjects with createIfNotExists&#x3D;false
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.partialUpdateObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objects = listOf(
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("3"),
          )
          put(
            "name",
            JsonPrimitive("Cyril"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("4"),
          )
          put(
            "name",
            JsonPrimitive("David"),
          )
        },
      ),
      createIfNotExists = false,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForRemoveUserId() {
    // >SEPARATOR removeUserId default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.removeUserId(
      userID = "uniqueID",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForReplaceAllObjects() {
    // >SEPARATOR replaceAllObjects default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.replaceAllObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objects = listOf(
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("1"),
          )
          put(
            "name",
            JsonPrimitive("Adam"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("2"),
          )
          put(
            "name",
            JsonPrimitive("Benoit"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("3"),
          )
          put(
            "name",
            JsonPrimitive("Cyril"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("4"),
          )
          put(
            "name",
            JsonPrimitive("David"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("5"),
          )
          put(
            "name",
            JsonPrimitive("Eva"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("6"),
          )
          put(
            "name",
            JsonPrimitive("Fiona"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("7"),
          )
          put(
            "name",
            JsonPrimitive("Gael"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("8"),
          )
          put(
            "name",
            JsonPrimitive("Hugo"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("9"),
          )
          put(
            "name",
            JsonPrimitive("Igor"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("10"),
          )
          put(
            "name",
            JsonPrimitive("Julia"),
          )
        },
      ),
      batchSize = 3,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForReplaceSources() {
    // >SEPARATOR replaceSources default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.replaceSources(
      source = listOf(
        Source(
          source = "theSource",
          description = "theDescription",
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForRestoreApiKey() {
    // >SEPARATOR restoreApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.restoreApiKey(
      key = "myApiKey",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveObject() {
    // >SEPARATOR saveObject default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveObject(
      indexName = "<YOUR_INDEX_NAME>",
      body = buildJsonObject {
        put(
          "objectID",
          JsonPrimitive("id"),
        )
        put(
          "test",
          JsonPrimitive("val"),
        )
      },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveObjects() {
    // >SEPARATOR saveObjects call saveObjects without error
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objects = listOf(
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("1"),
          )
          put(
            "name",
            JsonPrimitive("Adam"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("2"),
          )
          put(
            "name",
            JsonPrimitive("Benoit"),
          )
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveObjects1() {
    // >SEPARATOR saveObjects saveObjects should report errors
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveObjects(
      indexName = "<YOUR_INDEX_NAME>",
      objects = listOf(
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("1"),
          )
          put(
            "name",
            JsonPrimitive("Adam"),
          )
        },
        buildJsonObject {
          put(
            "objectID",
            JsonPrimitive("2"),
          )
          put(
            "name",
            JsonPrimitive("Benoit"),
          )
        },
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveRule() {
    // >SEPARATOR saveRule default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveRule(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
      rule = Rule(
        objectID = "id1",
        conditions = listOf(
          Condition(
            pattern = "apple",
            anchoring = Anchoring.entries.first { it.value == "contains" },
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveRules() {
    // >SEPARATOR saveRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveRules(
      indexName = "<YOUR_INDEX_NAME>",
      rules = listOf(
        Rule(
          objectID = "a-rule-id",
          conditions = listOf(
            Condition(
              pattern = "smartphone",
              anchoring = Anchoring.entries.first { it.value == "contains" },
            ),
          ),
        ),
        Rule(
          objectID = "a-second-rule-id",
          conditions = listOf(
            Condition(
              pattern = "apple",
              anchoring = Anchoring.entries.first { it.value == "contains" },
            ),
          ),
        ),
      ),
      forwardToReplicas = false,
      clearExistingRules = true,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveSynonym() {
    // >SEPARATOR saveSynonym default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveSynonym(
      indexName = "<YOUR_INDEX_NAME>",
      objectID = "id1",
      synonymHit = SynonymHit(
        objectID = "id1",
        type = SynonymType.entries.first { it.value == "synonym" },
        synonyms = listOf("car", "vehicule", "auto"),
      ),
      forwardToReplicas = true,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSaveSynonyms() {
    // >SEPARATOR saveSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.saveSynonyms(
      indexName = "<YOUR_INDEX_NAME>",
      synonymHit = listOf(
        SynonymHit(
          objectID = "id1",
          type = SynonymType.entries.first { it.value == "synonym" },
          synonyms = listOf("car", "vehicule", "auto"),
        ),
        SynonymHit(
          objectID = "id2",
          type = SynonymType.entries.first { it.value == "onewaysynonym" },
          input = "iphone",
          synonyms = listOf("ephone", "aphone", "yphone"),
        ),
      ),
      forwardToReplicas = true,
      replaceExistingSynonyms = true,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch() {
    // >SEPARATOR search withHitsPerPage
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            hitsPerPage = 50,
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch1() {
    // >SEPARATOR search filterOnly
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            filters = "actor:Scarlett Johansson",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch2() {
    // >SEPARATOR search filterOr
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            filters = "actor:Tom Cruise OR actor:Scarlett Johansson",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch3() {
    // >SEPARATOR search filterNot
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            filters = "NOT actor:Nicolas Cage",
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch4() {
    // >SEPARATOR search retrieveFacets
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            facets = listOf("author", "genre"),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearch5() {
    // >SEPARATOR search retrieveFacetsWildcard
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.search(
      searchMethodParams = SearchMethodParams(
        requests = listOf(
          SearchForHits(
            indexName = "<YOUR_INDEX_NAME>",
            query = "<YOUR_QUERY>",
            facets = listOf("*"),
          ),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchDictionaryEntries() {
    // >SEPARATOR searchDictionaryEntries default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchDictionaryEntries(
      dictionaryName = DictionaryType.entries.first { it.value == "stopwords" },
      searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
        query = "about",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchForFacetValues() {
    // >SEPARATOR searchForFacetValues default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchForFacetValues(
      indexName = "<YOUR_INDEX_NAME>",
      facetName = "facetName",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchRules() {
    // >SEPARATOR searchRules default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchRules(
      indexName = "<YOUR_INDEX_NAME>",
      searchRulesParams = SearchRulesParams(
        query = "zorro",
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchSingleIndex() {
    // >SEPARATOR searchSingleIndex default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchSingleIndex(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchSynonyms() {
    // >SEPARATOR searchSynonyms default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchSynonyms(
      indexName = "<YOUR_INDEX_NAME>",
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSearchUserIds() {
    // >SEPARATOR searchUserIds default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.searchUserIds(
      searchUserIdsParams = SearchUserIdsParams(
        query = "test",
        clusterName = "theClusterName",
        page = 5,
        hitsPerPage = 10,
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSetClientApiKey() {
    // >SEPARATOR setClientApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    client.setClientApiKey(
      apiKey = "updated-api-key",
    )

    // >LOG
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSetDictionarySettings() {
    // >SEPARATOR setDictionarySettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.setDictionarySettings(
      dictionarySettingsParams = DictionarySettingsParams(
        disableStandardEntries = StandardEntries(
          plurals = mapOf("fr" to false, "en" to false, "ru" to true),
        ),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForSetSettings() {
    // >SEPARATOR setSettings default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.setSettings(
      indexName = "<YOUR_INDEX_NAME>",
      indexSettings = IndexSettings(
        attributesForFaceting = listOf("actor", "filterOnly(category)", "searchable(publisher)"),
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForUpdateApiKey() {
    // >SEPARATOR updateApiKey default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.updateApiKey(
      key = "myApiKey",
      apiKey = ApiKey(
        acl = listOf(Acl.entries.first { it.value == "search" }, Acl.entries.first { it.value == "addObject" }),
        validity = 300,
        maxQueriesPerIPPerHour = 100,
        maxHitsPerQuery = 20,
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForWaitForApiKey() {
    // >SEPARATOR waitForApiKey wait for api key helper - add
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.waitForApiKey(
      key = "api-key-add-operation-test-kotlin",
      operation = ApiKeyOperation.entries.first { it.value == "add" },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForWaitForApiKey1() {
    // >SEPARATOR waitForApiKey wait for api key - update
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.waitForApiKey(
      key = "api-key-update-operation-test-kotlin",
      operation = ApiKeyOperation.entries.first { it.value == "update" },
      apiKey = ApiKey(
        description = "my updated api key",
        acl = listOf(Acl.entries.first { it.value == "search" }, Acl.entries.first { it.value == "addObject" }, Acl.entries.first { it.value == "deleteObject" }),
        indexes = listOf("Movies", "Books"),
        referers = listOf("*google.com", "*algolia.com"),
        validity = 305,
        maxQueriesPerIPPerHour = 95,
        maxHitsPerQuery = 20,
      ),
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForWaitForApiKey2() {
    // >SEPARATOR waitForApiKey wait for api key - delete
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.waitForApiKey(
      key = "api-key-delete-operation-test-kotlin",
      operation = ApiKeyOperation.entries.first { it.value == "delete" },
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForWaitForAppTask() {
    // >SEPARATOR waitForAppTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.waitForAppTask(
      taskID = 123L,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForWaitForTask() {
    // >SEPARATOR waitForTask default
    // Initialize the client
    val client = SearchClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.waitForTask(
      indexName = "<YOUR_INDEX_NAME>",
      taskID = 123L,
    )

    // >LOG
    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }
}
