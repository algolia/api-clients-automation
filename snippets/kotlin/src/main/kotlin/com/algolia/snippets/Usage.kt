// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.snippets

import com.algolia.client.api.UsageClient
import com.algolia.client.model.usage.*
import kotlinx.serialization.json.*
import kotlin.system.exitProcess

class SnippetUsageClient {
  suspend fun snippetForCustomDelete() {
    // >SEPARATOR customDelete
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customDelete(
      path = "test/minimal",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomGet() {
    // >SEPARATOR customGet
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customGet(
      path = "test/minimal",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPost() {
    // >SEPARATOR customPost
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customPost(
      path = "test/minimal",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForCustomPut() {
    // >SEPARATOR customPut
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.customPut(
      path = "test/minimal",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetIndexUsage() {
    // >SEPARATOR getIndexUsage
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getIndexUsage(
      statistic = Statistic.entries.first { it.value == "queries_operations" },
      indexName = "myIndexName",
      startDate = "2024-04-03T12:46:43Z",
      endDate = "2024-04-05T12:46:43Z",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }

  suspend fun snippetForGetUsage() {
    // >SEPARATOR getUsage
    // Initialize the client
    val client = UsageClient(appId = "YOUR_APP_ID", apiKey = "YOUR_API_KEY")

    // Call the API
    var response = client.getUsage(
      statistic = Statistic.entries.first { it.value == "queries_operations" },
      startDate = "2024-04-03T12:46:43Z",
      endDate = "2024-04-05T12:46:43Z",
    )

    // Use the response
    println(response)
    // SEPARATOR<

    exitProcess(0)
  }
}
